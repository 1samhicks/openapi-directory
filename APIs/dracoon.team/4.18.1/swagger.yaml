swagger: '2.0'
schemes:
  - https
host: dracoon.team
basePath: /api
info:
  contact:
    x-twitter: dracoongmbh
  description: 'REST Web Services for DRACOON<br>Version: 4.18.1  - built at: 2020-02-29 02:40:49<br><br><a title=''Developer Information'' href=''https://developer.dracoon.com''>Developer Information</a>&emsp;&emsp;<a title=''Get SDKs on GitHub'' href=''https://github.com/dracoon''>Get SDKs on GitHub</a>'
  termsOfService: 'https://www.dracoon.com/terms/general-terms-and-conditions/'
  title: DRACOON
  version: 4.18.1
  x-apisguru-categories:
    - cloud
  x-logo:
    url: 'https://twitter.com/dracoongmbh/profile_image?size=original'
  x-origin:
    - format: swagger
      url: 'https://dracoon.team/api/spec_v4/'
      version: '2.0'
  x-providerName: dracoon.team
securityDefinitions:
  DRACOON-OAuth:
    authorizationUrl: /oauth/authorize
    flow: accessCode
    scopes:
      all: for all operations (not used)
    tokenUrl: /oauth/token
    type: oauth2
tags:
  - description: Authentication
    name: auth
  - description: Configuration
    name: config
  - description: File download without authentication headers
    name: downloads
  - description: System events log
    name: eventlog
  - description: User groups
    name: groups
  - description: 'File system objects (rooms, folders, files)'
    name: nodes
  - description: Provisioning
    name: provisioning
  - description: 'Public API (upload / download shares, software information)'
    name: public
  - description: Client resources
    name: resources
  - description: Role user management
    name: roles
  - description: Customer settings
    name: settings
  - description: Upload and Download Shares
    name: shares
  - description: 'System events log (`DEPRECATED`: use eventlog)'
    name: syslog
  - description: System settings (authentication methods)
    name: system-auth-config
  - description: System settings (policies)
    name: system-policies-config
  - description: 'System settings (mail server, logging, branding, default values etc.)'
    name: system-settings-config
  - description: System settings (storage)
    name: system-storage-config
  - description: File upload without authentication headers
    name: uploads
  - description: User operations
    name: user
  - description: User management
    name: users
paths:
  /v4/auth/login:
    post:
      consumes:
        - application/json
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.13.0

        ### Functional Description:
        Authenticates user and provides an authentication token (`X-Sds-Auth-Token`) that is required for most operations.

        ### Precondition:
        Existing user that is **NOT** locked.

        ### Effects:
        User is logged in.

        ### &#9432; Further Information:
        The provided token is valid for **2 hours**, every usage resets this period to 2 full hours again.  
        Logging off invalidates the token.  

        Setting the language parameter has no effect.

        ### Available authentication methods

        | Authentication Method:<br>**`authType`** | Description |
        | :--- | :--- |
        | **`basic`** | Log in with credentials stored in the database <br>Formerly known as **`sql`**.|
        | **`active_directory`** | Log in with Active Directory credentials |
        | **`radius`** | Log in with RADIUS username, PIN and token password.<br>Token (request parameter) may be set, otherwise this parameter is ignored. If `token` is set, `password` is optional. |
        | **`openid`** | Please use `POST /auth/openid/login` API to login with OpenID Connect identity |

        ### DEPRECATED: Currently supported languages (with ISO 639-1 code):
        * German (de)
        * English (en)
        * Spanish (es)
        * French (fr)
      operationId: login
      parameters:
        - description: User credentials
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: |-
            Bad Request

            * [-10100] Invalid authentication method
            * [-10105] Password cannot be reset for this user
            * [-80000] Mandatory fields cannot be empty
            * [-80013] Invalid JSON object
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10011] Wrong username or password
            * [-90060] User import not allowed
            * [-90061] Invalid Active Directory entry
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-10003] User is locked by an administrator
            * [-10004] User has expired
            * [-10005] User is temporarily locked (Unlock time will be delivered in ISO 8601 format [`2014-12-23T13:24:00Z`])
            * [-10007] Customer is locked
            * [-70505] Maximum number of users reached
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90050] Active Directory configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10108] RADIUS requests Access-Challenge workflow; Please notice the `replyMessage`
          schema:
            $ref: '#/definitions/RadiusChallengeResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90055] Invalid Active Directory configuration
            * [-90070] RADIUS connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Authenticate user
      tags:
        - auth
  /v4/auth/openid/login:
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.14.0

        ## &#9888; CAUTION: This API does **NOT** work with Swagger! Swagger can **NOT** handle the redirect to the OpenID Connect identity provider.

        ### Functional Description:
        This is the first step of the OpenID Connect authentication.  
        The user is send to the OpenID Connect identity provider to authenticate himself and retrieve an authorization code.

        ### Precondition:
        None.

        ### Effects:
        User is redirected to OpenID Connect identity provider to authenticate himself.

        ### &#9432; Further Information:
        See [http://openid.net/developers/specs](http://openid.net/developers/specs) for further information.
      operationId: initiateOpenIdLogin
      parameters:
        - allowEmptyValue: false
          description: Issuer identifier of the OpenID Connect identity provider
          in: query
          name: issuer
          required: true
          type: string
        - allowEmptyValue: false
          description: 'Language ID or ISO 639-1 code (**DEPRECATED**: will be removed)'
          in: query
          name: language
          required: false
          type: string
        - allowEmptyValue: false
          description: Redirect URI to complete the OpenID Connect authentication
          in: query
          name: redirect_uri
          required: true
          type: string
        - allowEmptyValue: false
          description: |-
            Flag to test the authentication parameters.
            If the request is valid, the API will respond with `204 No Content`.
          in: query
          name: test
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '302':
          description: Found
        '400':
          description: |-
            Bad Request

            * [-10010] Not supported language
            * [-10100] Invalid authentication method
            * [-80000] Mandatory fields cannot be empty
        '404':
          description: |-
            Not Found

            * [-90041] Unknown identity provider
            * [-90042] Unknown redirect URI
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90047] Invalid OpenID Connect IDP configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Initiate OpenID Connect authentication
      tags:
        - auth
    post:
      consumes:
        - application/json
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.14.0

        ### Functional Description:  
        This is the second step of the OpenID Connect authentication.  
        The user hands over the authorization code and is logged in.

        ### Precondition:
        Existing user with activated OpenID Connect authentication that is **NOT** locked.

        ### Effects:
        User is logged in.

        ### &#9432; Further Information:
        See [http://openid.net/developers/specs](http://openid.net/developers/specs) for further information.
      operationId: completeOpenIdLogin
      parameters:
        - allowEmptyValue: false
          description: Authorization code
          in: query
          name: code
          required: true
          type: string
        - allowEmptyValue: false
          description: Identity token
          in: query
          name: id_token
          required: false
          type: string
        - allowEmptyValue: false
          description: Authentication state
          in: query
          name: state
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: |-
            Bad Request

            * [-10010] Not supported language
            * [-10100] Invalid authentication method
            * [-80000] Mandatory fields cannot be empty
            * [-90043] Invalid authentication state
        '401':
          description: |-
            Unauthorized

            * [-90048] Invalid OpenID Connect user information
            * [-90060] User import not allowed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-10003] User is locked by an administrator
            * [-10004] User has expired
            * [-10005] User is temporarily locked (Unlock time will be delivered in ISO 8601 format [`2014-12-23T13:24:00Z`])
            * [-10007] Customer is locked
            * [-70505] Maximum number of users reached
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
            * [-90041] Unknown identity provider
            * [-90042] Unknown redirect URI
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90044] Identity token retrieval failed
            * [-90045] Identity token validation failed
            * [-90046] User information retrieval failed
            * [-90047] Invalid OpenID Connect IDP configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Complete OpenID Connect authentication
      tags:
        - auth
  /v4/auth/openid/resources:
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.3.0

        ### Functional Description:  
        Provides information about OpenID Connect authentication options.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getOpenIdAuthResources
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OpenIdAuthResources'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get OpenID Connect authentication resources
      tags:
        - auth
  /v4/auth/ping:
    get:
      deprecated: false
      description: |-
        ### Functional Description:
        Test connection to DRACOON Server.

        ### Precondition:
        None.

        ### Effects:
        `200 OK` with current date string is returned if successful.

        ### &#9432; Further Information:
        None.
      operationId: ping
      produces:
        - text/plain
      responses:
        '200':
          description: OK
          schema:
            type: string
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Ping
      tags:
        - auth
  /v4/auth/recover_username:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.13.0

        ### Functional Description:  
        Request an email with the usernames of all accounts connected to the email.

        ### Precondition:
        Valid email address.

        ### Effects:
        An email is sent to the provided address, with a list of account usernames connected to it.

        ### &#9432; Further Information:
        None.
      operationId: recoverUserName
      parameters:
        - description: request
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/RecoverUserNameRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80009] Invalid email address
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Recover username
      tags:
        - auth
  /v4/auth/reset_password:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Request an email with a password reset token for a certain user to reset his / her password.

        ### Precondition:
        Registered user account.

        ### Effects:
        Provided user receives email with password reset token.

        ### &#9432; Further Information:
        None.

        ### DEPRECATED: Currently supported languages (with ISO 639-1 code):
        * German (de)
        * English (en)
        * Spanish (es)
        * French (fr)
      operationId: requestPasswordReset
      parameters:
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ResetPasswordRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-10013] Not valid IETF language tag
            * [-10105] Password cannot be reset for this user
            * [-10107] Password can only be reset every 5 minutes
            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Request password reset
      tags:
        - auth
  '/v4/auth/reset_password/{token}':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Request all information for a password change dialogue e.g. real name of user.

        ### Precondition:
        User received a password reset token.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: validateResetPasswordToken
      parameters:
        - description: Password reset token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResetPasswordTokenValidateResponse'
        '400':
          description: |-
            Bad Request

            * [-10001] Password reset token is modified
            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * Token not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get information for password reset
      tags:
        - auth
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Resets user's password.

        ### Precondition:
        User received a password reset token.

        ### Effects:
        User's password is resetted to the provided password.

        ### &#9432; Further Information:
        None.
      operationId: resetPassword
      parameters:
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ResetPasswordWithTokenRequest'
        - description: Password reset token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-10105] Password cannot be reset for this user
            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/PasswordPolicyViolationResponse'
        '404':
          description: |-
            Not Found

            * Token not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Reset password
      tags:
        - auth
  /v4/config/info/defaults:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        Returns a list of configurable system default values.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable default values

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`languageDefault`** | Defines which language should be default.<br>cf. [RFC 5646](https://tools.ietf.org/html/rfc5646) for ISO 639-1 codes | `ISO 639-1 code` |
        | **`downloadShareDefaultExpirationPeriod`** | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |
        | **`uploadShareDefaultExpirationPeriod`** | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |
        | **`fileDefaultExpirationPeriod`** | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |
        | **`nonmemberViewerDefault`** | Defines if new users get the role NONMEMBER_VIEWER by default | `true or false` |
      operationId: getSystemDefaultsInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SystemDefaults'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get default values
      tags:
        - config
  /v4/config/info/general:
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:
        Returns a list of configurable general settings.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable general settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`sharePasswordSmsEnabled`** | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
        | **`cryptoEnabled`** | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
        | **`emailNotificationButtonEnabled`** | Determines whether email notification button is enabled. | `true or false` |
        | **`eulaEnabled`** | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |
        | **`useS3Storage`** | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
        | **`s3TagsEnabled`** | Determines whether S3 tags are enabled | `true or false` |
        | **`homeRoomsActive`** | Determines whether each AD user has a personal home room | `true or false` |
        | **`homeRoomParentId`** | Defines a node under which all personal home rooms are located. NULL if `homeRoomsActive` is `false` | `Long` |
        | **`mediaServerEnabled`** **(`DEPRECATED`)** | Determines whether media server is enabled.<br>Returns boolean value dependent on conjunction of **`mediaServerConfigEnabled`** AND **`mediaServerEnabled`** | `true or false` |
        | **`weakPasswordEnabled`** **(`DEPRECATED`)** | Determines whether weak password (cf. _Password Policy_) is allowed.<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |

        ---

        ### `DEPRECATED` Password Policy

        * A weak password has to fulfill the following criteria:  
            * is at least 8 characters long  
            * contains letters and numbers
        * A strong password has to fulfill the following criteria in addition:  
            * contains at least one special character  
            * contains upper and lower case characters
      operationId: getGeneralSettingsInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GeneralSettingsInfo'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get general settings
      tags:
        - config
  /v4/config/info/infrastructure:
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        Returns a list of read-only infrastructure properties.  

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Source: `api.properties`

        ### Read-only infrastructure properties

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`smsConfigEnabled`** | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |
        | **`mediaServerConfigEnabled`** | Determines whether media server is **system-wide** enabled. | `true or false` |
        | **`s3DefaultRegion`** | Suggested S3 region | `Region name` |
        | **`s3EnforceDirectUpload`** | Enforce direct upload to S3 | `true or false` |
      operationId: getInfrastructurePropertiesInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InfrastructureProperties'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get infrastructure properties
      tags:
        - config
  /v4/config/info/policies/passwords:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.14.0

        ### Functional Description:  
        Retrieve a list of configured password policies for all password types:  
        * `login`
        * `shares`
        * `encryption`

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### Further Information:

        ### Available password policies

        | Name | Description | Value | Password Type |
        | :--- | :--- | :--- | :--- |
        | **`mustContainCharacters`** | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % & ' ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfCharacteristicsToEnforce`** | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`minLength`** | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectDictionaryWords`** | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |
        | **`rejectUserInfo`** | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectKeyboardPatterns`** | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfArchivedPasswords`** | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |
        | **`passwordExpiration.enabled`** | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |
        | **`maxPasswordAge`** | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |
        | **`userLockout.enabled`** | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |
        | **`maxNumberOfLoginFailures`** | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |
        | **`lockoutPeriod`** | Amount of **minutes** a user has to wait to make another login attempt<br>after **`maxNumberOfLoginFailures`** has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |
      operationId: getPasswordPoliciesConfigInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PasswordPoliciesConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get password policies
      tags:
        - config
  /v4/config/info/s3_tags:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.9.0

        ### Functional Description:
        Retrieve all configured S3 tags.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        An empty list is returned if no S3 tags are found / configured.
      operationId: getS3TagsInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3TagList'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
            * [-90030] S3 storage disabled
            * [-90032] S3 tags are disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of configured S3 tags
      tags:
        - config
  /v4/config/settings:
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.6.0

        ### Functional Description:  
        Returns a list of configurable system settings.

        ### Precondition:
        Right _"read global config"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        This API is **`DEPRECATED`** and will be removed in the future.  
        Check for every settings key new corresponding API and key below.

        ### Attention
        If `eula_active` is true, but **NOT** accepted yet, or password **MUST** be changed, only the following two values are returned:
        * **`allow_system_global_weak_password`**
        * **`eula_active`**

        ### Configurable settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`branding_server_branding_id`** | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.<br>cf. `GET /system/config/settings/branding` **`BrandingConfig.brandingQualifier`** | `String` |
        | **`branding_portal_url`** | Access URL to to the Branding Portal<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/branding` **`BrandingConfig.brandingProviderUrl`** | `String` |
        | **`dblog`** | Write logs to local database.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/eventlog` **`EventlogConfig.enabled`** | `true or false` |
        | **`default_downloadshare_expiration_period`** | Default expiration period for Download Shares in days<br>cf. `GET /system/config/settings/defaults` **`SystemDefaults.downloadShareDefaultExpirationPeriod`** | `Integer between 0 and 9999` |
        | **`default_file_upload_expiration_date`** | Default expiration period for all uploaded files in days<br>cf. `GET /system/config/settings/defaults` **`SystemDefaults.fileDefaultExpirationPeriod`** | `Integer between 0 and 9999` |
        | **`default_language`** | Define which language should be default.<br>cf. `GET /system/config/settings/defaults` **`SystemDefaults.languageDefault`** | cf. `GET /public/system/info` - **`SystemInfo.languageDefault`** |
        | **`default_uploadshare_expiration_period`** | Default expiration period for Upload Shares in days<br>cf. `GET /system/config/settings/defaults` **`SystemDefaults.uploadShareDefaultExpirationPeriod`** | `Integer between 0 and 9999` |
        | **`enable_client_side_crypto`** | Activation status of client-side encryption<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `GET /system/config/settings/general` **`GeneralSettings.cryptoEnabled`** | `true or false`<br>default: `false` |
        | **`eula_active`** | Each user has to confirm the EULA at first login.<br>cf. `GET /system/config/settings/general` **`GeneralSettings.eulaEnabled`** | `true or false` |
        | **`eventlog_retention_period`** | Retention period (in days) of event log entries<br>After that period, all entries are deleted.<br>cf. `GET /system/config/settings/eventlog` **`EventlogConfig.retentionPeriod`** | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: `7` |
        | **`ip_address_logging`** | Determines whether a user's IP address is logged.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/eventlog` **`EventlogConfig.logIpEnabled`**<br>cf. `GET /system/config/settings/syslog` **`SyslogConfig.logIpEnabled`** | `true or false` |
        | **`mailserver`** | Email server to send emails.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` **`MailServerConfig.host`** | `DNS name or IPv4 of an email server` |
        | **`mailserver_authentication_necessary`** | Set to `true` if the email server requires authentication.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` **`MailServerConfig.authenticationEnabled`** | `true or false` |
        | **`mailserver_password`** | **Password is no longer returned.**<br>Check **`mailserver_password_set`** to determine whether password is set. |  |
        | **`mailserver_password_set`** | Indicates if a password is set for the mailserver (because **`mailserver_password`** is always returned empty).<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` **`MailServerConfig.passwordDefined`** | `true or false` |
        | **`mailserver_port`** | Email server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` **`MailServerConfig.port`** | `Valid port number` |
        | **`mailserver_username`** | User ame for email server<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` **`MailServerConfig.username`** | `Username for authentication` |
        | **`mailserver_use_ssl`** | Email server requires SSL connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires **`mailserver_use_starttls`** to be `false`<br>cf. `GET /system/config/settings/mail_server` **`MailServerConfig.username`** | `true or false` |
        | **`mailserver_use_starttls`** | Email server requires StartTLS connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires **`mailserver_use_ssl`** to be `false`<br>cf. `GET /system/config/settings/mail_server` **`MailServerConfig.starttlsEnabled`** | `true or false` |
        | **`syslog`** | Write logs to a syslog interface.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` **`SyslogConfig.enabled`** | `true or false` |
        | **`syslog_host`** | Syslog server (IP or FQDN)<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` **`SyslogConfig.host`** | `DNS name or IPv4 of a syslog server` |
        | **`syslog_port`** | Syslog server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` **`SyslogConfig.port`** | `Valid port number` |
        | **`syslog_protocol`** | Protocol to connect to syslog server.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` **`SyslogConfig.protocol`** | `TCP or UDP` |
        | **`enable_email_notification_button`** | Enable mail notification button.<br>cf. `GET /system/config/settings/general` **`GeneralSettings.emailNotificationButtonEnabled`** | `true or false` |
        | **`allow_share_password_sms`** | Allow sending of share passwords via SMS.<br>cf. `GET /system/config/settings/general` **`GeneralSettings.sharePasswordSmsEnabled`** | `true or false` |
        | **`globally_allow_share_password_sms`** | Allow sending of share passwords via SMS **system-wide** (read-only).<br>cf. `GET /system/config/settings/infrastructure` **`InfrastructureProperties.smsConfigEnabled`** | `true or false` |
        | **`use_s3_storage`** | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `GET /system/config/settings/general` **`GeneralSettings.useS3Storage`** | `true or false` |
        | **`s3_default_region`** |Suggested S3 region (read-only)<br>cf. `GET /system/config/settings/infrastructure` **`InfrastructureProperties.s3DefaultRegion`** | `Region name` |

        ### `DEPRECATED` settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`allow_system_global_weak_password`** **(`DEPRECATED`)** | Determines whether weak password (cf. _Password Policy_ below) is allowed.<br>cf. `GET /system/config/settings/general` **`GeneralSettings.weakPasswordEnabled`**<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |
        | **`branding_server_customer`** (**`DEPRECATED`**) | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |
        | **`branding_server_url`** (**`DEPRECATED`**) | Access URL to to the Branding Server.<br>Only visible for _Config Manager_ of Provider Customer. | `String` |
        | **`email_from`** (**`DEPRECATED`**) | Sender of system-generated emails<br>Only visible for _Config Manager_ of Provider Customer.<br>**Moved to branding** | `Valid email address` |
        | **`email_to_sales`** (**`DEPRECATED`**) | Contact email address for customers to request more user licenses or data volume.<br>**Moved to branding** | `Valid email address` |
        | **`email_to_support`** (**`DEPRECATED`**) | Support email address for users<br>**Moved to branding** | `Valid email address` |
        | **`file_size_js`** (**`DEPRECATED`**) | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.<br>Bigger files will require a JavaApplet. | `Integer`<br>Recommended value: `10485760` (=`10MB`) |
        | **`system_name`** (**`DEPRECATED`**) | System name<br>**Moved to branding; use `product.title`** | `Display name of the DRACOON` |

        ---

        ### `DEPRECATED` Password Policy

        * A weak password has to fulfill the following criteria:  
            * is at least 8 characters long  
            * contains letters and numbers
        * A strong password has to fulfill the following criteria in addition:  
            * contains at least one special character  
            * contains upper and lower case characters
      operationId: getSystemSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ConfigOptionList'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get system settings
      tags:
        - config
    put:
      consumes:
        - application/json
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.6.0

        ### Functional Description:
        Change configurable settings.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        One or more global settings gets changed.

        ### &#9432; Further Information:
        This API is **`DEPRECATED`** and will be removed in the future.  
        Check for every settings key new corresponding API and key below.

        ### Attention
        Only visible for _Config Manager_ of Provider Customer.

        ### Settings

        ### Configurable settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`branding_server_branding_id`** | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.<br>cf. `PUT /system/config/settings/branding` **`BrandingConfig.brandingQualifier`** | `String` |
        | **`branding_portal_url`** | Access URL to to the Branding Portal<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/branding` **`BrandingConfig.brandingProviderUrl`** | `String` |
        | **`dblog`** | Write logs to local database.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/eventlog` **`EventlogConfig.enabled`** | `true or false` |
        | **`default_downloadshare_expiration_period`** | Default expiration period for Download Shares in days<br>cf. `PUT /system/config/settings/defaults` **`SystemDefaults.downloadShareDefaultExpirationPeriod`** | `Integer between 0 and 9999`<br>Set `0` to disable. |
        | **`default_file_upload_expiration_date`** | Default expiration period for all uploaded files in days<br>cf. `PUT /system/config/settings/defaults` **`SystemDefaults.fileDefaultExpirationPeriod`** | `Integer between 0 and 9999`<br>Set `0` to disable. |
        | **`default_language`** | Define which language should be default.<br>cf. `PUT /system/config/settings/defaults` **`SystemDefaults.languageDefault`** | cf. `GET /public/system/info` - **`SystemInfo.languageDefault`** |
        | **`default_uploadshare_expiration_period`** | Default expiration period for Upload Shares in days<br>cf. `PUT /system/config/settings/defaults` **`SystemDefaults.uploadShareDefaultExpirationPeriod`** | `Integer between 0 and 9999`<br>Set `0` to disable. |
        | **`enable_client_side_crypto`** | Activation status of client-side encryption<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `PUT /system/config/settings/general` **`GeneralSettings.cryptoEnabled`** | `true or false`<br>default: `false` |
        | **`eula_active`** | Each user has to confirm the EULA at first login.<br>cf. `PUT /system/config/settings/general` **`GeneralSettings.eulaEnabled`** | `true or false` |
        | **`eventlog_retention_period`** | Retention period (in days) of event log entries<br>After that period, all entries are deleted.<br>cf. `PUT /system/config/settings/eventlog` **`EventlogConfig.retentionPeriod`** | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: `7` |
        | **`ip_address_logging`** | Determines whether a user's IP address is logged.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/eventlog` **`EventlogConfig.logIpEnabled`**<br>cf. `PUT /system/config/settings/syslog` **`SyslogConfig.logIpEnabled`** | `true or false` |
        | **`mailserver`** | Email server to send emails.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` **`MailServerConfig.host`** | `DNS name or IPv4 of an email server` |
        | **`mailserver_authentication_necessary`** | Set to `true` if the email server requires authentication.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` **`MailServerConfig.authenticationEnabled`** | `true or false` |
        | **`mailserver_password`** | Password for email server<br>cf. `PUT /system/config/settings/mail_server` **`MailServerConfig.password`** | `Password for authentication` |
        | **`mailserver_port`** | Email server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` **`MailServerConfig.port`** | `Valid port number` |
        | **`mailserver_username`** | Username for email server<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` **`MailServerConfig.username`** | `Username for authentication` |
        | **`mailserver_use_ssl`** | Email server requires SSL connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires **`mailserver_use_starttls`** to be `false`<br>cf. `PUT /system/config/settings/mail_server` **`MailServerConfig.username`** | `true or false` |
        | **`mailserver_use_starttls`** | Email server requires StartTLS connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires **`mailserver_use_ssl`** to be `false`<br>cf. `PUT /system/config/settings/mail_server` **`MailServerConfig.starttlsEnabled`** | `true or false` |
        | **`syslog`** | Write logs to a syslog interface.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` **`SyslogConfig.enabled`** | `true or false` |
        | **`syslog_host`** | Syslog server (IP or FQDN)<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` **`SyslogConfig.host`** | `DNS name or IPv4 of a syslog server` |
        | **`syslog_port`** | Syslog server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` **`SyslogConfig.port`** | `Valid port number` |
        | **`syslog_protocol`** | Protocol to connect to syslog server.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` **`SyslogConfig.protocol`** | `TCP or UDP` |
        | **`enable_email_notification_button`** | Enable mail notification button.<br>cf. `PUT /system/config/settings/general` **`GeneralSettings.emailNotificationButtonEnabled`** | `true or false` |
        | **`allow_share_password_sms`** | Allow sending of share passwords via SMS.<br>cf. `PUT /system/config/settings/general` **`GeneralSettings.sharePasswordSmsEnabled`** | `true or false` |

        ### `DEPRECATED` settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`allow_system_global_weak_password`** **(`DEPRECATED`)** | Determines whether weak password (cf. _Password Policy_ below) is allowed.<br>cf. `PUT /system/config/settings/general` **`GeneralSettings.weakPasswordEnabled`**<br>Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |
        | **`branding_server_customer`** (**`DEPRECATED`**) | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |
        | **`branding_server_url`** (**`DEPRECATED`**) | Access URL to to the Branding Server.<br>Only visible for _Config Manager_ of Provider Customer. | `String` |
        | **`email_from`** (**`DEPRECATED`**) | Sender of system-generated emails<br>Only visible for _Config Manager_ of Provider Customer.<br>**Moved to branding** | `Valid email address` |
        | **`email_to_sales`** (**`DEPRECATED`**) | Contact email address for customers to request more user licenses or data volume.<br>**Moved to branding** | `Valid email address` |
        | **`email_to_support`** (**`DEPRECATED`**) | Support email address for users<br>**Moved to branding** | `Valid email address` |
        | **`file_size_js`** (**`DEPRECATED`**) | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.<br>Bigger files will require a JavaApplet. | `Integer`<br>Recommended value: `10485760` (=`10MB`) |
        | **`system_name`** (**`DEPRECATED`**) | System name<br>**Moved to branding; use `product.title`** | `Display name of the DRACOON` |

        ---

        ### `DEPRECATED` Password Policy

        * A weak password has to fulfill the following criteria:  
            * is at least 8 characters long  
            * contains letters and numbers
        * A strong password has to fulfill the following criteria in addition:  
            * contains at least one special character  
            * contains upper and lower case characters
      operationId: setSystemSetting
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConfigOptionList'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80009] Invalid email address
            * [-80012] Not allowed protocol
            * [-80014] Invalid hostname or IP address
            * [-80018] Not between 0 and 9999
            * [-80029] Global configuration value cannot be overwritten
            * [-90001] Invalid settings configuration
            * [-90010] Client-side encryption is already enable and cannot be disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90000] Settings key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change system settings
      tags:
        - config
  '/v4/downloads/avatar/{user_id}/{uuid}':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:  
        Download avatar for given UserID and UUID.

        ### Precondition:
        Valid UUID.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: downloadAvatar
      parameters:
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
        - description: UUID of the avatar
          in: path
          name: uuid
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70028] Avatar not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Download avatar
      tags:
        - downloads
  '/v4/downloads/zip/{token}':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Download multiple files in a ZIP archive.

        ### Precondition:
        Valid download token.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Create a download token with `POST /nodes/zip` API.
      operationId: getZipFileByToken
      parameters:
        - description: Download token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-20502] Invalid (up-) download token
            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Download ZIP file(s)
      tags:
        - downloads
  '/v4/downloads/{token}':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Download a file.

        ### Precondition:
        Valid download token.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileDataByToken
      parameters:
        - description: |-
            Range
            e.g. `bytes=0-999`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Range
          required: false
          type: string
        - allowEmptyValue: false
          description: Always return `application/octet-stream` instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          type: boolean
        - allowEmptyValue: false
          description: 'Use Content-Disposition: `inline` instead of `attachment`'
          in: query
          name: inline
          required: false
          type: boolean
        - description: Download token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '206':
          description: Partial Content
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted
            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-20502] Invalid (up-) download token
            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '416':
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - downloads
    head:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Download a file.

        ### Precondition:
        Valid download token.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileDataByToken_1
      parameters:
        - description: |-
            Range
            e.g. `bytes=0-999`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Range
          required: false
          type: string
        - allowEmptyValue: false
          description: Always return `application/octet-stream` instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          type: boolean
        - allowEmptyValue: false
          description: 'Use Content-Disposition: `inline` instead of `attachment`'
          in: query
          name: inline
          required: false
          type: boolean
        - description: Download token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '206':
          description: Partial Content
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted
            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-20502] Invalid (up-) download token
            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '416':
          description: Range Not Satisfiable
      summary: Download file
      tags:
        - downloads
  /v4/eventlog/audits/nodes:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.3.0

        ### Functional Description:  
        Retrieve a list of all nodes of type `room`, and the room assignment users with permissions.

        ### Precondition:
        Right _"read audit log"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        ### &#9888; Except for **`userName`**, **`userFirstName`** and  **`userLastName`** - these are connected via logical disjunction (**OR**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  

        Example:
        > `userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`  
        Filter by user login containing `searchString_1` **OR** first name containing `searchString_2` **AND** node ID equals `2`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`nodeId`** | Node ID filter | `eq` | Node ID equals value. | `positive Integer` |
        | **`nodeName`** | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |
        | **`nodeParentId`** | Node parent ID filter | `eq` | Parent ID equals value. | `positive Integer`<br>Parent ID `0` is the root node. |
        | **`userId`** | User ID filter | `eq` | User ID equals value. | `positive Integer` |
        | **`userName`** | Username (login) filter | `cn, eq` | Username contains / equals value. | `search String` |
        | **`userFirstName`** | User first name filter | `cn, eq` | User first name contains / equals value. | `search String` |
        | **`userLastName`** | User last name filter | `cn, eq` | User last name contains / equals value. | `search String` |
        | **`permissionsManage`** | Filter the users that do (not) have `manage` permissions in this room | `eq` |  | `true or false` |
        | **`nodeIsEncrypted`** | Encrypted node filter | `eq` |  | `true or false` |
        | **`nodeHasActivitiesLog`** | Activities log filter | `eq` |  | `true or false` |
        | **`nodeHasRecycleBin`** | (**`DEPRECATED`**)<br>Recycle bin filter<br>**Filter has no effect!** | `eq` |  | `true or false` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `nodeName:asc`  
        Sort by `nodeName` ascending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`nodeId`** | Node ID |
        | **`nodeName`** | Node name |
        | **`nodeParentId`** | Node parent ID |
        | **`nodeSize`** | Node size |
        | **`nodeQuota`** | Node quota |
      operationId: getAuditNodeUserData
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/AuditNodeResponse'
            type: array
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get node assigned users with permissions
      tags:
        - eventlog
  /v4/eventlog/events:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.3.0

        ### Functional Description:  
        Retrieve eventlog (audit log) events.

        ### Precondition:
        Role _"Log Auditor"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Output is limited to **500** entries.  
        For more results please use filter criteria and paging (`offset` + `limit`). 

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `time:desc`  
        Sort by `time` descending (default sort option).

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`time`** | Event timestamp |
      operationId: getLogEvents
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events until given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_end
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events from given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_start
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Operation status:
            * `0` - Success
            * `2` - Error
          enum:
            - 0
            - 2
          format: int32
          in: query
          name: status
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          format: int32
          in: query
          name: type
          required: false
          type: integer
        - allowEmptyValue: false
          description: User client
          in: query
          name: user_client
          required: false
          type: string
        - allowEmptyValue: false
          description: User ID
          format: int64
          in: query
          name: user_id
          required: false
          type: integer
      produces:
        - application/json
        - text/csv
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LogEventList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
            * [-80026] Invalid operation ID
            * [-80027] Invalid operation status
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get system events
      tags:
        - eventlog
  /v4/eventlog/operations:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.3.0

        ### Functional Description:  
        Retrieve eventlog (audit log) operation IDs and the associated log operation description.

        ### Precondition:
        Role _"Log Auditor"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getLogOperations
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Show only deprecated operations
          in: query
          name: is_deprecated
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LogOperationList'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get allowed Log Operations
      tags:
        - eventlog
  /v4/groups:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Returns a list of user groups.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `name:cn:searchString`  
        Filter by group name containing `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`name`** | Group name filter | `cn` | Group name contains value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `name:asc|expireAt:desc`  
        Sort by `name` ascending **AND** by `expireAt` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`name`** | Group name |
        | **`createdAt`** | Creation date |
        | **`expireAt`** | Expiration date |
        | **`cntUsers`** | Amount of users |
      operationId: getGroups
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GroupList'
        '400':
          description: |-
            Bad Request

            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of user groups
      tags:
        - groups
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Create a new user group.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        A new group is created.

        ### &#9432; Further Information:
        * If a group should **NOT** expire, leave `expireAt` empty.
        * Group names are limited to **150** characters
        * **All** characters are allowed.
      operationId: createGroup
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateGroupRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Group with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create new user group
      tags:
        - groups
  '/v4/groups/{group_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete a user group.

        ### Precondition:
        Right _"delete groups"_ required.

        ### Effects:
        User group is deleted.

        ### &#9432; Further Information:
        None.
      operationId: deleteGroup
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-30040] Group which is defined as User Import Group cannot be deleted
            * [-40006] At least one non-expiring admin user / group required
            * [-71006] At least one role user / group required
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete user group
      tags:
        - groups
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve detailed information about a user group.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getGroup
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user group
      tags:
        - groups
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Update user group's metadata .

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        User group's metadata is changed.

        ### &#9432; Further Information:
        * If a group should **NOT** expire, leave `expireAt` empty.
        * Group names are limited to **150** characters
        * **All** characters are allowed.
      operationId: updateGroup
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateGroupRequest'
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-71006] At least one role user / group required
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Group with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update user group's metadata
      tags:
        - groups
  '/v4/groups/{group_id}/last_admin_rooms':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.10.0

        ### Functional Description:  
        Retrieve a list of all rooms where the group is defined as last admin group.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        List of rooms is returned. 

        ### &#9432; Further Information:
        An empty list is returned if no rooms were found where the group is defined as last admin group.
      operationId: getLastAdminRoomsGroups
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LastAdminGroupRoomList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get rooms where the group is defined as last admin group
      tags:
        - groups
  '/v4/groups/{group_id}/roles':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of all roles granted to a group.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getGroupRoles
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of roles assigned to the group
      tags:
        - groups
  '/v4/groups/{group_id}/rooms':
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.10.0

        ### Functional Description:  
        Retrieves a list of rooms granted to the group and / or that can be granted.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `isGranted:eq:false|name:cn:searchString`  
        Get all rooms where the group is **NOT** granted **AND** whose name is like `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`name`** | Room name filter | `cn` | Room name contains value. | `search String` |
        | **`isGranted`** | Filter rooms which the group is (not) granted | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
        | **`effectivePerm`** | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`:  DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `true` |
      operationId: getGroupRooms
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomTreeDataList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get rooms granted to the group or / and rooms that can be granted
      tags:
        - groups
  '/v4/groups/{group_id}/users':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Remove group members.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        Provided users are removed from the user group.

        ### &#9432; Further Information:
        Batch function.  
        The provided users are removed from the user group.
      operationId: deleteGroupMembers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChangeGroupMembersRequest'
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-71006] At least one role user / group required
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Remove group members
      tags:
        - groups
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Retrieve a list of group member users or / and users who can become a member.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `isMember:eq:false|user:cn:searchString`  
        Get all users that are **NOT** in this group **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`user`** | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
        | **`isMember`** | Filter group members | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
        | **`displayName`** | (**`DEPRECATED`**) User display name filter (use **`user`** filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |
      operationId: getGroupUsers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GroupUserList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get group member users or / and users who can become a member
      tags:
        - groups
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Add members to a group.

        ### Precondition:
        Right _"change groups"_ required.

        ### Effects:
        New members are added to the group.

        ### &#9432; Further Information:
        Batch function.  
        The newly provided members will be added to the existing ones.
      operationId: addGroupMembers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChangeGroupMembersRequest'
        - description: Group ID
          format: int64
          in: path
          name: group_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: |-
            Bad Request

            * [-70510] User already in the group
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Add group members
      tags:
        - groups
  /v4/nodes:
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete nodes (room, folder or file).

        ### Precondition:
        Authenticated user with _"delete"_ permissions on:
        * supplied nodes (for folders or files)
        * superordinated node (for rooms)

        ### Effects:
        Nodes are deleted.

        ### &#9432; Further Information:
        Nodes **MUST** be in same parent.
      operationId: deleteNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteNodesRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40009] Room which is defined as Home Room Parent cannot be deleted
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/NodeBatchOperationErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete nodes
      tags:
        - nodes
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Provides a hierarchical list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        `EncryptionInfo` is **NOT** provided.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `type:eq:room:folder|perm:eq:read`  
        Get nodes where type equals (`room` **OR** `folder`) **AND** user has `read` permissions.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`type`** | Node type filter | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder` | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> |
        | **`perm`** | Permission filter | `eq` | Permission equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `perm:eq:read:create:delete` | <ul><li>`manage`</li><li>`read`</li><li>`change`</li><li>`create`</li><li>`delete`</li><li>`manageDownloadShare`</li><li>`manageUploadShare`</li><li>`canReadRecycleBin`</li><li>`canRestoreRecycleBin`</li><li>`canDeleteRecycleBin`</li></ul> |
        | **`childPerm`** | Same as **`perm`**, but less restrictive (applies to child nodes only).<br>Child nodes of the parent node which do not meet the filter condition<br>are **NOT** returned. | `eq` | cf. **`perm`** | cf. **`perm`** |
        | **`name`** | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |
        | **`encrypted`** | Node encryption status filter | `eq` |  | `true or false` |
        | **`branchVersion`** | Node branch version filter | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404` | `version number` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        **Nodes are sorted by type first, then by sent sort string.**  
        Example:
        > `name:desc`  
        Sort by `name` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`name`** | Node name |
        | **`createdAt`** | Creation date |
        | **`createdBy`** | Creator first name, last name |
        | **`updatedAt`** | Last modification date |
        | **`updatedBy`** | Last modifier first name, last name |
        | **`fileType`** | File type (extension) |
        | **`classification`** | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
        | **`size`** | Node size |
        | **`cntDeletedVersions`** | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) |
        | **`cntAdmins`** | (**`DEPRECATED`**)<br>Number of admins (for rooms only)|
        | **`cntUsers`** | (**`DEPRECATED`**)<br>Number of users (for rooms only) |
        | **`cntChildren`** | (**`DEPRECATED`**)<br>Number of direct children (**NOT** recursive; for rooms and folders only) |
      operationId: getFsNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            (**DEPRECATED**: will be removed)
            * `0` - top level nodes only
            * `n` (any positive number) - include `n` levels starting from the current node
          format: int32
          in: query
          name: depth_level
          required: false
          type: integer
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Parent node ID.
            Only rooms and folders can be parents.
            Parent ID `0` or empty is the root node.
          format: int64
          in: query
          name: parent_id
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Show all rooms for management perspective.
            Only possible for _Rooms Managers_.
            For all other users, it will be ignored.
          in: query
          name: room_manager
          required: false
          type: boolean
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/NodeList'
        '400':
          description: |-
            Bad Request

            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of nodes
      tags:
        - nodes
  '/v4/nodes/comments/{comment_id}':
    delete:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.10.0

        ### Functional Description:
        Delete an existing comment for a specific node.

        ### Precondition:
        * User has _"read"_ permissions on the node.
        * User has to be:
            * Creator of the comment **OR**
            * Room administrator in auth parent room.

        ### Effects:
        Comment is deleted.

        ### &#9432; Further Information:
        None.
      operationId: deleteNodeComment
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Comment ID
          format: int64
          in: path
          name: comment_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
            * [-41400] Comment not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete node comment
      tags:
        - nodes
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.10.0

        ### Functional Description:
        Edit the text of an existing comment for a specific node.

        ### Precondition:
        * User has _"read"_ permissions on the node.
        * User has to be the creator of the comment.

        ### Effects:
        Comments text gets changed.

        ### &#9432; Further Information:
        Maximum allowed text length: **65535** characters.
      operationId: changeNodeComment
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChangeNodeCommentRequest'
        - description: Comment ID
          format: int64
          in: path
          name: comment_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Comment'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80039] Comment was deleted. Change not allowed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
            * [-41400] Comment not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Edit node comment
      tags:
        - nodes
  /v4/nodes/deleted_nodes:
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Permanently remove a list of nodes from the recycle bin.

        ### Precondition:
        User has _"delete recycle bin"_ permissions in parent room.

        ### Effects:
        All provided nodes are removed.

        ### &#9432; Further Information:
        The removal of deleted nodes from the recycle bin is irreversible.
      operationId: deleteDeletedNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteDeletedNodesRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-41100] Deleted node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete nodes from recycle bin
      tags:
        - nodes
  /v4/nodes/deleted_nodes/actions/restore:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Restore a list of deleted nodes.

        ### Precondition:
        User has _"create"_ permissions in parent room and _"restore recycle bin"_ permissions.

        ### Effects:
        The selected files are moved from the recycle bin to the chosen productive container.

        ### &#9432; Further Information:
        If no parent ID is provided, the node is restored to its previous location.  
        The default resolution strategy is `autorename` that adds numbers to the file name until the conflict is solved.  
        If an existing file is overwritten, it is moved to the recycle bin instead of the restored one.
        ##
        #### &#9888; Download share id (if exists) gets changed if:
        - node with the same name exists in the target container
        - **`resolutionStrategy`** is **`overwrite`**
        - **`keepShareLinks`** is **`true`**
      operationId: restoreNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RestoreDeletedNodesRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted
            * [-40013] Encrypted file cannot be restored inside another than its original room
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80034] `keepShareLinks` is only allowed with conflict mode `overwrite`
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-41100] Deleted node not found
          schema:
            $ref: '#/definitions/NotRestoredNodeList'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-40010] Container cannot be overwritten
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Restore deleted nodes
      tags:
        - nodes
  '/v4/nodes/deleted_nodes/{deleted_node_id}':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Get metadata of a deleted node.

        ### Precondition:
        User can access parent room and has _"read recycle bin"_ permissions.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getFsDeletedNode
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Deleted node ID
          format: int64
          in: path
          name: deleted_node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DeletedNode'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-41100] Deleted node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get deleted node
      tags:
        - nodes
  /v4/nodes/files/keys:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Sets symmetric file keys for several users and files.

        ### Precondition:
        User has file keys for the files.  
        FileKeys can only be set for users that own permission "manage" or "read" or "manageDownloadShare" in the container.

        ### Effects:
        Stores new file keys for other users.

        ### &#9432; Further Information:
        Only users with copies of the file key (encrypted with their public keys) can access a certain file.  
        This endpoint is used for the distribution of file keys amongst an authorized user base.  
        User can set fileKey for himself.  
        The users who already have a fileKey are ignored and keep the distributed fileKey
      operationId: setUserFileKeys
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserFileKeySetBatchRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-40761] File key not found
            * [-70020] User does not have a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Set file keys for a list of users and files
      tags:
        - nodes
  /v4/nodes/files/uploads:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:
        This endpoint creates a new upload channel which is the first step in any file upload workflow.

        ### Precondition:
        User has _"create"_ permissions in the parent container (room or folder).

        ### Effects:
        A new upload channel for a file is created.  
        Its ID and an upload token are returned.

        ### &#9432; Further Information:
        The upload ID is used for uploads with `X-Sds-Auth-Token` header, the upload token can be used for uploads without authentication header.

        Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.

        Notes are limited to **255** characters.

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: createFileUpload
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateFileUploadRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/CreateFileUploadResponse'
        '400':
          description: |-
            Bad Request

            * [-40755] Bad node name
            * [-40756] Invalid classification code
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
            * [-80037] Exceeds maximum data length for AES GCM encryption
            * [-90033] S3 direct upload is enforced
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Username must be changed
            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create new file upload channel
      tags:
        - nodes
  '/v4/nodes/files/uploads/{upload_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Cancel an (S3) file upload and destroy the upload channel.

        ### Precondition:
        * Valid upload ID
        * An upload channel has been created
        * User has to be the creator of the upload channel

        ### Effects:
        The upload channel is removed and all temporary uploaded data is purged.

        ### &#9432; Further Information:
        It is recommended to notify the API about cancelled uploads if possible.
      operationId: cancelFileUpload
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Cancel file upload
      tags:
        - nodes
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.15.0

        ### Functional Description:
        Request status of a S3 file upload.

        ### Precondition:
        * Valid upload ID
        * An upload channel has been created
        * User has to be the creator of the upload channel

        ### Effects:
        None.

        ### &#9432; Further Information:

        ### Possible errors:

        | Http Status | Error Code | Description |
        | :--- | :--- | :--- |
        | **`400 Bad Request`** | `-80000` | Mandatory fields cannot be empty |
        | **`400 Bad Request`** | `-80001` | Invalid positive number |
        | **`400 Bad Request`** | `-80002` | Invalid number |
        | **`400 Bad Request`** | `-40001` | (Target) room is not encrypted |
        | **`400 Bad Request`** | `-40755` | Bad file name |
        | **`400 Bad Request`** | `-40763` | File key must be set for an upload into encrypted room |
        | **`400 Bad Request`** | `-50506` | Exceeds the number of files for this Upload Share |
        | **`403 Forbidden`** |  | Access denied |
        | **`404 Not Found`** | `-20501` | Upload not found |
        | **`404 Not Found`** | `-40000` | Container not found |
        | **`404 Not Found`** | `-41000` | Node not found |
        | **`404 Not Found`** | `-70501` | User not found |
        | **`409 Conflict`** | `-40010` | Container cannot be overwritten |
        | **`409 Conflict`** |  | File cannot be overwritten |
        | **`500 Internal Server Error`** |  | System Error |
        | **`502 Bad Gateway`** |  | S3 Error |
        | **`502 Insufficient Storage`** | `-50504` | Exceeds the quota for this Upload Share |
        | **`502 Insufficient Storage`** | `-40200` | Exceeds the free node quota in room |
        | **`502 Insufficient Storage`** | `-90200` | Exceeds the free customer quota |
        | **`502 Insufficient Storage`** | `-90201` | Exceeds the free customer physical disk space |
      operationId: getUploadStatus
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3FileUploadStatus'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-90034] Corresponding S3 upload ID not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Username must be changed
            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: "Request status of S3 file upload \U0001F782 NEW \U0001F780"
      tags:
        - nodes
    post:
      consumes:
        - multipart/form-data
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.9.0

        ### Use `uploads` API

        ### Functional Description:  
        Uploads a file or parts of it in an active upload channel.

        ### Precondition:
        An upload channel has been created.

        ### Effects:
        A file or parts of it are uploaded to a temporary location.

        ### &#9432; Further Information:
        This endpoints supports chunked upload.  
        Please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for further information.

        Following `Content-Types` are supported by this API:
        * `multipart/form-data`
        * provided `Content-Type`   

        For both file upload types set the correct `Content-Type` header and body.  
        Examples:  

        * `multipart/form-data`
        ```
        POST /api/v4/nodes/files/uploads/{upload_id} HTTP/1.1

        Header:
        ...
        Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
        ...

        Body:
        ------WebKitFormBoundary7MA4YWxkTrZu0gW
        Content-Disposition: form-data; name="file"; filename="file.txt"
        Content-Type: text/plain

        Content of file.txt
        ------WebKitFormBoundary7MA4YWxkTrZu0gW--
        ```

        * any other `Content-Type`  
        ```
        POST /api/v4/nodes/files/uploads/{upload_id}  HTTP/1.1

        Header:
        ...
        Content-Type: { ... }
        ...

        Body:
        raw content
        ```
      operationId: uploadFile
      parameters:
        - description: |-
            Content-Range
            e.g. `bytes 0-999/3980`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Content-Range
          required: false
          type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File
          in: formData
          name: file
          required: true
          type: file
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ChunkUploadResponse'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80021] Incorrect upload `Content-Range`
            * [-80037] Exceeds maximum data length for AES GCM encryption
            * [-90033] S3 direct upload is enforced
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Upload file
      tags:
        - nodes
    put:
      consumes:
        - application/json
      deprecated: true
      description: |
        ## &#9888; Deprecated since version 4.9.0

        ### Use `uploads` API

        ### Functional Description:
        Finishes an upload and closes the corresponding upload channel.

        ### Precondition:
        An upload channel has been created and data has been transmitted.

        ### Effects:
        The upload is finished and the temporary file is moved to the productive environment.

        ### &#9432; Further Information:
        The provided file name might be changed in accordance with the resolution strategy:  
        * **autorename**: changes the file name and adds a number to avoid conflicts.
        * **overwrite**: deletes any old file with the same file name.
        * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.

        Please ensure that all chunks have been transferred correctly before finishing the upload.
        ##
        #### &#9888; Download share id (if exists) gets changed if:
        - node with the same name exists in the target container
        - **`resolutionStrategy`** is **`overwrite`**
        - **`keepShareLinks`** is **`true`**

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `

        ### 200 OK is **NOT** used by this API
      operationId: completeFileUpload
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CompleteUploadRequest'
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Node'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40755] Bad node name
            * [-40763] File key must be set for an upload into encrypted room
            * [-80000] Mandatory fields cannot be empty
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80034] `keepShareLinks` is only allowed with conflict mode `overwrite`
            * [-90033] S3 direct upload is enforced
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-40010] Container cannot be overwritten
          schema:
            $ref: '#/definitions/Node'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
        '508':
          description: Loop Detected
      security:
        - DRACOON-OAuth:
            - all
      summary: Complete file upload
      tags:
        - nodes
  '/v4/nodes/files/uploads/{upload_id}/s3':
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.15.0

        ### Functional Description:
        Finishes a S3 file upload and closes the corresponding upload channel.

        ### Precondition:
        * Valid upload ID
        * An upload channel has been created and data has been transmitted
        * User has to be the creator of the upload channel

        ### Effects:
        Upload channel is closed. S3 multipart upload request is completed.

        ### &#9432; Further Information:
        #### &#9888; Download share id (if exists) gets changed if:
        - node with the same name exists in the target container
        - **`resolutionStrategy`** is **`overwrite`**
        - **`keepShareLinks`** is **`true`**
         
      operationId: completeS3FileUpload
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CompleteS3FileUploadRequest'
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '202':
          description: Accepted
        '400':
          description: |-
            Bad Request

            * [-20503] Upload channel is closed
            * [-40755] Bad node name
            * [-40763] File key must be set for an upload into encrypted room
            * [-80000] Mandatory fields cannot be empty
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80034] `keepShareLinks` is only allowed with conflict mode `overwrite`
            * [-80045] Invalid Etag(s)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-90034] Corresponding S3 upload ID not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-40010] Container cannot be overwritten
          schema:
            $ref: '#/definitions/Node'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Username must be changed
            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: "Complete S3 file upload \U0001F782 NEW \U0001F780"
      tags:
        - nodes
  '/v4/nodes/files/uploads/{upload_id}/s3_urls':
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.15.0

        ### Functional Description:
        Generate presigned URLs for S3 file upload.

        ### Precondition:
        * Valid upload ID
        * User has to be the creator of the upload channel

        ### Effects:
        List of presigned URLs is returned.

        ### &#9432; Further Information:
        The size for each part must be >= 5 MB, except for the last part.  
        The part number of the first part in S3 is 1 (not 0).  
        Use HTTP method `PUT` for uploading bytes via presigned URL.
      operationId: generatePresignedUrlsFiles
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GeneratePresignedUrlsRequest'
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/PresignedUrlList'
        '400':
          description: |-
            Bad Request

            * [-20503] Upload channel is closed
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80046] Invalid size
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-90034] Corresponding S3 upload ID not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Username must be changed
            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: "Generate presigned URLs for S3 file upload \U0001F782 NEW \U0001F780"
      tags:
        - nodes
  '/v4/nodes/files/{file_id}':
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Updates file’s metadata.

        ### Precondition:
        User has _"change"_ permissions in parent room.

        ### Effects:
        File's metadata is changed.

        ### &#9432; Further Information:
        Notes are limited to **255** characters.

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: updateFile
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateFileRequest'
        - description: File ID
          format: int64
          in: path
          name: file_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40755] Bad node name
            * [-40756] Invalid classification code
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Node with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Updates a file’s metadata
      tags:
        - nodes
  '/v4/nodes/files/{file_id}/data_room_file_key':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Returns the file key for the room emergency password / rescue key of a certain file (if available).

        ### Precondition:
        User with _"read"_ permissions in parent room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getDataRoomFileKey
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File ID
          format: int64
          in: path
          name: file_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FileKey'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
            * [-40761] File key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get room emergency password (rescue key)
      tags:
        - nodes
  '/v4/nodes/files/{file_id}/data_space_file_key':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Returns the file key for the system emergency password / rescue key of a certain file (if available).

        ### Precondition:
        User with _"read"_ permissions in parent room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getDataSpaceFileKey
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File ID
          format: int64
          in: path
          name: file_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FileKey'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
            * [-40761] File key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get system emergency password (rescue key)
      tags:
        - nodes
  '/v4/nodes/files/{file_id}/downloads':
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.3.0

        ### Use `downloads` API

        ### Functional Description:
        Download a file.

        ### Precondition:
        User with _"read"_ permissions in parent room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileData
      parameters:
        - description: |-
            Range 
            e.g. `bytes=0-999/3980`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Range
          required: false
          type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File ID
          format: int64
          in: path
          name: file_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Always return `application/octet-stream` instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          type: boolean
        - allowEmptyValue: false
          description: 'Use Content-Disposition: `inline` instead of `attachment`'
          in: query
          name: inline
          required: false
          type: boolean
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '206':
          description: Partial Content
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '416':
          description: Range Not Satisfiable
      security:
        - DRACOON-OAuth:
            - all
      summary: Download file
      tags:
        - nodes
    head:
      consumes:
        - application/json
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.3.0

        ### Use `downloads` API

        ### Functional Description:
        Download a file.

        ### Precondition:
        User with _"read"_ permissions in parent room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).
      operationId: getFileData_1
      parameters:
        - description: |-
            Range 
            e.g. `bytes=0-999/3980`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Range
          required: false
          type: string
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File ID
          format: int64
          in: path
          name: file_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Always return `application/octet-stream` instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          type: boolean
        - allowEmptyValue: false
          description: 'Use Content-Disposition: `inline` instead of `attachment`'
          in: query
          name: inline
          required: false
          type: boolean
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '206':
          description: Partial Content
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '416':
          description: Range Not Satisfiable
      security:
        - DRACOON-OAuth:
            - all
      summary: Download file
      tags:
        - nodes
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Create a download URL to retrieve a file without `X-Sds-Auth-Token` Header.

        ### Precondition:
        User with _"read"_ permissions in parent room.

        ### Effects:
        Download token is generated and returned.

        ### &#9432; Further Information:
        The token is necessary to access `downloads` ressources.
      operationId: createFileDownloadToken
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File ID
          format: int64
          in: path
          name: file_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadTokenGenerateResponse'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Generate download URL
      tags:
        - nodes
  '/v4/nodes/files/{file_id}/user_file_key':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Returns the file key for the current user (if available).

        ### Precondition:
        User with _"read"_, _"create"_ or _"manage download share"_ permissions in parent room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        The symmetric file key is encrypted with the user's public key.  
        File keys are generated with the workflow _"Generate file keys"_ that starts at `GET /nodes/missingFileKeys`.
      operationId: getUserFileKey
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File ID
          format: int64
          in: path
          name: file_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FileKey'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
            * [-40761] File key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user's file key
      tags:
        - nodes
  /v4/nodes/folders:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:
        Create a new folder.

        ### Precondition:
        User has _"create"_ permissions in current room.

        ### Effects:
        New folder is created.

        ### &#9432; Further Information:
        Folders **CANNOT** be created on top level (without parent element).

        Notes are limited to **255** characters.

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: createFolder
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateFolderRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40755] Bad node name
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Node with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create new folder
      tags:
        - nodes
  '/v4/nodes/folders/{folder_id}':
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Updates folder’s metadata.

        ### Precondition:
        User has _"change"_ permissions in parent room.

        ### Effects:
        Folder's metadata is changed.

        ### &#9432; Further Information:
        Notes are limited to **255** characters.

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: updateFolder
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateFolderRequest'
        - description: Folder ID
          format: int64
          in: path
          name: folder_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40755] Bad node name
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Node with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Updates folder’s metadata
      tags:
        - nodes
  /v4/nodes/missingFileKeys:
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Requests a list of missing file keys that may be generated by the current user.  
        Only returns users that owns one of the following permissions
         * *`manage`*
         * *`read`*
         * *`manageDownloadShare`*

        ### Precondition:
        User has a keypair.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Clients **SHOULD** regularly request missing file keys to provide access to files for other users.  
        The returned list is ordered by priority (emergency passwords / rescue keys are returned first).  

        ### Please note: 
        This API returns **1024** entries at maximum.  
        There might be more entries even if a total of 1024 is returned.
      operationId: missingFileKeys
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: File ID
          format: int64
          in: query
          name: file_id
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Room ID
          format: int64
          in: query
          name: room_id
          required: false
          type: integer
        - allowEmptyValue: false
          description: User ID
          format: int64
          in: query
          name: user_id
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MissingKeysResponse'
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get files without user's file key
      tags:
        - nodes
  /v4/nodes/rooms:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Creates a new room at the provided parent node.  
        Creation of top level rooms provided.

        ### Precondition:
        User has _"manage"_ permissions in the parent room.

        ### Effects:
        A new room is created.

        ### &#9432; Further Information:  
        Rooms may only have other rooms as parent.  
        Rooms on top level do **NOT** have any parent.  
        Rooms may have rooms as children on n hierarchy levels.  
        If permission inheritance is disabled, there **MUST** be at least one admin user / group (with neither the group nor the user having an expiration date).

        Notes are limited to **255** characters.

        Provided (or default) classification is taken from room when file gets uploaded without any classification.

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: createRoom
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateRoomRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-40011] Recycle bin cannot be disabled
            * [-40017] `inheritPermissions` cannot be enabled for top level rooms
            * [-40755] Bad node name
            * [-40756] Invalid classification code
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80018] Not between 0 and 9999
            * [-80025] Invalid `newGroupMemberAcceptance` value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Node with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create new room
      tags:
        - nodes
  /v4/nodes/rooms/pending:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Requests a list of user-room assignments by groups that have **NOT** been approved yet  
        These can have the state:
        * **WAITING**  
        * **DENIED**  
        * **ACCEPTED**  

        **ACCEPTED** assignments are already removed from the list.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Room administrators **SHOULD** regularly request pending assingments to provide access to rooms for other users.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `state:eq:WAITING`  
        Filter assignments by state `WAITING`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`userId`** | User ID filter | `eq` | User ID equals value. | `positive Integer` |
        | **`groupId`** | Group ID filter | `eq` | Group ID equals value. | `positive Integer` |
        | **`roomId`** | Room ID filter | `eq` | Room ID equals value. | `positive Integer` |
        | **`state`** | Assignment state | `eq` | Assignment state equals value. | `WAITING or DENIED` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        Example:
        > `userId:desc`  
        Sort by `userId` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`userId`** | User ID |
        | **`groupId`** | Group ID |
        | **`roomId`** | Room ID |
        | **`state`** | State |
      operationId: getPendingAssignments
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PendingAssignmentList'
        '400':
          description: |-
            Bad Request

            * [-40301] Invalid pending assignment status
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user-room assignments per group
      tags:
        - nodes
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Handles a list of user-room assignments by groups that have **NOT** been approved yet  
        **WAITING** or **DENIED** assignments can be **ACCEPTED**.

        ### Precondition:
        None.

        ### Effects:
        User-room assignment is approved and the user gets access to the group.

        ### &#9432; Further Information:
        Room administrators should **SHOULD** handle pending assignments to provide access to rooms for other users.
      operationId: changePendingAssignments
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PendingAssignmentsRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40301] Invalid pending assignment status
            * [-80000] Mandatory fields cannot be empty
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-40000] Container not found
            * [-40300] Pending assignment not found
            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Handle user-room assignments per group
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}':
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Updates room’s metadata.

        ### Precondition:
        User is a room administrator at superordinated level.

        ### Effects:
        Room's metadata is changed.

        ### &#9432; Further Information:
        Notes are limited to **255** characters.

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: updateRoom
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRoomRequest'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40755] Bad node name
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Node with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Updates room’s metadata
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/activities_log':
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.3.0

        ### Use `nodes/rooms/{room_id}/events` API

        ### Functional Description:
        Retrieve syslog (audit log) events related to a room.

        ### Precondition:
        Requires _"read"_ permissions on that room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Output may be limited to a certain number of entries.  
        Please use filter criteria and paging.

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `time:desc`  
        Sort by `time` descending (default sort option).

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`time`** | Event timestamp |
      operationId: getRoomActivitiesLog_1
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events until given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_end
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events from given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_start
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Operation status:
            * `0` - Success
            * `2` - Error
          enum:
            - 0
            - 2
          format: int32
          in: query
          name: status
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          format: int32
          in: query
          name: type
          required: false
          type: integer
        - allowEmptyValue: false
          description: User ID
          format: int64
          in: query
          name: user_id
          required: false
          type: integer
      produces:
        - application/json
        - text/csv
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SyslogEventList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
            * [-80026] Invalid operation ID
            * [-80027] Invalid operation status
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get events of a room
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/config':
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Configure a room.

        ### Precondition:
        User needs to be a room administrator.

        ### Effects:
        Room's configuration is changed.

        ### &#9432; Further Information:
        Provided (or default) classification is taken from room when file gets uploaded without any classification.  

        To set `adminIds` or `adminGroupIds` the `inheritPermissions` value has to be `false`. Otherwise use:
        * `PUT /nodes/rooms/{room_id}/groups`
        * `PUT /nodes/rooms/{room_id}/users `  

        APIs.
      operationId: configRoom
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConfigRoomRequest'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-40011] Recycle bin cannot be disabled
            * [-40015] Room inheritance already enabled
            * [-40016] Room inheritance already disabled
            * [-40017] `inheritPermissions` cannot be enabled for top level rooms
            * [-40019] `takeOverPermissions` cannot be enabled for top level rooms
            * [-40755] Bad node name
            * [-40756] Invalid classification code
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80018] Not between 0 and 9999
            * [-80025] Invalid `newGroupMemberAcceptance` value
            * [-80028] Due to existing dependency the input must be null
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Node with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Configure room
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/encrypt':
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Activates the client-side encryption for a room.

        ### Precondition:
        User needs to be a room administrator.

        ### Effects:
        Encryption of room is activated.

        ### &#9432; Further Information:
        Only empty rooms at the top level may be encrypted.  
        This endpoint may also be used to disable encryption of an empty room.
      operationId: encryptRoom
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EncryptRoomRequest'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-40002] (Target) room is encrypted
            * [-40003] Room with files cannot be unencrypted
            * [-40004] Only one room emergency password (rescue key) is allowed
            * [-40008] Room with files cannot be encrypted
            * [-40012] Room with not empty recycle bin cannot be encrypted
            * [-40018] Room with not empty recycle bin cannot be decrypted
            * [-40023] Room with shares cannot be encrypted
            * [-70022] Invalid public key format
            * [-70023] Invalid private key format
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-70020] User does not have a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Encrypt room
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/events':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.3.0

        ### Functional Description:
        Retrieve syslog (audit log) events related to a room.

        ### Precondition:
        Requires _"read"_ permissions on that room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Output is limited to **500** entries.
        For more results please use filter criteria and paging (`offset` + `limit`).

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `time:desc`  
        Sort by `time` descending (default sort option).

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`time`** | Event timestamp |
      operationId: getRoomActivitiesLog
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events until given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_end
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events from given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_start
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Operation status:
            * `0` - Success
            * `2` - Error
          enum:
            - 0
            - 2
          format: int32
          in: query
          name: status
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          format: int32
          in: query
          name: type
          required: false
          type: integer
        - allowEmptyValue: false
          description: User ID
          format: int64
          in: query
          name: user_id
          required: false
          type: integer
      produces:
        - application/json
        - text/csv
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LogEventList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
            * [-80026] Invalid operation ID
            * [-80027] Invalid operation status
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get events of a room
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/groups':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Batch function.  
        Revoke granted groups from room.

        ### Precondition:
        User needs to be a room administrator.

        ### Effects:
        Group's permissions are revoked.

        ### &#9432; Further Information:
        None.
      operationId: deleteRoomGroupsBatch
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RoomGroupsDeleteBatchRequest'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Revoke granted group(s) from room
      tags:
        - nodes
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of groups that are and / or can be granted to the room.

        ### Precondition:
        Any permissions on target room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `isGranted:eq:false|name:cn:searchString`  
        Get all groups that are **NOT** granted to this room **AND** whose name is like `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`name`** | Group name filter | `cn` | Group name contains value. | `search String` |
        | **`groupId`** | Group ID filter | `eq` | Group ID equals value. | `positive Integer` |
        | **`isGranted`** | Filter the groups that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for groups in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
        | **`permissionsManage`** | Filter the groups that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` |
        | **`effectivePerm`** | Filter groups with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `false` |
      operationId: getRoomGroups
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomGroupList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get room granted group(s) or / and group(s) that can be granted
      tags:
        - nodes
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Batch function.  
        All existing group permissions will be overwritten.

        ### Precondition:
        User needs to be a room administrator. To add new members, the user needs the right NONMEMBERS_ADD, which is included in any role.

        ### Effects:
        Group's permissions are changed.

        ### &#9432; Further Information:
        None.
      operationId: setRoomGroupsBatch
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RoomGroupsAddBatchRequest'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-40022] Manage rights on homerooms cannot be given to other users
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80025] Invalid `newGroupMemberAcceptance` value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Add or change room granted group(s)
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/keypair':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve the room emergency password (rescue key).

        ### Precondition:
        User has _"read"_ permissions in that room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: roomRescueKey
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserKeyPairContainer'
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40007] No room emergency password (rescue key) found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get room emergency password (rescue key)
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/s3_tags':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.9.0

        ### Functional Description:  
        Retrieve a list of S3 tags assigned to a room.

        ### Precondition:
        User needs to be a room administrator.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getRoomS3Tags
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3TagList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-90029] S3 tag not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
            * [-90030] S3 storage disabled
            * [-90032] S3 tags are disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of all assigned S3 tags to the room
      tags:
        - nodes
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.9.0

        ### Functional Description:  
        Set S3 tags to a room.

        ### Precondition:
        User needs to be a room administrator.

        ### Effects:
        Provided S3 tags are assigned to a room.

        ### &#9432; Further Information:
        Every request overrides current S3 tags.  
        Mandatory S3 tag IDs **MUST** be sent.
      operationId: setRoomS3Tags
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/S3TagIds'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/S3TagList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-90029] S3 tag not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
            * [-90030] S3 storage disabled
            * [-90032] S3 tags are disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Set S3 tags for a room
      tags:
        - nodes
  '/v4/nodes/rooms/{room_id}/users':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Batch function.  
        Revoke granted users from room.

        ### Precondition:
        User needs to be a room administrator.

        ### Effects:
        User's permissions are revoked.

        ### &#9432; Further Information:
        None.
      operationId: deleteRoomUsersBatch
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RoomUsersDeleteBatchRequest'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Revoke granted user(s) from room
      tags:
        - nodes
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Retrieve a list of users that are and / or can be granted to the room.

        ### Precondition:
        Any permissions on target room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `permissionsManage:eq:true|user:cn:searchString`  
        Get all users that have `manage` permissions to this room **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`user`** | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
        | **`userId`** | User ID filter | `eq` | User ID equals value. | `positive Integer` |
        | **`isGranted`** | Filter the users that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for users in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
        | **`permissionsManage`** | Filter the users that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` |
        | **`effectivePerm`** | Filter users with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li><li>`any`: DIRECT **AND** EFFECTIVE **AND** OVER GROUP permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**.<br>OVER GROUP means: e.g. user gets `read` permissions on desired room through **group membership**. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `false` |
        | **`displayName`** | (**`DEPRECATED`**) User display name filter (use **`user`** filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |
      operationId: getRoomUsers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomUserList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get room granted user(s) or / and user(s) that can be granted
      tags:
        - nodes
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Batch function.  
        All existing user permissions will be overwritten.

        ### Precondition:
        User needs to be a room administrator. To add new members, the user needs the right NONMEMBERS_ADD, which is included in any role.

        ### Effects:
        User's permissions are changed.

        ### &#9432; Further Information:
        None.
      operationId: setRoomUsersBatch
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RoomUsersAddBatchRequest'
        - description: Room ID
          format: int64
          in: path
          name: room_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-40022] Manage rights on homerooms cannot be given to other users
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Add or change room granted user(s)
      tags:
        - nodes
  /v4/nodes/search:
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Provides a flat list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.

        ### Precondition:
        Authenticated user is allowed to _"see"_ nodes (i.e. `isBrowsable = true`).

        ### Effects:
        None.

        ### &#9432; Further Information:  
        Output is limited to **500** entries.  
        For more results please use filter criteria and paging (`offset` + `limit`). 
        `EncryptionInfo` is **NOT** provided.  
        Wildcard character is the asterisk character: **`*`**

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)  
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `type:eq:file|createdAt:ge:2015-01-01`  
        Get nodes where type equals `file` **AND** file creation date is **>=** `2015-01-01`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`type`** | Node type filter | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder` | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> |
        | **`fileType`** | File type filter (file extension) | `cn, eq` | File type contains / equals value. | `search String` |
        | **`classification`** | Classification filter | `eq` | Classification equals value. | <ul><li>`1` - public</li><li>`2` - internal</li><li>`3` - confidential</li><li>`4` - strictly confidential</li></ul> |
        | **`createdBy`** | Creator login filter | `cn, eq` | Creator login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
        | **`createdById`** | (**`NEW`**) Creator ID filter | `eq` | Creator ID equals value. | `search String` |
        | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`updatedBy`** | Last modifier login filter | `cn, eq` | Last modifier login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
        | **`updatedById`** | (**`NEW`**) Last modifier ID filter | `eq` | Modifier ID equals value. | `search String` |
        | **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`expireAt`** | Expiration date filter | `ge, le` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expireAt:ge:2016-12-31`&#124;`expireAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`size`** | Node size filter | `ge, le` | Node size is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `size:ge:5`&#124;`size:le:10` | `size in bytes` |
        | **`isFavorite`** | Favorite filter | `eq` |  | `true or false` |
        | **`branchVersion`** | Node branch version filter | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404` | `version number` |
        | **`parentPath`** | Parent path | `cn, eq` | Parent path contains / equals  value. | `search String` |


        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        Example:
        > `name:desc`  
        Sort by `name` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`name`** | Node name |
        | **`createdAt`** | Creation date |
        | **`createdBy`** | Creator first name, last name |
        | **`updatedAt`** | Last modification date |
        | **`updatedBy`** | Last modifier first name, last name |
        | **`fileType`** | File type (extension) |
        | **`classification`** | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
        | **`size`** | Node size |
        | **`cntDeletedVersions`** | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) |
        | **`type`** | Node type (room, folder, file) |
        | **`parentPath`** | Parent path |
        | **`cntAdmins`** | (**`DEPRECATED`**)<br>Number of admins (for rooms only)|
        | **`cntUsers`** | (**`DEPRECATED`**)<br>Number of users (for rooms only) |
        | **`cntChildren`** | (**`DEPRECATED`**)<br>Number of direct children (**NOT** recursive; for rooms and folders only) |
      operationId: searchFsNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            * `0` - top level nodes only (default)
            * `-1` - full tree
            * `n` (any positive number) - include `n` levels starting from the current node
          format: int32
          in: query
          name: depth_level
          required: false
          type: integer
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Parent node ID.
            Only rooms and folders can be parents.
            Parent ID `0` or empty is the root node.
          format: int64
          in: query
          name: parent_id
          required: false
          type: integer
        - allowEmptyValue: false
          description: Search string
          in: query
          name: search_string
          required: true
          type: string
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/NodeList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Search nodes
      tags:
        - nodes
  /v4/nodes/zip:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Create a download URL to retrieve several files in one ZIP archive.

        ### Precondition:
        User has _"read"_ permissions in parent room.

        ### Effects:
        Download URL is generated and returned.

        ### &#9432; Further Information:
        The token is necessary to access `downloads` resources.  
        ZIP download is only available for files and folders.
      operationId: getNodesAsZip
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ZipDownloadRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadTokenGenerateResponse'
        '400':
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Generate download URL for ZIP download
      tags:
        - nodes
  /v4/nodes/zip/download:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Download multiple files in a ZIP archive.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getNodesAsZipDownload
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ZipDownloadRequest'
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-40002] (Target) room is encrypted
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Download files / folders as ZIP archive
      tags:
        - nodes
  '/v4/nodes/{node_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete node (room, folder or file).

        ### Precondition:
        Authenticated user with _"delete"_ permissions on:
        * supplied nodes (for folders or files)
        * superordinated node (for rooms)

        ### Effects:
        Node gets deleted.

        ### &#9432; Further Information:
        None.
      operationId: deleteNode
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40009] Room which is defined as Home Room Parent cannot be deleted
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/NodeBatchOperationErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete node
      tags:
        - nodes
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Get node (room, folder or file).

        ### Precondition:
        User has _"read"_ permissions in auth parent room.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getFsNode
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get node
      tags:
        - nodes
  '/v4/nodes/{node_id}/comments':
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.10.0

        ### Functional Description:
        Get comments for a specific node.

        ### Precondition:
        User has _"read"_ permissions on the node.

        ### Effects:
        List with comments (sorted by `createdAt` timestamp) is returned.

        ### &#9432; Further Information:
        An empty list is returned if no comments were found.  
        Output is limited to **500** entries.
        For more results please use filter criteria and paging (`offset` + `limit`). 
      operationId: getNodeComments
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Hide deleted comments
          in: query
          name: hide_deleted
          required: false
          type: boolean
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: Node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CommentList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of node comments
      tags:
        - nodes
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.10.0

        ### Functional Description:
        Create a comment for a specific node.

        ### Precondition:
        User has _"read"_ permissions on the node.

        ### Effects:
        Comment is created.

        ### &#9432; Further Information:
        Maximum allowed text length: **65535** characters.
      operationId: createNodeComment
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateNodeCommentRequest'
        - description: Node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Comment'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create node comment
      tags:
        - nodes
  '/v4/nodes/{node_id}/copy_to':
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:
        Copies nodes (folder, file) to another parent.

        ### Precondition:
        Authenticated user with _"read"_ permissions in the source parent and _"create"_ permissions in the target parent node.

        ### Effects:
        Nodes are copied to target parent.

        ### &#9432; Further Information:
        Nodes **MUST** be in same source parent.  
        &#9888; **Rooms **CANNOT** be copied.**
        ##
        #### &#9888; Download share id (if exists) gets changed if:
        - node with the same name exists in the target container
        - **`resolutionStrategy`** is **`overwrite`**
        - **`keepShareLinks`** is **`true`**

        ### Node naming convention
        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: copyNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CopyNodesRequest'
        - description: Target parent node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Node'
        '204':
          description: No Content
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-40002] (Target) room is encrypted
            * [-40014] File cannot be copied or moved without having a file key
            * [-40755] Bad node name
            * [-41052] Rooms cannot be copied or moved
            * [-41053] File cannot be target of a copy or move operation
            * [-41054] Nodes of a copy, move or delete operation must be in same parent
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80034] `keepShareLinks` is only allowed with conflict mode `overwrite`
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-41050] Source node not found
            * [-41051] Target node not found
          schema:
            $ref: '#/definitions/NodeBatchOperationErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-40010] Container cannot be overwritten
            * [-41001] Node exists already
            * [-41304] Node cannot be copied or moved into its child node
          schema:
            $ref: '#/definitions/NodeBatchOperationErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Copy node(s)
      tags:
        - nodes
  '/v4/nodes/{node_id}/deleted_nodes':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Empty a recycle bin.

        ### Precondition:
        User has _"delete recycle bin"_ permissions in parent room.

        ### Effects:
        All files in the recycle bin are permanently removed.

        ### &#9432; Further Information:
        Actually removes the previously deleted files from the system.  
        &#9888; **This action is irreversible.**
      operationId: emptyDeletedNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Room ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Empty recycle bin
      tags:
        - nodes
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of deleted nodes in a recycle bin.

        ### Precondition:
        User can access parent room and has _"read recycle bin"_ permissions.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Only room IDs are accepted as parent ID since only rooms may have a recycle bin.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `type:eq:file:folder|name:cn:searchString_1|parentPath:cn:searchString_2`  
        Get deleted nodes where type equals (`file` **OR** `folder`) **AND** deleted node name containing `searchString_1` **AND** deleted node parent path containing `searchString 2`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`type`** | Node type filter | `eq` | Node type equals value(s).<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:folder:file` | <ul><li>`folder`</li><li>`file`</li></ul> |
        | **`name`** | Node name filter | `cn` | Node name contains value. | `search String` |
        | **`parentPath`** | Parent path filter | `cn` | Parent path contains value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        **Nodes are sorted by type first, then by sent sort string.**  
        Example:
        > `name:desc`  
        Sort by `name` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`name`** | Node name |
        | **`cntVersions`** | Number of deleted versions of this file |
        | **`firstDeletedAt`** | First deleted version |
        | **`lastDeletedAt`** | Last deleted version |
        | **`parentPath`** | Parent path of deleted node |
      operationId: getFsDeletedNodesSummary
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - description: Parent ID (can only be a room ID)
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DeletedNodeSummaryList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of deleted nodes
      tags:
        - nodes
  '/v4/nodes/{node_id}/deleted_nodes/versions':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve all deleted versions of a node.

        ### Precondition:
        User can access parent room and has _"read recycle bin"_ permissions.

        ### Effects:
        None.

        ### &#9432; Further Information:
        The node is identified by three parameters:
        * parent ID (only room IDs are accepted as parent ID since only rooms may have a recycle bin.)
        * name
        * type (file, folder).

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        Example:
        > `expireAt:desc`  
        Sort by `expireAt` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`expireAt`** | Expiration date |
        | **`accessedAt`** | Last access date |
        | **`size`** | Node size |
        | **`classification`** | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
        | **`createdAt`** | Creation date |
        | **`createdBy`** | Creator first name, last name |
        | **`updatedAt`** | Last modification date |
        | **`updatedBy`** | Last modifier first name, last name |
        | **`deletedAt`** | Deleted date |
        | **`deletedBy`** | Deleter first name, last name |
      operationId: getFsDeletedNodeVersions
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Node name
          in: query
          name: name
          required: true
          type: string
        - description: Parent ID (can only be a room ID)
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
        - allowEmptyValue: false
          description: Node type
          enum:
            - file
            - folder
          in: query
          name: type
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DeletedNodeVersionsList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get deleted versions of nodes
      tags:
        - nodes
  '/v4/nodes/{node_id}/favorite':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Unmarks a node (room, folder or file) as favorite.

        ### Precondition:
        Authenticated user is allowed to _"see"_ the node (i.e. `isBrowsable = true`).

        ### Effects:
        A node gets unmarked as favorite.

        ### &#9432; Further Information:
        None.
      operationId: unmarkFavorite
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-41301] Node is not set as favorite
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: 'Unmark a node (room, folder or file) as favorite'
      tags:
        - nodes
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Marks a node (room, folder or file) as favorite.

        ### Precondition:
        Authenticated user is allowed to _"see"_ the node (i.e. `isBrowsable = true`).

        ### Effects:
        A node gets marked as favorite.

        ### &#9432; Further Information:
        None.
      operationId: addFavorite
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: 'Mark a node (room, folder or file) as favorite'
      tags:
        - nodes
  '/v4/nodes/{node_id}/move_to':
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Moves nodes (folder, file) to another parent.

        ### Precondition:
        Authenticated user with _"read"_ and _"delete"_ permissions in the source parent and _"create"_ permissions in the target parent node.

        ### Effects:
        Nodes are moved to target parent.

        ### &#9432; Further Information:
        Nodes **MUST** be in same source parent.  
        &#9888; **Rooms **CANNOT** be moved.**
        ##
        #### &#9888; Download share id (if exists) gets changed if:
        - node with the same name exists in the target container
        - **`resolutionStrategy`** is **`overwrite`**
        - **`keepShareLinks`** is **`true`**

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: moveNodes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MoveNodesRequest'
        - description: Target parent node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '204':
          description: No Content
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-40002] (Target) room is encrypted
            * [-40014] File cannot be copied or moved without having a file key
            * [-40755] Bad node name
            * [-41052] Rooms cannot be copied or moved
            * [-41053] File cannot be target of a copy or move operation
            * [-41054] Nodes of a copy, move or delete operation must be in same parent
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80034] `keepShareLinks` is only allowed with conflict mode `overwrite`
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-41050] Source node not found
            * [-41051] Target node not found
          schema:
            $ref: '#/definitions/NodeBatchOperationErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-40010] Container cannot be overwritten
            * [-41001] Node exists already
            * [-41304] Node cannot be copied or moved into its child node
          schema:
            $ref: '#/definitions/NodeBatchOperationErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Move node(s)
      tags:
        - nodes
  '/v4/nodes/{node_id}/parents':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.10.0

        ### Functional Description:  
        Requests a list of node ancestors, sorted from root node to the node's direct parent node.

        ### Precondition:
        User is allowed to browse through the node tree until the requested node.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getNodeParents
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Node ID
          format: int64
          in: path
          name: node_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/NodeParentList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of parent nodes
      tags:
        - nodes
  /v4/provisioning/customers:
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Receive a list of customers.

        ### Precondition:
        Authentication with `X-Sds-Service-Token` required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        This list returns a maximum of **1000** entries.  

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `trialDaysLeft:le:10|userMax:le:100`  
        Get all customers with `10` trial days left **AND** user maximum **<=** `100`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`id`** | Customer ID filter | `eq` | Customer ID equals value. | `positive Integer` |
        | **`companyName`** | Company name filter | `cn` | Company name contains value. | `search String` |
        | **`customerContractType`** | Customer contract type filter | `eq` | Customer contract type equals value. | <ul><li>`demo`</li><li>`free`</li><li>`pay`</li></ul> |
        | **`trialDaysLeft`** | Left trial days filter | `ge, le` | Left trial days are greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `trialDaysLeft:ge:5`&#124;`trialDaysLeft:le:10` |
        | **`providerCustomerId`** | Provider Customer ID filter | `cn, eq` | Provider Customer ID contains / equals value. | `search String` |
        | **`quotaMax`** | Maximum quota filter | `ge, le` | Maximum quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaMax:ge:1024`&#124;`quotaMax:le:1073741824` | `positive Integer` |
        | **`quotaUsed`** | Used quota filter | `ge, le` | Used quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaUsed:ge:1024`&#124;`quotaUsed:le:1073741824` | `positive Integer` |
        | **`userMax`** | User maximum filter | `ge, le` | User maxiumum is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userMax:ge:10`&#124;`userMax:le:100` | `positive Integer` |
        | **`userUsed`** | Number of registered users filter | `ge, le` | Number of registered users is is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userUsed:ge:10`&#124;`userUsed:le:100` | `positive Integer` |
        | **`isLocked`** | Lock status filter | `eq` |  | `true or false` |
        | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`lastLoginAt`** | Last login date filter | `ge, le` | Last login date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `lastLoginAt:ge:2016-12-31`&#124;`lastLoginAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`userLogin`** | User login filter | `eq` | User login name equals value.<br>Search user all logins e.g. `basic`, `active_directory`, `radius`. | `search String` |
        | **`attributeKey`** | Customer attribute key filter | `eq`, `nex` | Customer attribute key equals value / Customer attribute does **NOT** exist at customer | `search String` |
        | **`attributeValue`** | Customer attribute value filter | `eq` | Customer attribute value equals value. | `search String` |
        | **`activationCode`** | (**`DEPRECATED`**) Activation code filter | `cn, eq` | Activation code contains / equals value. | `search String` |
        | **`lockStatus`** | (**`DEPRECATED`**) Lock status filter | `eq` |  | <ul><li>`0` - unlocked</li><li>`1` - locked</li></ul> |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        Example:
        > `companyName:desc`  
        Sort by `companyName` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`companyName`** | Company name |
        | **`customerContractType`** | Customer contract type |
        | **`trialDaysLeft`** | Number of remaining trial days (demo customers) |
        | **`providerCustomerId`** | Provider Customer ID |
        | **`quotaMax`** | Maximum quota |
        | **`quotaUsed`** | Currently used quota |
        | **`userMax`** | Maximum user number |
        | **`userUsed`** | Number of registered users |
        | **`isLocked`** | Lock status of customer |
        | **`createdAt`** | Creation date |
        | **`updatedAt`** | Last modification date |
        | **`lastLoginAt`** | Last login date of any user of this customer |
        | **`lockStatus`** | (**`DEPRECATED`**) Lock status of customer |
      operationId: getCustomers
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: Include custom customer attributes.
          in: query
          name: include_attributes
          required: false
          type: boolean
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CustomerList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-1] No tenant found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list of customers
      tags:
        - provisioning
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:
        Create a new customer.

        ### Precondition:
        Authentication with `X-Sds-Service-Token` required.  

        ### Effects:
        A new customer is created.

        ### &#9432; Further Information:
        If no company name is set, first letter of the first name separated by dot following by last name of the first administrator is used (e.g. **`J.Doe`**).  
        Max quota has to be at least `1 MB` (= `1.048.576 B`).

        ### Authentication Method Options

        | Authentication Method | Option Key | Option Value |
        | :--- | :--- | :--- |
        | **`basic`** / **`sql`** | `username` | Unique user identifier |
        | **`active_directory`** | `ad_config_id` (optional) | Active Directory configuration ID |
        |  | `username` | Active Directory username according to authentication setting `userFilter` |
        | **`radius`** | `username` | RADIUS username |
        | **`openid`** | `openid_config_id` (optional) | OpenID Connect configuration ID |
        |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |

        &#9888; If `basic` authentication is enabled, the first administrator will get `basic` authentication by default.  
        To create a first administrator without `basic` authentication it **MUST** be disabled explicitly.
      operationId: newCustomerRequest
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NewCustomerRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/NewCustomerResponse'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-10100] Invalid authentication method
            * [-10102] At least one authentication method must be enabled
            * [-10013] Not valid IETF language tag
            * [-70106] Only one authentication method allowed
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80009] Invalid email address
            * [-80015] Invalid key value list because there are duplicate keys present
            * [-80023] Input contains invalid characters
            * [-80038] Deactivation of initial password change is only allowed without notification
            * [-90002] No distinct authentication configuration
            * [-90059] No valid Active Directory configuration found
            * [-90510] Maximum quota must not be less than one MB
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP configuration not found
            * [-90059] No valid OpenID Connect IDP configuration found
            * [-90050] Active Directory configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-70560] User with provided Basic authentication login already exists
            * [-70561] User with provided Active Directory username already exists
            * [-70562] User with provided RADIUS login already exists
            * [-70563] User with provided OpenID Connect username already exists
            * [-70564] User with provided username already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create customer
      tags:
        - provisioning
  '/v4/provisioning/customers/{customer_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete a customer.

        ### Precondition:
        Authentication with `X-Sds-Service-Token` required.

        ### Effects:
        Customer is deleted.

        ### &#9432; Further Information:
        None.
      operationId: deleteCustomer
      parameters:
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete customer
      tags:
        - provisioning
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Receive details of a selected customer.

        ### Precondition:
        Authentication with `X-Sds-Service-Token` required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getCustomer
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Include custom customer attributes.
          in: query
          name: include_attributes
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Customer'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get customer
      tags:
        - provisioning
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Change selected attributes of a customer.

        ### Precondition:
        Authentication with `X-Sds-Service-Token` required.

        ### Effects:
        Update of attributes.

        ### &#9432; Further Information:
        None.
      operationId: updateCustomer
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateCustomerRequest'
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UpdateCustomerResponse'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-90111] Invalid `customerContractType` transition
            * [-90510] Maximum quota must not be less than one MB
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update customer
      tags:
        - provisioning
  '/v4/provisioning/customers/{customer_id}/customerAttributes':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.4.0

        ### Functional Description:  
        Retrieve a list of customer attributes.

        ### Precondition:
        Authentication with `X-Sds-Service-Token` required.  
        Right _"Read all customers"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Filters are case insensitive.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `key:cn:searchString_1|value:cn:searchString_2`  
        Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`key`** | Customer attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |
        | **`value`** | Customer attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `key:asc|value:desc`  
        Sort by `key` ascending **AND** by `value` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`key`** | Customer attribute key |
        | **`value`** | Customer attribute value |
      operationId: getCustomerAttributes
      parameters:
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AttributesResponse'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get customer attributes
      tags:
        - provisioning
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.4.0

        ### Functional Description:  
        Set custom customer attributes.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        Custom customer attributes gets set.

        ### &#9432; Further Information:
        Batch function.  
        All existing customer attributes will be deleted.  

        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**.
      operationId: setAllCustomerAttributes
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CustomerAttributes'
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Customer'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80015] Invalid key value list because there are duplicate keys present
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set customer attributes
      tags:
        - provisioning
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.4.0

        ### Functional Description:  
        Add or edit custom customer attributes.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        Custom customer attributes get added or edited.

        ### &#9432; Further Information:
        Batch function.  
        If an entry exists before, it will be overwritten.  

        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**.
      operationId: setCustomerAttributes
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CustomerAttributes'
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Customer'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80015] Invalid key value list because there are duplicate keys present
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Add or edit customer attributes
      tags:
        - provisioning
  '/v4/provisioning/customers/{customer_id}/customerAttributes/{key}':
    delete:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.4.0

        ### Functional Description:
        Delete a custom customer attribute.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        Custom customer attribute gets deleted.

        ### &#9432; Further Information:
        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**.
      operationId: deleteCustomerAttributes
      parameters:
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
        - description: Key
          in: path
          name: key
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70550] Attribute not found
            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete customer attributes
      tags:
        - provisioning
  '/v4/provisioning/customers/{customer_id}/users':
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Receive a list of users associated with a certain customer.

        ### Precondition:
        Authentication with `X-Sds-Service-Token` required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        ### &#9888; Except for **`login`**, **`firstName`** and  **`lastName`** - these are connected via logical disjunction (**OR**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  

        ### Example:
        > `login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`  
        Filter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`email`** | Email filter | `eq`, `cn` | Email contains value. | `search String` |
        | **`userName`** | User name filter | `eq`, `cn` | UserName contains value. | `search String` |
        | **`firstName`** | User first name filter | `cn` | User first name contains value. | `search String` |
        | **`lastName`** | User last name filter | `cn` | User last name contains value. | `search String` |
        | **`isLocked`** | User lock status filter | `eq` |  | `true or false` |
        | **`effectiveRoles`** | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq` |  | `true or false`<br>default: `false` |
        | **`createdAt`** | (**`NEW`**) Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`phone`** | (**`NEW`**) Phone filter | `eq` | Phone equals value. | `search String` |
        | **`isEncryptionEnabled`** | (**`NEW`**) Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq` |  | `true or false` |
        | **`hasRole`** | (**`NEW`**) User role filter<br>Depends on **effectiveRoles**.<br>For more Roles information please call **`GET /roles API`** | `eq` | User role  equals value. | <ul><li>`CONFIG_MANAGER` - Manage global configs</li><li>`USER_MANAGER` - Manage Users</li><li>`GROUP_MANAGER` - Manage User-Groups</li><li>`ROOM_MANAGER` - Manage top level Data Rooms</li><li>`LOG_AUDITOR` - Read logs</li><li>`NONMEMBER_VIEWER` - View users and groups when having room manage permission</li></ul> |
        | **`lockStatus`** | (**`DEPRECATED`**) User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> |
        | **`login`** | (**`DEPRECATED`**) User login filter | `cn` | User login contains value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.
        ### Example:
        > `firstName:asc|lastLoginSuccessAt:desc`  
        Sort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`userName`** | User name |
        | **`email`** | User email |
        | **`firstName`** | User first name |
        | **`lastName`** | User last name |
        | **`isLocked`** | User lock status |
        | **`lastLoginSuccessAt`** | Last successful login date |
        | **`expireAt`** | Expiration date |
        | **`createdAt`** | (**`NEW`**) Creation date |
        | **`gender`** | (**`DEPRECATED`**) Gender |
        | **`lockStatus`** | (**`DEPRECATED`**) User lock status |
        | **`login`** | (**`DEPRECATED`**) User login |
      operationId: getCustomerUsers
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Service Authentication token
          in: header
          name: X-Sds-Service-Token
          required: true
          type: string
        - description: Customer ID
          format: int64
          in: path
          name: customer_id
          required: true
          type: integer
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90103] Customer not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list of customer users
      tags:
        - provisioning
  /v4/public/branding/info:
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.6.0

        ### Functional Description:  
        Public branding information.

        ### Precondition:
        None.

        ### Effects:
        If `brandingServerBrandingId` is set, `brandingServerCustomer` is **NOT** supplied.

        ### &#9432; Further Information:
        None.
      operationId: getBrandingServerInfo
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BrandingServerInfo'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding information
      tags:
        - public
  '/v4/public/shares/downloads/{access_key}':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve the public information of a Download Share.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getPublicDownloadShare
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublicDownloadShare'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40751] File not found
            * [-50000] Download access key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get public Download Share information
      tags:
        - public
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Generate a download URL to retrieve a shared file.

        ### Precondition:
        None.

        ### Effects:
        Download URL and token are generated and returned.

        ### &#9432; Further Information:
        Use **`downloadUrl`** the download **`token`** is **`DEPRECATED`**.
      operationId: createPublicDownloadShareToken
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PublicDownloadTokenGenerateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/PublicDownloadTokenGenerateResponse'
        '400':
          description: |-
            Bad Request

            * [-50008] Client-side encryption passwords should not be sent to the server
            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-50009] Wrong password for Download Share link
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-51000] (Up-) Download Share is temporarily locked
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-50000] Download access key not found
            * [-50002] Downloads limit reached
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Generate download URL
      tags:
        - public
  '/v4/public/shares/downloads/{access_key}/{token}':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Download a file (or zip archive if target is a folder or room).

        ### Precondition:
        Valid download token.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).  
        Range requests are not allowed for zip archive download.
      operationId: getPublicFileData
      parameters:
        - description: |-
            Range
            e.g. `bytes=0-999`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Range
          required: false
          type: string
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - allowEmptyValue: false
          description: Always return `application/octet-stream` instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          type: boolean
        - allowEmptyValue: false
          description: 'Use Content-Disposition: `inline` instead of `attachment`'
          in: query
          name: inline
          required: false
          type: boolean
        - description: Download token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '206':
          description: Partial Content
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80022] Range cannot be set at ZIP download
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
            * [-50000] Download access key not found
            * [-50001] Download token not found
            * [-50002] Downloads limit reached
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '416':
          description: Range Not Satisfiable
      summary: Download file with token
      tags:
        - public
    head:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Download a file (or zip archive if target is a folder or room).

        ### Precondition:
        Valid download token.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).  
        Range requests are not allowed for zip archive download.
      operationId: getPublicFileData_1
      parameters:
        - description: |-
            Range
            e.g. `bytes=0-999`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Range
          required: false
          type: string
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - allowEmptyValue: false
          description: Always return `application/octet-stream` instead of specific mimetype
          in: query
          name: generic_mimetype
          required: false
          type: boolean
        - allowEmptyValue: false
          description: 'Use Content-Disposition: `inline` instead of `attachment`'
          in: query
          name: inline
          required: false
          type: boolean
        - description: Download token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        '200':
          description: OK
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '206':
          description: Partial Content
          schema:
            format: int32
            maximum: 127
            minimum: -128
            type: integer
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80022] Range cannot be set at ZIP download
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
            * [-50000] Download access key not found
            * [-50001] Download token not found
            * [-50002] Downloads limit reached
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '416':
          description: Range Not Satisfiable
      summary: Download file with token
      tags:
        - public
  '/v4/public/shares/uploads/{access_key}':
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Provides information about the desired Upload Share.

        ### Precondition:
        Only userUserPublicKeyList is returned to the users who owns one of the following permissions
        * *`manage`*
        * *`read`*
        * *`manageDownloadShare`*
        * *`manageUploadShare`*

        ### Effects:
        None.

        ### &#9432; Further Information:
        If no password is set, the returned information is reduced to the following attributes (if available):

        * **`name`**
        * **`maxSlots`**
        * **`createdAt`**
        * **`isProtected`**
        * **`isEncrypted`**
        * **`showUploadedFiles`**
        * **`userUserPublicKeyList`** (if parent is end-to-end encrypted)

        Only if the password is transmitted as `X-Sds-Share-Password` header, all values are returned.
      operationId: getPublicUploadShare
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Upload share password. Should be base64-encoded. Plain X-Sds-Share-Passwords are *deprecated* and will be removed in the future
          in: header
          name: X-Sds-Share-Password
          required: false
          type: string
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublicUploadShare'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-50505] No room user has a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-50502] Wrong password for Upload Share link
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-50501] Upload access key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get public Upload Share information
      tags:
        - public
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Create a new upload channel.

        ### Precondition:
        None.

        ### Effects:
        Upload channel is created and corresponding upload URL, token & upload ID are returned.

        ### &#9432; Further Information:
        Use **`uploadUrl`** the upload **`token`** is **`DEPRECATED`**.  

        Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: createShareUpload
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateShareUploadChannelRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/CreateShareUploadChannelResponse'
        '400':
          description: |-
            Bad Request

            * [-40755] Bad node name
            * [-50505] No room user has a keypair
            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80037] Exceeds maximum data length for AES GCM encryption
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-50502] Wrong password for Upload Share link
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-51000] (Up-) Download Share is temporarily locked
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-50501] Upload access key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-50504] Exceeds the quota for this Upload Share
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new file upload channel
      tags:
        - public
  '/v4/public/shares/uploads/{access_key}/{upload_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Abort (chunked) upload via Upload Share.

        ### Precondition:
        Valid Upload ID.

        ### Effects:
        Aborts upload and invalidates upload ID / token.

        ### &#9432; Further Information:
        None.
      operationId: cancelShareUpload
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-50501] Upload access key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-50504] Exceeds the quota for this Upload Share
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Cancel file upload
      tags:
        - public
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.15.0

        ### Functional Description:
        Request status of a S3 file upload.

        ### Precondition:
        An upload channel has been created.
        * User has _"create"_ permissions in the parent container (room or folder).
        * Valid upload ID.

        ### Effects:
        None.

        ### &#9432; Further Information:

        ### Possible errors:

        | Http Status | Error Code | Description |
        | :--- | :--- | :--- |
        | **`400 Bad Request`** | `-80000` | Mandatory fields cannot be empty |
        | **`400 Bad Request`** | `-80001` | Invalid positive number |
        | **`400 Bad Request`** | `-80002` | Invalid number |
        | **`400 Bad Request`** | `-40001` | (Target) room is not encrypted |
        | **`400 Bad Request`** | `-40755` | Bad file name |
        | **`400 Bad Request`** | `-40763` | File key must be set for an upload into encrypted room |
        | **`400 Bad Request`** | `-50506` | Exceeds the number of files for this Upload Share |
        | **`403 Forbidden`** |  | Access denied |
        | **`404 Not Found`** | `-20501` | Upload not found |
        | **`404 Not Found`** | `-40000` | Container not found |
        | **`404 Not Found`** | `-41000` | Node not found |
        | **`404 Not Found`** | `-70501` | User not found |
        | **`409 Conflict`** | `-40010` | Container cannot be overwritten |
        | **`409 Conflict`** |  | File cannot be overwritten |
        | **`500 Internal Server Error`** |  | System Error |
        | **`502 Bad Gateway`** |  | S3 Error |
        | **`502 Insufficient Storage`** | `-50504` | Exceeds the quota for this Upload Share |
        | **`502 Insufficient Storage`** | `-40200` | Exceeds the free node quota in room |
        | **`502 Insufficient Storage`** | `-90200` | Exceeds the free customer quota |
        | **`502 Insufficient Storage`** | `-90201` | Exceeds the free customer physical disk space |
      operationId: getUploadStatusShares
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3ShareUploadStatus'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-90034] Corresponding S3 upload ID not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: "Request status of S3 file upload \U0001F782 NEW \U0001F780"
      tags:
        - public
    post:
      consumes:
        - multipart/form-data
      deprecated: false
      description: |-
        ### Functional Description:  
        Chunked upload of files via Upload Share.

        ### Precondition:
        Valid upload ID.

        ### Effects:
        Chunk of file is uploaded.

        ### &#9432; Further Information:
        Chunked uploads (range requests) are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).

        Following `Content-Types` are supported by this API:
        * `multipart/form-data`
        * provided `Content-Type`  

        For both file upload types set the correct `Content-Type` header and body.  
        Examples:  

        * `multipart/form-data`
        ```
        POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1

        Header:
        ...
        Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
        ...

        Body:
        ------WebKitFormBoundary7MA4YWxkTrZu0gW
        Content-Disposition: form-data; name="file"; filename="file.txt"
        Content-Type: text/plain

        Content of file.txt
        ------WebKitFormBoundary7MA4YWxkTrZu0gW--
        ```

        * any other `Content-Type`  
        ```
        POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1

        Header:
        ...
        Content-Type: { ... }
        ...

        Body:
        raw content
        ```
      operationId: uploadShare
      parameters:
        - description: |-
            Content-Range
            e.g. `bytes 0-999/3980`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Content-Range
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: File
          in: formData
          name: file
          required: false
          type: file
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ChunkUploadResponse'
        '400':
          description: |-
            Bad Request

            * [-50505] No room user has a keypair
            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
            * [-80021] Incorrect upload `Content-Range`
            * [-80037] Exceeds maximum data length for AES GCM encryption
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-50501] Upload access key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-50504] Exceeds the quota for this Upload Share
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload file
      tags:
        - public
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:
        Finalize (chunked) upload via Upload Share.

        ### Precondition:
        * Valid upload ID.  

        If container is encrypted, the fileKeys can only be set for users that have permission _"manage"_, _"read"_, _"manageDownloadShare"_ or _"manageUploadShare"_.

        ### Effects:
        Finalizes upload.

        ### &#9432; Further Information:
        Chunked uploads (range requests) are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).  

        Please ensure that all chunks have been transferred correctly before finishing the upload.  
        If file hash has been created in time a `201 Created` will be responded and hash will be part of response, otherwise it will be a `202 Accepted` without it.

        ### 200 OK is NOT used by this API
      operationId: completeShareUpload
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: Mandatory for encrypted shares
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/UserFileKeyList'
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PublicUploadedFileData'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/PublicUploadedFileData'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/PublicUploadedFileData'
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-40763] File key must be set for an upload into encrypted room
            * [-50505] No room user has a keypair
            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-70020] User does not have a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40751] File not found
            * [-41000] Node not found
            * [-50501] Upload access key not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-50504] Exceeds the quota for this Upload Share
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
        '508':
          description: Loop Detected
      summary: Complete file upload
      tags:
        - public
  '/v4/public/shares/uploads/{access_key}/{upload_id}/s3':
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.15.0

        ### Functional Description:
        Finishes a S3 file upload and closes the corresponding upload channel.

        ### Precondition:
        * An upload channel has been created and data has been transmitted
        * Valid upload ID  

        If container is encrypted, the fileKeys can only be set for users that have permission _"manage"_, _"read"_, _"manageDownloadShare"_ or _"manageUploadShare"_.

        ### Effects:
        Upload channel is closed. S3 multipart upload request is completed.

        ### &#9432; Further Information:
        None.
      operationId: completeS3ShareUpload
      parameters:
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CompleteS3ShareUploadRequest'
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '202':
          description: Accepted
        '400':
          description: |-
            Bad Request

            * [-20503] Upload channel is closed
            * [-40001] (Target) room is not encrypted
            * [-40763] File key must be set for an upload into encrypted room
            * [-50505] No room user has a keypair
            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80045] Invalid Etag(s)
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40751] File not found
            * [-41000] Node not found
            * [-50501] Upload access key not found
            * [-70501] User not found
            * [-90034] Corresponding S3 upload ID not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: "Complete S3 file upload \U0001F782 NEW \U0001F780"
      tags:
        - public
  '/v4/public/shares/uploads/{access_key}/{upload_id}/s3_urls':
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.15.0

        ### Functional Description:
        Generate presigned URLs for S3 file upload.

        ### Precondition:
        Valid upload ID

        ### Effects:
        List of presigned URLs is returned.

        ### &#9432; Further Information:
        The size for each part must be >= 5 MB, except for the last part.  
        The part number of the first part in S3 is 1 (not 0).  
        Use HTTP method `PUT` for uploading bytes via presigned URL.
      operationId: generatePresignedUrlsShares
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Access key
          in: path
          name: access_key
          required: true
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GeneratePresignedUrlsRequest'
        - description: Upload channel ID
          in: path
          name: upload_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/PresignedUrlList'
        '400':
          description: |-
            Bad Request

            * [-20503] Upload channel is closed
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80046] Invalid size
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-90034] Corresponding S3 upload ID not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-90030] S3 storage disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '504':
          description: |-
            Gateway Timeout

            * [-90027] S3 connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: "Generate presigned URLs for S3 file upload \U0001F782 NEW \U0001F780"
      tags:
        - public
  /v4/public/software/third_party_dependencies:
    get:
      deprecated: false
      description: |+
        ### &#128640; Since version 4.9.0

        ### Functional Description:  
        Provides information about used third-party software dependencies.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        List of the third-party software dependencies used by **DRACOON Core** (referred to as _"Server"_):

      operationId: getThirdPartyDependencies
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/ThirdPartyDependenciesData'
            type: array
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get third-party software dependencies
      tags:
        - public
  /v4/public/software/version:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Public software version information.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        The version of DRACOON Server consists of two components:
        * **API**
        * **Core** (referred to as _"Server"_)

        that are versioned individually.
      operationId: getSoftwareVersion
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SoftwareVersionData'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get software version information
      tags:
        - public
  /v4/public/system/branding:
    get:
      deprecated: true
      description: |
        ## &#9888; Deprecated since version 4.10.0

        ### Functional Description:  
        Provides information about branding settings.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Branding settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`brandingProviderUrl`** | Access URL to to the Branding Portal | `String` |
        | **`brandingQualifier`** | Branding UUID | `String` |
      operationId: getBrandingInfo
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BrandingConfig'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get branding information
      tags:
        - public
  /v4/public/system/info:
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Provides information about system.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Authentication methods are sorted by **priority** attribute.  
        Smaller values have higher priority.  
        Authentication method with highest priority is considered as default.

        ### System information

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`languageDefault`** | Defines which language should be default.<br>cf. [RFC 5646](https://tools.ietf.org/html/rfc5646) for ISO 639-1 codes | `ISO 639-1 code` |

        ### Authentication methods

        | Authentication Method | Description |
        | :--- | :--- |
        | **`basic`** | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as **`sql`**. |
        | **`active_directory`** | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
        | **`radius`** | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
        | **`openid`** | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
        | **`hideLoginInputFields`** | Determines whether input fields for login should be enabled | `true or false` |
      operationId: getSystemInfo
      parameters:
        - allowEmptyValue: false
          description: Show only enabled authentication methods
          in: query
          name: is_enabled
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SystemInfo'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get system information
      tags:
        - public
  /v4/public/system/info/auth/ad:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Provides information about Active Directory authentication options.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getActiveDirectoryAuthInfo
      parameters:
        - allowEmptyValue: false
          description: Show only global available items
          in: query
          name: is_global_available
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ActiveDirectoryAuthInfo'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get Active Directory authentication information
      tags:
        - public
  /v4/public/system/info/auth/openid:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Provides information about OpenID Connect authentication options.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getOpenIdAuthInfo
      parameters:
        - allowEmptyValue: false
          description: Show only global available items
          in: query
          name: is_global_available
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OpenIdAuthInfo'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get OpenID Connect provider authentication information
      tags:
        - public
  /v4/public/time:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve the actual server time.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getSdsServerTime
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SdsServerTime'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get system time
      tags:
        - public
  '/v4/resources/users/{user_id}/avatar/{uuid}':
    get:
      deprecated: false
      description: |-
        ### Functional Description:
        Get user avatar.

        ### Precondition:
        Valid:
        - user ID and
        - avatar UUID

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getUserAvatar
      parameters:
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
        - description: UUID of the avatar
          in: path
          name: uuid
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Avatar'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70028] Avatar not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get user avatar
      tags:
        - resources
  /v4/roles:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of all roles with assigned rights.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getRoles
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleList'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get all roles with assigned rights
      tags:
        - roles
  '/v4/roles/{role_id}/groups':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Revoke granted group(s) from a role.

        ### Precondition:
        Right _"grant permission on desired role"_ required.  
        For each role, at least one non-expiring user **MUST** remain who may grant the role.

        ### Effects:
        One or more groups will be removed from a role.

        ### &#9432; Further Information:
        None.
      operationId: deleteRoleGroups
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Group IDs
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GroupIds'
        - description: Role ID
          format: int32
          in: path
          name: role_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleGroupList'
        '400':
          description: |-
            Bad Request

            * [-71006] At least one role user / group required
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-71001] Role not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Revoke granted role from group(s)
      tags:
        - roles
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Get all groups with a specific role.

        ### Precondition:
        Right _"read groups"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `isMember:eq:false|name:cn:searchString`  
        Get all groups that are **NOT** a member of that role **AND** whose name contains `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`isMember`** | Filter the groups which are (not) member of that role | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
        | **`name`** | Group name filter | `cn` | Group name contains value. | `search String` |
      operationId: getRoleGroups
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: Role ID
          format: int32
          in: path
          name: role_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleGroupList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-71001] Role not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get groups with specific role
      tags:
        - roles
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Assign group(s) to a role.

        ### Precondition:
        Right _"grant permission on desired role"_ required.

        ### Effects:
        One or more groups will be added to a role.

        ### &#9432; Further Information:
        None.
      operationId: addRoleGroups
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Group IDs
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GroupIds'
        - description: Role ID
          format: int32
          in: path
          name: role_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleGroupList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-71001] Role not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Assign group(s) to the role
      tags:
        - roles
  '/v4/roles/{role_id}/users':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Revoke granted user(s) from a role.

        ### Precondition:
        Right _"grant permission on desired role"_ required.  
        For each role, at least one non-expiring user **MUST** remain who may grant the role.

        ### Effects:
        One or more users will be removed from a role.

        ### &#9432; Further Information:
        None.
      operationId: deleteRoleUsers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: User IDs
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserIds'
        - description: Role ID
          format: int32
          in: path
          name: role_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleUserList'
        '400':
          description: |-
            Bad Request

            * [-71006] At least one role user / group required
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
            * [-71001] Role not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Revoke granted role from user(s)
      tags:
        - roles
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Get all users with a specific role.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `isMember:eq:false|user:cn:searchString`  
        Get all users that are **NOT** member of that role **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`user`** | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
        | **`isMember`** | Filter the users which are (not) member of that role | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
        | **`displayName`** | (**`DEPRECATED`**) User display name filter (use **`user`** filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |
      operationId: getRoleUsers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: Role ID
          format: int32
          in: path
          name: role_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleUserList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-71001] Role not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get users with specific role
      tags:
        - roles
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Assign user(s) to a role.

        ### Precondition:
        Right _"grant permission on desired role"_ required.

        ### Effects:
        One or more users will be added to a role.

        ### &#9432; Further Information:
        None.
      operationId: addRoleUsers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: User IDs
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserIds'
        - description: Role ID
          format: int32
          in: path
          name: role_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleUserList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
            * [-71001] Role not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Assign user(s) to the role
      tags:
        - roles
  /v4/settings:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve customer related settings. 

        ### Precondition:
        Right _"read config"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable customer settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`homeRoomParentName`** | Name of the container in which all user's home rooms are located.<br>`null` if **`homeRoomsActive`** is `false`. | `String` |
        | **`homeRoomQuota`** | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if **`homeRoomsActive`** is `false`. | `positive Long` |
        | **`homeRoomsActive`** | If set to `true`, every user with an Active Directory account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |
      operationId: getSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CustomerSettingsResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get customer settings
      tags:
        - settings
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Set customer related settings.

        ### Precondition:
        Right _"change config"_ required.  
        Role _"Config Manager"_.

        ### Effects:
        Home Room configuration is updated.


        ### &#9432; Further Information:
        None.

        ### Configurable customer settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`homeRoomParentName`** | Name of the container in which all user's home rooms are located.<br>`null` if **`homeRoomsActive`** is `false`. | `String` |
        | **`homeRoomQuota`** | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if **`homeRoomsActive`** is `false`. | `positive Long` |
        | **`homeRoomsActive`** | If set to `true`, every user with an Active Directory account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |

        ### Node naming convention

        * Node (room, folder, file) names are limited to **150** characters.

        * Not allowed names:  
        `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`

        * Not allowed characters in names:  
        `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
      operationId: setSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CustomerSettingsRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CustomerSettingsResponse'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * Node with specified name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Set customer settings
      tags:
        - settings
  /v4/shares/downloads:
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Retrieve a list of Download Shares.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical disjunction (**OR**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `name:cn:searchString_1|createdBy:cn:searchString_2|nodeId:eq:1`  
        Filter by file name contains `searchString_1` **OR** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2` **OR** node ID is equal to `1`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`name`** | Alias or node name filter | `cn` | Alias or node name contains value. | `search String` |
        | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`createdBy`** | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
        | **`createdById`** | (**`NEW`**) Creator ID filter | `eq` | Creator ID equals value. | `search String` |
        | **`accessKey`** | Share access key filter | `cn` | Share access key contains values. | `search String` |
        | **`nodeId`** | Source node ID | `eq` | Source node (room, folder, file) ID equals value. | `positive Integer` |
        | **`userId`** | Creator user ID | `eq` | Creator user ID equals value. | `positive Integer` |
        | **`updatedBy`** | (**`NEW`**) Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
        | **`updatedById`** | (**`NEW`**) Modifier ID filter | `eq` | Modifier ID equals value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.
        Example:
        > `name:asc|expireAt:desc`  
        Sort by `name` ascending **AND** by `expireAt` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`name`** | Alias or node name |
        | **`notifyCreator`** | Notify creator on every download |
        | **`expireAt`** | Expiration date |
        | **`createdAt`** | Creation date |
        | **`createdBy`** | Creator first name, last name |
        | **`classification`** | (**`DEPRECATED`**) Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
      operationId: getDownloadShares
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadShareList'
        '400':
          description: |-
            Bad Request

            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of Download Shares
      tags:
        - shares
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Create a new Download Share.

        ### Precondition:
        User with _"manage download share"_ permissions on target node.

        ### Effects:
        Download Share created.

        ### &#9432; Further Information:

        If the target node is a room: subordinary rooms are excluded from a Download Share.

        * **`name`** is limited to **150** characters.
        * **`notes`** are limited to **255** characters.
        * **`password`** is limited to **150** characters.

        (**`DEPRECATED`**) If **`sendMail`** is set to:  
        * `false` - **`mailRecipients`**, **`mailSubject`** and **`mailBody`** are **optional**.  
        * `true` - **`mailRecipients`**, **`mailSubject`** and **`mailBody`** are **mandatory**.

        Use `POST /shares/downloads/{share_id}/email` API for sending emails instead.
      operationId: createDownloadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateDownloadShareRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/DownloadShare'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-10013] Not valid IETF language tag
            * [-50003] Password for encrypted Download Shares not allowed
            * [-50004] Download Shares of encrypted containers not allowed
            * [-50005] File key must be set on Download Share in encrypted containers
            * [-50006] Keypair must be set on Download Share in encrypted containers
            * [-50007] Download Shares in unencrypted rooms must not have keys
            * [-70022] Invalid public key format
            * [-70023] Invalid private key format
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
            * [-80009] Invalid email address
            * [-80023] Input contains invalid characters
            * [-80024] Invalid range parameters
            * [-80030] SMS disabled
            * [-80040] Invalid phone number. Must be a FQTN (cf. E.123 / E.164 Format).
          schema:
            $ref: '#/definitions/PasswordPolicyViolationResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90090] Could not send text message via SMS
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create new Download Share
      tags:
        - shares
  '/v4/shares/downloads/{share_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete a Download Share.

        ### Precondition:
        User with _"manage download share"_ permissions on target node.

        ### Effects:
        Download Share is deleted.

        ### &#9432; Further Information:
        Only the Download Share is removed; the referenced file or container persists.
      operationId: deleteDownloadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
            * [-60000] Download Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete Download Share
      tags:
        - shares
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve detailed information about one Download Share.

        ### Precondition:
        User with _"manage download share"_ permissions on target node.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getDownloadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadShare'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-60000] Download Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get Download Share
      tags:
        - shares
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:
        Update an existing Download Share.

        ### Precondition:
        User with _"manage download share"_ permissions on target node.

        ### Effects:
        Download Share successfully updated.

        ### &#9432; Further Information:

        * **`name`** is limited to **150** characters.
        * **`notes`** are limited to **255** characters.
        * **`password`** is limited to **150** characters.
      operationId: updateDownloadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDownloadShareRequest'
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadShare'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-10013] Not valid IETF language tag
            * [-50003] Password for encrypted Download Shares not allowed
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
            * [-80023] Input contains invalid characters
            * [-80030] SMS disabled
            * [-80040] Invalid phone number. Must be a FQTN (cf. E.123 / E.164 Format).
            * [-80041] Invalid country code. Must be a valid two-letter code (cf. ISO 3166-2).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
            * [-60000] Download Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90090] Could not send text message via SMS
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update Download Share
      tags:
        - shares
  '/v4/shares/downloads/{share_id}/email':
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:
        Send an email to specific recipients for existing Download Share.

        ### Precondition:
        User with _"manage download share"_ permissions on target node.

        ### Effects:
        Download Share link successfully sent.

        ### &#9432; Further Information:
        None.
      operationId: sendDownloadShareLinkViaEmail
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DownloadShareLinkEmail'
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80009] Invalid email address
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-60000] Download Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Send an existing Download Share link via email
      tags:
        - shares
  '/v4/shares/downloads/{share_id}/qr':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve detailed information about one Download Share.

        ### Precondition:
        User with _"manage download share"_ permissions on target node.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getDownloadShareQr
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DownloadShare'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-60000] Download Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get Download Share via QR Code
      tags:
        - shares
  /v4/shares/uploads:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of Upload Shares (aka Upload Accounts).

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical disjunction (**OR**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `name:cn:searchString_1|createdBy:cn:searchString_2`  
        Filter by alias name contains `searchString_1` **OR** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`name`** | Alias name filter | `cn` | Alias name contains value. | `search String` |
        | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`createdBy`** | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
        | **`createdById`** | (**`NEW`**) Creator ID filter | `eq` | Creator ID equals value. | `search String` |
        | **`accessKey`** | Share access key filter | `cn` | Share access key contains values. | `search String` |
        | **`userId`** | Creator user ID | `eq` | Creator user ID equals value. | `positive Integer` |
        | **`targetId`** | Target node ID | <ul><li>`cn` (**`DEPRECATED`**)</li><li>`eq`</li></ul> | Target node (room, folder) ID equals value. | `positive Integer` |
        | **`updatedBy`** | (**`NEW`**) Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
        | **`updatedById`** | (**`NEW`**) Modifier ID filter | `eq` | Modifier ID equals value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.
        Example:
        > `name:asc|expireAt:desc`  
        Sort by `name` ascending **AND** by `expireAt` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`name`** | Alias name |
        | **`notifyCreator`** | Notify creator on every upload |
        | **`expireAt`** | Expiration date |
        | **`createdAt`** | Creation date |
        | **`createdBy`** | Creator first name, last name |
      operationId: getUploadShares
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UploadShareList'
        '400':
          description: |-
            Bad Request

            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of Upload Shares
      tags:
        - shares
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:
        Create a new Upload Share (aka Upload Account).

        ### Precondition:
        User has _"manage upload share"_ permissions on target container.

        ### Effects:
        Upload Share is created.

        ### &#9432; Further Information:

        * **`name`** is limited to **150** characters.
        * **`notes`** are limited to **255** characters.
        * **`password`** is limited to **150** characters.

        (**`DEPRECATED`**) If **`sendMail`** is set to:  
        * `false` - **`mailRecipients`**, **`mailSubject`** and **`mailBody`** are **optional**.  
        * `true` - **`mailRecipients`**, **`mailSubject`** and **`mailBody`** are **mandatory**.

        Use `POST /shares/uploads/{share_id}/email` API for sending emails instead.
      operationId: createUploadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateUploadShareRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/UploadShare'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-10013] Not valid IETF language tag
            * [-41200] Path is too long
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
            * [-80009] Invalid email address
            * [-80023] Input contains invalid characters
            * [-80024] Invalid range parameters
            * [-80030] SMS disabled
            * [-80040] Invalid phone number. Must be a FQTN (cf. E.123 / E.164 Format).
          schema:
            $ref: '#/definitions/PasswordPolicyViolationResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90090] Could not send text message via SMS
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create new Upload Share
      tags:
        - shares
  '/v4/shares/uploads/{share_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete an Upload Share (aka Upload Account).

        ### Precondition:
        User has _"manage upload share"_ permissions on target container.

        ### Effects:
        Upload Share is deleted.

        ### &#9432; Further Information:
        Only the Upload Share is removed; already uploaded files and the target container persist.
      operationId: deleteUploadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-60500] Upload Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete Upload Share
      tags:
        - shares
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve detailed information about one Upload Share (aka Upload Account).

        ### Precondition:
        User has _"manage upload share"_ permissions on target container.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getUploadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UploadShare'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-60500] Upload Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get Upload Share
      tags:
        - shares
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:
        Update existing Upload Share (aka Upload Account).

        ### Precondition:
        User has _"manage upload share"_ permissions on target container.

        ### Effects:
        Upload Share successfully updated.

        ### &#9432; Further Information:

        * **`name`** is limited to **150** characters.
        * **`notes`** are limited to **255** characters.
        * **`password`** is limited to **150** characters.
      operationId: updateUploadShare
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUploadShareRequest'
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UploadShare'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
            * [-80023] Input contains invalid characters
            * [-80030] SMS disabled
            * [-80040] Invalid phone number. Must be a FQTN (cf. E.123 / E.164 Format).
            * [-80041] Invalid country code. Must be a valid two-letter code (cf. ISO 3166-2).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-40000] Container not found
            * [-41000] Node not found
            * [-60500] Upload Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90090] Could not send text message via SMS
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update Upload Share
      tags:
        - shares
  '/v4/shares/uploads/{share_id}/email':
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:
        Send an email to specific recipients for existing Upload Share.

        ### Precondition:
        User with _"manage upload share"_ permissions on target container.

        ### Effects:
        Upload Share link successfully sent.

        ### &#9432; Further Information:
        None.
      operationId: sendUploadShareLinkViaEmail
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UploadShareLinkEmail'
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80009] Invalid email address
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-60500] Upload Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Send an existing Upload Share link via email
      tags:
        - shares
  '/v4/shares/uploads/{share_id}/qr':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve detailed information about one Upload Share (aka Upload Account).

        ### Precondition:
        User has _"manage upload share"_ permissions on target container.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getUploadShareQr
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: Share ID
          format: int64
          in: path
          name: share_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UploadShare'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-60500] Upload Share not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get Upload Share via QR Code
      tags:
        - shares
  /v4/syslog/audits/nodes:
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.3.0

        ### Functional Description:  
        Retrieve a list of all nodes of type `room`, and the room assignment users with permissions.

        ### Precondition:
        Right _"read audit log"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        ### &#9888; Except for **`userName`**, **`userFirstName`** and  **`userLastName`** - these are connected via logical disjunction (**OR**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  

        Example:
        > `userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`  
        Filter by user login containing `searchString_1` **OR** first name containing `searchString_2` **AND** node ID equals `2`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`nodeId`** | Node ID filter | `eq` | Node ID equals value. | `positive Integer` |
        | **`nodeName`** | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |
        | **`nodeParentId`** | Node parent ID filter | `eq` | Parent ID equals value. | `positive Integer`<br>Parent ID `0` is the root node. |
        | **`userId`** | User ID filter | `eq` | User ID equals value. | `positive Integer` |
        | **`userName`** | Username (login) filter | `cn, eq` | Username contains / equals value. | `search String` |
        | **`userFirstName`** | User first name filter | `cn, eq` | User first name contains / equals value. | `search String` |
        | **`userLastName`** | User last name filter | `cn, eq` | User last name contains / equals value. | `search String` |
        | **`permissionsManage`** | Filter the users that do (not) have `manage` permissions in this room | `eq` |  | `true or false` |
        | **`nodeIsEncrypted`** | Encrypted node filter | `eq` |  | `true or false` |
        | **`nodeHasActivitiesLog`** | Activities log filter | `eq` |  | `true or false` |
        | **`nodeHasRecycleBin`** | (**`DEPRECATED`**)<br>Recycle bin filter<br>**Filter has no effect!** | `eq` |  | `true or false` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `nodeName:asc`  
        Sort by `nodeName` ascending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`nodeId`** | Node ID |
        | **`nodeName`** | Node name |
        | **`nodeParentId`** | Node parent ID |
        | **`nodeSize`** | Node size |
        | **`nodeQuota`** | Node quota |
      operationId: getAuditNodeUserData_1
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/AuditNodeResponse'
            type: array
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get nodes assigned users with permissions
      tags:
        - syslog
  /v4/syslog/events:
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.3.0

        ### Functional Description:  
        Retrieve eventlog (audit log) events.

        ### Precondition:
        Role _"Log Auditor"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Output is limited to **500** entries.  
        For more results please use filter criteria and paging (`offset` + `limit`). 

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `time:desc`  
        Sort by `time` descending (default sort option).

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`time`** | Event timestamp |
      operationId: getSyslogEvents
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events until given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_end
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter events from given date
            e.g. `2015-12-31T23:59:00`
          in: query
          name: date_start
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Operation status:
            * `0` - Success
            * `2` - Error
          enum:
            - 0
            - 2
          format: int32
          in: query
          name: status
          required: false
          type: integer
        - allowEmptyValue: false
          description: |-
            Operation ID
            cf. `GET /eventlog/operations`
          format: int32
          in: query
          name: type
          required: false
          type: integer
        - allowEmptyValue: false
          description: User client
          in: query
          name: user_client
          required: false
          type: string
        - allowEmptyValue: false
          description: User ID
          format: int64
          in: query
          name: user_id
          required: false
          type: integer
      produces:
        - application/json
        - text/csv
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SyslogEventList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
            * [-80026] Invalid operation ID
            * [-80027] Invalid operation status
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get system events
      tags:
        - syslog
  /v4/syslog/operations:
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.3.0

        ### Functional Description:  
        Retrieve eventlog (audit log) operation IDs and the associated log operation description.

        ### Precondition:
        Role _"Log Auditor"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getLogOperations_1
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Show only deprecated operations
          in: query
          name: is_deprecated
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LogOperationList'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get allowed log operations
      tags:
        - syslog
  /v4/system/config/actions/test/ad:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Test Active Directory configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        DRACOON tries to establish a connection with the provided information.
      operationId: testAdConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TestActiveDirectoryConfigRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TestActiveDirectoryConfigResponse'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
            * [-90051] Active Directory login failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90052] Active Directory connection Failed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Test Active Directory configuration
      tags:
        - system-auth-config
  /v4/system/config/actions/test/radius:
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Test RADIUS configuration.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        DRACOON tries to establish a connection with the provided information.
      operationId: testRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
        '502':
          description: |-
            Bad Gateway

            * [-90070] RADIUS connection failed
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Test RADIUS server availability
      tags:
        - system-auth-config
  /v4/system/config/auth/ads:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of configured Active Directories.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getAdConfigs
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ActiveDirectoryConfigList'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of Active Directory configurations
      tags:
        - system-auth-config
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Create a new Active Directory configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        New Active Directory configuration created.

        ### &#9432; Further Information:
        None.
      operationId: createAdConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateActiveDirectoryConfigRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ActiveDirectoryConfig'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-90055] Invalid Active Directory configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-40000] Container not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90056] Active Directory name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create Active Directory configuration
      tags:
        - system-auth-config
  '/v4/system/config/auth/ads/{ad_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete an existing Active Directory configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        Active Directory configuration removed.

        ### &#9432; Further Information:
        None.
      operationId: deleteAdConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Active Directory ID
          format: int32
          in: path
          name: ad_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90050] Active Directory configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90058] Cannot delete Active Directory configuration with active users
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete Active Directory configuration
      tags:
        - system-auth-config
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve the configuration of an Active Directory.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getAuthAdSetting
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Active Directory ID
          format: int32
          in: path
          name: ad_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ActiveDirectoryConfig'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90050] Active Directory configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get Active Directory configuration
      tags:
        - system-auth-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Update an existing Active Directory configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        Active Directory configuration updated.

        ### &#9432; Further Information:
        None.
      operationId: updateAuthAdSetting
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Active Directory ID
          format: int32
          in: path
          name: ad_id
          required: true
          type: integer
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateActiveDirectoryConfigRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ActiveDirectoryConfig'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-90055] Invalid Active Directory configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-40000] Container not found
            * [-90050] Active Directory configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90056] Active Directory name already exists
            * [-90063] Cannot activate user import due to active users at other customers
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update Active Directory configuration
      tags:
        - system-auth-config
  /v4/system/config/auth/openid/idps:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of configured OpenID Connect IDPs.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getOpenIdIdpConfigs
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/OpenIdIdpConfig'
            type: array
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of OpenID Connect IDP configurations
      tags:
        - system-auth-config
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Create new OpenID Connect IDP configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        New OpenID Connect IDP configuration is created.

        ### &#9432; Further Information:
        See [http://openid.net/developers/specs](http://openid.net/developers/specs) for further information.
      operationId: createOpenIdIdpConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateOpenIdIdpConfigRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/OpenIdIdpConfig'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80010] Invalid URL
            * [-80032] Invalid URI
            * [-90086] Invalid PKCE code challenge method
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90036] OpenID Connect IDP configuration with same name already exists
            * [-90037] OpenID Connect IDP configuration with same issuer already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create OpenID Connect IDP configuration
      tags:
        - system-auth-config
  '/v4/system/config/auth/openid/idps/{idp_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete an existing OpenID Connect IDP configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        OpenID Connect IDP configuration removed.

        ### &#9432; Further Information:
        None.
      operationId: deleteOpenIdIdpConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: OpenID Connect IDP configuration ID
          format: int32
          in: path
          name: idp_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90038] Cannot delete OpenID Connect IDP configuration with active users
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete OpenID Connect IDP configuration
      tags:
        - system-auth-config
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve an OpenID Connect IDP configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getOpenIdIdpConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: OpenID Connect IDP configuration ID
          format: int32
          in: path
          name: idp_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OpenIdIdpConfig'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get OpenID Connect IDP configuration
      tags:
        - system-auth-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Update an existing OpenID Connect IDP configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        OpenID Connect IDP configuration is updated.

        ### &#9432; Further Information:
        See [http://openid.net/developers/specs](http://openid.net/developers/specs) for further information.
      operationId: updateOpenIdIdpConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateOpenIdIdpConfigRequest'
        - description: OpenID Connect IDP configuration ID
          format: int32
          in: path
          name: idp_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OpenIdIdpConfig'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80010] Invalid URL
            * [-80032] Invalid URI
            * [-90086] Invalid PKCE code challenge method
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-30000] Group not found
            * [-90035] OpenID Connect IDP configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90036] OpenID Connect IDP configuration with same name already exists
            * [-90037] OpenID Connect IDP configuration with same issuer already exists
            * [-90063] Cannot activate user import due to active users at other customers
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update OpenID Connect IDP configuration
      tags:
        - system-auth-config
  /v4/system/config/auth/radius:
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Delete existing RADIUS configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        RADIUS configuration is deleted.

        ### &#9432; Further Information:
        None.
      operationId: DeteteRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete RADIUS configuration
      tags:
        - system-auth-config
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a RADIUS configuration.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: GetRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RadiusConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get RADIUS configuration
      tags:
        - system-auth-config
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Create new RADIUS configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        New RADIUS configuration is created.

        ### &#9432; Further Information:
        None.
      operationId: create
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RadiusConfigCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/RadiusConfig'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80007] Maximum allowed length is exceeded
            * [-80014] Invalid hostname or IP address
            * [-80033] Invalid port number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90073] RADIUS configuration already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create RADIUS configuration
      tags:
        - system-auth-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Update existing RADIUS configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        RADIUS configuration is updated.

        ### &#9432; Further Information:
        None.
      operationId: UpdateRadiusConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RadiusConfigUpdateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RadiusConfig'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80007] Maximum allowed length is exceeded
            * [-80014] Invalid hostname or IP address
            * [-80033] Invalid port number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90072] RADIUS configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update RADIUS configuration
      tags:
        - system-auth-config
  /v4/system/config/oauth/clients:
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Retrieve a list of configured OAuth clients.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `isStandard:eq:true`  
        Get standard OAuth clients.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`isStandard`** | Standard client filter | `eq` |  | `true or false` |
        | **`isEnabled`** | (**`NEW`**) Enabled/disabled clients filter | `eq` |  | `true or false` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        Example:
        > `clientName:desc`  
        Sort by `clientName` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`clientName`** | Client name |
        | **`isStandard`** | (**`NEW`**) Is a standard client |
        | **`isEnabled`** | (**`NEW`**) Is a enabled client |
      operationId: getOAuthClients
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/OAuthClient'
            type: array
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of OAuth clients
      tags:
        - system-auth-config
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Create a new OAuth client.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        New OAuth client created.

        ### &#9432; Further Information:  
        Client secret **MUST** have:  
        * at least 12 characters, at most 32 characters  
        * only lower case characters, upper case characters and digits  
        * at least 1 lower case character, 1 upper case character and 1 digit  

        The client secret is optional and will be generated if it is left empty.  

        Valid grant types are:  
        * **authorization_code**  
        * **implicit**  
        * **password**  
        * **client_credentials**  
        * **refresh_token**  

        Grant type `client_credentials` is currently **NOT** permitted!

        If grant types **authorization_code** or **implicit** are used, a
        redirect URI **MUST** be provided!

        Default access token validity: **8 hours**  
        Default refresh token validity: **30 days**
      operationId: createOAuthClient
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateOAuthClientRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/OAuthClient'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80023] Input contains invalid characters
            * [-80032] Invalid URI
            * [-90083] Invalid OAuth grant type
            * [-90085] Invalid OAuth token validity
            * [-90091] OAuth grant type 'refresh_token' can only be used in combination with 'authorization_code' or 'password'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90081] OAuth client ID already exists
            * [-90087] OAuth client name already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create OAuth client
      tags:
        - system-auth-config
  '/v4/system/config/oauth/clients/{client_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete an existing OAuth client.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        OAuth client removed.

        ### &#9432; Further Information:
        None.
      operationId: deleteOAuthClient
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-90088] OAuth standard client cannot be changed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90080] OAuth client not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete OAuth client
      tags:
        - system-auth-config
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve the configuration of an OAuth client.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getOAuthClient
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OAuthClient'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90080] OAuth client not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get OAuth client
      tags:
        - system-auth-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Update an existing OAuth client.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        OAuth client updated.

        ### &#9432; Further Information:  
        Client secret **MUST** have:  
        * at least 12 characters, at most 32 characters  
        * only lower case characters, upper case characters and digits  
        * at least 1 lower case character, 1 upper case character and 1 digit  

        The client secret is optional and will be generated if it is left empty.  

        Valid grant types are:  
        * **authorization_code**  
        * **implicit**  
        * **password**  
        * **client_credentials**  
        * **refresh_token**  

        Grant type `client_credentials` is currently **NOT** permitted!

        If grant types **authorization_code** or **implicit** are used, a
        redirect URI **MUST** be provided!
      operationId: updateOAuthClient
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateOAuthClientRequest'
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OAuthClient'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80032] Invalid URI
            * [-90083] Invalid OAuth grant type
            * [-90085] Invalid OAuth token validity
            * [-90087] OAuth client name already exists
            * [-90091] OAuth grant type 'refresh_token' can only be used in combination with 'authorization_code' or 'password'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-90088] OAuth standard client cannot be changed
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90080] OAuth client not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update OAuth client
      tags:
        - system-auth-config
  /v4/system/config/policies/passwords:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.14.0

        ### Functional Description:  
        Retrieve a list of configured password policies for all password types:  
        * `login`
        * `shares`
        * `encryption`

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### Further Information:

        ### Available password policies

        | Name | Description | Value | Password Type |
        | :--- | :--- | :--- | :--- |
        | **`mustContainCharacters`** | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % & ' ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfCharacteristicsToEnforce`** | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`minLength`** | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectDictionaryWords`** | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |
        | **`rejectUserInfo`** | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectKeyboardPatterns`** | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfArchivedPasswords`** | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |
        | **`passwordExpiration.enabled`** | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |
        | **`maxPasswordAge`** | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |
        | **`userLockout.enabled`** | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |
        | **`maxNumberOfLoginFailures`** | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |
        | **`lockoutPeriod`** | Amount of **minutes** a user has to wait to make another login attempt<br>after **`maxNumberOfLoginFailures`** has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |
      operationId: getPasswordPoliciesConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PasswordPoliciesConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get password policies
      tags:
        - system-policies-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.14.0

        ### Functional Description:  
        Change current password policies for any password types:  
        * `login`
        * `shares`
        * `encryption`

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        Password policies get changed.

        ### Further Information:

        ### Available password policies

        | Name | Description | Value | Recommended Value | Password Type |
        | :--- | :--- | :--- | :--- | :--- |
        | **`mustContainCharacters`** | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % & ' ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li><li>`all` - combination of `uppercase`, `lowercase`, `numeric` and `special`</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li><li>`all`</li></ul> | <ul><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li></ul>  | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfCharacteristicsToEnforce`** | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4`<br><br>default:<ul><li>`none` - `0`</li><li>`all` - `4`</li><li>otherwise - amount of distinct values<br>cf. **`mustContainCharacters`** matrix</li></ul> | `3` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`minLength`** | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`: `12`</li><li>`shares`: `12`</li><li>`encryption`: `14`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectDictionaryWords`** | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li></ul> |
        | **`rejectUserInfo`** | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectKeyboardPatterns`** | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfArchivedPasswords`** | Number of passwords to archive. | `Integer between 0 and 10`<br>Set `0` to disable password history. | `3` | <ul><li>`login`</li></ul> |
        | **`passwordExpiration.enabled`** | Determines whether password expiration is enabled.<br>Password expiration policy can only be enabled in context with **`enforceLoginPasswordChange`**. | `true or false` | `false` | <ul><li>`login`</li></ul> |
        | **`maxPasswordAge`** | Maximum allowed password age (in **days**) | `positive Integer` |  | <ul><li>`login`</li></ul> |
        | **`userLockout.enabled`** | Determines whether user lockout is enabled. | `true or false` | `true` | <ul><li>`login`</li></ul> |
        | **`maxNumberOfLoginFailures`** | Maximum allowed number of failed login attempts. | `positive Integer` | `5` | <ul><li>`login`</li></ul> |
        | **`lockoutPeriod`** | Amount of **minutes** a user has to wait to make another login attempt<br>after **`maxNumberOfLoginFailures`** has been exceeded. | `positive Integer` | `10` | <ul><li>`login`</li></ul> |
        | **`enforceLoginPasswordChange`** | Determines whether a login password change should be enforced for all users.<br>Only takes effect, if login password policies get stricter. | `true or false`<br>default: `false` |  | <ul><li>`login`</li></ul> |

        ---

        ### **`mustContainCharacters`** matrix

        |  | `alpha` | `uppercase` | `lowercase` | `numeric` | `special` | `all` | `none` |
        | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
        | **`alpha`** | `alpha` | `uppercase` | `lowercase` | `alpha`<br>`numeric` | `alpha`<br>`special` | `all` | `none` |
        | **`uppercase`** | `uppercase` | `uppercase` | `uppercase`<br>`lowercase` | `uppercase`<br>`numeric` | `uppercase`<br>`special` | `all` | `none` |
        | **`lowercase`** | `lowercase` | `uppercase`<br>`lowercase` | `lowercase` | `lowercase`<br>`numeric` | `lowercase`<br>`special` | `all` | `none` |
        | **`numeric`** | `alpha`<br>`numeric` | `uppercase`<br>`numeric` | `lowercase`<br>`numeric` | `numeric` | `numeric`<br>`special` | `all` | `none` |
        | **`special`** | `alpha`<br>`special` | `uppercase`<br>`special` | `lowercase`<br>`special` | `numeric`<br>`special` | `special` | `all` | `none` |
        | **`all`** | `all` | `all` | `all` | `all` | `all` | `all` | `none` |
        | **`none`** | `none` | `none` |  `none` | `none` | `none` | `none` | `none` |
      operationId: changePasswordPoliciesConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePasswordPoliciesConfig'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PasswordPoliciesConfig'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80005] Invalid boolean value
            * [-90001] Invalid settings configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change password policies
      tags:
        - system-policies-config
  '/v4/system/config/policies/passwords/{password_type}':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.14.0

        ### Functional Description:  
        Retrieve a list of configured password policies for a certain password type:  
        * `login`
        * `shares`
        * `encryption`

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### Further Information:

        ### Available password policies

        | Name | Description | Value | Password Type |
        | :--- | :--- | :--- | :--- |
        | **`mustContainCharacters`** | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % & ' ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfCharacteristicsToEnforce`** | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`minLength`** | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectDictionaryWords`** | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `api.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |
        | **`rejectUserInfo`** | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`rejectKeyboardPatterns`** | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
        | **`numberOfArchivedPasswords`** | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |
        | **`passwordExpiration.enabled`** | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |
        | **`maxPasswordAge`** | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |
        | **`userLockout.enabled`** | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |
        | **`maxNumberOfLoginFailures`** | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |
        | **`lockoutPeriod`** | Amount of **minutes** a user has to wait to make another login attempt<br>after **`maxNumberOfLoginFailures`** has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |
      operationId: getPasswordPoliciesForPasswordType
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: |-
            Password type:
            * `login`
            * `shares`
            * `encryption`
          enum:
            - login
            - shares
            - encryption
          in: path
          name: password_type
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PasswordPoliciesConfig'
        '400':
          description: |-
            Bad Request

            * [-80036] Invalid password type
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get password policies for a certain password type
      tags:
        - system-policies-config
  /v4/system/config/settings/auth:
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON authentication configuration entry point.  
        Returns a list of configurable authentication methods.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Authentication methods are sorted by priority attribute.  
        Smaller values have higher priority.  
        Authentication method with highest priority is considered as default.  
        Priority **MUST** be a positive value.

        ### Configurable authentication settings

        | Authentication Method | Description |
        | :--- | :--- |
        | **`basic`** | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as **`sql`**. |
        | **`active_directory`** | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
        | **`radius`** | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
        | **`openid`** | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
      operationId: getAuthConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get authentication settings
      tags:
        - system-settings-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON authentication configuration entry point.  
        Change configurable authentication settings.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        One or more authentication methods gets changed.

        ### &#9432; Further Information:
        Authentication methods are sorted by priority attribute.  
        Smaller values have higher priority.  
        Authentication method with highest priority is considered as default.  
        Priority **MUST** be a positive value.

        ### Configurable authentication settings

        | Authentication Method | Description |
        | :--- | :--- |
        | **`basic`** | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as **`sql`**. |
        | **`active_directory`** | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
        | **`radius`** | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
        | **`openid`** | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
      operationId: updateAuthConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AuthConfig'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthConfig'
        '400':
          description: |-
            Bad Request

            * [-10100] Invalid authentication method
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-10102] At least one authentication method must be enabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change authentication settings
      tags:
        - system-settings-config
  /v4/system/config/settings/branding:
    get:
      deprecated: true
      description: |
        ## &#9888; Deprecated since version 4.10.0

        ### Functional Description:  
        DRACOON branding configuration entry point.  
        Returns a list of configurable branding settings.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable branding settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`brandingProviderUrl`** | Access URL to to the Branding Portal | `String` |
        | **`brandingQualifier`** | Branding UUID | `String` |
      operationId: getBrandingConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BrandingConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get branding settings
      tags:
        - system-settings-config
    put:
      consumes:
        - application/json
      deprecated: true
      description: |
        ## &#9888; Deprecated since version 4.10.0

        ### Functional Description:  
        DRACOON branding configuration entry point.  
        Change configurable branding settings.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        One or more branding settings gets changed.

        ### &#9432; Further Information:
        None.

        ### Configurable branding settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`brandingProviderUrl`** | Access URL to to the Branding Portal | `String` |
        | **`brandingQualifier`** | Branding UUID | `String` |
        | **`resetBrandingProviderUrl`** | Set `true` to reset **`brandingProviderUrl`** | `true or false` |
        | **`resetBrandingQualifier`** | Set `true` to reset **`brandingQualifier`** | `true or false` |
      operationId: updateBrandingConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateBrandingConfig'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BrandingConfig'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80010] Invalid URL
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change branding settings
      tags:
        - system-settings-config
  /v4/system/config/settings/defaults:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON system defaults configuration entry point.  
        Returns a list of configurable system default values.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable default values

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`languageDefault`** | Defines which language should be default.<br>cf. [RFC 5646](https://tools.ietf.org/html/rfc5646) for ISO 639-1 codes | `ISO 639-1 code` |
        | **`downloadShareDefaultExpirationPeriod`** | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |
        | **`uploadShareDefaultExpirationPeriod`** | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |
        | **`fileDefaultExpirationPeriod`** | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |
        | **`nonmemberViewerDefault`** | Defines if new users get the role NONMEMBER_VIEWER by default | `true or false` |
      operationId: getSystemDefaults
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SystemDefaults'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get system defaults
      tags:
        - system-settings-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON system defaults configuration entry point.  
        Change configurable system default values.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        One or more system default values gets changed.

        ### &#9432; Further Information:
        None.

        ### Configurable default values

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`languageDefault`** | Defines which language should be default.<br>cf. [RFC 5646](https://tools.ietf.org/html/rfc5646) for ISO 639-1 codes | `ISO 639-1 code` |
        | **`downloadShareDefaultExpirationPeriod`** | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |
        | **`uploadShareDefaultExpirationPeriod`** | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |
        | **`fileDefaultExpirationPeriod`** | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |
        | **`nonmemberViewerDefault`** | Defines if new users get the role NONMEMBER_VIEWER by default | `true or false` |
      operationId: updateSystemDefaults
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateSystemDefaults'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SystemDefaults'
        '400':
          description: |-
            Bad Request

            * [-10013] Not valid IETF language tag
            * [-80005] Invalid boolean value
            * [-80018] Not between 0 and 9999
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change system defaults
      tags:
        - system-settings-config
  /v4/system/config/settings/eventlog:
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON eventlog configuration entry point.  
        Returns a list of configurable eventlog settings.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable eventlog settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`enabled`** | Determines whether eventlog is enabled. | `true or false` |
        | **`retentionPeriod`** | Retention period (in _days_) of eventlog entries.<br>After that period, all entries are deleted. | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted |
        | **`logIpEnabled`** | Determines whether user’s IP address is logged. | `true or false` |
      operationId: getEventlogConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EventlogConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get eventlog settings
      tags:
        - system-settings-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON eventlog configuration entry point.  
        Change configurable eventlog settings.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        One or more eventlog settings gets changed.

        ### &#9432; Further Information:
        None.

        ### Configurable eventlog settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`enabled`** | Determines whether eventlog is enabled. | `true or false` |
        | **`retentionPeriod`** | Retention period (in _days_) of eventlog entries.<br>After that period, all entries are deleted. | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: 7 |
        | **`logIpEnabled`** | Determines whether user’s IP address is logged. | `true or false` |
      operationId: updateEventlogConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateEventlogConfig'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/EventlogConfig'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
            * [-80018] Not between 0 and 9999
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change eventlog settings
      tags:
        - system-settings-config
  /v4/system/config/settings/general:
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON general settings configuration entry point.  
        Returns a list of configurable general settings.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable general settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`sharePasswordSmsEnabled`** | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
        | **`cryptoEnabled`** | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
        | **`emailNotificationButtonEnabled`** | Determines whether email notification button is enabled. | `true or false` |
        | **`eulaEnabled`** | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |
        | **`useS3Storage`** | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
        | **`s3TagsEnabled`** | Determines whether S3 tags are enabled | `true or false` |
        | **`hideLoginInputFields`** | Determines whether input fields for login should be enabled | `true or false` |
        | **`authTokenRestrictions`** | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |
        | **`mediaServerEnabled`** **(`DEPRECATED`)** | Determines whether media server is enabled.<br>Returns boolean value dependent on conjunction of **`mediaServerConfigEnabled`** AND **`mediaServerEnabled`** | `true or false` |
        | **`weakPasswordEnabled`** **(`DEPRECATED`)** | Determines whether weak password (cf. _Password Policy_) is allowed.<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |

        ---

        ### `DEPRECATED` Password Policy

        * A weak password has to fulfill the following criteria:  
            * is at least 8 characters long  
            * contains letters and numbers
        * A strong password has to fulfill the following criteria in addition:  
            * contains at least one special character  
            * contains upper and lower case characters

        ---

        ### Auth Token Restrictions

        Auth token restrictions are enabled by default.

        * Default access token validity: **2 hours**  
        * Default refresh token validity: **30 days**
      operationId: getGeneralSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GeneralSettings'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get general settings
      tags:
        - system-settings-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON general settings configuration entry point.  
        Change configurable general settings.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        One or more general settings gets changed.

        ### &#9432; Further Information:
        None.

        ### Configurable general settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`sharePasswordSmsEnabled`** | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
        | **`cryptoEnabled`** | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
        | **`emailNotificationButtonEnabled`** | Determines whether email notification button is enabled. | `true or false` |
        | **`eulaEnabled`** | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |
        | **`s3TagsEnabled`** | Determines whether S3 tags are enabled | `true or false` |
        | **`hideLoginInputFields`** | Determines whether input fields for login should be enabled | `true or false` |
        | **`authTokenRestrictions`** | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |
        | **`mediaServerEnabled`** **(`DEPRECATED`)** | Determines whether media server is enabled.<br>**CANNOT** be enabled if media server configuration is disabled in `api.properties`.<br>Check **`mediaServerConfigEnabled`** with `GET /system/config/settings/infrastructure`. | `true or false` |
        | **`weakPasswordEnabled`** **(`DEPRECATED`)** | Determines whether weak password (cf. _Password Policy_) is allowed.<br>Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |

        ---

        ### `DEPRECATED` Password Policy

        * A weak password has to fulfill the following criteria:  
            * is at least 8 characters long  
            * contains letters and numbers
        * A strong password has to fulfill the following criteria in addition:  
            * contains at least one special character  
            * contains upper and lower case characters

        ---

        ### Auth Token Restrictions
            
        Auth token restrictions are enabled by default.
            
        * Default access token validity: **2 hours**  
        * Default refresh token validity: **30 days**
      operationId: updateGeneralSettings
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateGeneralSettings'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/GeneralSettings'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
            * [-90010] Client-side encryption is already enable and cannot be disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-90001] Invalid settings configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90026] S3 configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change general settings
      tags:
        - system-settings-config
  /v4/system/config/settings/infrastructure:
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON infrastructure properties entry point.  
        Returns a list of read-only infrastructure properties.  

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Source: `api.properties`

        ### Read-only infrastructure properties

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`smsConfigEnabled`** | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |
        | **`mediaServerConfigEnabled`** | Determines whether media server is **system-wide** enabled. | `true or false` |
        | **`s3DefaultRegion`** | Suggested S3 region | `Region name` |
        | **`s3EnforceDirectUpload`** | Enforce direct upload to S3 | `true or false` |
      operationId: getInfrastructureProperties
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InfrastructureProperties'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get infrastructure properties
      tags:
        - system-settings-config
  /v4/system/config/settings/mail_server:
    get:
      deprecated: true
      description: |
        ## &#9888; Deprecated since version 4.11.0

        ### Functional Description:  
        DRACOON email server configuration entry point.  
        Returns a list of configurable email server settings.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable email server settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`host`** | Email server host | `DNS name or IPv4 of an email server` |
        | **`port`** | Email server port | `Valid port number` |
        | **`username`** | Username for email server | `Username for authentication` |
        | **`passwordDefined`** | Determines whether _password_ is defined for email server. | `true or false` |
        | **`authenticationEnabled`** | Determines whether email server requires _authentication_. | `true or false` |
        | **`sslEnabled`** | Determines whether email server requires _SSL_ connection.<br>Requires **`starttlsEnabled`** to be `false`. | `true or false ` |
        | **`starttlsEnabled`** | Determines whether email server requires _StartTLS_ connection.<br>Requires **`sslEnabled`** to be `false`. | `true or false` |
      operationId: getMailServerConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MailServerConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get mail server settings
      tags:
        - system-settings-config
    put:
      consumes:
        - application/json
      deprecated: true
      description: |
        ## &#9888; Deprecated since version 4.11.0

        ### Functional Description:  
        DRACOON email server configuration entry point.  
        Change configurable email server settings.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        One or more email server settings gets changed.

        ### &#9432; Further Information:
        None.

        ### Configurable email server settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`host`** | Email server host | `DNS name or IPv4 of an email server` |
        | **`port`** | Email server port | `Valid port number` |
        | **`username`** | Username for email server | `Username for authentication` |
        | **`password`** | Password for email server | `String` |
        | **`authenticationEnabled`** | Determines whether email server requires _authentication_. | `true or false` |
        | **`sslEnabled`** | Determines whether email server requires _SSL_ connection.<br>Requires **`starttlsEnabled`** to be `false`. | `true or false ` |
        | **`starttlsEnabled`** | Determines whether email server requires _StartTLS_ connection.<br>Requires **`sslEnabled`** to be `false`. | `true or false` |
        | **`resetUsername`** | Set `true` to reset email server **`username`** | `true or false` |
        | **`resetPassword`** | Set `true` to reset email server **`password`** | `true or false` |
      operationId: updateMailServerConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateMailServerConfig'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MailServerConfig'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-80014] Invalid hostname or IP address
            * [-80033] Invalid port number
            * [-90001] Invalid settings configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change mail server settings
      tags:
        - system-settings-config
  /v4/system/config/settings/syslog:
    get:
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON syslog configuration entry point.  
        Returns a list of configurable syslog settings.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Configurable syslog settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`enabled`** | Determines whether syslog is enabled. | `true or false` |
        | **`host`** | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |
        | **`port`** | Syslog server port | `Valid port number` |
        | **`protocol`** | Protocol to connect to syslog server | `TCP or UDP` |
        | **`logIpEnabled`** | Determines whether user’s IP address is logged. | `true or false` |
      operationId: getSyslogConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SyslogConfig'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get syslog settings
      tags:
        - system-settings-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### &#128640; Since version 4.6.0

        ### Functional Description:  
        DRACOON syslog configuration entry point.  
        Change configurable syslog settings.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        One or more syslog settings gets changed.

        ### &#9432; Further Information:
        None.

        ### Configurable syslog settings

        | Setting | Description | Value |
        | :--- | :--- | :--- |
        | **`enabled`** | Set `true` to enable syslog. | `true or false` |
        | **`host`** | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |
        | **`port`** | Syslog server port | `Valid port number` |
        | **`protocol`** | Protocol to connect to syslog server | `TCP or UDP` |
        | **`logIpEnabled`** | Determines whether user’s IP address is logged. | `true or false` |
      operationId: updateSyslogConfig
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateSyslogConfig'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SyslogConfig'
        '400':
          description: |-
            Bad Request

            * [-80005] Invalid boolean value
            * [-80012] Not allowed protocol
            * [-80014] Invalid hostname or IP address
            * [-80033] Invalid port number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change syslog settings
      tags:
        - system-settings-config
  /v4/system/config/storage/s3:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.3.0

        ### Functional Description:  
        Retrieve S3 configuration.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getS3Config
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3Config'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90026] S3 configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get S3 storage configuration
      tags:
        - system-storage-config
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.3.0

        ### Functional Description:  
        Create new S3 configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        New S3 configuration is created.

        ### &#9432; Further Information:
        None.
      operationId: createS3Config
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/S3ConfigCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/S3Config'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80010] Invalid URL
            * [-90001] Invalid settings configuration
            * [-90025] S3 configuration already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create S3 storage configuration
      tags:
        - system-storage-config
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.3.0

        ### Functional Description:  
        Update existing S3 configuration.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        S3 configuration is updated.

        ### &#9432; Further Information:
        None.
      operationId: updateS3Config
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/S3ConfigUpdateRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3Config'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80010] Invalid URL
            * [-90001] Invalid settings configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90026] S3 configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update S3 storage configuration
      tags:
        - system-storage-config
  /v4/system/config/storage/s3/tags:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.9.0

        ### Functional Description:  
        Retrieve all configured S3 tags.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        An empty list is returned if no S3 tags are found / configured.
      operationId: getS3TagList
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3TagList'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
            * [-90030] S3 storage disabled
            * [-90032] S3 tags are disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of configured S3 tags
      tags:
        - system-storage-config
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.9.0

        ### Functional Description:  
        Create new S3 tag.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        New S3 tag is created.

        ### &#9432; Further Information:
        * Maximum key length: **128** characters.  
        * Maximum value length: **256** characters.  
        * Both S3 tag key and value are **case-sensitive** strings.  
        * Maximum of **20 mandatory S3 tags** is allowed.
      operationId: createS3Tag
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/S3TagCreateRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/S3Tag'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80005] Invalid boolean value
            * [-80007] Maximum allowed length is exceeded
            * [-90031] Limit of mandatory S3 tags has been reached
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-90028] S3 tag already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
            * [-90030] S3 storage disabled
            * [-90032] S3 tags are disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create S3 tag
      tags:
        - system-storage-config
  '/v4/system/config/storage/s3/tags/{id}':
    delete:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.9.0

        ### Functional Description:  
        Delete S3 tag.

        ### Precondition:
        Right _"change global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        S3 tag gets deleted.

        ### &#9432; Further Information:
        None.
      operationId: deleteS3Tag
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: S3 tag ID
          format: int64
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90029] S3 tag not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
            * [-90030] S3 storage disabled
            * [-90032] S3 tags are disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete S3 tag
      tags:
        - system-storage-config
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.9.0

        ### Functional Description:  
        Retrieve single S3 tag.

        ### Precondition:
        Right _"read global config"_ required.  
        Role _Config Manager_ of the Provider Customer.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getS3Tag
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: S3 tag ID
          format: int64
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/S3Tag'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90029] S3 tag not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
            * [-90030] S3 storage disabled
            * [-90032] S3 tags are disabled
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get S3 tag
      tags:
        - system-storage-config
  '/v4/uploads/{token}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Cancel file upload.

        ### Precondition:
        Valid upload token.

        ### Effects:
        Upload canceled, token invalidated and all already transfered chunks removed.

        ### &#9432; Further Information:
        It is recommended to notify the API about cancelled uploads if possible.
      operationId: cancelFileUploadByToken
      parameters:
        - description: Upload token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
            * [-90033] S3 direct upload is enforced
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-20502] Invalid (up-) download token
            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-50501] Upload access key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-50504] Exceeds the quota for this Upload Share
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Cancel file upload
      tags:
        - uploads
    post:
      consumes:
        - multipart/form-data
      deprecated: false
      description: |
        ### Functional Description:  
        Upload a (chunk of a) file.

        ### Precondition:
        Valid upload token.

        ### Effects:
        Chunk uploaded.

        ### &#9432; Further Information:
        Range requests are supported (please cf. [RFC 7233](https://tools.ietf.org/html/rfc7233) for details).  

        Following `Content-Types` are supported by this API:
        * `multipart/form-data`
        * provided `Content-Type`

        For both file upload types set the correct `Content-Type` header and body.  
        Examples:  

        * `multipart/form-data`
        ```
        POST /api/v4/uploads/{token} HTTP/1.1

        Header:
        ...
        Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
        ...

        Body:
        ------WebKitFormBoundary7MA4YWxkTrZu0gW
        Content-Disposition: form-data; name="file"; filename="file.txt"
        Content-Type: text/plain

        Content of file.txt
        ------WebKitFormBoundary7MA4YWxkTrZu0gW--
        ```

        * any other `Content-Type` 
        ```
        POST /api/v4/uploads/{token} HTTP/1.1

        Header:
        ...
        Content-Type: { ... }
        ...

        Body:
        raw content
        ```
      operationId: uploadFileByToken
      parameters:
        - description: |-
            Content-Range
            e.g. `bytes 0-999/3980`
            cf. [RFC 7233](https://tools.ietf.org/html/rfc7233)
          in: header
          name: Content-Range
          required: false
          type: string
        - description: File
          in: formData
          name: file
          required: true
          type: file
        - description: Upload token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ChunkUploadResponse'
        '400':
          description: |-
            Bad Request

            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
            * [-80021] Incorrect upload `Content-Range`
            * [-80037] Exceeds maximum data length for AES GCM encryption
            * [-90033] S3 direct upload is enforced
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-20502] Invalid (up-) download token
            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-41000] Node not found
            * [-50501] Upload access key not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-50504] Exceeds the quota for this Upload Share
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upload file
      tags:
        - uploads
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Finish uploading a file.

        ### Precondition:
        Valid upload token.

        ### Effects:
        File created.

        ### &#9432; Further Information:
        The provided file name might be changed in accordance with the resolution strategy:

        * **autorename**: changes the file name and adds a number to avoid conflicts.
        * **overwrite**: deletes any old file with the same file name.
        * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.

        Please ensure that all chunks have been transferred correctly before finishing the upload.
        ##
        #### &#9888; Download share id (if exists) gets changed if:
        - node with the same name exists in the target container
        - **`resolutionStrategy`** is **`overwrite`**
        - **`keepShareLinks`** is **`true`**

        ### 200 OK is **NOT** used by this API
      operationId: completeFileUploadByToken
      parameters:
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: |-
            The body must be empty if public upload token is used.
            The `resolutionStrategy` in that case will be always `autorename`
          in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CompleteUploadRequest'
        - description: Upload token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Node'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Node'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/Node'
        '400':
          description: |-
            Bad Request

            * [-40001] (Target) room is not encrypted
            * [-40755] Bad node name
            * [-40763] File key must be set for an upload into encrypted room
            * [-50503] Resolution strategy not allowed
            * [-50506] Exceeds the number of files for this Upload Share
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80034] `keepShareLinks` is only allowed with conflict mode `overwrite`
            * [-90033] S3 direct upload is enforced
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-20502] Invalid (up-) download token
            * [-10006] User is not authorized to perform this operation
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-20501] Upload not found
            * [-40000] Container not found
            * [-40751] File not found
            * [-41000] Node not found
            * [-50501] Upload access key not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-40010] Container cannot be overwritten
          schema:
            $ref: '#/definitions/Node'
        '507':
          description: |-
            Insufficient Storage

            * [-40200] Exceeds the free node quota in room
            * [-50504] Exceeds the quota for this Upload Share
            * [-90200] Exceeds the free customer quota
            * [-90201] Exceeds the free customer physical disk space
          schema:
            $ref: '#/definitions/ErrorResponse'
        '508':
          description: Loop Detected
      summary: Complete file upload
      tags:
        - uploads
  /v4/user/account:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieves all information regarding the current user's account.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        Setting the query parameter `more_info` to `true`, causes the API to return more details e.g. the user's groups.  

        `customer` (`CustomerData`) attribute in `UserAccount` response model is **`DEPRECATED`**. Please use response from `GET /user/account/customer` instead.
      operationId: getUserInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Get more info for this user
            e.g. list of user groups
          in: query
          name: more_info
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserAccount'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user account information
      tags:
        - user
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Update current user's account.

        ### Precondition:
        Authenticated user.

        ### Effects:
        User's account updated.

        ### &#9432; Further Information:
        * All input fields are limited to **150** characters.  
        * **All** characters are allowed.  

        `customer` (`CustomerData`) attribute in `UserAccount` response model is **`DEPRECATED`**. Please use response from `GET /user/account/customer` instead.
      operationId: updateUserAccount
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserAccountRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserAccount'
        '400':
          description: |-
            Bad Request

            * [-10100] Invalid authentication method
            * [-70103] Accepted EULA cannot be undone
            * [-70104] EULA is already accepted
            * [-70105] Username change not allowed
            * [-70107] E-Mail change not allowed
            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80009] Invalid email address
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-70560] User with provided Basic authentication login already exists
            * [-70561] User with provided Active Directory username already exists
            * [-70562] User with provided RADIUS login already exists
            * [-70563] User with provided OpenID Connect username already exists
            * [-70564] User with provided username already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update user account
      tags:
        - user
  /v4/user/account/avatar:
    delete:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:  
        Reset (custom) avatar to default avatar.

        ### Precondition:
        Authenticated user.

        ### Effects:
        - User's avatar gets deleted.  
        - Default avatar is set.

        ### &#9432; Further Information:
        None.
      operationId: deleteAvatar
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Avatar'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Reset avatar
      tags:
        - user
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:
        Get the avatar.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getAvatar
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Avatar'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get avatar
      tags:
        - user
    post:
      consumes:
        - multipart/form-data
      deprecated: false
      description: |-
        ### &#128640; Since version 4.11.0

        ### Functional Description:
        Change the avatar.

        ### Precondition:
        Authenticated user.

        ### Effects:
        Avatar is changed.

        ### &#9432; Further Information:
        * Media type **MUST** be **`jpeg`** or **`png`**
        * File size **MUST** bei less than **`5 MB`**
        * Dimensions **MUST** be **`256x256 px`**
      operationId: changeAvatar
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: File
          in: formData
          name: file
          required: true
          type: file
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Avatar'
        '400':
          description: |-
            Bad Request

            * [-80042] Invalid media type for user avatar
            * [-80043] File size of an avatar image is too large
            * [-80044] Avatar dimensions are invalid
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change avatar
      tags:
        - user
  /v4/user/account/customer:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Use this API to get: 
        * customer name
        * used / free space
        * used / available
        * user account info

        of the according customer.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getCustomerInfo
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CustomerData'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get customer information for user
      tags:
        - user
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Activate client-side encryption for according customer.

        ### Precondition:
        Right _"change global config"_ required.

        ### Effects:
        Client-side encryption is enabled.

        ### &#9432; Further Information:
        Sets the ability for this customer to encrypt rooms.  
        Once enabled on customer level, it **CANNOT** be unset.  
        On activation, a customer rescue keypair **MUST** be set.
      operationId: enableCustomerEncryption
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EnableCustomerEncryptionRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CustomerData'
        '400':
          description: |-
            Bad Request

            * [-70022] Invalid public key format
            * [-70023] Invalid private key format
            * [-70024] Customer encryption cannot be disabled
            * [-70025] Customer encryption is already enabled
            * [-80000] Mandatory fields cannot be empty
            * [-80005] Invalid boolean value
            * [-90020] Client-side encryption is not enabled
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Activate client-side encryption for customer
      tags:
        - user
  /v4/user/account/customer/keypair:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve the customer rescue key pair.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        The private key is password-based; encrypted with `AES256` / `PBKDF2`.
      operationId: getCustomerKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserKeyPairContainer'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70020] User does not have a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get customer's key pair
      tags:
        - user
  /v4/user/account/keypair:
    delete:
      deprecated: false
      description: |-
        ### Functional Description:  
        Delete the user's key pair.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        This will also remove all file keys that were encrypted with the user's public key.  
        If the user had exclusive access to some files, those are removed as well since decrypting them became impossible.
      operationId: deleteUserKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70020] User does not have a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete user's key pair
      tags:
        - user
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve the user's key pair.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        The private key is password-based; encrypted with `AES256` / `PBKDF2`.
      operationId: getUserKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserKeyPairContainer'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70020] User does not have a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user's key pair
      tags:
        - user
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Set the user's key pair.

        ### Precondition:
        Authenticated user.

        ### Effects:
        The key pair is set.

        ### &#9432; Further Information:
        Overwriting an existing key pair is **NOT** possible.  
        Please delete the existing key pair first.  
        The private key is password-based; encrypted with `AES256` / `PBKDF2`.
      operationId: setUserKeyPair
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserKeyPairContainer'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-70022] Invalid public key format
            * [-70023] Invalid private key format
            * [-70027] Customer encryption is not enabled
            * [-80000] Mandatory fields cannot be empty
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-70021] User does already have a keypair
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Set user's key pair
      tags:
        - user
  /v4/user/account/password:
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:
        Change the user's password.

        ### Precondition:
        Authenticated user.

        ### Effects:
        User's password is changed.

        ### &#9432; Further Information:
        The password **MUST** comply to configured password policies.
      operationId: changeUserPassword
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChangeUserPasswordRequest'
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-10105] Password cannot be reset for this user
            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
          schema:
            $ref: '#/definitions/PasswordPolicyViolationResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Change user's password
      tags:
        - user
  /v4/user/logout:
    post:
      consumes:
        - application/json
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.12.0

        ### Functional Description:  
        Log out a user.

        ### Precondition:
        Authenticated user.

        ### Effects:
        * User is logged out  
        * Authentication token gets invalidated.

        ### &#9432; Further Information:
        None.
      operationId: userLogout
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Invalidate all tokens
          in: query
          name: everywhere
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Invalidate authentication token
      tags:
        - user
  /v4/user/oauth/authorizations:
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve information about all OAuth client authorizations.

        ### Precondition:
        Authenticated user.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `isStandard:eq:true`  
        Get standard OAuth clients.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`isStandard`** | Standard client filter | `eq` |  | `true or false` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are **NOT** supported.  
        Example:
        > `clientName:desc`  
        Sort by `clientName` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`clientName`** | Client name |
      operationId: getOAuthAuthorizations
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/OAuthAuthorization'
            type: array
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get list of OAuth client authorizations
      tags:
        - user
  '/v4/user/oauth/authorizations/{client_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete all authorizations of a client.

        ### Precondition:
        * Authenticated user
        * Valid client ID

        ### Effects:
        All authorizations for the client are revoked.

        ### &#9432; Further Information:
        None.
      operationId: deleteOAuthAuthorizations
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90082] OAuth client authorization not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete all OAuth authorizations of a client
      tags:
        - user
  '/v4/user/oauth/authorizations/{client_id}/{authorization_id}':
    delete:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.12.0

        ### Functional Description:
        Delete a authorization.

        ### Precondition:
        * Authenticated user
        * Valid client ID
        * Valid authorization ID

        ### Effects:
        Authorization is revoked.

        ### &#9432; Further Information:
        None.
      operationId: deleteOAuthAuthorization
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: OAuth authorization ID
          format: int64
          in: path
          name: authorization_id
          required: true
          type: integer
        - description: OAuth client ID
          in: path
          name: client_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90082] OAuth client authorization not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete a OAuth authorization
      tags:
        - user
  /v4/user/ping:
    get:
      deprecated: false
      description: |-
        ### Functional Description:
        Test connection to DRACOON Server (while authenticated).

        ### Precondition:
        Authenticated user.

        ### Effects:
        `200 OK` with principal information is returned if successful.

        ### &#9432; Further Information:
        None.
      operationId: userPing
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
      produces:
        - text/plain
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: (authenticated) Ping
      tags:
        - user
  /v4/user/profileAttributes:
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.7.0

        ### Functional Description:  
        Retrieve a list of user profile attributes.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `key:cn:searchString_1|value:cn:searchString_2`  
        Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`key`** | User profile attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |
        | **`value`** | User profile attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `key:asc|value:desc`  
        Sort by `key` ascending **AND** by `value` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`key`** | User profile attribute key |
        | **`value`** | User profile attribute value |
      operationId: getProfileAttributes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AttributesResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user profile attributes
      tags:
        - user
    post:
      consumes:
        - application/json
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.12.0

        ### Functional Description:  
        Set custom user profile attributes.

        ### Precondition:
        None.

        ### Effects:
        Custom user profile attributes gets set.

        ### &#9432; Further Information:
        Batch function.  
        All existing user profile attributes will be deleted.  


        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**  
        * Maximum key length is **255**  
        * Maximum value length is **4096**
      operationId: setAllProfileAttributes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ProfileAttributesRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ProfileAttributes'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80015] Invalid key value list because there are duplicate keys present
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Set user profile attributes
      tags:
        - user
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### &#128640; Since version 4.7.0

        ### Functional Description:  
        Set custom user profile attributes.

        ### Precondition:
        None.

        ### Effects:
        Custom user profile attributes get added or edited.

        ### &#9432; Further Information:
        Batch function.  
        If an entry existed before, it will be overwritten.  
        Range submodel is never returned.

        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**  
        * Maximum key length is **255**  
        * Maximum value length is **4096**
      operationId: setProfileAttributes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ProfileAttributesRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ProfileAttributes'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80007] Maximum allowed length is exceeded
            * [-80015] Invalid key value list because there are duplicate keys present
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Add or edit user profile attributes
      tags:
        - user
  '/v4/user/profileAttributes/{key}':
    delete:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.7.0

        ### Functional Description:  
        Delete custom user profile attribute.

        ### Precondition:
        None.

        ### Effects:
        Custom user profile attribute gets deleted.

        ### &#9432; Further Information:
        None.
      operationId: deleteProfileAttribute
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Key
          in: path
          name: key
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-

            * [-70550] Attribute not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete user profile attribute
      tags:
        - user
  /v4/users:
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Returns a list of DRACOON users.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:  
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        ### &#9888; Except for **`login`**, **`firstName`** and  **`lastName`** - these are connected via logical disjunction (**OR**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  

        ### Example:
        > `login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`  
        Filter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`email`** | Email filter | `eq`, `cn` | Email contains value. | `search String` |
        | **`userName`** | User name filter | `eq`, `cn` | UserName contains value. | `search String` |
        | **`firstName`** | User first name filter | `cn` | User first name contains value. | `search String` |
        | **`lastName`** | User last name filter | `cn` | User last name contains value. | `search String` |
        | **`isLocked`** | User lock status filter | `eq` |  | `true or false` |
        | **`effectiveRoles`** | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq` |  | `true or false`<br>default: `false` |
        | **`createdAt`** | (**`NEW`**) Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
        | **`phone`** | (**`NEW`**) Phone filter | `eq` | Phone equals value. | `search String` |
        | **`isEncryptionEnabled`** | (**`NEW`**) Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq` |  | `true or false` |
        | **`hasRole`** | (**`NEW`**) User role filter<br>Depends on **effectiveRoles**.<br>For more Roles information please call **`GET /roles API`** | `eq` | User role  equals value. | <ul><li>`CONFIG_MANAGER` - Manage global configs</li><li>`USER_MANAGER` - Manage Users</li><li>`GROUP_MANAGER` - Manage User-Groups</li><li>`ROOM_MANAGER` - Manage top level Data Rooms</li><li>`LOG_AUDITOR` - Read logs</li><li>`NONMEMBER_VIEWER` - View users and groups when having room manage permission</li></ul> |
        | **`lockStatus`** | (**`DEPRECATED`**) User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> |
        | **`login`** | (**`DEPRECATED`**) User login filter | `cn` | User login contains value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.
        ### Example:
        > `firstName:asc|lastLoginSuccessAt:desc`  
        Sort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`userName`** | User name |
        | **`email`** | User email |
        | **`firstName`** | User first name |
        | **`lastName`** | User last name |
        | **`isLocked`** | User lock status |
        | **`lastLoginSuccessAt`** | Last successful login date |
        | **`expireAt`** | Expiration date |
        | **`createdAt`** | (**`NEW`**) Creation date |
        | **`gender`** | (**`DEPRECATED`**) Gender |
        | **`lockStatus`** | (**`DEPRECATED`**) User lock status |
        | **`login`** | (**`DEPRECATED`**) User login |
      operationId: getUsers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: Include custom user attributes.
          in: query
          name: include_attributes
          required: false
          type: boolean
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserList'
        '400':
          description: |-
            Bad Request

            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get users
      tags:
        - users
    post:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:
        Create a new user.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        A new user is created.

        ### &#9432; Further Information:
        * If a user should **NOT** expire, leave `expireAt` empty.
        * All input fields are limited to **150** characters
        * **All** characters are allowed.

        ### Authentication Method Options

        | Authentication Method | Option Key | Option Value |
        | :--- | :--- | :--- |
        | **`basic`** / **`sql`** | `username` | Unique user identifier |
        | **`active_directory`** | `ad_config_id` (optional) | Active Directory configuration ID |
        |  | `username` | Active Directory username according to authentication setting `userFilter` |
        | **`radius`** | `username` | RADIUS username |
        | **`openid`** | `openid_config_id` (optional) | OpenID Connect configuration ID |
        |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |
      operationId: createUser
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: |-
            Bad Request

            * [-10002] Password is not secure
            * [-10100] Invalid authentication method
            * [-10102] At least one authentication method must be enabled
            * [-10013] Not valid IETF language tag
            * [-70106] Only one authentication method allowed
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
            * [-80009] Invalid email address
            * [-80023] Input contains invalid characters
            * [-80028] Due to existing dependency the input must be null
            * [-80038] Deactivation of initial password change is only allowed without notification
            * [-90059] No valid OpenID Connect IDP configuration found
            * [-90059] No valid Active Directory configuration found
            * [-90002] No distinct authentication configuration
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |-
            Forbidden

            * [-70505] Maximum number of users reached
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-90035] OpenID Connect IDP configuration not found
            * [-90059] No valid OpenID Connect IDP configuration found
            * [-90050] Active Directory configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-70560] User with provided Basic authentication login already exists
            * [-70561] User with provided Active Directory username already exists
            * [-70562] User with provided RADIUS login already exists
            * [-70563] User with provided OpenID Connect username already exists
            * [-70564] User with provided username already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Create new user
      tags:
        - users
  '/v4/users/{user_id}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete a user.

        ### Precondition:
        Right _"delete users"_ required.

        ### Effects:
        User is deleted.

        ### &#9432; Further Information:
        User **CANNOT** be deleted if he is a last room administrator of any room.
      operationId: deleteUser
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-40006] At least one non-expiring admin user / group required
            * [-71006] At least one role user / group required
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-41000] Node not found
            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete user
      tags:
        - users
    get:
      deprecated: false
      description: |
        ### Functional Description:  
        Retrieve detailed information about a single user.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Authentication Method Options

        | Authentication Method | Option Key | Option Value |
        | :--- | :--- | :--- |
        | **`basic`** / **`sql`** | `username` | Unique user identifier |
        | **`active_directory`** | `ad_config_id` (optional) | Active Directory configuration ID |
        |  | `username` | Active Directory username according to authentication setting `userFilter` |
        | **`radius`** | `username` | RADIUS username |
        | **`openid`** | `openid_config_id` (optional) | OpenID Connect configuration ID |
        |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |
      operationId: getUser
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles.
            * `false`: DIRECT roles
            * `true`: DIRECT **AND** EFFECTIVE roles

            DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.
            EFFECTIVE means: e.g. user gets role through **group membership**.
          in: query
          name: effective_roles
          required: false
          type: boolean
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user
      tags:
        - users
    put:
      consumes:
        - application/json
      deprecated: false
      description: |
        ### Functional Description:  
        Update user's metadata.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        User's metadata is updated.

        ### &#9432; Further Information:
        * If a user should **NOT** expire, leave `expireAt` empty.
        * All input fields are limited to **150** characters
        * **All** characters are allowed.

        ### Authentication Method Options

        | Authentication Method | Option Key | Option Value |
        | :--- | :--- | :--- |
        | **`basic`** / **`sql`** | `username` | Unique user identifier |
        | **`active_directory`** | `ad_config_id` (optional) | Active Directory configuration ID |
        |  | `username` | Active Directory username according to authentication setting `userFilter` |
        | **`radius`** | `username` | RADIUS username |
        | **`openid`** | `openid_config_id` (optional) | OpenID Connect configuration ID |
        |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |
      operationId: updateUser
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: |-
            Bad Request

            * [-10013] Not valid IETF language tag
            * [-10100] Invalid authentication method
            * [-10102] At least one authentication method must be enabled
            * [-40006] At least one non-expiring admin user / group required
            * [-70105] Username change not allowed
            * [-70106] Only one authentication method allowed
            * [-70107] E-Mail change not allowed
            * [-70509] Illegal user lock status code
            * [-71006] At least one role user / group required
            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80005] Invalid boolean value
            * [-80006] Expiration date is in the past
            * [-80007] Maximum allowed length is exceeded
            * [-80008] The year is too far in the future (max. year is limited to 9999)
            * [-80028] Due to existing dependency the input must be null
            * [-80038] Deactivation of initial password change is only allowed without notification
            * [-90002] No distinct authentication configuration
            * [-90059] No valid Active Directory configuration found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
            * [-90035] OpenID Connect IDP configuration not found
            * [-90059] No valid OpenID Connect IDP configuration found
            * [-90050] Active Directory configuration not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: |-
            Conflict

            * [-70560] User with provided Basic authentication login already exists
            * [-70561] User with provided Active Directory username already exists
            * [-70562] User with provided RADIUS login already exists
            * [-70563] User with provided OpenID Connect username already exists
            * [-70564] User with provided username already exists
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Update user's metadata
      tags:
        - users
  '/v4/users/{user_id}/groups':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieves a list of groups a user is member of and / or can become a member.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `isMember:eq:false|name:cn:searchString`  
        Get all groups that the user is **NOT** member of **AND** whose name is like `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`name`** | Group name filter | `cn` | Group name contains value. | `search String` |
        | **`isMember`** | Filter the groups which the user is (not) member of | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
      operationId: getUserGroups
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserGroupList'
        '400':
          description: |-
            Bad Request

            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get groups that user is a member of or / and can become a member
      tags:
        - users
  '/v4/users/{user_id}/last_admin_rooms':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.10.0

        ### Functional Description:  
        Retrieve a list of all rooms where the user is last admin (except homeroom and its subordinary rooms).

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        List of rooms is returned. 

        ### &#9432; Further Information:
        An empty list is returned if no rooms were found where the user is last admin.
      operationId: getLastAdminRoomsUsers
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LastAdminUserRoomList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get rooms where the user is last admin
      tags:
        - users
  '/v4/users/{user_id}/roles':
    get:
      deprecated: false
      description: |-
        ### Functional Description:  
        Retrieve a list of all roles granted to a user.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.
      operationId: getUserRoles
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoleList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get user's granted roles
      tags:
        - users
  '/v4/users/{user_id}/rooms':
    get:
      deprecated: true
      description: |-
        ## &#9888; Deprecated since version 4.10.0

        ### Functional Description:  
        Retrieves a list of rooms granted to the user and / or that can be granted.

        ### Precondition:
        Right _"read users"_ required.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`  
        Example:
        > `isGranted:eq:true|isLastAdmin:eq:true|name:cn:searchString`  
        Get all rooms that the user is granted **AND** is last admin **AND** whose name is like `searchString`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`name`** | Room name filter | `cn` | Room name contains value. | `search String` |
        | **`isGranted`** | Filter the rooms which the user is (not) granted. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
        | **`isLastAdmin`** | Filter the rooms which the user is last room administrator.<br>Only in connection with `isGranted:eq:true` filter possible. | `eq` |  | `true` |
        | **`effectivePerm`** | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li><li>`any`: DIRECT **AND** EFFECTIVE **AND** OVER GROUP permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**.<br>OVER GROUP means: e.g. user gets `read` permissions on desired room through **group membership**. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `false` |
      operationId: getUsersRooms
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomTreeDataList'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80024] Invalid range parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get rooms granted to the user or / and rooms that can be granted
      tags:
        - users
  '/v4/users/{user_id}/userAttributes':
    get:
      deprecated: false
      description: |-
        ### &#128640; Since version 4.12.0

        ### Functional Description:  
        Retrieve a list of user attributes.

        ### Precondition:
        None.

        ### Effects:
        None.

        ### &#9432; Further Information:
        None.

        ### Filtering
        ### &#9888; All filter fields are connected via logical conjunction (**AND**)
        Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  
        Example:
        > `key:cn:searchString_1|value:cn:searchString_2`  
        Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.

        | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
        | :--- | :--- | :--- | :--- | :--- |
        | **`key`** | User attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |
        | **`value`** | User attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |

        ### Sorting
        Sort string syntax: `FIELD_NAME:ORDER`  
        `ORDER` can be `asc` or `desc`.  
        Multiple sort fields are supported.  
        Example:
        > `key:asc|value:desc`  
        Sort by `key` ascending **AND** by `value` descending.

        | `FIELD_NAME` | Description |
        | :--- | :--- |
        | **`key`** | User attribute key |
        | **`value`** | User attribute value |
      operationId: getUserAttributes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - allowEmptyValue: false
          description: Filter string
          in: query
          name: filter
          required: false
          type: string
        - allowEmptyValue: false
          description: |-
            Range limit. Maximum 500. 
             For more results please use paging (`offset` + `limit`).
          format: int32
          in: query
          name: limit
          required: false
          type: integer
        - allowEmptyValue: false
          description: Range offset
          format: int32
          in: query
          name: offset
          required: false
          type: integer
        - allowEmptyValue: false
          description: Sort string
          in: query
          name: sort
          required: false
          type: string
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AttributesResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Get custom user attributes
      tags:
        - users
    post:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Set custom user attributes.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        Custom user attributes gets set.

        ### &#9432; Further Information:
        Batch function.  
        All existing user attributes will be deleted.  


        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**.
      operationId: setAllUserAttributes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserAttributes'
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80015] Invalid key value list because there are duplicate keys present
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Set custom user attributes
      tags:
        - users
    put:
      consumes:
        - application/json
      deprecated: false
      description: |-
        ### Functional Description:  
        Set custom user attributes.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        Custom user attributes gets added or edited.

        ### &#9432; Further Information:
        Batch function.  
        If an entry exists before, it will be overwritten.  


        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**.
      operationId: setUserAttributes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: 'Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))'
          enum:
            - LOCAL
            - UTC
            - OFFSET
            - EPOCH
            - LEET
          in: header
          name: X-Sds-Date-Format
          required: false
          type: string
        - description: body
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserAttributes'
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserData'
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80007] Maximum allowed length is exceeded
            * [-80015] Invalid key value list because there are duplicate keys present
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Add or edit custom user attributes
      tags:
        - users
  '/v4/users/{user_id}/userAttributes/{key}':
    delete:
      deprecated: false
      description: |-
        ### Functional Description:
        Delete custom user attribute.

        ### Precondition:
        Right _"change users"_ required.

        ### Effects:
        Custom user attribute gets deleted.

        ### &#9432; Further Information:
        * Allowed characters for keys are: `[a-zA-Z0-9_-]`  
        * Characters are **case-insensitive**.
      operationId: deleteUserAttributes
      parameters:
        - description: Authentication token
          in: header
          name: X-Sds-Auth-Token
          required: false
          type: string
        - description: Key
          in: path
          name: key
          required: true
          type: string
        - description: User ID
          format: int64
          in: path
          name: user_id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: No Content
        '204':
          description: No Content
        '400':
          description: |-
            Bad Request

            * [-80000] Mandatory fields cannot be empty
            * [-80001] Invalid positive number
            * [-80002] Invalid number
            * [-80023] Input contains invalid characters
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: |-
            Unauthorized

            * [-10006] User is not authorized to perform this operation
            * [-10012] Wrong token
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: |
            Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: |-
            Not Found

            * [-70501] User not found
            * [-70550] Attribute not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: |
            Not Acceptable
          schema:
            $ref: '#/definitions/ErrorResponse'
        '412':
          description: |-
            Precondition Failed

            * [-10103] EULA must be accepted
            * [-10104] Password must be changed
            * [-10106] Email must be set
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - DRACOON-OAuth:
            - all
      summary: Delete custom user attribute
      tags:
        - users
definitions:
  ActiveDirectory:
    description: Active Directory information
    properties:
      alias:
        description: Unique name for an Active Directory configuration
        type: string
      id:
        description: ID
        format: int32
        type: integer
      isGlobalAvailable:
        description: Is available for all customers
        type: boolean
    required:
      - alias
      - id
      - isGlobalAvailable
    title: ActiveDirectory
    type: object
  ActiveDirectoryAuthInfo:
    description: List of Active Directories
    properties:
      items:
        description: List of available Active Directories
        items:
          $ref: '#/definitions/ActiveDirectory'
        type: array
    required:
      - items
    title: ActiveDirectoryAuthInfo
    type: object
  ActiveDirectoryConfig:
    description: Active Directory configuration
    properties:
      adExportGroup:
        description: |-
          If `userImport` is set to `true`,
          the user must be member of this Active Directory group to receive a newly created DRACOON account.
        type: string
      alias:
        description: Unique name for an Active Directory configuration
        type: string
      createHomeFolder:
        description: |-
          DEPRECATED, will be ignored
          Determines whether a room is created for each user that is created by automatic import (like a home folder).
          Room's name will equal the user's login name.
          (default: `false`)

          [Deprecated since version 4.10.0]
        type: boolean
      homeFolderParent:
        description: |-
          DEPRECATED, will be ignored
          ID of the room in which the individual rooms for users will be created.

          [Deprecated since version 4.10.0]
        format: int64
        type: integer
      id:
        description: ID
        format: int32
        type: integer
      ldapUsersDomain:
        description: Search scope of Active Directory; only users below this node can log on.
        type: string
      sdsImportGroup:
        description: |-
          User group that is assigned to users who are created by automatic import.
          Reset with `0`
        format: int64
        type: integer
      serverAdminName:
        description: Distinguished Name (DN) of Active Directory administrative account
        type: string
      serverIp:
        description: IPv4 or IPv6 address or host name
        type: string
      serverPort:
        description: Port
        format: int32
        type: integer
      sslFingerPrint:
        description: |-
          SSL finger print of Active Directory server.
          Mandatory for LDAPS connections.
          Format: `Algorithm/Fingerprint`
        type: string
      useLdaps:
        description: Determines whether LDAPS should be used instead of plain LDAP.
        type: boolean
      userFilter:
        description: Name of Active Directory attribute that is used as login name.
        type: string
      userImport:
        description: |-
          Determines if a DRACOON account is automatically created for a new user
          who successfully logs on with his / her AD / IDP account.
        type: boolean
    required:
      - adExportGroup
      - alias
      - id
      - ldapUsersDomain
      - serverAdminName
      - serverIp
      - serverPort
      - useLdaps
      - userFilter
      - userImport
    title: ActiveDirectoryConfig
    type: object
  ActiveDirectoryConfigList:
    description: List of Active Directory configurations
    properties:
      items:
        description: List of Active Directory configurations
        items:
          $ref: '#/definitions/ActiveDirectoryConfig'
        type: array
    required:
      - items
    title: ActiveDirectoryConfigList
    type: object
  AttributesResponse:
    description: Ranged list of attributes
    properties:
      items:
        description: List of key-value pairs
        items:
          $ref: '#/definitions/KeyValueEntry'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: AttributesResponse
    type: object
  AuditNodeResponse:
    description: Audit node report
    properties:
      auditUserPermissionList:
        description: List of assigned users with permissions
        items:
          $ref: '#/definitions/AuditUserPermission'
        type: array
      nodeCntChildren:
        description: |-
          Number of direct children
          (no recursion; for rooms / folders only)
        format: int32
        type: integer
      nodeCreatedAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      nodeCreatedBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      nodeHasActivitiesLog:
        description: |-
          Is activities log active (for rooms only)
          (default: `true`)
        example: true
        type: boolean
      nodeHasRecycleBin:
        description: |-
          `DEPRECATED`: Is recycle bin active (for rooms only)
          Recycle bin is always on (disabling is not possible).

          [Deprecated since version 4.10.0]
        example: true
        type: boolean
      nodeId:
        description: Node ID
        format: int64
        type: integer
      nodeIsEncrypted:
        description: Encryption state
        type: boolean
      nodeName:
        description: Node name
        type: string
      nodeParentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      nodeParentPath:
        description: |-
          Parent node path
          `/` if node is a root node (room)
        type: string
      nodeQuota:
        description: Quota in byte
        format: int64
        type: integer
      nodeRecycleBinRetentionPeriod:
        description: |-
          Retention period for deleted nodes in days
          (Integer between 0 and 9999)
        format: int32
        type: integer
      nodeSize:
        description: Node size in byte
        format: int64
        type: integer
      nodeUpdatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      nodeUpdatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - auditUserPermissionList
      - nodeCntChildren
      - nodeId
      - nodeName
      - nodeParentPath
    title: AuditNodeResponse
    type: object
  AuditUserPermission:
    description: Audit user permissions report
    properties:
      permissions:
        $ref: '#/definitions/NodePermissions'
        description: Available permissions for this node
      userFirstName:
        description: User first name
        type: string
      userId:
        description: Unique identifier for the user
        format: int64
        type: integer
      userLastName:
        description: User last name
        type: string
      userLogin:
        description: User login name
        type: string
    required:
      - permissions
      - userFirstName
      - userId
      - userLastName
      - userLogin
    title: AuditUserPermission
    type: object
  AuthConfig:
    description: Authentication settings
    properties:
      authMethods:
        description: List of authentication methods
        items:
          $ref: '#/definitions/AuthMethod'
        type: array
    required:
      - authMethods
    title: AuthConfig
    type: object
  AuthMethod:
    description: Authentication method
    properties:
      isEnabled:
        description: Is enabled
        type: boolean
      name:
        description: |-
          Authentication methods:
          * `basic` (or `sql`)
          * `active_directory`
          * `radius`
          * `openid`
        type: string
      priority:
        description: Priority (smaller values have higher priority)
        example: 1
        format: int32
        type: integer
    required:
      - isEnabled
      - name
      - priority
    title: AuthMethod
    type: object
  AuthTokenRestrictions:
    description: Auth token restrictions
    properties:
      accessTokenValidity:
        description: |-
          Restricted OAuth access token validity (in seconds)

          [Since version 4.13.0]
        format: int32
        type: integer
      refreshTokenValidity:
        description: |-
          Restricted OAuth refresh token validity (in seconds)

          [Since version 4.13.0]
        format: int32
        type: integer
      restrictionEnabled:
        description: |-
          Defines if OAuth token restrictions are enabled

          [Since version 4.13.0]
        type: boolean
    title: AuthTokenRestrictions
    type: object
  Avatar:
    description: User avatar information
    properties:
      avatarUri:
        description: Avatar URI
        type: string
      avatarUuid:
        description: Avatar UUID
        type: string
      isCustomAvatar:
        description: Determines whether user updated his / her avatar with own image
        type: boolean
    required:
      - avatarUri
      - avatarUuid
      - isCustomAvatar
    title: Avatar
    type: object
  BrandingConfig:
    description: |-
      DEPRECATED
      Branding settings
    properties:
      brandingProviderUrl:
        description: Access URL to to the Branding Portal
        example: 'https://www.random-url.com'
        type: string
      brandingQualifier:
        description: Branding UUID
        type: string
    title: BrandingConfig
    type: object
  BrandingServerInfo:
    description: |-
      DEPRECATED
      Branding information
    properties:
      brandingServerBrandingId:
        description: UUID of Branding
        type: string
      brandingServerCustomer:
        description: |-
          `DEPRECATED`: Branding server customer UUID

          [Deprecated since version 4.6.0]
        type: string
      brandingServerUrl:
        description: |-
          `DEPRECATED`: Branding server URL

          [Deprecated since version 4.6.0]
        example: 'https://www.random-url.com'
        type: string
    required:
      - brandingServerBrandingId
      - brandingServerCustomer
    title: BrandingServerInfo
    type: object
  ChangeGroupMembersRequest:
    description: List of user IDs
    properties:
      ids:
        description: List of user IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - ids
    title: ChangeGroupMembersRequest
    type: object
  ChangeNodeCommentRequest:
    description: Request model for updating a node comment
    properties:
      text:
        description: Comment text
        type: string
    required:
      - text
    title: ChangeNodeCommentRequest
    type: object
  ChangeUserPasswordRequest:
    description: Request model for updating user's password
    properties:
      newPassword:
        description: New password
        type: string
      oldPassword:
        description: Old password
        type: string
    required:
      - newPassword
      - oldPassword
    title: ChangeUserPasswordRequest
    type: object
  CharacterRules:
    description: Password character rules
    properties:
      mustContainCharacters:
        description: |-
          Characters which a password must contain:
          * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)
          * `uppercase` - at least one uppercase character
          * `lowercase` - at least one lowercase character
          * `numeric` - at least one numeric character
          * `special` - at least one special character (letters and digits excluded)
          * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special`
        items:
          enum:
            - alpha
            - uppercase
            - lowercase
            - numeric
            - special
            - all
          type: string
        type: array
      numberOfCharacteristicsToEnforce:
        description: |-
          Number of characteristics to enforce
          e.g. from `["uppercase", "lowercase", "numeric", "special"]`
          all 4 character sets can be enforced; but also only 2 of them
          (must be between 0 and 4)
        format: int32
        type: integer
    required:
      - mustContainCharacters
    title: CharacterRules
    type: object
  ChunkUploadResponse:
    description: Chunk upload response
    properties:
      hash:
        description: Hash value of transferred chunk
        type: string
      size:
        description: Chunk size
        format: int64
        type: integer
    required:
      - hash
      - size
    title: ChunkUploadResponse
    type: object
  Comment:
    description: Node comment information
    properties:
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      id:
        description: Comment ID
        format: int64
        type: integer
      isChanged:
        description: Determines whether comment was edited or not
        type: boolean
      isDeleted:
        description: Determines whether comment was deleted or not
        type: boolean
      text:
        description: Comment text
        type: string
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - createdAt
      - createdBy
      - id
      - isChanged
      - isDeleted
      - text
      - updatedAt
      - updatedBy
    title: Comment
    type: object
  CommentList:
    description: List of node comments
    properties:
      items:
        description: List of node comments
        items:
          $ref: '#/definitions/Comment'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: CommentList
    type: object
  CompleteS3FileUploadRequest:
    description: Request model for completing a S3 file upload
    properties:
      fileKey:
        $ref: '#/definitions/FileKey'
        description: Encrypted file key for shares out of encrypted rooms
      fileName:
        description: New file name to store with
        type: string
      keepShareLinks:
        description: |-
          Preserve Download Share Links and point them to the new node.
          (default: `false`)
        type: boolean
      parts:
        description: List of S3 file upload parts
        items:
          $ref: '#/definitions/S3FileUploadPart'
        type: array
      resolutionStrategy:
        description: |-
          Node conflict resolution strategy:
          * `autorename`
          * `overwrite`
          * `fail`

          (default: `autorename`)
        enum:
          - autorename
          - overwrite
          - fail
        example: autorename
        type: string
    required:
      - parts
    title: CompleteS3FileUploadRequest
    type: object
  CompleteS3ShareUploadRequest:
    description: Request model for completing a S3 file upload
    properties:
      parts:
        description: List of S3 file upload parts
        items:
          $ref: '#/definitions/S3FileUploadPart'
        type: array
      userFileKeyList:
        description: List of user file keys
        items:
          $ref: '#/definitions/UserFileKey'
        type: array
    required:
      - parts
    title: CompleteS3ShareUploadRequest
    type: object
  CompleteUploadRequest:
    description: Request model for completing an upload
    properties:
      fileKey:
        $ref: '#/definitions/FileKey'
        description: Encrypted file key for shares out of encrypted rooms
      fileName:
        description: New file name to store with
        type: string
      keepShareLinks:
        description: |-
          Preserve Download Share Links and point them to the new node.
          (default: `false`)
        type: boolean
      resolutionStrategy:
        description: |-
          Node conflict resolution strategy:
          * `autorename`
          * `overwrite`
          * `fail`

          (default: `autorename`)
        enum:
          - autorename
          - overwrite
          - fail
        example: autorename
        type: string
      userFileKeyList:
        $ref: '#/definitions/UserFileKeyList'
        description: List of user file keys
    title: CompleteUploadRequest
    type: object
  ConfigOptionList:
    description: List of key-value pairs
    properties:
      items:
        description: List of key-value pairs
        items:
          $ref: '#/definitions/KeyValueEntry'
        type: array
    required:
      - items
    title: ConfigOptionList
    type: object
  ConfigRoomRequest:
    description: Request model for configuring a room
    properties:
      adminGroupIds:
        description: |-
          List of group ids
          A room requires at least one admin (user or group)
        items:
          format: int64
          type: integer
        type: array
      adminIds:
        description: |-
          List of user ids
          A room requires at least one admin (user or group)
        items:
          format: int64
          type: integer
        type: array
      classification:
        description: |-
          Classification ID:
          * `1` - public
          * `2` - internal
          * `3` - confidential
          * `4` - strictly confidential

          Provided (or default) classification is taken from room
          when file gets uploaded without any classification.
          (default: `2` - internal)
        enum:
          - 1
          - 2
          - 3
          - 4
        example: 2
        format: int32
        type: integer
      hasActivitiesLog:
        description: |-
          Is activities log active (for rooms only)
          (default: `true`)
        example: true
        type: boolean
      hasRecycleBin:
        description: |-
          `DEPRECATED`: Is recycle bin active (for rooms only)
          Recycle bin is always on (disabling is not possible).
        example: true
        type: boolean
      inheritPermissions:
        description: |-
          Inherit permissions from parent room
          (default: `false` if `parentId` is `0`; otherwise: `true`)
        type: boolean
      newGroupMemberAcceptance:
        description: |-
          Behaviour when new users are added to the group:
          * `autoallow`
          * `pending`

          Only relevant if `adminGroupIds` has items.
          (default: `autoallow`)
        enum:
          - autoallow
          - pending
        example: autoallow
        type: string
      recycleBinRetentionPeriod:
        description: |-
          Retention period for deleted nodes in days
          (Integer between 0 and 9999)
        format: int32
        type: integer
      takeOverPermissions:
        description: Take over existing permissions
        type: boolean
    title: ConfigRoomRequest
    type: object
  ConflictNode:
    description: Conficted node information
    properties:
      errorCode:
        description: Error code
        format: int32
        type: integer
      errorMessage:
        description: Error message
        type: string
      name:
        description: Name
        type: string
      nodeId:
        description: Node ID
        format: int64
        type: integer
    title: ConflictNode
    type: object
  CopyNode:
    description: Copied node information
    properties:
      id:
        description: Source node ID
        format: int64
        type: integer
      name:
        description: New node name
        type: string
    required:
      - id
    title: CopyNode
    type: object
  CopyNodesRequest:
    description: Request model for copying nodes
    properties:
      items:
        description: List of nodes to be copied
        items:
          $ref: '#/definitions/CopyNode'
        type: array
      keepShareLinks:
        description: |-
          Preserve Download Share Links and point them to the new node.
          (default: `false`)
        type: boolean
      nodeIds:
        description: |-
          `DEPRECATED`: Node IDs
          Please use `items` instead.
        items:
          format: int64
          type: integer
        type: array
      resolutionStrategy:
        description: |-
          Node conflict resolution strategy:
          * `autorename`
          * `overwrite`
          * `fail`

          (default: `autorename`)
        enum:
          - autorename
          - overwrite
          - fail
        example: autorename
        type: string
    title: CopyNodesRequest
    type: object
  CreateActiveDirectoryConfigRequest:
    description: Request model for creating an Active Directory configuration
    properties:
      adExportGroup:
        description: |-
          If `userImport` is set to `true`,
          the user must be member of this Active Directory group to receive a newly created DRACOON account.
        type: string
      alias:
        description: Unique name for an Active Directory configuration
        type: string
      createHomeFolder:
        description: |-
          DEPRECATED, will be ignored
          Determines whether a room is created for each user that is created by automatic import (like a home folder).
          Room's name will equal the user's login name.
          (default: `false`)
        type: boolean
      homeFolderParent:
        description: |-
          DEPRECATED, will be ignored
          ID of the room in which the individual rooms for users will be created.
        format: int64
        type: integer
      ldapUsersDomain:
        description: Search scope of Active Directory; only users below this node can log on.
        type: string
      sdsImportGroup:
        description: |-
          User group that is assigned to users who are created by automatic import.
          Reset with `0`
        format: int64
        type: integer
      serverAdminName:
        description: Distinguished Name (DN) of Active Directory administrative account
        type: string
      serverAdminPassword:
        description: Password of Active Directory administrative account
        type: string
      serverIp:
        description: IPv4 or IPv6 address or host name
        type: string
      serverPort:
        description: Port
        format: int32
        type: integer
      sslFingerPrint:
        description: |-
          SSL finger print of Active Directory server.
          Mandatory for LDAPS connections.
          Format: `Algorithm/Fingerprint`
        type: string
      useLdaps:
        description: |-
          Determines whether LDAPS should be used instead of plain LDAP.
          (default: `false`)
        type: boolean
      userFilter:
        description: Name of Active Directory attribute that is used as login name.
        type: string
      userImport:
        description: |-
          Determines if a DRACOON account is automatically created for a new user
          who successfully logs on with his / her AD / IDP account.
          (default: `false`)
        type: boolean
    required:
      - alias
      - ldapUsersDomain
      - serverAdminName
      - serverAdminPassword
      - serverIp
      - serverPort
      - userFilter
    title: CreateActiveDirectoryConfigRequest
    type: object
  CreateDownloadShareRequest:
    description: Request model for creating a Download Share
    properties:
      creatorLanguage:
        description: Language tag for messages to creator
        example: de-DE
        type: string
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      fileKey:
        $ref: '#/definitions/FileKey'
        description: Encrypted file key for shares out of encrypted rooms
      internalNotes:
        description: Internal notes (limited to 255 characters)
        type: string
      keyPair:
        $ref: '#/definitions/UserKeyPairContainer'
        description: Keypair for Download Share pseudo-user
      mailBody:
        description: '`DEPRECATED`: Notification email content'
        type: string
      mailRecipients:
        description: '`DEPRECATED`: CSV string of recipient email addresses'
        type: string
      mailSubject:
        description: '`DEPRECATED`: Notification email subject'
        type: string
      maxDownloads:
        description: Max allowed downloads
        format: int32
        type: integer
      name:
        description: |-
          Alias name
          (default: name of the shared node)
        type: string
      nodeId:
        description: Source node ID
        format: int64
        type: integer
      notes:
        description: User notes (limited to 255 characters)
        type: string
      notifyCreator:
        description: |-
          Notify creator on every download.
          (default: `false`)
        type: boolean
      password:
        description: 'Access password, not allowed for encrypted shares'
        type: string
      receiverLanguage:
        description: Language tag for messages to receiver
        example: de-DE
        type: string
      sendMail:
        description: |-
          `DEPRECATED`: Notify recipients via email
          (default: `false`)
          Please use `POST /shares/uploads/{share_id}/email` API instead.
        type: boolean
      sendSms:
        description: |-
          `DEPRECATED`: Send share password via SMS
          (default: `false`)
          Please use `textMessageRecipients` attribute instead.
        type: boolean
      showCreatorName:
        description: |-
          Show creator first and last name.
          (default: `false`)
        type: boolean
      showCreatorUsername:
        description: |-
          Show creator email address.
          (default: `false`)
        type: boolean
      smsRecipients:
        description: '`DEPRECATED`: CSV string of recipient MSISDNs'
        type: string
      textMessageRecipients:
        description: |-
          List of recipient FQTNs
          E.123 / E.164 Format
        items:
          type: string
        type: array
    required:
      - nodeId
    title: CreateDownloadShareRequest
    type: object
  CreateFileUploadRequest:
    description: Request model for creating an upload channel
    properties:
      classification:
        description: |-
          Classification ID:
          * `1` - public
          * `2` - internal
          * `3` - confidential
          * `4` - strictly confidential

          (default: classification from parent room)
        enum:
          - 1
          - 2
          - 3
          - 4
        example: 2
        format: int32
        type: integer
      directS3Upload:
        description: |-
          Upload direct to S3
          (default: `false`)
        type: boolean
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      name:
        description: File name
        type: string
      notes:
        description: |-
          User notes (limited to 255 characters)
          Use empty string to remove.
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      size:
        description: File size in byte
        format: int64
        type: integer
    required:
      - name
      - parentId
    title: CreateFileUploadRequest
    type: object
  CreateFileUploadResponse:
    description: Upload channel information
    properties:
      token:
        description: |-
          `DEPRECATED`: Upload token

          [Deprecated since version 4.3.0]
        type: string
      uploadId:
        description: Upload (channel) ID
        type: string
      uploadUrl:
        description: (public) Upload URL
        example: 'https://www.random-url.com'
        type: string
    required:
      - token
      - uploadId
      - uploadUrl
    title: CreateFileUploadResponse
    type: object
  CreateFolderRequest:
    description: Request model for creating a folder
    properties:
      name:
        description: Name
        type: string
      notes:
        description: |-
          User notes (limited to 255 characters)
          Use empty string to remove.
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
    required:
      - name
      - parentId
    title: CreateFolderRequest
    type: object
  CreateGroupRequest:
    description: Request model for creating a group
    properties:
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      name:
        description: Group name
        type: string
    required:
      - name
    title: CreateGroupRequest
    type: object
  CreateNodeCommentRequest:
    description: Request model for creating a node comment
    properties:
      text:
        description: Comment text
        type: string
    required:
      - text
    title: CreateNodeCommentRequest
    type: object
  CreateOAuthClientRequest:
    description: Request model for creating an OAuth client
    properties:
      accessTokenValidity:
        description: Validity of the access token in seconds.
        format: int32
        type: integer
      clientId:
        description: ID of the OAuth client
        type: string
      clientName:
        description: 'Name, which is shown at the client configuration and authorization.'
        type: string
      clientSecret:
        description: 'Secret, which client uses at authentication.'
        type: string
      clientType:
        description: Determines whether client is a confidential or public client.
        enum:
          - confidential
          - public
        example: confidential
        type: string
      grantTypes:
        description: |-
          Authorized grant types
          * `authorization_code`
          * `implicit`
          * `password`
          * `client_credentials`
          * `refresh_token`

          cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
        items:
          enum:
            - authorization_code
            - implicit
            - password
            - client_credentials
            - refresh_token
          type: string
        type: array
      redirectUris:
        description: 'URIs, to which a user is redirected after authorization.'
        items:
          type: string
        type: array
      refreshTokenValidity:
        description: Validity of the refresh token in seconds.
        format: int32
        type: integer
    required:
      - clientName
      - grantTypes
    title: CreateOAuthClientRequest
    type: object
  CreateOpenIdIdpConfigRequest:
    description: Request model for creating an OpenID Connect IDP configuration
    properties:
      authorizationEndPointUrl:
        description: URL of the authorization endpoint
        example: 'https://www.random-url.com'
        type: string
      clientId:
        description: ID of the OAuth client
        type: string
      clientSecret:
        description: 'Secret, which client uses at authentication.'
        type: string
      fallbackMappingClaim:
        description: Name of the claim which is used for the user mapping fallback.
        example: sub
        type: string
      flow:
        description: |-
          Flow, which is used at authentication
          (default: `authorization_code`).
        enum:
          - authorization_code
          - hybrid
        example: authorization_code
        type: string
      issuer:
        description: |-
          Issuer identifier of the IDP
          The value is a case sensitive URL.
        example: 'https://www.random-url.com'
        type: string
      jwksEndPointUrl:
        description: URL of the JWKS endpoint
        example: 'https://www.random-url.com'
        type: string
      mappingClaim:
        description: Name of the claim which is used for the user mapping.
        example: email
        type: string
      name:
        description: Name of the IDP
        type: string
      pkceChallengeMethod:
        description: |-
          PKCE code challenge method.
          cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          (default: `plain`)
        type: string
      pkceEnabled:
        description: |-
          Determines whether PKCE is enabled.
          cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          (default: `false`)
        type: boolean
      redirectUris:
        description: 'URIs, to which a user is redirected after authorization.'
        items:
          type: string
        type: array
      scopes:
        description: List of requested scopes
        items:
          type: string
        type: array
      tokenEndPointUrl:
        description: URL of the token endpoint
        example: 'https://www.random-url.com'
        type: string
      userImportEnabled:
        description: |-
          Determines if a DRACOON account is automatically created for a new user
          who successfully logs on with his / her AD / IDP account.
          (default: `false`)
        type: boolean
      userImportGroup:
        description: |-
          User group that is assigned to users who are created by automatic import.
          Reset with `0`
        format: int64
        type: integer
      userInfoEndPointUrl:
        description: URL of the user info endpoint
        example: 'https://www.random-url.com'
        type: string
      userManagementUrl:
        description: |-
          URL of the user management UI.
          Use empty string to remove.
        type: string
      userUpdateEnabled:
        description: |-
          Determines if the DRACOON account is updated with data from AD / IDP.
          For OpenID Connect, the scopes `email` and `profile` are needed.
          (default: `false`)
        type: boolean
    required:
      - authorizationEndPointUrl
      - clientId
      - clientSecret
      - issuer
      - jwksEndPointUrl
      - mappingClaim
      - name
      - redirectUris
      - scopes
      - tokenEndPointUrl
      - userInfoEndPointUrl
    title: CreateOpenIdIdpConfigRequest
    type: object
  CreateRoomRequest:
    description: Request model for creating a room
    properties:
      adminGroupIds:
        description: |-
          List of group ids
          A room requires at least one admin (user or group)
        items:
          format: int64
          type: integer
        type: array
      adminIds:
        description: |-
          List of user ids
          A room requires at least one admin (user or group)
        items:
          format: int64
          type: integer
        type: array
      classification:
        description: |-
          Classification ID:
          * `1` - public
          * `2` - internal
          * `3` - confidential
          * `4` - strictly confidential

          Provided (or default) classification is taken from room
          when file gets uploaded without any classification.
          (default: `2` - internal)
        enum:
          - 1
          - 2
          - 3
          - 4
        example: 2
        format: int32
        type: integer
      hasActivitiesLog:
        description: |-
          Is activities log active (for rooms only)
          (default: `true`)
        example: true
        type: boolean
      hasRecycleBin:
        description: |-
          `DEPRECATED`: Is recycle bin active (for rooms only)
          Recycle bin is always on (disabling is not possible).
        example: true
        type: boolean
      inheritPermissions:
        description: |-
          Inherit permissions from parent room
          (default: `false` if `parentId` is `0`; otherwise: `true`)
        type: boolean
      name:
        description: Name
        type: string
      newGroupMemberAcceptance:
        description: |-
          Behaviour when new users are added to the group:
          * `autoallow`
          * `pending`

          Only relevant if `adminGroupIds` has items.
          (default: `autoallow`)
        enum:
          - autoallow
          - pending
        example: autoallow
        type: string
      notes:
        description: |-
          User notes (limited to 255 characters)
          Use empty string to remove.
        type: string
      parentId:
        description: |-
          Parent room ID or `null` to create a top level room
          (default: `0`)
        format: int64
        type: integer
      quota:
        description: Quota in byte
        format: int64
        type: integer
      recycleBinRetentionPeriod:
        description: |-
          Retention period for deleted nodes in days
          (Integer between 0 and 9999)
        format: int32
        type: integer
    required:
      - name
    title: CreateRoomRequest
    type: object
  CreateShareUploadChannelRequest:
    description: Request model for creating an upload channel
    properties:
      directS3Upload:
        description: |-
          Upload direct to S3
          (default: `false`)
        type: boolean
      name:
        description: File name
        type: string
      password:
        description: Password
        type: string
      size:
        description: File size in byte
        format: int64
        type: integer
    required:
      - name
    title: CreateShareUploadChannelRequest
    type: object
  CreateShareUploadChannelResponse:
    description: Upload channel information
    properties:
      token:
        description: |-
          `DEPRECATED`: Upload token

          [Deprecated since version 4.3.0]
        type: string
      uploadId:
        description: Upload (channel) ID
        type: string
      uploadUrl:
        description: (public) Upload URL
        example: 'https://www.random-url.com'
        type: string
    required:
      - uploadId
      - uploadUrl
    title: CreateShareUploadChannelResponse
    type: object
  CreateUploadShareRequest:
    description: Request model for creating an Upload Share
    properties:
      creatorLanguage:
        description: Language tag for messages to creator
        type: string
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      filesExpiryPeriod:
        description: Number of days after which uploaded files expire
        format: int32
        type: integer
      internalNotes:
        description: Internal notes (limited to 255 characters)
        type: string
      mailBody:
        description: '`DEPRECATED`: Notification email content'
        type: string
      mailRecipients:
        description: '`DEPRECATED`: CSV string of recipient email addresses'
        type: string
      mailSubject:
        description: '`DEPRECATED`: Notification email subject'
        type: string
      maxSize:
        description: Maximal total size of uploaded files (in bytes)
        format: int64
        type: integer
      maxSlots:
        description: Maximal amount of files to upload
        format: int32
        type: integer
      name:
        description: |-
          Alias name
          (default: name of the shared node)
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      notifyCreator:
        description: |-
          Notify creator on every upload.
          (default: `false`)
        type: boolean
      password:
        description: Password
        type: string
      receiverLanguage:
        description: Language tag for messages to receiver
        example: de-DE
        type: string
      sendMail:
        description: |-
          `DEPRECATED`: Notify recipients via email
          (default: `false`)
          Please use `POST /shares/uploads/{share_id}/email` API instead.
        type: boolean
      sendSms:
        description: |-
          `DEPRECATED`: Send share password via SMS
          (default: `false`)
          Please use `textMessageRecipients` attribute instead.
        type: boolean
      showCreatorName:
        description: |-
          Show creator first and last name.
          (default: `false`)
        type: boolean
      showCreatorUsername:
        description: |-
          Show creator email address.
          (default: `false`)
        type: boolean
      showUploadedFiles:
        description: |-
          Allow display of already uploaded files
          (default: `false`)
        type: boolean
      smsRecipients:
        description: '`DEPRECATED`: CSV string of recipient MSISDNs'
        type: string
      targetId:
        description: Target room or folder ID
        format: int64
        type: integer
      textMessageRecipients:
        description: |-
          List of recipient FQTNs
          E.123 / E.164 Format
        items:
          type: string
        type: array
    required:
      - targetId
    title: CreateUploadShareRequest
    type: object
  CreateUserRequest:
    description: Request model for creating an user
    properties:
      authData:
        $ref: '#/definitions/UserAuthData'
        description: |-
          Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
      authMethods:
        description: |-
          `DEPRECATED`: Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
          use `authData` instead
        items:
          $ref: '#/definitions/UserAuthMethod'
        type: array
      email:
        description: 'Email '
        example: john.doe@email.com
        type: string
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      firstName:
        description: User first name
        type: string
      gender:
        description: |-
          `DEPRECATED`: Gender
          Do NOT use `gender`! It will be ignored.
        type: string
      isNonmemberViewer:
        description: Determines whether user has the role NONMEMBER_VIEWER
        type: boolean
      lastName:
        description: User last name
        type: string
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed
        type: string
      needsToChangePassword:
        description: |-
          `DEPRECATED`: Determines whether user has to change his / her initial password.
          use `authDate.mustChangePassword` instead
        type: boolean
      notifyUser:
        description: |-
          Notify user about his new account
          * default: `true` for `basic` auth type
          * default: `false` for `active_directory`, `openid` and `radius` auth types
        type: boolean
      password:
        description: |-
          `DEPRECATED`: An initial password may be preset
          use `authData` instead
        type: string
      phone:
        description: Phone number
        type: string
      receiverLanguage:
        description: IETF language tag
        example: de-DE
        type: string
      title:
        description: '`DEPRECATED`: Job title'
        type: string
      userName:
        description: Username
        type: string
    required:
      - firstName
      - lastName
    title: CreateUserRequest
    type: object
  Customer:
    description: Customer information
    properties:
      activationCode:
        description: |-
          `DEPRECATED`: Customer activation code string:
          * valid only for types `free` and `demo`
          * for `pay` customers it is empty

          [Deprecated since version 4.8.0]
        type: string
      companyName:
        description: Company name
        type: string
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      customerAttributes:
        $ref: '#/definitions/CustomerAttributes'
        description: Customer attributes
      customerContractType:
        description: Customer type
        enum:
          - free
          - demo
          - pay
        example: pay
        type: string
      id:
        description: Unique identifier for the customer
        format: int64
        type: integer
      isLocked:
        description: |-
          Customer is locked:
          * `false` - unlocked
          * `true` - locked

          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)
        type: boolean
      lastLoginAt:
        description: Date of last seen login for the customer
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      lockStatus:
        description: |-
          `DEPRECATED`: Customer lock status:
          * `false` - unlocked
          * `true` - locked

          Please use `isLocked` instead.
          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)

          [Deprecated since version 4.7.0]
        type: boolean
      providerCustomerId:
        description: Provider customer ID
        type: string
      quotaMax:
        description: Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
        format: int64
        type: integer
      quotaUsed:
        description: Used amount of disc space in bytes
        format: int64
        type: integer
      trialDaysLeft:
        description: |-
          Number of days left for trial period (relevant only for type `demo`)
          (not used)
        format: int32
        type: integer
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      userMax:
        description: Maximal number of users
        format: int32
        type: integer
      userUsed:
        description: Number of users which are already allocated.
        format: int32
        type: integer
    required:
      - companyName
      - createdAt
      - customerContractType
      - id
      - lockStatus
      - quotaMax
      - quotaUsed
      - userMax
      - userUsed
    title: Customer
    type: object
  CustomerAttributes:
    description: List of customer attributes
    properties:
      items:
        description: List of customer attributes
        items:
          $ref: '#/definitions/KeyValueEntry'
        type: array
    required:
      - items
    title: CustomerAttributes
    type: object
  CustomerData:
    description: Customer information
    properties:
      accountsLimit:
        description: User accounts limit
        format: int32
        type: integer
      accountsUsed:
        description: User accounts used
        format: int32
        type: integer
      cntFiles:
        description: |-
          Total number of files
          Visible only with at least one global role.

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      cntFolders:
        description: |-
          Total number of folders
          Visible only with at least one global role.

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      cntRooms:
        description: |-
          Total number of rooms
          Visible only with at least one global role.

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      customerEncryptionEnabled:
        description: Clientside encryption for customer enabled
        type: boolean
      id:
        description: Unique identifier for the customer
        format: int64
        type: integer
      isProviderCustomer:
        description: Customer is Provider Customer
        type: boolean
      name:
        description: Customer name
        type: string
      spaceLimit:
        description: Space limit (in bytes). -1 for unlimited
        format: int64
        type: integer
      spaceUsed:
        description: Space used (in bytes)
        format: int64
        type: integer
    required:
      - accountsLimit
      - accountsUsed
      - customerEncryptionEnabled
      - id
      - isProviderCustomer
      - name
      - spaceLimit
      - spaceUsed
    title: CustomerData
    type: object
  CustomerList:
    description: List of customers
    properties:
      items:
        description: List of customers
        items:
          $ref: '#/definitions/Customer'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: CustomerList
    type: object
  CustomerSettingsRequest:
    description: Request model for setting the customer settings
    properties:
      homeRoomParentName:
        description: Homeroom Parent Name
        type: string
      homeRoomQuota:
        description: Homeroom Quota in bytes
        format: int64
        type: integer
      homeRoomsActive:
        description: Homerooms active
        type: boolean
    title: CustomerSettingsRequest
    type: object
  CustomerSettingsResponse:
    description: Customer settings
    properties:
      homeRoomParentId:
        description: Homeroom Parent ID
        format: int64
        type: integer
      homeRoomParentName:
        description: Homeroom Parent Name
        type: string
      homeRoomQuota:
        description: Homeroom Quota in bytes
        format: int64
        type: integer
      homeRoomsActive:
        description: Homerooms active
        type: boolean
    required:
      - homeRoomsActive
    title: CustomerSettingsResponse
    type: object
  DeleteDeletedNodesRequest:
    description: Request model for deleting nodes from recycle bin
    properties:
      deletedNodeIds:
        description: List of deleted node IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - deletedNodeIds
    title: DeleteDeletedNodesRequest
    type: object
  DeleteNodesRequest:
    description: Request model for deleting nodes
    properties:
      nodeIds:
        description: List of node IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - nodeIds
    title: DeleteNodesRequest
    type: object
  DeletedNode:
    description: Deleted node information (Deleted node can be a folder or file)
    properties:
      accessedAt:
        description: Last access date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      classification:
        description: |-
          Classification ID:
          * `1` - public
          * `2` - internal
          * `3` - confidential
          * `4` - strictly confidential
        enum:
          - 1
          - 2
          - 3
          - 4
        example: 2
        format: int32
        type: integer
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      deletedAt:
        description: Deletion date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      deletedBy:
        $ref: '#/definitions/UserInfo'
        description: Deleted by user
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      id:
        description: Node ID
        format: int64
        type: integer
      isEncrypted:
        description: Encryption state
        type: boolean
      name:
        description: Node name
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      parentPath:
        description: |-
          Parent node path
          `/` if node is a root node (room)
        type: string
      size:
        description: Node size in byte
        format: int64
        type: integer
      type:
        description: Node type
        enum:
          - file
          - folder
        example: file
        type: string
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - name
      - parentId
      - parentPath
      - type
    title: DeletedNode
    type: object
  DeletedNodeSummary:
    description: Deleted node information (Deleted node can be a folder or file)
    properties:
      cntVersions:
        description: Number of deleted versions of this file
        format: int32
        type: integer
      firstDeletedAt:
        description: First deleted version
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      lastDeletedAt:
        description: Last deleted version
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      lastDeletedNodeId:
        description: Node ID of last deleted version
        format: int64
        type: integer
      name:
        description: Node name
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      parentPath:
        description: |-
          Parent node path
          `/` if node is a root node (room)
        type: string
      type:
        description: Node type
        enum:
          - file
          - folder
        example: file
        type: string
    required:
      - cntVersions
      - firstDeletedAt
      - lastDeletedAt
      - lastDeletedNodeId
      - name
      - parentId
      - parentPath
      - type
    title: DeletedNodeSummary
    type: object
  DeletedNodeSummaryList:
    description: List of deleted nodes
    properties:
      items:
        description: List of deleted nodes (summary)
        items:
          $ref: '#/definitions/DeletedNodeSummary'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: DeletedNodeSummaryList
    type: object
  DeletedNodeVersionsList:
    description: List of deleted versions of nodes
    properties:
      items:
        description: List of deleted nodes
        items:
          $ref: '#/definitions/DeletedNode'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: DeletedNodeVersionsList
    type: object
  DownloadShare:
    description: Download Share information
    properties:
      accessKey:
        description: Share access key to generate secure link
        type: string
      classification:
        description: |-
          Classification ID:
          * `1` - public
          * `2` - internal
          * `3` - confidential
          * `4` - strictly confidential

          [Deprecated since version 4.11.0]
        enum:
          - 1
          - 2
          - 3
          - 4
        example: 2
        format: int32
        type: integer
      cntDownloads:
        description: Downloads counter (incremented on each download)
        format: int32
        type: integer
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      dataUrl:
        description: Path to shared download node
        example: 'https://www.random-url.com'
        type: string
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      id:
        description: Share ID
        format: int64
        type: integer
      internalNotes:
        description: |-
          Internal notes (limited to 255 characters)

          [Since version 4.11.0]
        type: string
      isEncrypted:
        description: |-
          Encrypted share
          (this only applies to shared files, not folders)
        type: boolean
      isProtected:
        description: Is share protected by password
        type: boolean
      maxDownloads:
        description: Max allowed downloads
        format: int32
        type: integer
      name:
        description: Alias name
        type: string
      nodeId:
        description: Source node ID
        format: int64
        type: integer
      nodePath:
        description: Path to shared download node
        type: string
      nodeType:
        description: Node type
        example: file
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      notifyCreator:
        description: Notify creator on every download.
        type: boolean
      recipients:
        description: |-
          `DEPRECATED`: CSV string of recipient email addresses

          [Deprecated since version 4.11.0]
        type: string
      showCreatorName:
        description: Show creator first and last name.
        type: boolean
      showCreatorUsername:
        description: Show creator email address.
        type: boolean
      smsRecipients:
        description: |-
          `DEPRECATED`: CSV string of recipient MSISDNs

          [Deprecated since version 4.11.0]
        type: string
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - accessKey
      - cntDownloads
      - createdAt
      - createdBy
      - id
      - name
      - nodeId
      - notifyCreator
    title: DownloadShare
    type: object
  DownloadShareLinkEmail:
    description: Request model for sending an email of a Download Share link
    properties:
      body:
        description: Notification email content
        type: string
      receiverLanguage:
        description: Language tag for messages to receiver
        example: de-DE
        type: string
      recipients:
        description: List of recipient email addresses
        items:
          type: string
        type: array
    required:
      - body
      - recipients
    title: DownloadShareLinkEmail
    type: object
  DownloadShareList:
    description: List of Download Shares
    properties:
      items:
        description: List of Download Shares
        items:
          $ref: '#/definitions/DownloadShare'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: DownloadShareList
    type: object
  DownloadTokenGenerateResponse:
    description: Download URL
    properties:
      downloadUrl:
        description: Download URL
        example: 'https://www.random-url.com'
        type: string
      token:
        description: |-
          `DEPRECATED`: Download token

          [Deprecated since version 4.3.0]
        type: string
    required:
      - downloadUrl
      - token
    title: DownloadTokenGenerateResponse
    type: object
  EnableCustomerEncryptionRequest:
    description: Request model for enabling customer encryption
    properties:
      dataSpaceRescueKey:
        $ref: '#/definitions/UserKeyPairContainer'
        description: System emergency password (rescue key)
      enableCustomerEncryption:
        description: Set `true` to enable encryption for this customer
        type: boolean
    required:
      - dataSpaceRescueKey
      - enableCustomerEncryption
    title: EnableCustomerEncryptionRequest
    type: object
  EncryptRoomRequest:
    description: Request model for handling encryption settings for a room
    properties:
      dataRoomRescueKey:
        $ref: '#/definitions/UserKeyPairContainer'
        description: Room emergency password (rescue key)
      isEncrypted:
        description: Encryption state
        type: boolean
      useDataSpaceRescueKey:
        description: Use system emergency password (rescue key) for files in this room
        type: boolean
    required:
      - isEncrypted
    title: EncryptRoomRequest
    type: object
  EncryptionInfo:
    description: Encryption states
    properties:
      dataSpaceKeyState:
        description: DRACOON key state
        enum:
          - none
          - pending
          - available
        example: none
        type: string
      roomKeyState:
        description: Room key state
        enum:
          - none
          - pending
          - available
        example: none
        type: string
      userKeyState:
        description: User key state
        enum:
          - none
          - pending
          - available
        example: none
        type: string
    required:
      - dataSpaceKeyState
      - roomKeyState
      - userKeyState
    title: EncryptionInfo
    type: object
  EncryptionPasswordPolicies:
    description: Encryption password policies
    properties:
      characterRules:
        $ref: '#/definitions/CharacterRules'
        description: Properties of character related password policies
      minLength:
        description: |-
          Minimum number of characters a password must contain
          (must be between `1` and `1024`)
        format: int32
        type: integer
      rejectKeyboardPatterns:
        description: |-
          Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
          (min. 4 character pattern)
        type: boolean
      rejectUserInfo:
        description: 'Determines whether a password must NOT contain user info (first name, last name, email, user name)'
        type: boolean
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    title: EncryptionPasswordPolicies
    type: object
  ErrorResponse:
    description: Error information
    properties:
      code:
        description: HTTP status code
        format: int32
        type: integer
      debugInfo:
        description: Debug information
        type: string
      errorCode:
        description: Error code
        format: int32
        type: integer
      message:
        description: HTTP status code description
        type: string
    title: ErrorResponse
    type: object
  EventlogConfig:
    description: Eventlog settings
    properties:
      enabled:
        description: Is eventlog enabled?
        type: boolean
      logIpEnabled:
        description: Determines whether user’s IP address is logged.
        type: boolean
      retentionPeriod:
        description: |-
          Retention period (in days) of event log entries.
          After that period, all entries are deleted.
          Recommended value: 7
        format: int32
        type: integer
    title: EventlogConfig
    type: object
  FailoverServer:
    description: Failover server information
    properties:
      failoverEnabled:
        description: RADIUS Failover Server is active
        type: boolean
      failoverIpAddress:
        description: |-
          RADIUS Failover Server IP Address
          Required if failover server is enabled.
        type: string
      failoverPort:
        description: |-
          RADIUS Failover Server Port
          Required if failover server is enabled.
        format: int32
        type: integer
    required:
      - failoverEnabled
      - failoverIpAddress
      - failoverPort
    title: FailoverServer
    type: object
  FileFileKeys:
    description: File key information
    properties:
      fileKeyContainer:
        $ref: '#/definitions/FileKeyContainer'
        description: 'File key container (key, iv, version and tag)'
      id:
        description: File ID
        format: int64
        type: integer
    title: FileFileKeys
    type: object
  FileKey:
    description: File key information
    properties:
      iv:
        description: Initial vector
        type: string
      key:
        description: Encryption key
        type: string
      tag:
        description: |-
          Authentication tag
          (needed with authenticated encryption)
        type: string
      version:
        description: Version
        example: A
        type: string
    required:
      - iv
      - key
      - tag
      - version
    title: FileKey
    type: object
  FileKeyContainer:
    description: File key container
    properties:
      iv:
        description: Initial vector
        type: string
      key:
        description: Encryption key
        type: string
      tag:
        description: |-
          Authentication tag
          (needed with authenticated encryption)
        type: string
      version:
        description: Version
        example: A
        type: string
    required:
      - iv
      - key
      - version
    title: FileKeyContainer
    type: object
  FirstAdminUser:
    description: First administrator user
    properties:
      authData:
        $ref: '#/definitions/UserAuthData'
        description: |-
          Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
      authMethods:
        description: |-
          `DEPRECATED`: Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
          use `authData` instead
        items:
          $ref: '#/definitions/UserAuthMethod'
        type: array
      email:
        description: 'Email '
        example: john.doe@email.com
        type: string
      firstName:
        description: User first name
        type: string
      gender:
        description: '`DEPRECATED`: Gender'
        type: string
      language:
        description: '`DEPRECATED`: Language ID or ISO 639-1 code'
        example: de
        type: string
      lastName:
        description: User last name
        type: string
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed
        type: string
      needsToChangePassword:
        description: |-
          `DEPRECATED`: Determines whether user has to change his / her initial password.
          use `authDate.mustChangePassword` instead
        type: boolean
      needsToChangeUserName:
        description: |-
          `DEPRECATED`: If `true`, the user must change the `userName` at the first login.
          (default: `false`)
          will be removed
        type: boolean
      notifyUser:
        description: |-
          Notify user about his new account
          * default: `true` for `basic` auth type
          * default: `false` for `active_directory`, `openid` and `radius` auth types
        example: true
        type: boolean
      password:
        description: |-
          `DEPRECATED`: An initial password may be preset
          use `authData` instead
        type: string
      phone:
        description: Phone number
        type: string
      receiverLanguage:
        description: IETF language tag
        example: de-DE
        type: string
      title:
        description: '`DEPRECATED`: Job title'
        type: string
      userName:
        description: Username
        type: string
    required:
      - firstName
      - lastName
    title: FirstAdminUser
    type: object
  GeneralSettings:
    description: General settings
    properties:
      authTokenRestrictions:
        $ref: '#/definitions/AuthTokenRestrictions'
        description: |-
          Defines OAuth token restrictions

          [Since version 4.13.0]
      cryptoEnabled:
        description: |-
          Activation status of client-side encryption.
          Can only be enabled once; disabling is not possible.
        type: boolean
      emailNotificationButtonEnabled:
        description: Enable email notification button
        type: boolean
      eulaEnabled:
        description: Each user has to confirm the EULA at first login.
        type: boolean
      hideLoginInputFields:
        description: |-
          Defines if login fields should be hidden

          [Since version 4.13.0]
        type: boolean
      mediaServerEnabled:
        description: |-
          `DEPRECATED`: Is media server enabled?

          [Deprecated since version 4.12.0]
        type: boolean
      s3TagsEnabled:
        description: |-
          Defines if S3 tags are enabled

          [Since version 4.9.0]
        type: boolean
      sharePasswordSmsEnabled:
        description: Allow sending of share passwords via SMS
        type: boolean
      useS3Storage:
        description: Defines if S3 is used as storage backend
        type: boolean
      weakPasswordEnabled:
        description: |-
          `DEPRECATED`: Allow weak password
          * A weak password has to fulfill the following criteria:
             * is at least 8 characters long
             * contains letters and numbers
          * A strong password has to fulfill the following criteria in addition:
             * contains at least one special character
             * contains upper and lower case characters
          Please use `GET /system/config/policies/passwords` API to get configured password policies.

          [Deprecated since version 4.14.0]
        type: boolean
    title: GeneralSettings
    type: object
  GeneralSettingsInfo:
    description: General settings
    properties:
      cryptoEnabled:
        description: |-
          Activation status of client-side encryption.
          Can only be enabled once; disabling is not possible.
        type: boolean
      emailNotificationButtonEnabled:
        description: Enable email notification button
        type: boolean
      eulaEnabled:
        description: Each user has to confirm the EULA at first login.
        type: boolean
      homeRoomParentId:
        description: |-
          Homeroom Parent ID

          [Since version 4.10.0]
        format: int64
        type: integer
      homeRoomsActive:
        description: |-
          Homerooms active

          [Since version 4.10.0]
        type: boolean
      mediaServerEnabled:
        description: |-
          `DEPRECATED`: Is media server enabled?

          [Deprecated since version 4.12.0]
        type: boolean
      s3TagsEnabled:
        description: |-
          Defines if S3 tags are enabled

          [Since version 4.9.0]
        type: boolean
      sharePasswordSmsEnabled:
        description: Allow sending of share passwords via SMS
        type: boolean
      useS3Storage:
        description: Defines if S3 is used as storage backend
        type: boolean
      weakPasswordEnabled:
        description: |-
          `DEPRECATED`: Allow weak password
          * A weak password has to fulfill the following criteria:
             * is at least 8 characters long
             * contains letters and numbers
          * A strong password has to fulfill the following criteria in addition:
             * contains at least one special character
             * contains upper and lower case characters
        type: boolean
    title: GeneralSettingsInfo
    type: object
  GeneratePresignedUrlsRequest:
    description: Request model for generating presigned URLs
    properties:
      firstPartNumber:
        description: 'First part number of a range of requested presigned URLs (for S3 it is: `1`)'
        format: int32
        type: integer
      lastPartNumber:
        description: Last part number of a range of requested presigned URLs
        format: int32
        type: integer
      size:
        description: |-
          `Content-Length` header size for each presigned URL (in bytes)
          *MUST* be >= 5 MB except the last part.
        format: int64
        type: integer
    required:
      - firstPartNumber
      - lastPartNumber
      - size
    title: GeneratePresignedUrlsRequest
    type: object
  Group:
    description: Group information
    properties:
      cntUsers:
        description: Amount of users
        format: int32
        type: integer
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      groupRoles:
        $ref: '#/definitions/RoleList'
        description: Group assignment roles
      id:
        description: Unique identifier for the group
        format: int64
        type: integer
      name:
        description: Group name
        type: string
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - cntUsers
      - createdAt
      - createdBy
      - id
      - name
    title: Group
    type: object
  GroupIds:
    description: List of group IDs
    properties:
      ids:
        description: List of group IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - ids
    title: GroupIds
    type: object
  GroupInfo:
    description: Group information
    properties:
      id:
        description: Unique identifier for the group
        format: int64
        type: integer
      name:
        description: Group name
        type: string
    required:
      - id
      - name
    title: GroupInfo
    type: object
  GroupList:
    description: List of groups
    properties:
      items:
        description: List of groups
        items:
          $ref: '#/definitions/Group'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: GroupList
    type: object
  GroupUser:
    description: User information
    properties:
      displayName:
        description: |-
          `DEPRECATED`: Display name
          use information from `UserInfo` instead to combine a display name

          [Deprecated since version 4.11.0]
        type: string
      email:
        description: |-
          `DEPRECATED`: Email 
          use `email` from `UserInfo` instead

          [Deprecated since version 4.11.0]
        example: john.doe@email.com
        type: string
      id:
        description: |-
          `DEPRECATED`: Unique identifier for the user
          use `id` from `UserInfo` instead

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      isMember:
        description: Determines whether user is a member of the group or not
        type: boolean
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed

          [Deprecated since version 4.11.0]
        type: string
      userInfo:
        $ref: '#/definitions/UserInfo'
        description: |-
          Information about the user

          [Since version 4.11.0]
    required:
      - displayName
      - email
      - id
      - isMember
      - login
      - userInfo
    title: GroupUser
    type: object
  GroupUserList:
    description: List of users
    properties:
      items:
        description: List of group-user mappings
        items:
          $ref: '#/definitions/GroupUser'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: GroupUserList
    type: object
  InfrastructureProperties:
    description: Infrastructure properties
    properties:
      mediaServerConfigEnabled:
        description: Is media server enabled?
        type: boolean
      s3DefaultRegion:
        description: Suggested S3 Region
        type: string
      s3EnforceDirectUpload:
        description: |-
          Enforce direct upload to S3

          [Since version 4.15.0]
        type: boolean
      smsConfigEnabled:
        description: Allow sending of share passwords via SMS
        type: boolean
    title: InfrastructureProperties
    type: object
  KeyValueEntry:
    description: Key-value pair
    properties:
      key:
        description: Entry key
        type: string
      value:
        description: Entry value
        type: string
    required:
      - key
      - value
    title: KeyValueEntry
    type: object
  LastAdminGroupRoom:
    description: Room information
    properties:
      id:
        description: Room ID
        format: int64
        type: integer
      name:
        description: Room name
        type: string
      parentId:
        description: Parent room ID
        format: int64
        type: integer
      parentPath:
        description: |-
          Parent node path
          `/` if node is a root node (room)
        type: string
    required:
      - id
      - name
      - parentPath
    title: LastAdminGroupRoom
    type: object
  LastAdminGroupRoomList:
    description: List of (last admin group) rooms
    properties:
      items:
        description: List of last admin rooms
        items:
          $ref: '#/definitions/LastAdminGroupRoom'
        type: array
    required:
      - items
    title: LastAdminGroupRoomList
    type: object
  LastAdminUserRoom:
    description: Room information
    properties:
      id:
        description: Room ID
        format: int64
        type: integer
      lastAdminInGroup:
        description: Determines whether user is last admin of a room due to being the last member of last admin group
        type: boolean
      lastAdminInGroupId:
        description: |-
          ID of the last admin group where the user is the only remaining member
          (returned only if `lastAdminInGroup` is `true`)
        format: int64
        type: integer
      name:
        description: Room name
        type: string
      parentId:
        description: Parent room ID
        format: int64
        type: integer
      parentPath:
        description: |-
          Parent node path
          `/` if node is a root node (room)
        type: string
    required:
      - id
      - lastAdminInGroup
      - name
      - parentPath
    title: LastAdminUserRoom
    type: object
  LastAdminUserRoomList:
    description: List of (last admin user) rooms
    properties:
      items:
        description: List of last admin rooms
        items:
          $ref: '#/definitions/LastAdminUserRoom'
        type: array
    required:
      - items
    title: LastAdminUserRoomList
    type: object
  LogEvent:
    description: Log event information
    properties:
      attribute1:
        description: Attribute 1
        type: string
      attribute2:
        description: Attribute 2
        type: string
      attribute3:
        description: Attribute 3
        type: string
      authParentSource:
        description: Auth parent source ID
        type: string
      authParentTarget:
        description: Auth parent target ID
        type: string
      customerId:
        description: Unique identifier for the customer
        format: int64
        type: integer
      id:
        description: Event ID
        format: int64
        type: integer
      message:
        description: Event description
        type: string
      objectId1:
        description: Object ID 1
        format: int64
        type: integer
      objectId2:
        description: Object ID 2
        format: int64
        type: integer
      objectName1:
        description: Object name 1
        type: string
      objectName2:
        description: Object name 2
        type: string
      objectType1:
        description: Object type 1
        format: int32
        type: integer
      objectType2:
        description: Object type 2
        format: int32
        type: integer
      operationId:
        description: Operation type ID
        format: int32
        type: integer
      operationName:
        description: Operation name
        type: string
      status:
        description: |-
          Operation status:
          * `0` - Success
          * `2` - Error
        enum:
          - 0
          - 2
        format: int32
        type: integer
      time:
        description: Event timestamp
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      userClient:
        description: Client
        type: string
      userId:
        description: Unique identifier for the user
        format: int64
        type: integer
      userIp:
        description: User IP
        type: string
      userName:
        description: Username
        type: string
    required:
      - id
      - message
      - time
      - userId
    title: LogEvent
    type: object
  LogEventList:
    description: List of log events
    properties:
      items:
        description: List of log events
        items:
          $ref: '#/definitions/LogEvent'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: LogEventList
    type: object
  LogOperation:
    description: Log operation
    properties:
      id:
        description: Operation type ID
        format: int32
        type: integer
      isDeprecated:
        description: Determines whether log operation is deprecated or not
        type: boolean
      name:
        description: Operation name
        type: string
    required:
      - id
      - isDeprecated
      - name
    title: LogOperation
    type: object
  LogOperationList:
    description: List of log operations
    properties:
      operationList:
        description: List of all log operations
        items:
          $ref: '#/definitions/LogOperation'
        type: array
    required:
      - operationList
    title: LogOperationList
    type: object
  LoginPasswordPolicies:
    description: Login password policies
    properties:
      characterRules:
        $ref: '#/definitions/CharacterRules'
        description: Properties of character related password policies
      minLength:
        description: |-
          Minimum number of characters a password must contain
          (must be between `1` and `1024`)
        format: int32
        type: integer
      numberOfArchivedPasswords:
        description: |-
          Number of passwords to archive
          (must be between `0` and `10`; `0` means that password history is disabled)
        format: int32
        type: integer
      passwordExpiration:
        $ref: '#/definitions/PasswordExpiration'
        description: Properties of password expiration policy
      rejectDictionaryWords:
        description: Determines whether a password must NOT contain word(s) from a dictionary
        type: boolean
      rejectKeyboardPatterns:
        description: |-
          Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
          (min. 4 character pattern)
        type: boolean
      rejectUserInfo:
        description: 'Determines whether a password must NOT contain user info (first name, last name, email, user name)'
        type: boolean
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
      userLockout:
        $ref: '#/definitions/UserLockout'
        description: Properties of user lockout policy
    title: LoginPasswordPolicies
    type: object
  LoginRequest:
    description: Request model for performing an authentication
    properties:
      authType:
        description: |-
          Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
        enum:
          - sql
          - active_directory
          - radius
        example: sql
        type: string
      language:
        description: '`DEPRECATED`: Language ID or ISO 639-1 code'
        example: de
        type: string
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed
        type: string
      password:
        description: Password
        type: string
      state:
        description: |-
          For RADIUS Access-Challenge
          If a `replyState` is returned, it must be included as `state` in the following request.
        type: string
      token:
        description: Token
        type: string
      userName:
        description: Username
        type: string
    required:
      - password
    title: LoginRequest
    type: object
  LoginResponse:
    description: Authentication token
    properties:
      token:
        description: Authentication token
        type: string
    required:
      - token
    title: LoginResponse
    type: object
  MailServerConfig:
    description: Mail server settings
    properties:
      authenticationEnabled:
        description: Set `true` if the email server requires authentication.
        type: boolean
      host:
        description: Email server host
        type: string
      passwordDefined:
        description: Is password defined for email server?
        type: boolean
      port:
        description: Email server port
        format: int32
        type: integer
      sslEnabled:
        description: |-
          Email server requires SSL connection?
          Requires `starttlsEnabled` to be `false`
        type: boolean
      starttlsEnabled:
        description: |-
          Email server requires StartTLS connection?
          Requires `sslEnabled` to be `false`
        type: boolean
      username:
        description: Username for email server
        type: string
    title: MailServerConfig
    type: object
  MissingKeysResponse:
    description: Missng keys information
    properties:
      files:
        description: List of file keys
        items:
          $ref: '#/definitions/FileFileKeys'
        type: array
      items:
        description: List of user ID and file ID mappings
        items:
          $ref: '#/definitions/UserIdFileIdItem'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
      users:
        description: List of user public keys
        items:
          $ref: '#/definitions/UserUserPublicKey'
        type: array
    title: MissingKeysResponse
    type: object
  MoveNode:
    description: Moved node information
    properties:
      id:
        description: Source node ID
        format: int64
        type: integer
      name:
        description: New node name
        type: string
    required:
      - id
    title: MoveNode
    type: object
  MoveNodesRequest:
    description: Request model for moving nodes
    properties:
      items:
        description: List of nodes to be moved
        items:
          $ref: '#/definitions/MoveNode'
        type: array
      keepShareLinks:
        description: |-
          Preserve Download Share Links and point them to the new node.
          (default: `false`)
        type: boolean
      nodeIds:
        description: |-
          `DEPRECATED`: Node IDs
          Please use `items` instead.
        items:
          format: int64
          type: integer
        type: array
      resolutionStrategy:
        description: |-
          Node conflict resolution strategy:
          * `autorename`
          * `overwrite`
          * `fail`

          (default: `autorename`)
        enum:
          - autorename
          - overwrite
          - fail
        example: autorename
        type: string
    title: MoveNodesRequest
    type: object
  NewCustomerRequest:
    description: Request model for creating a customer
    properties:
      activationCode:
        description: |-
          `DEPRECATED`: Customer activation code string:
          * valid only for types `free` and `demo`
          * for `pay` customers it is empty
        type: string
      companyName:
        description: Company name
        type: string
      customerAttributes:
        $ref: '#/definitions/CustomerAttributes'
        description: Customer attributes
      customerContractType:
        description: Customer type
        enum:
          - free
          - demo
          - pay
        example: pay
        type: string
      firstAdminUser:
        $ref: '#/definitions/FirstAdminUser'
        description: First admin user of a customer
      isLocked:
        description: |-
          Customer is locked:
          * `false` - unlocked
          * `true` - locked

          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)
        type: boolean
      lockStatus:
        description: |-
          `DEPRECATED`: Customer lock status:
          * `false` - unlocked
          * `true` - locked

          Please use `isLocked` instead.
          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)
        type: boolean
      providerCustomerId:
        description: Provider customer ID
        type: string
      quotaMax:
        description: Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
        format: int64
        type: integer
      trialDays:
        description: |-
          Number of days left for trial period (relevant only for type `demo`)
          (not used)
        format: int32
        type: integer
      userMax:
        description: Maximal number of users
        format: int32
        type: integer
    required:
      - customerContractType
      - firstAdminUser
      - quotaMax
      - userMax
    title: NewCustomerRequest
    type: object
  NewCustomerResponse:
    description: Customer information
    properties:
      activationCode:
        description: |-
          `DEPRECATED`: Customer activation code string:
          * valid only for types `free` and `demo`
          * for `pay` customers it is empty

          [Deprecated since version 4.8.0]
        type: string
      companyName:
        description: Company name
        type: string
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      customerAttributes:
        $ref: '#/definitions/CustomerAttributes'
        description: Customer attributes
      customerContractType:
        description: Customer type
        enum:
          - free
          - demo
          - pay
        example: pay
        type: string
      firstAdminUser:
        $ref: '#/definitions/FirstAdminUser'
        description: First admin user of a customer
      id:
        description: Unique identifier for the customer
        format: int64
        type: integer
      isLocked:
        description: |-
          Customer is locked:
          * `false` - unlocked
          * `true` - locked

          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)
        type: boolean
      lockStatus:
        description: |-
          `DEPRECATED`: Customer lock status:
          * `false` - unlocked
          * `true` - locked

          Please use `isLocked` instead.
          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)

          [Deprecated since version 4.7.0]
        type: boolean
      providerCustomerId:
        description: Provider customer ID
        type: string
      quotaMax:
        description: Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
        format: int64
        type: integer
      trialDays:
        description: |-
          Number of days left for trial period (relevant only for type `demo`)
          (not used)
        format: int32
        type: integer
      userMax:
        description: Maximal number of users
        format: int32
        type: integer
    required:
      - companyName
      - customerContractType
      - firstAdminUser
      - lockStatus
      - quotaMax
      - userMax
    title: NewCustomerResponse
    type: object
  Node:
    description: 'Node information (Node can be a room, folder or file)'
    properties:
      authParentId:
        description: |-
          Auth parent room ID

          [Since version 4.15.0]
        format: int64
        type: integer
      branchVersion:
        description: Version of last change in this node or a node further down the tree.
        format: int64
        type: integer
      children:
        description: |-
          `DEPRECATED`: Child nodes list (if requested)
          (for rooms / folders only)

          [Deprecated since version 4.10.0]
        items:
          $ref: '#/definitions/Node'
        type: array
      classification:
        description: |-
          Classification ID:
          * `1` - public
          * `2` - internal
          * `3` - confidential
          * `4` - strictly confidential
        enum:
          - 1
          - 2
          - 3
          - 4
        example: 2
        format: int32
        type: integer
      cntAdmins:
        description: |-
          `DEPRECATED`: Number of admins (for rooms only)

          [Deprecated since version 4.2.0]
        format: int32
        type: integer
      cntChildren:
        description: |-
          Number of direct children
          (no recursion; for rooms / folders only)

          [Deprecated since version 4.11.0]
        format: int32
        type: integer
      cntComments:
        description: Returns the number of comments of this node.
        format: int32
        type: integer
      cntDeletedVersions:
        description: |-
          Number of deleted versions of this file / folder
          (for rooms / folders only)
        format: int32
        type: integer
      cntDownloadShares:
        description: Returns the number of Download Shares of this node.
        format: int32
        type: integer
      cntFiles:
        description: |-
          Amount of direct child files where this node is the parent node
          (no recursion; for rooms / folders only)

          [Since version 4.11.0]
        format: int32
        type: integer
      cntFolders:
        description: |-
          Amount of direct child folders where this node is the parent node
          (no recursion; for rooms / folders only)

          [Since version 4.11.0]
        format: int32
        type: integer
      cntRooms:
        description: |-
          Amount of direct child rooms where this node is the parent node
          (no recursion; for rooms only)

          [Since version 4.11.0]
        format: int32
        type: integer
      cntUploadShares:
        description: Returns the number of Upload Shares of this node.
        format: int32
        type: integer
      cntUsers:
        description: |-
          `DEPRECATED`: Number of users (for rooms only)

          [Deprecated since version 4.2.0]
        format: int32
        type: integer
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      encryptionInfo:
        $ref: '#/definitions/EncryptionInfo'
        description: Encryption info (states)
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      fileType:
        description: File type / extension (for files only)
        type: string
      hasActivitiesLog:
        description: |-
          Is activities log active (for rooms only)
          (default: `true`)
        example: true
        type: boolean
      hasRecycleBin:
        description: |-
          `DEPRECATED`: Is recycle bin active (for rooms only)
          Recycle bin is always on (disabling is not possible).

          [Deprecated since version 4.10.0]
        example: true
        type: boolean
      hash:
        description: MD5 hash of file
        type: string
      id:
        description: Node ID
        format: int64
        type: integer
      inheritPermissions:
        description: |-
          Inherit permissions from parent room
          (default: `false` if `parentId` is `0`; otherwise: `true`)
        type: boolean
      isBrowsable:
        description: |-
          Determines whether node is browsable by client (for rooms only)

          [Since version 4.11.0]
        type: boolean
      isEncrypted:
        description: Encryption state
        type: boolean
      isFavorite:
        description: Node is marked as favorite (for rooms / folders only)
        type: boolean
      mediaToken:
        description: Media server media token
        type: string
      mediaType:
        description: File media type (for files only)
        type: string
      name:
        description: Name
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      parentPath:
        description: |-
          Parent node path
          `/` if node is a root node (room)
        type: string
      permissions:
        $ref: '#/definitions/NodePermissions'
        description: Available permissions for this node
      quota:
        description: Quota in byte
        format: int64
        type: integer
      recycleBinRetentionPeriod:
        description: |-
          Retention period for deleted nodes in days
          (Integer between 0 and 9999)
        format: int32
        type: integer
      size:
        description: Node size in byte
        format: int64
        type: integer
      type:
        description: Node type
        enum:
          - room
          - folder
          - file
        example: file
        type: string
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - id
      - name
      - type
    title: Node
    type: object
  NodeBatchOperationErrorInfos:
    properties:
      conflictNodes:
        description: List of nodes that caused a conflict
        items:
          $ref: '#/definitions/ConflictNode'
        type: array
    required:
      - conflictNodes
    title: NodeBatchOperationErrorInfos
    type: object
  NodeBatchOperationErrorResponse:
    description: Node batch operation error information
    properties:
      code:
        description: HTTP status code
        format: int32
        type: integer
      debugInfo:
        description: Debug information
        type: string
      errorCode:
        description: Error code
        format: int32
        type: integer
      errorInfos:
        $ref: '#/definitions/NodeBatchOperationErrorInfos'
        description: Contains list of conflict nodes
      message:
        description: HTTP status code description
        type: string
    required:
      - errorInfos
    title: NodeBatchOperationErrorResponse
    type: object
  NodeList:
    description: List of nodes
    properties:
      items:
        description: List of nodes
        items:
          $ref: '#/definitions/Node'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: NodeList
    type: object
  NodeParent:
    description: Parent node
    properties:
      id:
        description: Node ID
        format: int64
        type: integer
      name:
        description: Node name
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      type:
        description: Node type
        type: string
    required:
      - id
      - name
      - type
    title: NodeParent
    type: object
  NodeParentList:
    description: List of parent nodes
    properties:
      items:
        description: List of node parents
        items:
          $ref: '#/definitions/NodeParent'
        type: array
    title: NodeParentList
    type: object
  NodePermissions:
    description: Node permissions
    properties:
      change:
        description: 'User / Group may update metadata of nodes: rename files and folders, change classification, etc.'
        type: boolean
      create:
        description: 'User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.'
        type: boolean
      delete:
        description: 'User / Group may overwrite and remove files / folders, move files from this room.'
        type: boolean
      deleteRecycleBin:
        description: User / Group may permanently remove files / folders from the recycle bin.
        type: boolean
      manage:
        description: |-
          User / Group may grant all of the above permissions to other users and groups independently,
          may update room metadata and create / update / delete subordinary rooms, has all permissions.
        type: boolean
      manageDownloadShare:
        description: User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.
        type: boolean
      manageUploadShare:
        description: 'User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.'
        type: boolean
      read:
        description: 'User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.'
        type: boolean
      readRecycleBin:
        description: User / Group may look up files / folders in the recycle bin.
        type: boolean
      restoreRecycleBin:
        description: User / Group may restore files / folders from recycle bin - room permissions required.
        type: boolean
    required:
      - change
      - create
      - delete
      - deleteRecycleBin
      - manage
      - manageDownloadShare
      - manageUploadShare
      - read
      - readRecycleBin
      - restoreRecycleBin
    title: NodePermissions
    type: object
  NotRestoredNode:
    description: Not restored node information
    properties:
      id:
        description: Not restored node ID
        format: int64
        type: integer
      name:
        description: Node name
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      parentPath:
        description: |-
          Parent node path
          `/` if node is a root node (room)
        type: string
      type:
        description: Node type
        enum:
          - room
          - folder
        example: file
        type: string
    required:
      - name
      - parentId
      - parentPath
      - type
    title: NotRestoredNode
    type: object
  NotRestoredNodeList:
    description: List of not restored nodes
    properties:
      items:
        description: List of not restored nodes
        items:
          $ref: '#/definitions/NotRestoredNode'
        type: array
    required:
      - items
    title: NotRestoredNodeList
    type: object
  OAuthAuthorization:
    description: OAuth authorization
    properties:
      clientId:
        description: ID of the OAuth client
        type: string
      clientName:
        description: 'Name, which is shown at the client configuration and authorization.'
        type: string
      createdAt:
        description: |-
          Creation date of the authorization

          [Since version 4.13.0]
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      expiresAt:
        description: Expiration date of the authorization
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      id:
        description: |-
          ID of the OAuth authorization

          [Since version 4.12.0]
        format: int64
        type: integer
      isStandard:
        description: |-
          Determines whether client is a standard client.

          [Since version 4.12.0]
        type: boolean
      usedAt:
        description: |-
          Usage date of the authorization
          (Time of last usage.)

          [Since version 4.13.0]
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      userAgentCategory:
        description: |-
          User agent category.

          [Since version 4.12.0]
        enum:
          - browser
          - native
          - unknown
        example: browser
        type: string
      userAgentInfo:
        description: |-
          User agent info.

          [Since version 4.12.0]
        type: string
      userAgentOs:
        description: |-
          User agent OS.

          [Since version 4.12.0]
        type: string
      userAgentType:
        description: |-
          User agent type.

          [Since version 4.12.0]
        type: string
    required:
      - clientId
      - clientName
      - userAgentCategory
    title: OAuthAuthorization
    type: object
  OAuthClient:
    description: OAuth client information
    properties:
      accessTokenValidity:
        description: Validity of the access token in seconds.
        format: int32
        type: integer
      clientId:
        description: ID of the OAuth client
        type: string
      clientName:
        description: 'Name, which is shown at the client configuration and authorization.'
        type: string
      clientSecret:
        description: 'Secret, which client uses at authentication.'
        type: string
      clientType:
        description: Determines whether client is a confidential or public client.
        enum:
          - confidential
          - public
        example: confidential
        type: string
      grantTypes:
        description: |-
          Authorized grant types
          * `authorization_code`
          * `implicit`
          * `password`
          * `client_credentials`
          * `refresh_token`

          cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
        example:
          - password
        items:
          type: string
        type: array
      isEnabled:
        description: Determines whether client is enabled.
        example: true
        type: boolean
      isStandard:
        description: Determines whether client is a standard client.
        type: boolean
      redirectUris:
        description: 'URIs, to which a user is redirected after authorization.'
        items:
          type: string
        type: array
      refreshTokenValidity:
        description: Validity of the refresh token in seconds.
        format: int32
        type: integer
    required:
      - clientId
    title: OAuthClient
    type: object
  ObjectExpiration:
    description: Expiration information
    properties:
      enableExpiration:
        description: enabled / disabled
        type: boolean
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
    required:
      - enableExpiration
    title: ObjectExpiration
    type: object
  OpenIdAuthInfo:
    description: List of OpenID Connect providers
    properties:
      items:
        description: List of available OpenID Connect identity providers
        items:
          $ref: '#/definitions/OpenIdProvider'
        type: array
    required:
      - items
    title: OpenIdAuthInfo
    type: object
  OpenIdAuthResources:
    description: List of OpenID Connect providers
    properties:
      openIdProviders:
        description: List of available OpenID Connect identity providers
        items:
          $ref: '#/definitions/OpenIdProvider'
        type: array
    required:
      - openIdProviders
    title: OpenIdAuthResources
    type: object
  OpenIdIdpConfig:
    description: OpenID Connect IDP configuration
    properties:
      authorizationEndPointUrl:
        description: URL of the authorization endpoint
        example: 'https://www.random-url.com'
        type: string
      clientId:
        description: ID of the OpenID client
        type: string
      clientSecret:
        description: 'Secret, which client uses at authentication.'
        type: string
      fallbackMappingClaim:
        description: Name of the claim which is used for the user mapping fallback.
        example: sub
        type: string
      flow:
        description: |-
          Flow, which is used at authentication

          [Since version 4.11.0]
        enum:
          - authorization_code
          - hybrid
        example: authorization_code
        type: string
      id:
        description: ID
        format: int32
        type: integer
      issuer:
        description: |-
          Issuer identifier of the IDP
          The value is a case sensitive URL.
        example: 'https://www.random-url.com'
        type: string
      jwksEndPointUrl:
        description: URL of the JWKS endpoint
        example: 'https://www.random-url.com'
        type: string
      mappingClaim:
        description: Name of the claim which is used for the user mapping.
        example: email
        type: string
      name:
        description: Name of the IDP
        type: string
      pkceChallengeMethod:
        description: |-
          PKCE code challenge method.
          cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
        type: string
      pkceEnabled:
        description: |-
          Determines whether PKCE is enabled.
          cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          (default: `false`)
        type: boolean
      redirectUris:
        description: 'URIs, to which a user is redirected after authorization.'
        items:
          type: string
        type: array
      scopes:
        description: |-
          List of requested scopes
          Usually `openid` and the names of the requested claims.
        items:
          type: string
        type: array
      tokenEndPointUrl:
        description: URL of the token endpoint
        example: 'https://www.random-url.com'
        type: string
      userImportEnabled:
        description: |-
          Determines if a DRACOON account is automatically created for a new user
          who successfully logs on with his / her AD / IDP account.
        type: boolean
      userImportGroup:
        description: |-
          User group that is assigned to users who are created by automatic import.
          Reset with `0`
        format: int64
        type: integer
      userInfoEndPointUrl:
        description: URL of the user info endpoint
        example: 'https://www.random-url.com'
        type: string
      userManagementUrl:
        description: |-
          URL of the user management UI.
          Use empty string to remove.
        type: string
      userUpdateEnabled:
        description: |-
          Determines if the DRACOON account is updated with data from AD / IDP.
          For OpenID Connect, the scopes `email` and `profile` are needed.
          (default: `false`)
        type: boolean
    required:
      - id
    title: OpenIdIdpConfig
    type: object
  OpenIdProvider:
    description: OpenID Connect provider information
    properties:
      id:
        description: ID
        format: int32
        type: integer
      isGlobalAvailable:
        description: Is available for all customers
        type: boolean
      issuer:
        description: |-
          Issuer identifier of the IDP
          The value is a case sensitive URL.
        example: 'https://www.random-url.com'
        type: string
      mappingClaim:
        description: Name of the claim which is used for the user mapping.
        example: email
        type: string
      name:
        description: Name of the IDP
        type: string
      userManagementUrl:
        description: |-
          URL of the user management UI.
          Use empty string to remove.
        type: string
    required:
      - id
      - issuer
      - mappingClaim
      - name
    title: OpenIdProvider
    type: object
  PasswordExpiration:
    description: Password expiration information
    properties:
      enabled:
        description: Determines whether password expiration is enabled
        type: boolean
      maxPasswordAge:
        description: Maximum allowed password age (in days)
        format: int32
        type: integer
    required:
      - enabled
    title: PasswordExpiration
    type: object
  PasswordPoliciesConfig:
    description: Set of password policies
    properties:
      encryptionPasswordPolicies:
        $ref: '#/definitions/EncryptionPasswordPolicies'
        description: Set of policies a encryption password must fulfill
      loginPasswordPolicies:
        $ref: '#/definitions/LoginPasswordPolicies'
        description: Set of policies a login password must fulfill
      sharesPasswordPolicies:
        $ref: '#/definitions/SharesPasswordPolicies'
        description: Set of policies a shares password must fulfill
    title: PasswordPoliciesConfig
    type: object
  PasswordPolicyViolationResponse:
    description: List of violated password policies
    properties:
      code:
        description: HTTP status code
        format: int32
        type: integer
      debugInfo:
        description: Debug information
        type: string
      errorCode:
        description: Error code
        format: int32
        type: integer
      message:
        description: HTTP status code description
        type: string
      violatedPasswordPolicies:
        description: List of violated password policies
        items:
          $ref: '#/definitions/ViolatedPasswordPolicy'
        type: array
    title: PasswordPolicyViolationResponse
    type: object
  PendingAssignment:
    description: Pending assignment information
    properties:
      groupId:
        description: Unique identifier for the group
        format: int64
        type: integer
      roomId:
        description: Room ID
        format: int64
        type: integer
      state:
        description: |-
          Acceptance state:
          * `ACCEPTED`
          * `WAITING`
          * `DENIED`
        enum:
          - ACCEPTED
          - WAITING
          - DENIED
        example: ACCEPTED
        type: string
      userId:
        description: Unique identifier for the user
        format: int64
        type: integer
    required:
      - groupId
      - roomId
      - state
      - userId
    title: PendingAssignment
    type: object
  PendingAssignmentData:
    description: Pending assignment information
    properties:
      groupId:
        description: |-
          `DEPRECATED`: Unique identifier for the group
          use `id` from `GroupInfo` instead

          [Deprecated since version 4.2.0]
        format: int64
        type: integer
      groupInfo:
        $ref: '#/definitions/GroupInfo'
        description: |-
          Information about group with pending assignment option

          [Since version 4.11.0]
      pendingGroupData:
        $ref: '#/definitions/PendingGroupData'
        description: |-
          `DEPRECATED`: Information about group with pending assignment option
          use `groupInfo` instead

          [Deprecated since version 4.11.0]
      pendingUserData:
        $ref: '#/definitions/PendingUserData'
        description: |-
          `DEPRECATED`: Information about pending users
          use `userInfo` instead

          [Deprecated since version 4.11.0]
      roomId:
        description: Room ID
        format: int64
        type: integer
      state:
        description: |-
          Acceptance state:
          * `ACCEPTED`
          * `WAITING`
          * `DENIED`
        enum:
          - ACCEPTED
          - WAITING
          - DENIED
        example: ACCEPTED
        type: string
      userId:
        description: |-
          `DEPRECATED`: Unique identifier for the user
          use `id` from `UserInfo` instead

          [Deprecated since version 4.2.0]
        format: int64
        type: integer
      userInfo:
        $ref: '#/definitions/UserInfo'
        description: |-
          Information about pending users

          [Since version 4.11.0]
    required:
      - groupInfo
      - pendingGroupData
      - pendingUserData
      - roomId
      - state
      - userInfo
    title: PendingAssignmentData
    type: object
  PendingAssignmentList:
    description: List of pending assignments
    properties:
      items:
        description: List of pending assignment information
        items:
          $ref: '#/definitions/PendingAssignmentData'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
    title: PendingAssignmentList
    type: object
  PendingAssignmentsRequest:
    description: Request model for handling pending assignments
    properties:
      items:
        description: List of pending assignments
        items:
          $ref: '#/definitions/PendingAssignment'
        type: array
    required:
      - items
    title: PendingAssignmentsRequest
    type: object
  PendingGroupData:
    description: Pending group information (DEPRECATED)
    properties:
      id:
        description: |-
          `DEPRECATED`: Unique identifier for the group
          use `id` from `GroupInfo` instead

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      name:
        description: |-
          `DEPRECATED`: Group name
          use `name` from `GroupInfo` instead

          [Deprecated since version 4.11.0]
        type: string
    required:
      - id
      - name
    title: PendingGroupData
    type: object
  PendingUserData:
    description: Pending user information (DEPRECATED)
    properties:
      displayName:
        description: |-
          `DEPRECATED`: Display name
          use information from `UserInfo` instead to combine a display name

          [Deprecated since version 4.11.0]
        type: string
      email:
        description: |-
          `DEPRECATED`: Email 
          use `email` from `UserInfo` instead

          [Deprecated since version 4.11.0]
        example: john.doe@email.com
        type: string
      id:
        description: |-
          `DEPRECATED`: Unique identifier for the user
          use `id` from `UserInfo` instead

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed

          [Deprecated since version 4.11.0]
        type: string
    required:
      - displayName
      - email
      - id
      - login
    title: PendingUserData
    type: object
  PresignedUrl:
    description: Presigned URL information
    properties:
      partNumber:
        description: Corresponding part number
        format: int32
        type: integer
      url:
        description: S3 presigned URL
        type: string
    required:
      - partNumber
      - url
    title: PresignedUrl
    type: object
  PresignedUrlList:
    description: List of generated presigned URLs
    properties:
      urls:
        description: List of S3 presigned URLs
        items:
          $ref: '#/definitions/PresignedUrl'
        type: array
    required:
      - urls
    title: PresignedUrlList
    type: object
  PrivateKeyContainer:
    description: Private key container
    properties:
      privateKey:
        description: Private key
        type: string
      version:
        description: Version
        example: A
        type: string
    required:
      - privateKey
      - version
    title: PrivateKeyContainer
    type: object
  ProfileAttributes:
    description: User profile attributes
    properties:
      items:
        description: List of key-value pairs
        items:
          $ref: '#/definitions/KeyValueEntry'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: ProfileAttributes
    type: object
  ProfileAttributesRequest:
    description: Request model for setting user profile attributes
    properties:
      items:
        description: List of key-value pairs
        items:
          $ref: '#/definitions/KeyValueEntry'
        type: array
    required:
      - items
    title: ProfileAttributesRequest
    type: object
  PublicDownloadShare:
    description: Download Share information
    properties:
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      creatorName:
        description: Creator name
        type: string
      creatorUsername:
        description: Creator username
        type: string
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      fileKey:
        $ref: '#/definitions/FileKey'
        description: Encrypted file key for shares out of encrypted rooms
      fileName:
        description: File name
        type: string
      hasDownloadLimit:
        description: |-
          Determines whether Download Share has a limit for amount of downloads

          [Since version 4.11.0]
        type: boolean
      isEncrypted:
        description: Encryption state
        type: boolean
      isProtected:
        description: Is share protected by password
        type: boolean
      limitReached:
        description: Downloads limit reached
        type: boolean
      mediaType:
        description: |-
          * `application/zip` (for folders and rooms)
          * actual file media type (for files only)

          [Since version 4.11.0]
        type: string
      name:
        description: Share display name (alias name)
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      privateKeyContainer:
        $ref: '#/definitions/PrivateKeyContainer'
        description: Private key container (private key and version)
      size:
        description: File size or container size not compressed (in bytes)
        format: int64
        type: integer
    required:
      - createdAt
      - creatorName
      - fileName
      - hasDownloadLimit
      - isProtected
      - limitReached
      - mediaType
      - size
    title: PublicDownloadShare
    type: object
  PublicDownloadTokenGenerateRequest:
    description: Request model for generating download URL
    properties:
      password:
        description: Password (only for password-protected shares)
        type: string
    title: PublicDownloadTokenGenerateRequest
    type: object
  PublicDownloadTokenGenerateResponse:
    description: Download URL
    properties:
      downloadUrl:
        description: Download URL
        example: 'https://www.random-url.com'
        type: string
      token:
        description: |-
          `DEPRECATED`: Download token

          [Deprecated since version 4.3.0]
        type: string
    required:
      - token
    title: PublicDownloadTokenGenerateResponse
    type: object
  PublicKeyContainer:
    description: Public key container
    properties:
      publicKey:
        description: Public key
        type: string
      version:
        description: Version
        example: A
        type: string
    required:
      - publicKey
      - version
    title: PublicKeyContainer
    type: object
  PublicUploadShare:
    description: Upload Share information
    properties:
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      creatorName:
        description: |-
          Creator name

          [Since version 4.11.0]
        type: string
      creatorUsername:
        description: |-
          Creator username

          [Since version 4.11.0]
        type: string
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      isEncrypted:
        description: Encryption state
        type: boolean
      isProtected:
        description: Is share protected by password
        type: boolean
      maxSize:
        description: |-
          `DEPRECATED`: Maximal total size of uploaded files (in bytes)

          [Deprecated since version 4.2.0]
        format: double
        type: number
      maxSlots:
        description: |-
          `DEPRECATED`: Maximal amount of files to upload

          [Deprecated since version 4.2.0]
        format: int32
        type: integer
      name:
        description: Share display name (alias name)
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      remainingSize:
        description: Remaining Size
        format: int64
        type: integer
      remainingSlots:
        description: Remaining Slots
        format: int32
        type: integer
      showUploadedFiles:
        description: Allow display of already uploaded files
        type: boolean
      uploadedFiles:
        description: List of (public) uploaded files
        items:
          $ref: '#/definitions/PublicUploadedFileData'
        type: array
      userUserPublicKeyList:
        $ref: '#/definitions/UserUserPublicKeyList'
        description: List of user public keys
    required:
      - createdAt
      - creatorName
      - isProtected
      - maxSlots
    title: PublicUploadShare
    type: object
  PublicUploadedFileData:
    description: File information
    properties:
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      hash:
        description: Hash value of transferred file
        type: string
      name:
        description: Name
        type: string
      size:
        description: File size in byte
        format: int64
        type: integer
    required:
      - createdAt
      - name
      - size
    title: PublicUploadedFileData
    type: object
  RadiusChallengeResponse:
    description: RADIUS challenge reply
    properties:
      code:
        description: HTTP status code
        format: int32
        type: integer
      debugInfo:
        description: Debug information
        type: string
      errorCode:
        description: Error code
        format: int32
        type: integer
      message:
        description: HTTP status code description
        type: string
      replyMessage:
        description: |-
          RADIUS Reply-Message
          Instruction how to handle the situation.
        type: string
      replyState:
        description: |-
          For RADIUS Access-Challenge
          If a `replyState` is returned, it must be included as `state` in the following request.
        type: string
    title: RadiusChallengeResponse
    type: object
  RadiusConfig:
    description: RADIUS configuration
    properties:
      failoverServer:
        $ref: '#/definitions/FailoverServer'
        description: RADIUS Failover Server
      ipAddress:
        description: RADIUS Server IP Address
        type: string
      otpPinFirst:
        description: |-
          Sequence order of concatenated PIN and one-time token
          (default: `true`)
        type: boolean
      port:
        description: RADIUS Server Port
        format: int32
        type: integer
      sharedSecret:
        description: Shared Secret to access the RADIUS server
        type: string
    required:
      - ipAddress
      - otpPinFirst
      - port
      - sharedSecret
    title: RadiusConfig
    type: object
  RadiusConfigCreateRequest:
    description: Request model for creating a RADIUS configuration
    properties:
      failoverServer:
        $ref: '#/definitions/FailoverServer'
        description: RADIUS Failover Server
      ipAddress:
        description: RADIUS Server IP Address
        type: string
      otpPinFirst:
        description: |-
          Sequence order of concatenated PIN and one-time token
          (default: `true`)
        type: boolean
      port:
        description: RADIUS Server Port
        format: int32
        type: integer
      sharedSecret:
        description: Shared Secret to access the RADIUS server
        type: string
    required:
      - ipAddress
      - port
      - sharedSecret
    title: RadiusConfigCreateRequest
    type: object
  RadiusConfigUpdateRequest:
    description: Request model for updating a RADIUS configuration
    properties:
      failoverServer:
        $ref: '#/definitions/FailoverServer'
        description: RADIUS Failover Server
      ipAddress:
        description: RADIUS Server IP Address
        type: string
      otpPinFirst:
        description: |-
          Sequence order of concatenated PIN and one-time token
          (default: `true`)
        type: boolean
      port:
        description: RADIUS Server Port
        format: int32
        type: integer
      sharedSecret:
        description: Shared Secret to access the RADIUS server
        type: string
    title: RadiusConfigUpdateRequest
    type: object
  Range:
    description: Range information
    properties:
      limit:
        description: Range limit. Maximum 500.
        format: int64
        type: integer
      offset:
        description: Range offset
        format: int64
        type: integer
      total:
        description: Total items available
        format: int64
        type: integer
    required:
      - limit
      - offset
      - total
    title: Range
    type: object
  RecoverUserNameRequest:
    description: Recover usernames for email
    properties:
      creatorLanguage:
        description: IETF language tag
        example: de-DE
        type: string
      email:
        description: 'Email '
        type: string
    required:
      - email
    title: RecoverUserNameRequest
    type: object
  ResetPasswordRequest:
    description: Request model for reseting user's login password
    properties:
      creatorLanguage:
        description: IETF language tag
        example: de-DE
        type: string
      language:
        description: '`DEPRECATED`: Language ID or ISO 639-1 code'
        example: de
        type: string
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed
        type: string
      userName:
        description: Username
        type: string
    title: ResetPasswordRequest
    type: object
  ResetPasswordTokenValidateResponse:
    description: Password reset information
    properties:
      allowSystemGlobalWeakPassword:
        description: |-
          `DEPRECATED`: Allow weak password
          Please use `loginPasswordPolicies` instead

          [Deprecated since version 4.14.0]
        type: boolean
      firstName:
        description: User first name
        type: string
      gender:
        description: |-
          `DEPRECATED`: Gender

          [Deprecated since version 4.12.0]
        type: string
      lastName:
        description: User last name
        type: string
      loginPasswordPolicies:
        $ref: '#/definitions/LoginPasswordPolicies'
        description: Set of policies a login password must fulfill
      title:
        description: |-
          `DEPRECATED`: Job title

          [Deprecated since version 4.18.0]
        type: string
    required:
      - firstName
      - lastName
    title: ResetPasswordTokenValidateResponse
    type: object
  ResetPasswordWithTokenRequest:
    description: New password
    properties:
      password:
        description: New password
        type: string
    required:
      - password
    title: ResetPasswordWithTokenRequest
    type: object
  RestoreDeletedNodesRequest:
    description: Request model for restoring deleted nodes
    properties:
      deletedNodeIds:
        description: List of deleted node IDs
        items:
          format: int64
          type: integer
        type: array
      keepShareLinks:
        description: |-
          Preserve Download Share Links and point them to the new node.
          (default: `false`)
        type: boolean
      parentId:
        description: |-
          Node parent ID
          (default: previous parent ID)
        format: int64
        type: integer
      resolutionStrategy:
        description: |-
          Node conflict resolution strategy:
          * `autorename`
          * `overwrite`
          * `fail`

          (default: `autorename`)
        enum:
          - autorename
          - overwrite
          - fail
        example: autorename
        type: string
    required:
      - deletedNodeIds
    title: RestoreDeletedNodesRequest
    type: object
  Right:
    description: Right information
    properties:
      description:
        description: Right description
        type: string
      id:
        description: Unique identifier for the right
        format: int32
        type: integer
      name:
        description: Right (unique) name
        type: string
    required:
      - description
      - id
      - name
    title: Right
    type: object
  Role:
    description: Role information
    properties:
      description:
        description: Role description
        type: string
      id:
        description: Unique identifier for the role
        format: int32
        type: integer
      items:
        description: List of reachable right over role
        items:
          $ref: '#/definitions/Right'
        type: array
      name:
        description: Role (unique) name
        type: string
    required:
      - description
      - id
      - name
    title: Role
    type: object
  RoleGroup:
    description: Group information
    properties:
      id:
        description: Unique identifier for the group
        format: int64
        type: integer
      isMember:
        description: Is group member of the role
        type: boolean
      name:
        description: Group name
        type: string
    required:
      - id
      - isMember
      - name
    title: RoleGroup
    type: object
  RoleGroupList:
    description: List of groups with assigned role
    properties:
      items:
        description: List of role-group mappings
        items:
          $ref: '#/definitions/RoleGroup'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: RoleGroupList
    type: object
  RoleList:
    description: List of roles
    properties:
      items:
        description: List of roles
        items:
          $ref: '#/definitions/Role'
        type: array
    required:
      - items
    title: RoleList
    type: object
  RoleUser:
    description: User information
    properties:
      displayName:
        description: |-
          `DEPRECATED`: Display name
          use information from `UserInfo` instead to combine a display name

          [Deprecated since version 4.11.0]
        type: string
      id:
        description: |-
          `DEPRECATED`: Unique identifier for the user
          use `id` from `UserInfo` instead

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      isMember:
        description: Is user member of the role
        type: boolean
      userInfo:
        $ref: '#/definitions/UserInfo'
        description: |-
          Information about the user

          [Since version 4.11.0]
    required:
      - displayName
      - id
      - isMember
      - userInfo
    title: RoleUser
    type: object
  RoleUserList:
    description: List of users with assigned role
    properties:
      items:
        description: List of role-user mappings
        items:
          $ref: '#/definitions/RoleUser'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: RoleUserList
    type: object
  RoomData:
    description: Room information
    properties:
      children:
        description: |-
          `DEPRECATED`: List of rooms, where this room is a parent (if exist)

          [Deprecated since version 4.10.0]
        items:
          $ref: '#/definitions/RoomData'
        type: array
      cntAdmins:
        description: |-
          `DEPRECATED`: Number of admins (for rooms only)

          [Deprecated since version 4.2.0]
        format: int32
        type: integer
      cntDownloadShares:
        description: Returns the number of Download Shares of this node.
        format: int32
        type: integer
      cntUploadShares:
        description: Returns the number of Upload Shares of this node.
        format: int32
        type: integer
      cntUsers:
        description: |-
          `DEPRECATED`: Number of users (for rooms only)

          [Deprecated since version 4.2.0]
        format: int32
        type: integer
      createdAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      hasRecycleBin:
        description: |-
          `DEPRECATED`: Is recycle bin active (for rooms only)
          Recycle bin is always on (disabling is not possible).

          [Deprecated since version 4.10.0]
        example: true
        type: boolean
      id:
        description: Room ID
        format: int64
        type: integer
      isEncrypted:
        description: Encryption state
        type: boolean
      isFavorite:
        description: Node is marked as favorite (for rooms / folders only)
        type: boolean
      isGranted:
        description: Is user granted room permissions
        type: boolean
      name:
        description: Name
        type: string
      parentId:
        description: Parent node ID (room or folder)
        format: int64
        type: integer
      permissions:
        $ref: '#/definitions/NodePermissions'
        description: Available permissions for this node
      quota:
        description: Quota in byte
        format: int64
        type: integer
      recycleBinRetentionPeriod:
        description: |-
          Retention period for deleted nodes in days
          (Integer between 0 and 9999)
        format: int32
        type: integer
      size:
        description: Room size
        format: int64
        type: integer
      type:
        description: Node type
        enum:
          - room
        example: room
        type: string
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - hasRecycleBin
      - id
      - isEncrypted
      - isGranted
      - name
      - recycleBinRetentionPeriod
    title: RoomData
    type: object
  RoomGroup:
    description: Group information
    properties:
      id:
        description: Unique identifier for the group
        format: int64
        type: integer
      isGranted:
        description: Is user granted room permissions
        type: boolean
      name:
        description: Group name
        type: string
      newGroupMemberAcceptance:
        description: |-
          Behaviour when new users are added to the group:
          * `autoallow`
          * `pending`

          Only relevant if `adminGroupIds` has items.
          (default: `autoallow`)
        enum:
          - autoallow
          - pending
        example: autoallow
        type: string
      permissions:
        $ref: '#/definitions/NodePermissions'
        description: Available permissions for this node
    required:
      - id
      - isGranted
      - name
    title: RoomGroup
    type: object
  RoomGroupList:
    description: List of groups
    properties:
      items:
        description: List of room-group mappings
        items:
          $ref: '#/definitions/RoomGroup'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: RoomGroupList
    type: object
  RoomGroupsAddBatchRequest:
    description: Request model for granting group(s) to the room
    properties:
      items:
        description: List of room-group mappings
        items:
          $ref: '#/definitions/RoomGroupsAddBatchRequestItem'
        type: array
    required:
      - items
    title: RoomGroupsAddBatchRequest
    type: object
  RoomGroupsAddBatchRequestItem:
    description: Request item model for granting group to the room
    properties:
      id:
        description: Unique identifier for the group
        format: int64
        type: integer
      newGroupMemberAcceptance:
        description: |-
          Behaviour when new users are added to the group:
          * `autoallow`
          * `pending`

          Only relevant if `adminGroupIds` has items.
          (default: `autoallow`)
        enum:
          - autoallow
          - pending
        example: autoallow
        type: string
      permissions:
        $ref: '#/definitions/NodePermissions'
        description: Available permissions for this node
    required:
      - id
      - permissions
    title: RoomGroupsAddBatchRequestItem
    type: object
  RoomGroupsDeleteBatchRequest:
    description: Request model for revoking group(s) from the room
    properties:
      ids:
        description: List of group IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - ids
    title: RoomGroupsDeleteBatchRequest
    type: object
  RoomTreeDataList:
    description: List of rooms
    properties:
      items:
        description: List of room data information
        items:
          $ref: '#/definitions/RoomData'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: RoomTreeDataList
    type: object
  RoomUser:
    description: User information
    properties:
      displayName:
        description: |-
          `DEPRECATED`: Display name
          use information from `UserInfo` instead to combine a display name

          [Deprecated since version 4.11.0]
        type: string
      email:
        description: |-
          `DEPRECATED`: Email 
          use `email` from `UserInfo` instead

          [Deprecated since version 4.11.0]
        example: john.doe@email.com
        type: string
      id:
        description: |-
          `DEPRECATED`: Unique identifier for the user
          use `id` from `UserInfo` instead

          [Deprecated since version 4.11.0]
        format: int64
        type: integer
      isGranted:
        description: Is user granted room permissions
        type: boolean
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed

          [Deprecated since version 4.11.0]
        type: string
      permissions:
        $ref: '#/definitions/NodePermissions'
        description: Available permissions for this node
      publicKeyContainer:
        $ref: '#/definitions/PublicKeyContainer'
        description: Public key container (private key and version)
      userInfo:
        $ref: '#/definitions/UserInfo'
        description: |-
          Information about the user

          [Since version 4.11.0]
    required:
      - displayName
      - email
      - id
      - isGranted
      - login
      - userInfo
    title: RoomUser
    type: object
  RoomUserList:
    description: List of users
    properties:
      items:
        description: List of room-user mappings
        items:
          $ref: '#/definitions/RoomUser'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: RoomUserList
    type: object
  RoomUsersAddBatchRequest:
    description: Request model for granting user(s) to the room
    properties:
      items:
        description: List of room-user mappings
        items:
          $ref: '#/definitions/RoomUsersAddBatchRequestItem'
        type: array
    required:
      - items
    title: RoomUsersAddBatchRequest
    type: object
  RoomUsersAddBatchRequestItem:
    description: Request item model for granting user to the room
    properties:
      id:
        description: Unique identifier for the user
        format: int64
        type: integer
      permissions:
        $ref: '#/definitions/NodePermissions'
        description: Available permissions for this node
    required:
      - id
      - permissions
    title: RoomUsersAddBatchRequestItem
    type: object
  RoomUsersDeleteBatchRequest:
    description: Request model for revoking user(s) from the room
    properties:
      ids:
        description: List of user IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - ids
    title: RoomUsersDeleteBatchRequest
    type: object
  S3Config:
    description: S3 configuration
    properties:
      accessKeyDefined:
        description: Determines whether Access Key ID is defined
        type: boolean
      bucketName:
        description: S3 bucket name
        type: string
      endpointUrl:
        description: S3 object storage endpoint URL
        example: 'https://www.random-url.com'
        type: string
      region:
        description: S3 region
        type: string
      secretKeyDefined:
        description: Determines whether Access Secret Key is defined
        type: boolean
    required:
      - accessKeyDefined
      - bucketName
      - endpointUrl
      - secretKeyDefined
    title: S3Config
    type: object
  S3ConfigCreateRequest:
    description: Request model for creating a S3 configuration
    properties:
      accessKey:
        description: Access Key ID
        type: string
      bucketName:
        description: S3 bucket name
        type: string
      endpointUrl:
        description: S3 object storage endpoint URL
        example: 'https://www.random-url.com'
        type: string
      region:
        description: S3 region
        type: string
      secretKey:
        description: Secret Access Key
        type: string
    required:
      - accessKey
      - bucketName
      - endpointUrl
      - secretKey
    title: S3ConfigCreateRequest
    type: object
  S3ConfigUpdateRequest:
    description: Request model for updating a S3 configuration
    properties:
      accessKey:
        description: Access Key ID
        type: string
      bucketName:
        description: S3 bucket name
        type: string
      endpointUrl:
        description: S3 object storage endpoint URL
        example: 'https://www.random-url.com'
        type: string
      region:
        description: S3 region
        type: string
      secretKey:
        description: Secret Access Key
        type: string
    title: S3ConfigUpdateRequest
    type: object
  S3FileUploadPart:
    description: S3 file upload part information
    properties:
      partEtag:
        description: Corresponding part ETag
        type: string
      partNumber:
        description: Corresponding part number
        format: int32
        type: integer
    required:
      - partEtag
      - partNumber
    title: S3FileUploadPart
    type: object
  S3FileUploadStatus:
    description: S3 file upload status information
    properties:
      errorDetails:
        $ref: '#/definitions/ErrorResponse'
        description: Error details
      node:
        $ref: '#/definitions/Node'
        description: Created node (only available if the status is `done`)
      status:
        description: |-
          S3 file upload status:
          * `transfer` - upload in progress
          * `finishing` - completing file upload
          * `done` - file upload successully done
          * `error` - an error occurred while file upload
        type: string
    required:
      - status
    title: S3FileUploadStatus
    type: object
  S3ShareUploadStatus:
    description: S3 file upload status information
    properties:
      errorDetails:
        $ref: '#/definitions/ErrorResponse'
        description: Error details
      fileName:
        description: File name
        type: string
      size:
        description: File size in byte
        format: int64
        type: integer
      status:
        description: |-
          S3 file upload status:
          * `transfer` - upload in progress
          * `finishing` - completing file upload
          * `done` - file upload successully done
          * `error` - an error occurred while file upload
        type: string
    required:
      - fileName
      - status
    title: S3ShareUploadStatus
    type: object
  S3Tag:
    description: S3 tag information
    properties:
      id:
        description: S3 tag ID
        format: int64
        type: integer
      isMandatory:
        description: |-
          Determines whether S3 is mandatory or not
          (default: `false`)
        type: boolean
      key:
        description: S3 tag key
        type: string
      value:
        description: S3 tag value
        type: string
    title: S3Tag
    type: object
  S3TagCreateRequest:
    description: Request model for creating a S3 tag
    properties:
      isMandatory:
        description: |-
          Determines whether S3 is mandatory or not
          (default: `false`)
        type: boolean
      key:
        description: S3 tag key
        type: string
      value:
        description: S3 tag value
        type: string
    required:
      - key
      - value
    title: S3TagCreateRequest
    type: object
  S3TagIds:
    description: List of S3 tag IDs
    properties:
      ids:
        description: List of S3 tag IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - ids
    title: S3TagIds
    type: object
  S3TagList:
    description: List of S3 tags
    properties:
      items:
        description: List of configured S3 tags
        items:
          $ref: '#/definitions/S3Tag'
        type: array
    title: S3TagList
    type: object
  SdsServerTime:
    description: DRACOON server time
    properties:
      time:
        description: DRACOON server time
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
    title: SdsServerTime
    type: object
  SharesPasswordPolicies:
    description: Shares password policies
    properties:
      characterRules:
        $ref: '#/definitions/CharacterRules'
        description: Properties of character related password policies
      minLength:
        description: |-
          Minimum number of characters a password must contain
          (must be between `1` and `1024`)
        format: int32
        type: integer
      rejectDictionaryWords:
        description: Determines whether a password must NOT contain word(s) from a dictionary
        type: boolean
      rejectKeyboardPatterns:
        description: |-
          Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
          (min. 4 character pattern)
        type: boolean
      rejectUserInfo:
        description: 'Determines whether a password must NOT contain user info (first name, last name, email, user name)'
        type: boolean
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    title: SharesPasswordPolicies
    type: object
  SoftwareVersionData:
    description: Software version information
    properties:
      buildDate:
        description: Build date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      restApiVersion:
        description: REST API version
        example: 4.4.1
        type: string
      scmRevisionNumber:
        description: Revision number
        type: string
      sdsServerVersion:
        description: DRACOON server version
        example: 4.4.1
        type: string
    required:
      - buildDate
      - restApiVersion
      - scmRevisionNumber
      - sdsServerVersion
    title: SoftwareVersionData
    type: object
  SyslogConfig:
    description: Syslog settings
    properties:
      enabled:
        description: Is syslog enabled?
        type: boolean
      host:
        description: Syslog server (IP or FQDN)
        type: string
      logIpEnabled:
        description: Determines whether user’s IP address is logged.
        type: boolean
      port:
        description: Syslog server port
        format: int32
        type: integer
      protocol:
        description: Protocol to connect to syslog server
        enum:
          - TCP
          - UDP
        type: string
    title: SyslogConfig
    type: object
  SyslogEvent:
    description: |-
      DEPRECATED
      Syslog event information
    properties:
      attribute1:
        description: Attribute 1
        type: string
      attribute2:
        description: Attribute 2
        type: string
      attribute3:
        description: Attribute 3
        type: string
      authParentSource:
        description: Auth parent source ID
        type: string
      authParentTarget:
        description: Auth parent target ID
        type: string
      customerId:
        description: Unique identifier for the customer
        format: int64
        type: integer
      id:
        description: Event ID
        format: int64
        type: integer
      message:
        description: Event description
        type: string
      objectId1:
        description: Object ID 1
        format: int64
        type: integer
      objectId2:
        description: Object ID 2
        format: int64
        type: integer
      objectName1:
        description: Object name 1
        type: string
      objectName2:
        description: Object type 2
        type: string
      objectType1:
        description: Object type 1
        format: int32
        type: integer
      objectType2:
        description: Object type 2
        format: int32
        type: integer
      operationId:
        description: Operation type ID
        format: int32
        type: integer
      operationName:
        description: Operation name
        type: string
      status:
        description: |-
          Operation status:
          * `0` - Success
          * `2` - Error
        enum:
          - 0
          - 2
        format: int32
        type: integer
      time:
        description: Event timestamp
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      userClient:
        description: Client
        type: string
      userId:
        description: Unique identifier for the user
        format: int64
        type: integer
      userIp:
        description: User IP
        type: string
      userName:
        description: Username
        type: string
    required:
      - id
      - message
      - time
      - userId
    title: SyslogEvent
    type: object
  SyslogEventList:
    description: |-
      DEPRECATED
      List of syslog events
    properties:
      items:
        description: List of log events
        items:
          $ref: '#/definitions/SyslogEvent'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: SyslogEventList
    type: object
  SystemDefaults:
    description: System defaults
    properties:
      downloadShareDefaultExpirationPeriod:
        description: Default expiration period for Download Shares in days.
        format: int32
        type: integer
      fileDefaultExpirationPeriod:
        description: Default expiration period for all uploaded files in days.
        format: int32
        type: integer
      hideLoginInputFields:
        description: |-
          Defines if login fields should be hidden

          [Since version 4.13.0]
        type: boolean
      languageDefault:
        description: Define which language should be default.
        example: de
        type: string
      nonmemberViewerDefault:
        description: |-
          Defines if new users get the role NONMEMBER_VIEWER by default

          [Since version 4.12.0]
        type: boolean
      uploadShareDefaultExpirationPeriod:
        description: Default expiration period for Upload Shares in days.
        format: int32
        type: integer
    title: SystemDefaults
    type: object
  SystemInfo:
    description: System information (default language and authentication methods)
    properties:
      authMethods:
        description: |-
          `DEPRECATED`: Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
          use `authData` instead

          [Deprecated since version 4.13.0]
        items:
          $ref: '#/definitions/AuthMethod'
        type: array
      hideLoginInputFields:
        description: |-
          Defines if login fields should be hidden

          [Since version 4.13.0]
        type: boolean
      languageDefault:
        description: |-
          System default language
          cf. [RFC 5646](https://tools.ietf.org/html/rfc5646)
        example: de
        type: string
      s3EnforceDirectUpload:
        description: |-
          Determines whether S3 direct upload is enforced or not

          [Since version 4.15.0]
        type: boolean
      s3Hosts:
        description: |-
          List of S3 Hosts

          [Since version 4.14.4]
        items:
          type: string
        type: array
    required:
      - authMethods
      - hideLoginInputFields
      - languageDefault
      - s3EnforceDirectUpload
      - s3Hosts
    title: SystemInfo
    type: object
  TestActiveDirectoryConfigRequest:
    description: Request model for testing connection for Active Directory configuration
    properties:
      ldapUsersDomain:
        description: Search scope of Active Directory; only users below this node can log on.
        type: string
      serverAdminName:
        description: Distinguished Name (DN) of Active Directory administrative account
        type: string
      serverAdminPassword:
        description: Password of Active Directory administrative account
        type: string
      serverIp:
        description: IPv4 or IPv6 address or host name
        type: string
      serverPort:
        description: Port
        format: int32
        type: integer
      sslFingerPrint:
        description: |-
          SSL finger print of Active Directory server.
          Mandatory for LDAPS connections.
          Format: `Algorithm/Fingerprint`
        type: string
      useLdaps:
        description: |-
          Determines whether LDAPS should be used instead of plain LDAP.
          (default: `false`)
        type: boolean
    required:
      - ldapUsersDomain
      - serverAdminName
      - serverAdminPassword
      - serverIp
      - serverPort
    title: TestActiveDirectoryConfigRequest
    type: object
  TestActiveDirectoryConfigResponse:
    description: Response model for testing connection for Active Directory configuration
    properties:
      ldapUsersDomain:
        description: Search scope of Active Directory; only users below this node can log on.
        type: string
      serverAdminName:
        description: Distinguished Name (DN) of Active Directory administrative account
        type: string
      serverAdminPassword:
        description: Password of Active Directory administrative account
        type: string
      serverIp:
        description: IPv4 or IPv6 address or host name
        type: string
      serverPort:
        description: Port
        format: int32
        type: integer
      sslFingerPrint:
        description: |-
          SSL finger print of Active Directory server.
          Mandatory for LDAPS connections.
          Format: `Algorithm/Fingerprint`
        type: string
      useLdaps:
        description: Determines whether LDAPS should be used instead of plain LDAP.
        type: boolean
    required:
      - ldapUsersDomain
      - serverAdminName
      - serverAdminPassword
      - serverIp
      - serverPort
      - useLdaps
    title: TestActiveDirectoryConfigResponse
    type: object
  ThirdPartyDependenciesData:
    description: Third-party dependency information
    properties:
      artifactId:
        description: Third party dependencies artifactId
        type: string
      description:
        description: Third party dependencies description
        type: string
      groupId:
        description: Third party dependencies groupId
        type: string
      id:
        description: Third party dependencies id
        type: string
      licenses:
        description: Third party dependencies licenses type
        items:
          type: string
        type: array
      name:
        description: Third party dependencies name
        type: string
      type:
        description: Third party dependencies type
        type: string
      url:
        description: Third party dependencies url
        type: string
      version:
        description: Third party dependencies version
        type: string
    required:
      - artifactId
      - description
      - groupId
      - id
      - licenses
      - name
      - type
      - url
      - version
    title: ThirdPartyDependenciesData
    type: object
  UpdateActiveDirectoryConfigRequest:
    description: Request model for updating an Active Directory configuration
    properties:
      adExportGroup:
        description: |-
          If `userImport` is set to `true`,
          the user must be member of this Active Directory group to receive a newly created DRACOON account.
        type: string
      alias:
        description: Unique name for an Active Directory configuration
        type: string
      createHomeFolder:
        description: |-
          DEPRECATED, will be ignored
          Determines whether a room is created for each user that is created by automatic import (like a home folder).
          Room's name will equal the user's login name.
          (default: `false`)
        type: boolean
      homeFolderParent:
        description: |-
          DEPRECATED, will be ignored
          ID of the room in which the individual rooms for users will be created.
        format: int64
        type: integer
      ldapUsersDomain:
        description: Search scope of Active Directory; only users below this node can log on.
        type: string
      sdsImportGroup:
        description: |-
          User group that is assigned to users who are created by automatic import.
          Reset with `0`
        format: int64
        type: integer
      serverAdminName:
        description: Distinguished Name (DN) of Active Directory administrative account
        type: string
      serverAdminPassword:
        description: Password of Active Directory administrative account
        type: string
      serverIp:
        description: IPv4 or IPv6 address or host name
        type: string
      serverPort:
        description: Port
        format: int32
        type: integer
      sslFingerPrint:
        description: |-
          SSL finger print of Active Directory server.
          Mandatory for LDAPS connections.
          Format: `Algorithm/Fingerprint`
        type: string
      useLdaps:
        description: Determines whether LDAPS should be used instead of plain LDAP.
        type: boolean
      userFilter:
        description: Name of Active Directory attribute that is used as login name.
        type: string
      userImport:
        description: |-
          Determines if a DRACOON account is automatically created for a new user
          who successfully logs on with his / her AD / IDP account.
        type: boolean
    title: UpdateActiveDirectoryConfigRequest
    type: object
  UpdateAuthTokenRestrictions:
    description: Request model for updating auth token settings
    properties:
      accessTokenValidity:
        description: Restricted OAuth access token validity (in seconds)
        format: int32
        type: integer
      overwriteEnabled:
        description: Defines if OAuth token restrictions are enabled
        type: boolean
      refreshTokenValidity:
        description: Restricted OAuth refresh token validity (in seconds)
        format: int32
        type: integer
    required:
      - overwriteEnabled
    title: UpdateAuthTokenRestrictions
    type: object
  UpdateBrandingConfig:
    description: |-
      DEPRECATED
      Request model for updating branding settings
    properties:
      brandingProviderUrl:
        description: Access URL to to the Branding Portal
        example: 'https://www.random-url.com'
        type: string
      brandingQualifier:
        description: Branding UUID
        type: string
      resetBrandingProviderUrl:
        description: Set `true` to reset `brandingProviderUrl`.
        type: boolean
      resetBrandingQualifier:
        description: Set `true` to reset `brandingQualifier`.
        type: boolean
    title: UpdateBrandingConfig
    type: object
  UpdateCustomerRequest:
    description: Request model for updating a customer
    properties:
      companyName:
        description: Company name
        type: string
      customerContractType:
        description: Customer type
        enum:
          - free
          - demo
          - pay
        example: pay
        type: string
      isLocked:
        description: |-
          Customer is locked:
          * `false` - unlocked
          * `true` - locked

          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)
        type: boolean
      lockStatus:
        description: |-
          `DEPRECATED`: Customer lock status:
          * `false` - unlocked
          * `true` - locked

          Please use `isLocked` instead.
          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)
        type: boolean
      providerCustomerId:
        description: Provider customer ID
        type: string
      quotaMax:
        description: Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
        format: int64
        type: integer
      userMax:
        description: Maximal number of users
        format: int32
        type: integer
    title: UpdateCustomerRequest
    type: object
  UpdateCustomerResponse:
    description: Customer information
    properties:
      activationCode:
        description: |-
          `DEPRECATED`: Customer activation code string:
          * valid only for types `free` and `demo`
          * for `pay` customers it is empty

          [Deprecated since version 4.8.0]
        type: string
      companyName:
        description: Company name
        type: string
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      customerAttributes:
        $ref: '#/definitions/CustomerAttributes'
        description: Customer attributes
      customerContractType:
        description: Customer type
        enum:
          - free
          - demo
          - pay
        example: pay
        type: string
      id:
        description: Unique identifier for the customer
        format: int64
        type: integer
      isLocked:
        description: |-
          Customer is locked:
          * `false` - unlocked
          * `true` - locked

          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)
        type: boolean
      lockStatus:
        description: |-
          `DEPRECATED`: Customer lock status:
          * `false` - unlocked
          * `true` - locked

          Please use `isLocked` instead.
          All users of this customer will be blocked and cannot login anymore.
          (default: `false`)

          [Deprecated since version 4.7.0]
        type: boolean
      providerCustomerId:
        description: Provider customer ID
        type: string
      quotaMax:
        description: Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
        format: int64
        type: integer
      trialDays:
        description: |-
          Number of days left for trial period (relevant only for type `demo`)
          (not used)
        format: int32
        type: integer
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      userMax:
        description: Maximal number of users
        format: int32
        type: integer
    required:
      - companyName
      - customerContractType
      - id
      - lockStatus
      - quotaMax
      - userMax
    title: UpdateCustomerResponse
    type: object
  UpdateDownloadShareRequest:
    description: Request model for updating a Download Share
    properties:
      defaultCountry:
        description: Country shorthand symbol (cf. ISO 3166-2)
        type: string
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      internalNotes:
        description: Internal notes (limited to 255 characters)
        type: string
      maxDownloads:
        description: Max allowed downloads
        format: int32
        type: integer
      name:
        description: Alias name
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      notifyCreator:
        description: Notify creator on every download.
        type: boolean
      password:
        description: 'Access password, not allowed for encrypted shares'
        type: string
      receiverLanguage:
        description: Language tag for messages to receiver
        example: de-DE
        type: string
      resetMaxDownloads:
        description: Set 'true' to reset 'maxDownloads' for Download Share.
        type: boolean
      resetPassword:
        description: Set 'true' to reset 'password' for Download Share.
        type: boolean
      showCreatorName:
        description: Show creator first and last name.
        type: boolean
      showCreatorUsername:
        description: Show creator email address.
        type: boolean
      textMessageRecipients:
        description: |-
          List of recipient FQTNs
          E.123 / E.164 Format
        items:
          type: string
        type: array
    title: UpdateDownloadShareRequest
    type: object
  UpdateEncryptionPasswordPolicies:
    description: Request model for updating encryption password policies
    properties:
      characterRules:
        $ref: '#/definitions/CharacterRules'
        description: Properties of character related password policies
      minLength:
        description: |-
          Minimum number of characters a password must contain
          (must be between `1` and `1024`)
        format: int32
        type: integer
      rejectKeyboardPatterns:
        description: |-
          Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
          (min. 4 character pattern)
        type: boolean
      rejectUserInfo:
        description: 'Determines whether a password must NOT contain user info (first name, last name, email, user name)'
        type: boolean
    title: UpdateEncryptionPasswordPolicies
    type: object
  UpdateEventlogConfig:
    description: Request model for updating eventlog settings
    properties:
      enabled:
        description: Is eventlog enabled?
        type: boolean
      logIpEnabled:
        description: Determines whether user’s IP address is logged.
        type: boolean
      retentionPeriod:
        description: |-
          Retention period (in days) of event log entries.
          After that period, all entries are deleted.
          Recommended value: 7
        format: int32
        type: integer
    title: UpdateEventlogConfig
    type: object
  UpdateFileRequest:
    description: Request model for updating file's metadata
    properties:
      classification:
        description: |-
          Classification ID:
          * `1` - public
          * `2` - internal
          * `3` - confidential
          * `4` - strictly confidential
        format: int32
        type: integer
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      name:
        description: File name
        type: string
      notes:
        description: |-
          User notes (limited to 255 characters)
          Use empty string to remove.
        type: string
    title: UpdateFileRequest
    type: object
  UpdateFolderRequest:
    description: Request model for updating folder's metadata
    properties:
      name:
        description: Folder name
        type: string
      notes:
        description: |-
          User notes (limited to 255 characters)
          Use empty string to remove.
        type: string
    title: UpdateFolderRequest
    type: object
  UpdateGeneralSettings:
    description: Request model for updating general settings
    properties:
      authTokenRestrictions:
        $ref: '#/definitions/UpdateAuthTokenRestrictions'
        description: Defines OAuth token restrictions
      cryptoEnabled:
        description: |-
          Activation status of client-side encryption.
          Can only be enabled once; disabling is not possible.
        type: boolean
      emailNotificationButtonEnabled:
        description: Enable email notification button
        type: boolean
      eulaEnabled:
        description: Each user has to confirm the EULA at first login.
        type: boolean
      hideLoginInputFields:
        description: Defines if login fields should be hidden
        type: boolean
      mediaServerEnabled:
        description: '`DEPRECATED`: Is media server enabled?'
        type: boolean
      s3TagsEnabled:
        description: Defines if S3 tags are enabled
        type: boolean
      sharePasswordSmsEnabled:
        description: Allow sending of share passwords via SMS
        type: boolean
      weakPasswordEnabled:
        description: |-
          `DEPRECATED`: Allow weak password
          * A weak password has to fulfill the following criteria:
             * is at least 8 characters long
             * contains letters and numbers
          * A strong password has to fulfill the following criteria in addition:
             * contains at least one special character
             * contains upper and lower case characters
          Please use `PUT /system/config/policies/passwords` API to change configured password policies.
        type: boolean
    title: UpdateGeneralSettings
    type: object
  UpdateGroupRequest:
    description: Request model for updating group's metadata
    properties:
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      name:
        description: Group name
        type: string
    title: UpdateGroupRequest
    type: object
  UpdateLoginPasswordPolicies:
    description: Request model for updating login password policies
    properties:
      characterRules:
        $ref: '#/definitions/CharacterRules'
        description: Properties of character related password policies
      enforceLoginPasswordChange:
        description: |-
          Determines whether a login password change should be enforced for all users
          Only takes effect, if login password policies get stricter
          (default: `false`)
        type: boolean
      minLength:
        description: |-
          Minimum number of characters a password must contain
          (must be between `1` and `1024`)
        format: int32
        type: integer
      numberOfArchivedPasswords:
        description: |-
          Number of passwords to archive
          (must be between `0` and `10`; `0` means that password history is disabled)
        format: int32
        type: integer
      passwordExpiration:
        $ref: '#/definitions/PasswordExpiration'
        description: Properties of password expiration policy
      rejectDictionaryWords:
        description: Determines whether a password must NOT contain word(s) from a dictionary
        type: boolean
      rejectKeyboardPatterns:
        description: |-
          Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
          (min. 4 character pattern)
        type: boolean
      rejectUserInfo:
        description: 'Determines whether a password must NOT contain user info (first name, last name, email, user name)'
        type: boolean
      userLockout:
        $ref: '#/definitions/UserLockout'
        description: Properties of user lockout policy
    title: UpdateLoginPasswordPolicies
    type: object
  UpdateMailServerConfig:
    description: Request model for updating mail server settings
    properties:
      authenticationEnabled:
        description: Set `true` if the email server requires authentication.
        type: boolean
      host:
        description: Email server host
        type: string
      password:
        description: Password for email server
        type: string
      port:
        description: Email server port
        format: int32
        type: integer
      resetPassword:
        description: Set `true` to reset email server `password`.
        type: boolean
      resetUsername:
        description: Set `true` to reset email server `username`.
        type: boolean
      sslEnabled:
        description: |-
          Email server requires SSL connection?
          Requires `starttlsEnabled` to be `false`
        type: boolean
      starttlsEnabled:
        description: |-
          Email server requires StartTLS connection?
          Requires `sslEnabled` to be `false`
        type: boolean
      username:
        description: Username for email server
        type: string
    title: UpdateMailServerConfig
    type: object
  UpdateOAuthClientRequest:
    description: Request model for updating an OAuth client
    properties:
      accessTokenValidity:
        description: Validity of the access token in seconds.
        format: int32
        type: integer
      clientName:
        description: 'Name, which is shown at the client configuration and authorization.'
        type: string
      clientSecret:
        description: 'Secret, which client uses at authentication.'
        type: string
      clientType:
        description: Determines whether client is a confidential or public client.
        enum:
          - confidential
          - public
        example: confidential
        type: string
      grantTypes:
        description: |-
          Authorized grant types
          * `authorization_code`
          * `implicit`
          * `password`
          * `client_credentials`
          * `refresh_token`

          cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
        example:
          - password
        items:
          type: string
        type: array
      isEnabled:
        description: Determines whether client is enabled.
        example: true
        type: boolean
      redirectUris:
        description: 'URIs, to which a user is redirected after authorization.'
        items:
          type: string
        type: array
      refreshTokenValidity:
        description: Validity of the refresh token in seconds.
        format: int32
        type: integer
    title: UpdateOAuthClientRequest
    type: object
  UpdateOpenIdIdpConfigRequest:
    description: Request model for updating an OpenID Connect IDP configuration
    properties:
      authorizationEndPointUrl:
        description: URL of the authorization endpoint
        example: 'https://www.random-url.com'
        type: string
      clientId:
        description: ID of the OpenID client
        type: string
      clientSecret:
        description: 'Secret, which client uses at authentication.'
        type: string
      fallbackMappingClaim:
        description: Name of the claim which is used for the user mapping fallback.
        example: sub
        type: string
      flow:
        description: 'Flow, which is used at authentication'
        enum:
          - authorization_code
          - hybrid
        example: authorization_code
        type: string
      issuer:
        description: |-
          Issuer identifier of the IDP
          The value is a case sensitive URL.
        example: 'https://www.random-url.com'
        type: string
      jwksEndPointUrl:
        description: URL of the JWKS endpoint
        example: 'https://www.random-url.com'
        type: string
      mappingClaim:
        description: Name of the claim which is used for the user mapping.
        example: email
        type: string
      name:
        description: Name of the IDP
        type: string
      pkceChallengeMethod:
        description: |-
          PKCE code challenge method.
          cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
        type: string
      pkceEnabled:
        description: |-
          Determines whether PKCE is enabled.
          cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
          (default: `false`)
        type: boolean
      redirectUris:
        description: 'URIs, to which a user is redirected after authorization.'
        items:
          type: string
        type: array
      resetFallbackMappingClaim:
        description: Set `true` to reset `fallbackMappingClaim`.
        type: boolean
      scopes:
        description: |-
          List of requested scopes
          Usually `openid` and the names of the requested claims.
        items:
          type: string
        type: array
      tokenEndPointUrl:
        description: URL of the token endpoint
        example: 'https://www.random-url.com'
        type: string
      userImportEnabled:
        description: |-
          Determines if a DRACOON account is automatically created for a new user
          who successfully logs on with his / her AD / IDP account.
        type: boolean
      userImportGroup:
        description: |-
          User group that is assigned to users who are created by automatic import.
          Reset with `0`
        format: int64
        type: integer
      userInfoEndPointUrl:
        description: URL of the user info endpoint
        example: 'https://www.random-url.com'
        type: string
      userManagementUrl:
        description: |-
          URL of the user management UI.
          Use empty string to remove.
        type: string
      userUpdateEnabled:
        description: |-
          Determines if the DRACOON account is updated with data from AD / IDP.
          For OpenID Connect, the scopes `email` and `profile` are needed.
          (default: `false`)
        type: boolean
    title: UpdateOpenIdIdpConfigRequest
    type: object
  UpdatePasswordPoliciesConfig:
    description: Request model for updating a set of password policies
    properties:
      encryptionPasswordPolicies:
        $ref: '#/definitions/UpdateEncryptionPasswordPolicies'
        description: Set of policies a encryption password must fulfill
      loginPasswordPolicies:
        $ref: '#/definitions/UpdateLoginPasswordPolicies'
        description: Set of policies a login password must fulfill
      sharesPasswordPolicies:
        $ref: '#/definitions/UpdateSharesPasswordPolicies'
        description: Set of policies a shares password must fulfill
    title: UpdatePasswordPoliciesConfig
    type: object
  UpdateRoomRequest:
    description: Request model for updating room's metadata
    properties:
      name:
        description: Name
        type: string
      notes:
        description: |-
          User notes (limited to 255 characters)
          Use empty string to remove.
        type: string
      quota:
        description: Quota in byte
        format: int64
        type: integer
    title: UpdateRoomRequest
    type: object
  UpdateSharesPasswordPolicies:
    description: Request model for updating shares password policies
    properties:
      characterRules:
        $ref: '#/definitions/CharacterRules'
        description: Properties of character related password policies
      minLength:
        description: |-
          Minimum number of characters a password must contain
          (must be between `1` and `1024`)
        format: int32
        type: integer
      rejectDictionaryWords:
        description: Determines whether a password must NOT contain word(s) from a dictionary
        type: boolean
      rejectKeyboardPatterns:
        description: |-
          Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
          (min. 4 character pattern)
        type: boolean
      rejectUserInfo:
        description: 'Determines whether a password must NOT contain user info (first name, last name, email, user name)'
        type: boolean
    title: UpdateSharesPasswordPolicies
    type: object
  UpdateSyslogConfig:
    description: Request model for updating syslog settings
    properties:
      enabled:
        description: Is syslog enabled?
        type: boolean
      host:
        description: Syslog server (IP or FQDN)
        type: string
      logIpEnabled:
        description: Determines whether user’s IP address is logged.
        type: boolean
      port:
        description: Syslog server port
        format: int32
        type: integer
      protocol:
        description: Protocol to connect to syslog server
        enum:
          - TCP
          - UDP
        type: string
    title: UpdateSyslogConfig
    type: object
  UpdateSystemDefaults:
    description: Request model for updating system defaults
    properties:
      downloadShareDefaultExpirationPeriod:
        description: Default expiration period for Download Shares in days.
        format: int32
        type: integer
      fileDefaultExpirationPeriod:
        description: Default expiration period for all uploaded files in days.
        format: int32
        type: integer
      languageDefault:
        description: Define which language should be default.
        example: de-DE
        type: string
      nonmemberViewerDefault:
        description: Defines if new users get the role NONMEMBER_VIEWER by default
        type: boolean
      uploadShareDefaultExpirationPeriod:
        description: Default expiration period for Upload Shares in days.
        format: int32
        type: integer
    title: UpdateSystemDefaults
    type: object
  UpdateUploadShareRequest:
    description: Request model for updating an Upload Share
    properties:
      defaultCountry:
        description: Country shorthand symbol (cf. ISO 3166-2)
        type: string
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      filesExpiryPeriod:
        description: Number of days after which uploaded files expire
        format: int32
        type: integer
      internalNotes:
        description: Internal notes (limited to 255 characters)
        type: string
      maxSize:
        description: Maximal total size of uploaded files (in bytes)
        format: int64
        type: integer
      maxSlots:
        description: Maximal amount of files to upload
        format: int32
        type: integer
      name:
        description: Alias name
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      notifyCreator:
        description: Notify creator on every upload.
        type: boolean
      password:
        description: Password
        type: string
      receiverLanguage:
        description: Language tag for messages to receiver
        example: de-DE
        type: string
      resetFilesExpiryPeriod:
        description: Set 'true' to reset 'filesExpiryPeriod' for Upload Share
        type: boolean
      resetMaxSize:
        description: Set 'true' to reset 'maxSize' for Upload Share
        type: boolean
      resetMaxSlots:
        description: Set 'true' to reset 'maxSlots' for Upload Share
        type: boolean
      resetPassword:
        description: Set 'true' to reset 'password' for Upload Share.
        type: boolean
      showCreatorName:
        description: Show creator first and last name.
        type: boolean
      showCreatorUsername:
        description: Show creator email address.
        type: boolean
      showUploadedFiles:
        description: Allow display of already uploaded files
        type: boolean
      textMessageRecipients:
        description: |-
          List of recipient FQTNs
          E.123 / E.164 Format
        items:
          type: string
        type: array
    title: UpdateUploadShareRequest
    type: object
  UpdateUserAccountRequest:
    description: Request model for updating user account information
    properties:
      acceptEULA:
        description: |-
          Accept EULA
          Present, if EULA is system global active.
          cf. `GET system/config/settings/general` - `eulaEnabled`
          If accepted cannot be undone.
        type: boolean
      email:
        description: 'Email '
        example: john.doe@email.com
        type: string
      firstName:
        description: User first name
        type: string
      gender:
        description: |-
          `DEPRECATED`: Gender
          Do NOT use `gender`! It will be ignored.
        type: string
      lastName:
        description: User last name
        type: string
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed
        type: string
      phone:
        description: Phone number
        type: string
      title:
        description: '`DEPRECATED`: Job title'
        type: string
      userName:
        description: Username
        type: string
    title: UpdateUserAccountRequest
    type: object
  UpdateUserRequest:
    description: Request model for updating user's metadata
    properties:
      authData:
        $ref: '#/definitions/UserAuthDataUpdateRequest'
        description: |-
          Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
      authMethods:
        description: |-
          `DEPRECATED`: Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
          use `authData` instead
        items:
          $ref: '#/definitions/UserAuthMethod'
        type: array
      email:
        description: 'Email '
        example: john.doe@email.com
        type: string
      expiration:
        $ref: '#/definitions/ObjectExpiration'
        description: Expiration date / time
      firstName:
        description: User first name
        type: string
      gender:
        description: |-
          `DEPRECATED`: Gender
          Do NOT use `gender`! It will be ignored.
        type: string
      isLocked:
        description: |-
          User is locked:
          * `false` - unlocked
          * `true` - locked

          User is locked and cannot login anymore.
          (default: `false`)
        type: boolean
      lastName:
        description: User last name
        type: string
      lockStatus:
        description: |-
          `DEPRECATED`: User lock status:
          * `0` - locked
          * `1` - Web access allowed
          * `2` - Web and mobile access allowed

          Please use `isLocked` instead.
        format: int32
        type: integer
      phone:
        description: Phone number
        type: string
      receiverLanguage:
        description: IETF language tag
        example: de-DE
        type: string
      title:
        description: '`DEPRECATED`: Job title'
        type: string
      userName:
        description: Username
        type: string
    title: UpdateUserRequest
    type: object
  UploadShare:
    description: Upload Share information
    properties:
      accessKey:
        description: Share access key to generate secure link
        type: string
      cntFiles:
        description: Total amount of existing files uploaded with this share.
        format: int32
        type: integer
      cntUploads:
        description: Total amount of uploads conducted with this share.
        format: int32
        type: integer
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/UserInfo'
        description: Created by user
      dataUrl:
        description: Upload Share URL
        example: 'https://www.random-url.com'
        type: string
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      filesExpiryPeriod:
        description: Number of days after which uploaded files expire
        format: int32
        type: integer
      id:
        description: Share ID
        format: int64
        type: integer
      internalNotes:
        description: |-
          Internal notes (limited to 255 characters)

          [Since version 4.11.0]
        type: string
      isEncrypted:
        description: Encryption state
        type: boolean
      isProtected:
        description: Is share protected by password
        type: boolean
      maxSize:
        description: Maximal total size of uploaded files (in bytes)
        format: int64
        type: integer
      maxSlots:
        description: Maximal amount of files to upload
        format: int32
        type: integer
      name:
        description: Alias name
        type: string
      notes:
        description: User notes (limited to 255 characters)
        type: string
      notifyCreator:
        description: Notify creator on every upload.
        type: boolean
      recipients:
        description: |-
          `DEPRECATED`: CSV string of recipient email addresses

          [Deprecated since version 4.11.0]
        type: string
      showCreatorName:
        description: |-
          Show creator first and last name.

          [Since version 4.11.0]
        type: boolean
      showCreatorUsername:
        description: |-
          Show creator email address.

          [Since version 4.11.0]
        type: boolean
      showUploadedFiles:
        description: Allow display of already uploaded files
        type: boolean
      smsRecipients:
        description: |-
          `DEPRECATED`: CSV string of recipient MSISDNs

          [Deprecated since version 4.11.0]
        type: string
      targetId:
        description: Target room or folder ID
        format: int64
        type: integer
      targetPath:
        description: Path to shared upload node
        type: string
      targetType:
        description: Node type
        example: room
        type: string
      updatedAt:
        description: Modification date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      updatedBy:
        $ref: '#/definitions/UserInfo'
        description: Modified by user
    required:
      - accessKey
      - createdAt
      - createdBy
      - id
      - isProtected
      - name
      - notifyCreator
      - targetId
    title: UploadShare
    type: object
  UploadShareLinkEmail:
    description: Request model for sending an email of an Upload Share link
    properties:
      body:
        description: Notification email content
        type: string
      receiverLanguage:
        description: Language tag for messages to receiver
        example: de-DE
        type: string
      recipients:
        description: List of recipient email addresses
        items:
          type: string
        type: array
    required:
      - body
      - recipients
    title: UploadShareLinkEmail
    type: object
  UploadShareList:
    description: List of Upload Shares
    properties:
      items:
        description: List of Upload Shares
        items:
          $ref: '#/definitions/UploadShare'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: UploadShareList
    type: object
  UserAccount:
    description: User information
    properties:
      authData:
        $ref: '#/definitions/UserAuthData'
        description: |-
          Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`

          [Since version 4.13.0]
      authMethods:
        description: |-
          `DEPRECATED`: Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
          use `authData` instead

          [Deprecated since version 4.13.0]
        items:
          $ref: '#/definitions/UserAuthMethod'
        type: array
      customer:
        $ref: '#/definitions/CustomerData'
        description: |-
          `DEPRECATED`: Customer information
          Please use response from `GET /user/account/customer` instead.

          [Deprecated since version 4.10.0]
      email:
        description: 'Email '
        example: john.doe@email.com
        type: string
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      firstName:
        description: User first name
        type: string
      gender:
        description: |-
          `DEPRECATED`: Gender

          [Deprecated since version 4.12.0]
        type: string
      hasManageableRooms:
        description: User has manageable rooms
        type: boolean
      homeRoomId:
        description: Homeroom ID
        format: int64
        type: integer
      id:
        description: Unique identifier for the user
        format: int64
        type: integer
      isEncryptionEnabled:
        description: |-
          User has generated private key.
          Possible if client-side encryption is active for this customer
        type: boolean
      isLocked:
        description: |-
          User is locked:
          * `false` - unlocked
          * `true` - locked

          User is locked and cannot login anymore.
          (default: `false`)
        type: boolean
      lastLoginFailAt:
        description: Last failed logon date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      lastLoginFailIp:
        description: |-
          `DEPRECATED`: Last failed logon IP address
          will be removed

          [Deprecated since version 4.6.0]
        type: string
      lastLoginSuccessAt:
        description: Last successful logon date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      lastLoginSuccessIp:
        description: |-
          `DEPRECATED`: Last successful logon IP address
          will be removed

          [Deprecated since version 4.6.0]
        type: string
      lastName:
        description: User last name
        type: string
      lockStatus:
        description: |-
          `DEPRECATED`: User lock status:
          * `0` - locked
          * `1` - Web access allowed
          * `2` - Web and mobile access allowed

          Please use `isLocked` instead.

          [Deprecated since version 4.7.0]
        format: int32
        type: integer
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed

          [Deprecated since version 4.13.0]
        type: string
      mustSetEmail:
        description: |-
          If `true`, the user must set the `email` at the first login.
          (default: `false`)

          [Since version 4.13.0]
        type: boolean
      needsToAcceptEULA:
        description: |-
          User has accepted EULA.
          Present, if EULA is system global active.
          cf. `GET system/config/settings/general` - `eulaEnabled`
        type: boolean
      needsToChangePassword:
        description: |-
          Determines whether user has to change his / her password

          [Deprecated since version 4.13.0]
        type: boolean
      needsToChangeUserName:
        description: |-
          `DEPRECATED`: If `true`, the user must change the `userName` at the first login.
          (default: `false`)
          will be removed

          [Deprecated since version 4.13.0]
        type: boolean
      phone:
        description: Phone number
        type: string
      title:
        description: |-
          `DEPRECATED`: Job title

          [Deprecated since version 4.18.0]
        type: string
      userAttributes:
        $ref: '#/definitions/UserAttributes'
        description: User attributes
      userGroups:
        description: All groups the user is member of
        items:
          $ref: '#/definitions/UserGroup'
        type: array
      userName:
        description: |-
          Username

          [Since version 4.13.0]
        type: string
      userRoles:
        $ref: '#/definitions/RoleList'
        description: List of user roles
    required:
      - authData
      - customer
      - firstName
      - hasManageableRooms
      - id
      - isLocked
      - lastName
      - lockStatus
      - needsToChangePassword
      - userName
      - userRoles
    title: UserAccount
    type: object
  UserAttributes:
    description: User custom attributes (list of key-value pairs)
    properties:
      items:
        description: List of key-value pairs
        items:
          $ref: '#/definitions/KeyValueEntry'
        type: array
    required:
      - items
    title: UserAttributes
    type: object
  UserAuthData:
    description: User Authentication Data
    properties:
      adConfigId:
        description: ID of the user's Active Directory.
        format: int32
        type: integer
      login:
        description: User login name
        type: string
      method:
        description: |-
          Authentication method

          Authentication methods:
          * `basic` (or `sql`)
          * `active_directory`
          * `radius`
          * `openid`
        type: string
      mustChangePassword:
        description: |-
          Determines whether user has to change his / her password
          * default: `true` for `basic` auth type
          * default: `false` for `active_directory`, `openid` and `radius` auth types
        type: boolean
      oidConfigId:
        description: ID of the user's OIDC provider.
        format: int32
        type: integer
      password:
        description: |-
          Password (only relevant for `basic` authentication type)
          *NOT* your Active Directory, OpenID or RADIUS password!
        type: string
    required:
      - method
    title: UserAuthData
    type: object
  UserAuthDataUpdateRequest:
    description: User Authentication Data Update Request
    properties:
      adConfigId:
        description: ID of the user's Active Directory.
        format: int32
        type: integer
      login:
        description: User login name
        type: string
      method:
        description: |-
          Authentication method

          Authentication methods:
          * `basic` (or `sql`)
          * `active_directory`
          * `radius`
          * `openid`
        type: string
      oidConfigId:
        description: ID of the user's OIDC provider.
        format: int32
        type: integer
    title: UserAuthDataUpdateRequest
    type: object
  UserAuthMethod:
    description: Authentication method
    properties:
      authId:
        description: |-
          Authentication method

          Authentication methods:
          * `basic` (or `sql`)
          * `active_directory`
          * `radius`
          * `openid`
        type: string
      isEnabled:
        description: Is enabled
        type: boolean
      options:
        description: Authentication method options
        items:
          $ref: '#/definitions/KeyValueEntry'
        type: array
    required:
      - authId
      - isEnabled
    title: UserAuthMethod
    type: object
  UserData:
    description: User information
    properties:
      authData:
        $ref: '#/definitions/UserAuthData'
        description: |-
          Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`

          [Since version 4.13.0]
      authMethods:
        description: |-
          `DEPRECATED`: Authentication methods:
          * `sql`
          * `active_directory`
          * `radius`
          * `openid`
          use `authData` instead

          [Deprecated since version 4.13.0]
        items:
          $ref: '#/definitions/UserAuthMethod'
        type: array
      avatarUuid:
        description: |-
          Avatar UUID

          [Since version 4.11.0]
        type: string
      email:
        description: 'Email '
        example: john.doe@email.com
        type: string
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      firstName:
        description: User first name
        type: string
      gender:
        description: |-
          `DEPRECATED`: Gender

          [Deprecated since version 4.12.0]
        type: string
      hasManageableRooms:
        description: User has manageable rooms
        type: boolean
      homeRoomId:
        description: Homeroom ID
        format: int64
        type: integer
      id:
        description: Unique identifier for the user
        format: int64
        type: integer
      isEncryptionEnabled:
        description: |-
          User has generated private key.
          Possible if client-side encryption is active for this customer
        type: boolean
      isLocked:
        description: |-
          User is locked:
          * `false` - unlocked
          * `true` - locked

          User is locked and cannot login anymore.
          (default: `false`)
        type: boolean
      lastLoginSuccessAt:
        description: Last successful logon date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      lastName:
        description: User last name
        type: string
      lockStatus:
        description: |-
          `DEPRECATED`: User lock status:
          * `0` - locked
          * `1` - Web access allowed
          * `2` - Web and mobile access allowed

          Please use `isLocked` instead.

          [Deprecated since version 4.7.0]
        format: int32
        type: integer
      login:
        description: |-
          `DEPRECATED`: User login name
          will be removed

          [Deprecated since version 4.13.0]
        type: string
      phone:
        description: Phone number
        type: string
      publicKeyContainer:
        $ref: '#/definitions/PublicKeyContainer'
        description: Public key container (private key and version)
      title:
        description: |-
          `DEPRECATED`: Job title

          [Deprecated since version 4.18.0]
        type: string
      userAttributes:
        $ref: '#/definitions/UserAttributes'
        description: User attributes
      userName:
        description: |-
          Username

          [Since version 4.13.0]
        type: string
      userRoles:
        $ref: '#/definitions/RoleList'
        description: List of user roles
    required:
      - authData
      - avatarUuid
      - firstName
      - id
      - isLocked
      - lastName
      - lockStatus
      - userName
    title: UserData
    type: object
  UserFileKey:
    description: User file key
    properties:
      fileKey:
        $ref: '#/definitions/FileKey'
        description: User file key
      userId:
        description: Unique identifier for the user
        format: int64
        type: integer
    required:
      - fileKey
      - userId
    title: UserFileKey
    type: object
  UserFileKeyList:
    description: List of user file keys
    properties:
      items:
        description: List of user file keys
        items:
          $ref: '#/definitions/UserFileKey'
        type: array
    title: UserFileKeyList
    type: object
  UserFileKeySetBatchRequest:
    description: List of request models for setting a user file key(s)
    properties:
      items:
        description: List of user file keys
        items:
          $ref: '#/definitions/UserFileKeySetRequest'
        type: array
    required:
      - items
    title: UserFileKeySetBatchRequest
    type: object
  UserFileKeySetRequest:
    description: Request model for setting a user file key
    properties:
      fileId:
        description: File ID
        format: int64
        type: integer
      fileKey:
        $ref: '#/definitions/FileKey'
        description: User file key
      userId:
        description: Unique identifier for the user
        format: int64
        type: integer
    required:
      - fileId
      - fileKey
      - userId
    title: UserFileKeySetRequest
    type: object
  UserGroup:
    description: Group information
    properties:
      id:
        description: Unique identifier for the group
        format: int64
        type: integer
      isMember:
        description: Determines whether user is a member of the group or not
        type: boolean
      name:
        description: Group name
        type: string
    required:
      - id
      - isMember
      - name
    title: UserGroup
    type: object
  UserGroupList:
    description: List of groups
    properties:
      items:
        description: List of user-group mappings
        items:
          $ref: '#/definitions/UserGroup'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: UserGroupList
    type: object
  UserIdFileIdItem:
    description: User ID and file ID mapping
    properties:
      fileId:
        description: File ID
        format: int64
        type: integer
      userId:
        description: Unique identifier for the user
        format: int64
        type: integer
    title: UserIdFileIdItem
    type: object
  UserIds:
    description: List of user IDs
    properties:
      ids:
        description: List of user IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - ids
    title: UserIds
    type: object
  UserInfo:
    description: User information
    properties:
      avatarUuid:
        description: |-
          Avatar UUID

          [Since version 4.11.0]
        type: string
      displayName:
        description: |-
          `DEPRECATED`: Display name
          use other fields from `UserInfo` instead to combine a display name

          [Deprecated since version 4.11.0]
        type: string
      email:
        description: |-
          Email 

          [Since version 4.11.0]
        type: string
      firstName:
        description: |-
          User first name (mandatory if `userType` is `internal`)

          [Since version 4.11.0]
        type: string
      id:
        description: Unique identifier for the user
        format: int64
        type: integer
      lastName:
        description: |-
          User last name (mandatory if `userType` is `internal`)

          [Since version 4.11.0]
        type: string
      title:
        description: |-
          `DEPRECATED`: Job title

          [Deprecated since version 4.18.0]
        type: string
      userName:
        description: |-
          Username (only returned for `internal` users)

          [Since version 4.13.0]
        type: string
      userType:
        description: |-
          User type:
          * `internal` - ordinary DRACOON user
          * `external` - external user without DRACOON account
          * `system` - system user (non human &#128125;)
          * `deleted` - deleted DRACOON user

          [Since version 4.11.0]
        enum:
          - internal
          - external
          - system
          - deleted
        type: string
    required:
      - avatarUuid
      - displayName
      - id
      - userType
    title: UserInfo
    type: object
  UserItem:
    description: User information
    properties:
      avatarUuid:
        description: |-
          Avatar UUID

          [Since version 4.11.0]
        type: string
      createdAt:
        description: Creation date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      email:
        description: 'Email '
        example: john.doe@email.com
        type: string
      expireAt:
        description: Expiration date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      firstName:
        description: User first name
        type: string
      gender:
        description: |-
          `DEPRECATED`: Gender

          [Deprecated since version 4.12.0]
        type: string
      hasManageableRooms:
        description: User has manageable rooms
        type: boolean
      homeRoomId:
        description: Homeroom ID
        format: int64
        type: integer
      id:
        description: Unique identifier for the user
        format: int64
        type: integer
      isEncryptionEnabled:
        description: |-
          User has generated private key.
          Possible if client-side encryption is active for this customer
        type: boolean
      isLocked:
        description: |-
          User is locked:
          * `false` - unlocked
          * `true` - locked

          User is locked and cannot login anymore.
          (default: `false`)
        type: boolean
      lastLoginSuccessAt:
        description: Last successful logon date
        example: '2018-01-01T00:00:00'
        format: date-time
        type: string
      lastName:
        description: User last name
        type: string
      lockStatus:
        description: |-
          `DEPRECATED`: User lock status:
          * `0` - locked
          * `1` - Web access allowed
          * `2` - Web and mobile access allowed

          Please use `isLocked` instead.

          [Deprecated since version 4.7.0]
        format: int32
        type: integer
      login:
        description: |-
          User login name

          [Deprecated since version 4.13.0]
        type: string
      phone:
        description: Phone number
        type: string
      title:
        description: |-
          `DEPRECATED`: Job title

          [Deprecated since version 4.18.0]
        type: string
      userAttributes:
        $ref: '#/definitions/UserAttributes'
        description: User attributes
      userName:
        description: |-
          Username

          [Since version 4.13.0]
        type: string
      userRoles:
        $ref: '#/definitions/RoleList'
        description: List of user roles
    required:
      - avatarUuid
      - firstName
      - hasManageableRooms
      - id
      - isLocked
      - lastName
      - lockStatus
      - login
      - userName
      - userRoles
    title: UserItem
    type: object
  UserKeyPairContainer:
    description: Key pair container
    properties:
      privateKeyContainer:
        $ref: '#/definitions/PrivateKeyContainer'
        description: Private key container (private key and version)
      publicKeyContainer:
        $ref: '#/definitions/PublicKeyContainer'
        description: Public key container (private key and version)
    required:
      - privateKeyContainer
      - publicKeyContainer
    title: UserKeyPairContainer
    type: object
  UserList:
    description: List of users
    properties:
      items:
        description: List of users
        items:
          $ref: '#/definitions/UserItem'
        type: array
      range:
        $ref: '#/definitions/Range'
        description: Range
    required:
      - items
      - range
    title: UserList
    type: object
  UserLockout:
    description: User lockout information
    properties:
      enabled:
        description: Determines whether user lockout is enabled
        type: boolean
      lockoutPeriod:
        description: Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded
        format: int32
        type: integer
      maxNumberOfLoginFailures:
        description: Maximum allowed number of failed login attempts
        format: int32
        type: integer
    required:
      - enabled
    title: UserLockout
    type: object
  UserUserPublicKey:
    description: Public key information
    properties:
      id:
        description: Unique identifier for the user
        format: int64
        type: integer
      publicKeyContainer:
        $ref: '#/definitions/PublicKeyContainer'
        description: Public key container (private key and version)
    title: UserUserPublicKey
    type: object
  UserUserPublicKeyList:
    description: List of user public keys
    properties:
      items:
        description: List of user public keys
        items:
          $ref: '#/definitions/UserUserPublicKey'
        type: array
    required:
      - items
    title: UserUserPublicKeyList
    type: object
  ViolatedPasswordPolicy:
    description: Violated password policy information
    properties:
      message:
        description: Message from password validator
        type: string
      name:
        description: Name of the violated password policy
        type: string
    title: ViolatedPasswordPolicy
    type: object
  ZipDownloadRequest:
    description: Request model for ZIP download
    properties:
      nodeIds:
        description: List of node IDs
        items:
          format: int64
          type: integer
        type: array
    required:
      - nodeIds
    title: ZipDownloadRequest
    type: object
