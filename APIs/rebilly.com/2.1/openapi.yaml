openapi: 3.0.0
servers:
  - description: Live Server
    url: https://api.rebilly.com/v2.1
  - description: Sandbox Server
    url: https://api-sandbox.rebilly.com/v2.1
info:
  contact:
    email: integrations@rebilly.com
    name: Rebilly API Support
    url: https://www.rebilly.com/contact/
  description: >
    # Introduction

    The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable

    resource URLs.  It returns HTTP response codes to indicate errors.  It also

    accepts and returns JSON in the HTTP body.  You can use your favorite

    HTTP/REST library for your programming language to use Rebilly's API, or

    you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)

    and [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).


    We have other APIs that are also available.  Every action from our [app](https://app.rebilly.com)

    is supported by an API which is documented and available for use so that you

    may automate any workflows necessary.  This document contains the most commonly

    integrated resources.


    # Authentication

    When you sign up for an account, you are given your first secret API key.

    You can generate additional API keys, and delete API keys (as you may

    need to rotate your keys in the future). You authenticate to the

    Rebilly API by providing your secret key in the request header.


    Rebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.

    - [Secret API key](#section/Authentication/SecretApiKey): used for requests made
      from the server side. Never share these keys. Keep them guarded and secure.
    - [Publishable API key](#section/Authentication/PublishableApiKey): used for
      requests from the client side. For now can only be used to create
      a [Payment Token](#operation/PostToken) and
      a [File token](#operation/PostFile).
    - [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time.


    Never share your secret keys. Keep them guarded and secure.


    <!-- ReDoc-Inject: <security-definitions> -->


    # SDKs


    Rebilly offers a Javascript SDK and a PHP SDK to help interact with

    the API.  However, no SDK is required to use the API.


    Rebilly also offers [FramePay](https://rebilly.github.io/framepay-docs/),
     a client-side iFrame-based solution to help
    create payment tokens while minimizing PCI DSS compliance burdens

    and maximizing the customizability. [FramePay](https://rebilly.github.io/framepay-docs/)

    is interacting with the [payment tokens creation operation](#operation/PostToken).


    ## Javascript SDK


    The [Javascript SDK](https://github.com/Rebilly/rebilly-js-sdk) is maintained

    within Github, and contains the installation and usage instructions.


    ## PHP SDK

    For all PHP SDK examples provided in these docs you will need to configure the `$client`.

    You may do it like this:


    ```php

    $client = new Rebilly\Client([
        'apiKey' => 'YourApiKeyHere',
        'baseUrl' => 'https://api.rebilly.com',
    ]);

    ```


    # Using filter with Collections

    Rebilly provides collections filtering. You can use `?filter` param on collection to define which records should be shown in the response.


    Here is filter format description:


    - Fields and values in filter are separated with `:`: `?filter=firstName:John`.


    - Fields in filter are separated with `;`: `?filter=firstName:John;lastName:Doe`.


    - You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`.


    - To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,Bob`. This filter rule will exclude all Johns and Bobs from the response.


    - You can use range filters like this: `?filter=amount:1..10`.


    - You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`.


    - You can create some [predefined values lists](https://user-api-docs.rebilly.com/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`


    # Expand to Include Embedded Objects

    Rebilly provides the ability to pre-load additional

    objects with a request.


    You can use `?expand` param on most requests to expand

    and include embedded objects within the

    `_embedded` property of the response.


    The `_embedded` property contains an array of

    objects keyed by the expand parameter value(s).


    You may expand multiple objects by passing them

    as comma-separated to the expand value like so:


    ```

    ?expand=recentInvoice,customer

    ```


    And in the response, you would see:


    ```

    "_embedded": [
        "recentInvoice": {...},
        "customer": {...}
    ]

    ```

    Expand may be utilitized not only on `GET` requests but also on `PATCH`, `POST`, `PUT` requests too.



    # Getting Started Guide


    Rebilly's API has over 300 operations.  That's more than you'll

    need to implement your use cases.  If you have a use

    case you would like to implement, please consult us for

    feedback on the best API operations for the task.


    Our getting started guide will demonstrate a basic order form use

    case.  It will allow us to highlight core resources

    in Rebilly that will be helpful for many other use cases

    too.


    Within 25 minutes, you'll have sent API requests (via our console)

    to create a subscription order.


    [Click here to visit our API Guide Tutorial](https://api-guides.rebilly.com/).
  license:
    name: Rebilly
    url: https://www.rebilly.com/api-license/
  termsOfService: https://www.rebilly.com/terms-of-use/
  title: Rebilly
  version: "2.1"
  x-apisguru-categories:
    - developer_tools
  x-origin:
    - format: openapi
      url: https://api-reference.rebilly.com/openapi.json
      version: "3.0"
  x-providerName: rebilly.com
security:
  - SecretApiKey: []
  - JWT: []
tags:
  - description: |
      3D Secure is a way to authenticate and protect transactions.  Typically,
      it's only possible to protect the initial transaction in a subscription
      with 3D Secure.
    name: 3D Secure
  - description: |
      Bank Accounts are a type of payment instrument used to collect
      ACH (echeck) payments, similar to how a payment
      card would be used to for a credit card payment.
    name: Bank Accounts
  - description: |
      Your blacklists contains values of customerIds, email addresses,
      ipAddresses, bank identification numbers, countries or payment cards that
      you do NOT want to do business with. They are a good tool for managing
      risk. A blacklist entry that expires after a period of time we call a
      greylist.
    name: Blacklists
  - description: >
      Contacts are Customer's address book.

      All contact information used in Invoices, Subscriptions, Transactions, etc is enlisted here. Hovewer, changing a Contact won't change corresponding contact information in related resources
    name: Contacts
  - description: >
      Coupons allows to apply different types of discounts to Invoices,
      Subscriptions and Plans. Redeemed Coupons will be applied only to Invoices
      with the same currency.
    name: Coupons
  - description: |
      Customers are your customers, sometimes known as accounts, clients,
      members, patrons, or players in other systems.
    name: Customers
  - description: >
      The customers timeline keeps an audit trail of changes and activity
      for each customer.
    name: Customers Timeline
  - description: >
      Customer KYC files uploaded on behalf of a customer, tagged with a
      document type and submitted for validation.
    name: KYC Documents
  - description: >
      Create authentication credentials, login, logout, and verify your
      customers.
    name: Customer Authentication
  - description: |
      Create additional custom fields for particular resources.  You may name,
      describe, and determine the type of the schema.
    name: Custom Fields
  - description: |
      Handle disputes (chargebacks and retrievals).
    name: Disputes
  - description: >
      A File is an entity that can store a physical file and some
      metadata. It also provides an easy access to

      its size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored

      files.

      There are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending

      file contents as POST body), fetching from URL (by providing the file URL via 'url' param)

      Attachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,

      Transaction, Subscription, Plan, Product, Invoice, Note. That allows to quickly find and use files related to

      those specific entities.
    name: Files
  - description: >
      Invoices leave a record for both you and your customer of the
      products sold.
    name: Invoices
  - description: >
      Payments endpoints are deprecated.  Please use the transactions
      resource

      instead.  A payment is a transaction with type `sale`.  The transactions

      resource is more robust and has withstood the test of time by enterprises.


      Collect money from your customers with payments.  You can schedule a payment

      to occur in the future.  You can assign a dunning schedule to a payment to collect

      in the case of a decline.


      Some payments may be, what we term, offsite payments.  These types of payments

      require user interaction.  For example, an initial PayPal purchase, a 3D Secure

      purchase, China Union Pay, and more require the customer's interaction to

      complete the payment.  We call these a "offsite" payment flow.
    name: Payments
  - description: >
      Payment cards are a type of payment instrument used for credit and
      debit card

      sales.  Rebilly securely vaults the full payment card number, and can pass it

      onward securely to any gateway account to transact business.
    name: Payment Cards
  - description: >
      PayPal Accounts are used for paying with PayPal.  We can generate a
      BAID (billing

      agreement id) which will allow for recurring billing.
    name: PayPal Accounts
  - description: >
      Payment tokens are used to reduce the scope of PCI DSS
      compliance.  A payment

      token can be made using a different authentication scheme (refer to the public key

      authentication scheme in the Authentication section), which allows you to

      create a payment token directly from the browser, bypassing the need to send

      sensitive cardholder info to your servers.  We recommend using this with our

      Rebilly.js library, which helps you wire a form into this API resource and create

      payment tokens.
    name: Payment Tokens
  - description: >
      Plans are a template for making a subscription.  For example, you
      may have a plan

      that has a 30-day free trial followed by a recurring charge of $19.95 per month

      until canceled.  The combination of the plan and a request to make a subscription

      will apply those instructions to create the invoices according to the plan's

      schedule.
    name: Plans
  - description: |
      A product describes what you sell (goods or services).
      A product determines how what you sell appears on invoices and receipts.
      The pricing for products is set in Plans.  One product can have many
      plans.
    name: Products
  - description: >
      The Rebilly Reporting API is currently experimental. You may see

      the [Reports API Documentation here](https://reports-api-docs.rebilly.com).
    name: Reports
  - description: |
      Search data including customers, invoices, orders, transactions and more.
    name: Search
  - description: >
      A shipping zone contains regions and countries that you ship to.
      Each shipping zone has its own shipping rates.
    name: Shipping Zones
  - description: >
      A subscription applies a plan's template to create invoices for a
      customer at the

      appropriate scheduled intervals.  A subscription may also determine if the payment

      is collected automatically (with autopay set true).
    name: Subscriptions
  - description: |
      You can map a product to a tax category.  The tax category is used by
      tax providers to calculate taxes for invoices.
    name: Taxes
  - description: |
      Get and refund transactions.
    name: Transactions
  - description: >
      The Rebilly User API is primarily for our GUI apps.  You may see

      the [User API Documentation here](https://user-api-docs.rebilly.com).

      A User represents a person who can login to Rebilly, and take actions subject to

      their granted permissions.  It has resources less commonly integrated by

      3rd parties.
    name: Users
paths:
  /3dsecure:
    get:
      operationId: Get3DSecureCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ThreeDSecure"
                type: array
          description: A list was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of ThreeDSecure entries
      tags:
        - 3D Secure
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a ThreeDSecure entry
      operationId: Post3DSecure
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThreeDSecure"
        description: ThreeDSecure resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreeDSecure"
          description: ThreeDSecure entry was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a ThreeDSecure entry
      tags:
        - 3D Secure
  "/3dsecure/{id}":
    get:
      description: |
        Retrieve a ThreeDSecure entry with specified identifier string
      operationId: Get3DSecure
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreeDSecure"
          description: ThreeDSecure entry was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a ThreeDSecure entry
      tags:
        - 3D Secure
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /attachments:
    get:
      description: |
        Retrieve a list of Attachments
      operationId: GetAttachmentCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - $ref: "#/components/parameters/collectionQuery"
        - $ref: "#/components/parameters/collectionExpand"
        - $ref: "#/components/parameters/collectionFields"
        - description: The collection items sort field and order (prefix with "-" for
            descending sort).
          explode: false
          in: query
          name: sort
          schema:
            items:
              enum:
                - id
                - -id
                - name
                - -name
                - relatedId
                - -relatedId
                - relatedType
                - -relatedType
                - fileId
                - -fileId
                - createdTime
                - -createdTime
                - updatedTime
                - -updatedTime
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Attachment"
                type: array
          description: A list of Attachments was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of Attachments
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $attachments = $client->attachments()->search([
                'filter' => 'relatedType:customer',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create an Attachment
      operationId: PostAttachment
      requestBody:
        $ref: "#/components/requestBodies/Attachment"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
          description: Attachment was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create an Attachment
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $attachmentForm = new Rebilly\Entities\Attachment();
            $attachmentForm->setFileId('fileId');
            $attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);
            $attachmentForm->setRelatedId('customerId');

            try {
                $attachment = $client->attachments()->create($attachmentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/attachments/{id}":
    delete:
      description: |
        Delete the Attachment with predefined identifier string
      operationId: DeleteAttachment
      responses:
        "204":
          description: Attachment was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete an Attachment
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $client->attachments()->delete('attachmentId');
    get:
      description: |
        Retrieve a Attachment with specified identifier string
      operationId: GetAttachment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
          description: Attachment was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve an Attachment
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $attachment = $client->attachments()->load('attachmentId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Update the Attachment with predefined ID
      operationId: PutAttachment
      requestBody:
        $ref: "#/components/requestBodies/Attachment"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
          description: Attachment was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
          description: Attachment was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Update the Attachment with predefined ID
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: >
            $attachmentForm = new Rebilly\Entities\Attachment();

            $attachmentForm->setFileId('fileId');

            $attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);

            $attachmentForm->setRelatedId('customerId');


            try {
                $attachment = $client->attachments()->update('attachmentId', $attachmentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /authentication-options:
    get:
      description: |
        Read current authentication options
      operationId: GetAuthenticationOption
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AuthenticationOptions"
                type: array
          description: Current authentication options was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Read current authentication options
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $authenticationOptions = $client->authenticationOptions()->load();
    parameters:
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Change options
      operationId: PutAuthenticationOption
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationOptions"
        description: Authentication Options resource
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationOptions"
          description: Authentication Options were updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Change authentication options
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: >
            $authenticationOptionsForm = new
            Rebilly\Entities\AuthenticationOptions();

            // Regular expression below matches any password with 6+ length that contains alphabet symbols and/or numbers.

            $authenticationOptionsForm->setPasswordPattern('/^[a-zA-Z0-9]{6,}$/');


            try {
                $authenticationOptions = $client->authenticationOptions()->update($authenticationOptionsForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /authentication-tokens:
    get:
      description: |
        Retrieve a list of auth tokens
      operationId: GetAuthenticationTokenCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AuthenticationToken"
                type: array
          description: A list of auth tokens was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of auth tokens
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $authenticationTokens = $client->authenticationTokens()->search([
                'filter' => 'customerId:testCustomer',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Login a customer
      operationId: PostAuthenticationToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationToken"
        description: AuthenticationToken resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
          description: Login successful
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      security:
        - SecretApiKey: []
        - JWT: []
        - PublishableApiKey: []
      summary: Login
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: >
            $authenticationForm = new Rebilly\Entities\AuthenticationToken();

            $authenticationForm->setUsername('username');

            $authenticationForm->setPassword('test123');


            try {
                $authenticationToken = $client->authenticationTokens()->login($authenticationForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/authentication-tokens/{token}":
    delete:
      description: |
        Logout a customer
      operationId: DeleteAuthenticationToken
      responses:
        "204":
          description: Customer was logged out
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - SecretApiKey: []
        - JWT: []
        - PublishableApiKey: []
      summary: Logout a customer
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $client->authenticationTokens()->logout('token');
    get:
      description: |
        Verify an authentication token
      operationId: GetAuthenticationTokenVerification
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
          description: Authentication Token was verified
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - SecretApiKey: []
        - JWT: []
        - PublishableApiKey: []
      summary: Verify
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $isVerified = $client->authenticationTokens()->verify('token');
    parameters:
      - description: The token identifier string
        in: path
        name: token
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
  "/authentication-tokens/{token}/exchange":
    parameters:
      - description: The token identifier string
        in: path
        name: token
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Exchange Authentication Token for JWT


        It will also invalidate an Authentication Token by default (so it can only be exchanged once).
      operationId: PostAuthenticationTokenExchange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerJWT"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerJWT"
          description: Authentication Token exchanged for JWT
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - SecretApiKey: []
        - JWT: []
        - PublishableApiKey: []
      summary: Exchange
      tags:
        - Customer Authentication
  /bank-accounts:
    get:
      description: |
        Retrieve a list of Bank Accounts
      operationId: GetBankAccountCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BankAccount"
                type: array
          description: A list of Bank Accounts was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of bank accounts
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccounts = $client->bankAccounts()->search([
                'filter' => 'customerId:testId',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a Bank Account
      operationId: PostBankAccount
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BankAccountCreateToken"
                - $ref: "#/components/schemas/BankAccountCreatePlain"
        description: BankAccount resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
          description: Bank Account was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a Bank Account
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: >
            $bankAccountForm = new Rebilly\Entities\BankAccount();

            $bankAccountForm->setCustomerId('customerId');

            $bankAccountForm->setRoutingNumber('0123456');

            $bankAccountForm->setAccountNumber('0123456');

            $bankAccountForm->setAccountType('checking');

            $bankAccountForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $bankAccount = $client->bankAccounts()->create($bankAccountForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/bank-accounts/{id}":
    get:
      description: |
        Retrieve a Bank Account with specified identifier string
      operationId: GetBankAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
          description: Bank Account was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a Bank Account
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccount = $client->bankAccounts()->load('bankAccountId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    patch:
      description: >
        Update bank account's values except for the account number and
        routing number
      operationId: PatchBankAccount
      requestBody:
        content:
          application/json:
            schema:
              properties:
                accountType:
                  description: Bank's Account type.
                  enum:
                    - checking
                    - savings
                    - other
                  type: string
                address:
                  allOf:
                    - $ref: "#/components/schemas/ContactObject"
                  description: The Address.
                bankName:
                  description: Bank's name.
                  type: string
                customFields:
                  $ref: "#/components/schemas/ResourceCustomFields"
              type: object
        description: Bank Account
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
          description: Bank Account was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Update a bank account's values
      tags:
        - Bank Accounts
    put:
      description: |
        Create or update a BankAccount with predefined identifier string
      operationId: PutBankAccount
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BankAccountCreateToken"
                - $ref: "#/components/schemas/BankAccountCreatePlain"
        description: BankAccount resource
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
          description: BankAccount was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
          description: BankAccount was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a Bank Account with predefined ID
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: >
            $bankAccountForm = new Rebilly\Entities\BankAccount();

            $bankAccountForm->setCustomerId('customerId');

            $bankAccountForm->setRoutingNumber('0123456');

            $bankAccountForm->setAccountNumber('0123456');

            $bankAccountForm->setAccountType('checking');

            $bankAccountForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $bankAccount = $client->customers()->create($bankAccountForm, 'bankAccountId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/bank-accounts/{id}/deactivation":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Deactivate a Bank Account
      operationId: PostBankAccountDeactivation
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
          description: Bank Account was deactivated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Deactivate a Bank Account
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccount = $client->bankAccounts()->deactivate('bankAccountId');
  /blacklists:
    get:
      description: |
        Retrieve a list of blacklists
      operationId: GetBlacklistCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Blacklist"
                type: array
          description: A list of Blacklists was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of blacklists
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $blacklists = $client->blacklists()->search([
                'filter' => 'value:testValue',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a blacklist
      operationId: PostBlacklist
      requestBody:
        $ref: "#/components/requestBodies/Blacklist"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blacklist"
          description: Blacklist was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a blacklist
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $blacklistForm = new Rebilly\Entities\Blacklist();
            $blacklistForm->setType($blacklistForm::TYPE_EMAIL);
            $blacklistForm->setValue('test@test.com');
            $blacklistForm->setExpiredTime('2025-01-01 05:00:00');

            try {
                $blacklist = $client->blacklists()->create($blacklistForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/blacklists/{id}":
    delete:
      description: |
        Delete a blacklist with predefined identifier string
      operationId: DeleteBlacklist
      responses:
        "204":
          description: Blacklist was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete a blacklist
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $client->blacklists()->delete('blacklistId');
    get:
      description: |
        Retrieve a blacklist with specified identifier string
      operationId: GetBlacklist
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blacklist"
          description: Blacklist was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a blacklist
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $blacklist = $client->blacklists()->load('blacklistId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create a blacklist with predefined identifier string
      operationId: PutBlacklist
      requestBody:
        $ref: "#/components/requestBodies/Blacklist"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blacklist"
          description: Blacklist was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Blacklist exist and cannot be updated
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a blacklist with predefined ID
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: >
            $blacklistForm = new Rebilly\Entities\Blacklist();

            $blacklistForm->setType($blacklistForm::TYPE_EMAIL);

            $blacklistForm->setValue('test@test.com');

            $blacklistForm->setExpiredTime('2025-01-01 05:00:00');


            try {
                $blacklist = $client->blacklists()->create($blacklistForm, 'blacklistId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /contacts:
    get:
      deprecated: true
      description: |
        Retrieve a list of contacts.  This may be useful
        when giving the customer a choice between previous
        addresses they've used before.
      operationId: GetContactCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Contact"
                type: array
          description: A list of Contacts was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of contacts
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: |
            $contacts = $client->contacts()->search([
                'filter' => 'firstName:John',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      deprecated: true
      description: |
        Contacts are created automatically by data passed to the
        contact-related hashes within the customer, invoice,
        payment instrument (like payment card), subscriptions,
        and more.
        <div class="alert alert-warning">
          Note: This method should almost never be used.
          Please check with us on your use case before using it.
        </div>
      operationId: PostContact
      requestBody:
        $ref: "#/components/requestBodies/Contact"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
          description: Contact was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a contact
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: |
            $contactForm = new Rebilly\Entities\Contact();
            $contactForm->setFirstName('Sherlock');
            $contactForm->setLastName('Holmes');
            $contactForm->setOrganization('TestOrganization');
            $contactForm->setEmails(
                [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ]
            );
            $contactForm->setPhoneNumbers(
                [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ]
            );

            try {
                $contact = $client->contacts()->create($contactForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/contacts/{id}":
    delete:
      deprecated: true
      description: |
        Delete a contact with predefined identifier string
      operationId: DeleteContact
      responses:
        "204":
          description: Contact was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "402":
          description: Contact cannot be deleted
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete a contact
      tags:
        - Contacts
    get:
      deprecated: true
      description: |
        Retrieve a contact with specified identifier string
      operationId: GetContact
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
          description: Contact was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a contact
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: |
            $contact = $client->contacts()->load('contactId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      deprecated: true
      description: |
        Create or update a contact with predefined identifier string
      operationId: PutContact
      requestBody:
        $ref: "#/components/requestBodies/Contact"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
          description: Contact was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Contact exists and cannot be updated
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or update a contact with predefined ID
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: >
            $contactForm = new Rebilly\Entities\Contact();

            $contactForm->setFirstName('Sherlock');

            $contactForm->setLastName('Holmes');

            $contactForm->setOrganization('TestOrganization');

            $contactForm->setEmails(
                [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ]
            );

            $contactForm->setPhoneNumbers(
                [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ]
            );


            try {
                $contact = $client->contacts()->update('contactId', $contactForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /coupons:
    get:
      description: |
        Retrieve a list of coupons
      operationId: GetCouponCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - $ref: "#/components/parameters/collectionQuery"
        - $ref: "#/components/parameters/collectionSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Coupon"
                type: array
          description: A list of coupons was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of coupons
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $coupons = $client->coupons()->search([
                'filter' => 'status:issued',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a coupon
      operationId: PostCoupon
      requestBody:
        $ref: "#/components/requestBodies/Coupon"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
          description: Coupon was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a coupon
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: >
            $couponForm = new Rebilly\Entities\Coupons\Coupon();


            $discountArray = [
                'currency' => 'USD',
                'amount' => 1.99,
            ];


            $discountForm = new \Rebilly\Entities\Coupons\Discounts\Fixed($discountArray);

            $couponForm->setDiscount($discountForm);

            // Coupon can be used right now

            $couponForm->setIssuedTime(date('Y-m-d H:i:s'));


            $restrictionArray = [
                'quantity' => 2,
            ];


            $restrictionForm = new Rebilly\Entities\Coupons\Restrictions\DiscountsPerRedemption($restrictionArray);


            $couponForm->setRestrictions([$restrictionForm]);


            try {
                $coupon = $client->coupons()->create($couponForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /coupons-redemptions:
    get:
      operationId: GetCouponRedemptionCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - $ref: "#/components/parameters/collectionQuery"
        - $ref: "#/components/parameters/collectionSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CouponRedemption"
                type: array
          description: Coupons redemptions were retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of coupon redemptions
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $couponRedemptions = $client->couponsRedemptions()->search([
                'filter' => 'customerId:testCustomer',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Redeem a coupon
      operationId: PostCouponRedemption
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CouponRedemption"
        description: Redeem a coupon
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponRedemption"
          description: Coupon was redeemed
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Redeem a coupon
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: >
            $redemptionForm = new Rebilly\Entities\Coupons\Redemption();

            $redemptionForm->setCustomerId('customerId');

            $redemptionForm->setRedemptionCode('redemptionCode');


            $restrictionArray = [
                'type' => Rebilly\Entities\Coupons\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,
                'quantity' => 2,
            ];


            $restrictionForm = new Rebilly\Entities\Coupons\Restriction([
                $restrictionArray,
            ]);


            $redemptionForm->setAdditionalRestrictions($restrictionForm);


            try {
                $couponRedemption = $client->couponsRedemptions()->redeem($redemptionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/coupons-redemptions/{id}":
    get:
      operationId: GetCouponRedemption
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CouponRedemption"
          description: Retrieve a coupon redemption with specified identifier string
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a coupon redemption with specified identifier string
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: >
            $couponRedemption =
            $client->couponsRedemptions()->load('redemptionCode');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/coupons-redemptions/{id}/cancel":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      operationId: PostCouponRedemptionCancellation
      responses:
        "201":
          description: Cancel a coupon redemption
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Cancel a coupon redemption
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $client->couponsRedemptions()->cancel('id');
  "/coupons/{redemptionCode}":
    get:
      description: |
        Retrieve a coupon with specified redemption code string
      operationId: GetCoupon
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
          description: Coupon was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a coupon
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $coupon = $client->coupons()->load('redemptionCode');
    parameters:
      - description: The Coupon's redemption code
        in: path
        name: redemptionCode
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create or update a coupon with predefined redemption code
      operationId: PutCoupon
      requestBody:
        $ref: "#/components/requestBodies/Coupon"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
          description: Coupon was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
          description: Coupon was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or update a coupon with predefined redemption code
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: >
            $couponForm = new Rebilly\Entities\Coupons\Coupon();


            $discountArray = [
                'type' => Rebilly\Entities\Coupons\Discount::TYPE_FIXED,
                'currency' => 'USD',
                'amount' => 1.99,
            ];


            $discountForm = new Rebilly\Entities\Coupons\Discount($discountArray);

            $couponForm->setDiscount($discountForm);


            $restrictionArray = [
                'type' => Rebilly\Entities\Coupons\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,
                'quantity' => 2,
            ];


            $restrictionForm = new Rebilly\Entities\Coupons\Restriction([
                $restrictionArray,
            ]);


            $couponForm->setRestrictions($restrictionForm);


            try {
                $coupon = $client->coupons()->create($couponForm, 'redemptionCode');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/coupons/{redemptionCode}/expiration":
    parameters:
      - description: The coupon's redemption code
        in: path
        name: redemptionCode
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Set a coupon's expiry time with the specified redemption code.
        The expiredTime of a coupon must be greater than its issuedTime.
        This cannot be performed on expired coupons.
      operationId: PostCouponExpiration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CouponExpiration"
        description: Coupon resource
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Coupon"
          description: Coupon expiration was successfully set
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The coupon is already expired and has been redeemed, unable to
            reschedule expiration
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Set a coupon's expiration time.
      tags:
        - Coupons
  /credentials:
    get:
      description: |
        Retrieve a list of credentials
      operationId: GetCredentialCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Credential"
                type: array
          description: A list of Credentials was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of credentials
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $customerCredentials = $client->customerCredentials()->search([
                'filter' => 'customerId:testCustomer',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a credential
      operationId: PostCredential
      requestBody:
        $ref: "#/components/requestBodies/Credential"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
          description: Credential was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a credential
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: >
            $customerCredentialForm = new Rebilly\Entities\CustomerCredential();

            $customerCredentialForm->setCustomerId('customerId');

            $customerCredentialForm->setUsername('test');

            $customerCredentialForm->setPassword('1234');


            try {
                $customerCredential = $client->customerCredentials()->create($customerCredentialForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/credentials/{id}":
    delete:
      description: |
        Delete a credential with predefined identifier string
      operationId: DeleteCredential
      responses:
        "204":
          description: Credential was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete a credential
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $client->customerCredentials()->delete('credentialId');
    get:
      description: |
        Retrieve a credential with specified identifier string
      operationId: GetCredential
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
          description: Credential was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a credential
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: >
            $customerCredential =
            $client->customerCredentials()->load('credentialId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create or update a credential with predefined identifier string
      operationId: PutCredential
      requestBody:
        $ref: "#/components/requestBodies/Credential"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
          description: Credential was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credential"
          description: Credential was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or update a credential with predefined ID
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: >
            $customerCredentialForm = new Rebilly\Entities\CustomerCredential();

            $customerCredentialForm->setCustomerId('customerId');

            $customerCredentialForm->setUsername('test');

            $customerCredentialForm->setPassword('1234');


            try {
                $customerCredential = $client->customerCredentials()->update('credentialId', $customerCredentialForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/custom-fields/{resource}":
    get:
      description: |
        Retrieve a schema of Custom Fields for the given resource type
      operationId: GetCustomFieldCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The list of custom fields
                items:
                  $ref: "#/components/schemas/CustomField"
                type: array
          description: A schema of Custom Fields was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve Custom Fields
      tags:
        - Custom Fields
      x-code-samples:
        - lang: PHP
          source: |
            $customFields = $client->customFields()->search('customers', [
                'filter' => 'type:boolean',
            ]);
    parameters:
      - $ref: "#/components/parameters/customFieldResource"
      - $ref: "#/components/parameters/organizationId"
  "/custom-fields/{resource}/{name}":
    get:
      description: |
        Retrieve a schema of the given Custom Field for the given resource type
      operationId: GetCustomField
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomField"
          description: A schema of the Custom Field was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a Custom Field
      tags:
        - Custom Fields
      x-code-samples:
        - lang: PHP
          source: >
            $customField = $client->customFields()->load('customers',
            'testFieldName');
    parameters:
      - $ref: "#/components/parameters/customFieldResource"
      - description: The custom field's identifier string
        in: path
        name: name
        required: true
        schema:
          maxLength: 60
          pattern: ^[\w-]+$
          type: string
      - $ref: "#/components/parameters/organizationId"
    put:
      description: >
        Create or alter a schema of the given Custom Field for the given
        resource type.
      operationId: PutCustomField
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomField"
        description: Custom Fields schema of the given resource type
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomField"
          description: The Custom Field was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomField"
          description: The Custom Fields was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: >
            The schema is in use: remove all the associated data in order to
            remove or alter the schema
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or alter a Custom Field
      tags:
        - Custom Fields
      x-code-samples:
        - lang: PHP
          source: >
            $customFieldForm = new Rebilly\Entities\CustomField();

            $customFieldForm->setType($customFieldForm::TYPE_BOOLEAN);


            try {
                $customField = $client->customFields()->update('customers', 'testFieldName', $customFieldForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /customer-timeline-custom-events:
    get:
      description: |
        Retrieve a list of customer timeline custom event types
      operationId: GetCustomerTimelineCustomEventTypeCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerTimelineCustomEvent"
                type: array
          description: A list of customer timeline custom event types was retrieved
            successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of customer timeline custom event types
      tags:
        - Customers Timeline
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create Customer Timeline custom event type
      operationId: PostCustomerTimelineCustomEventType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerTimelineCustomEvent"
        description: Customer Timeline Custom Event Type resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerTimelineCustomEvent"
          description: Customer Timeline Custom Event Type was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create Customer Timeline custom event type
      tags:
        - Customers
  "/customer-timeline-custom-events/{id}":
    get:
      description: |
        Retrieve customer timeline custom event type
      operationId: GetCustomerTimelineCustomEventType
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerTimelineCustomEvent"
          description: Customer Timeline custom event type was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve customer timeline custom event type with specified identifier
        string
      tags:
        - Customers Timeline
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /customer-timeline-events:
    get:
      description: |
        Retrieve a list of customer timeline messages for all customers
      operationId: GetCustomerTimelineEventCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerTimeline"
                type: array
          description: A list of customer timeline messages was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of customer timeline messages for all customers
      tags:
        - Customers Timeline
    parameters:
      - $ref: "#/components/parameters/organizationId"
  /customers:
    get:
      description: |
        Retrieve a list of customers
      operationId: GetCustomerCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - $ref: "#/components/parameters/collectionQuery"
        - $ref: "#/components/parameters/collectionExpand"
        - $ref: "#/components/parameters/collectionFields"
        - description: The collection items sort field and order (prefix with "-" for
            descending sort).
          explode: false
          in: query
          name: sort
          schema:
            items:
              enum:
                - id
                - -id
                - email
                - -email
                - averageValue
                - -averageValue
                - paymentCount
                - -paymentCount
                - lastPaymentTime
                - -lastPaymentTime
                - lifetimeRevenue
                - -lifetimeRevenue
                - invoiceCount
                - -invoiceCount
                - createdTime
                - -createdTime
                - updatedTime
                - -updatedTime
              type: string
            type: array
          style: form
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
              - text/csv
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Customer"
                type: array
            text/csv:
              schema:
                items:
                  $ref: "#/components/schemas/Customer"
                type: array
          description: A list of Customers was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of customers
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customers = $client->customers()->search([
                'filter' => 'firstName:John',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Create a customer without a predefined ID.

        The customer's primary address

        will be used as the default address for payment

        instruments, subscriptions and invoices if none

        are provided.


        If you wish to create the customer with a predefined

        ID (which we recommend to prevent duplication), you

        may use our `PUT` request described below.


        Read our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)

        to understand more.
      operationId: PostCustomer
      requestBody:
        $ref: "#/components/requestBodies/Customer"
      responses:
        "201":
          $ref: "#/components/responses/Customer"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a customer (without an ID)
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customerForm = new Rebilly\Entities\Customer();
            $customerForm->setPrimaryAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);

            try {
                $customer = $client->customers()->create($customerForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/customers/{id}":
    delete:
      description: Merge one duplicate customer to another target customer and delete
        the former.
      operationId: DeleteCustomer
      parameters:
        - description: The customer idendifier to get the data of the deleted duplicate
            customer
          in: query
          name: targetCustomerId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Customer has been merged and removed
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Merge and delete a customer
      tags:
        - Customers
    get:
      description: |
        Retrieve a customer with specified identifier string
      operationId: GetCustomer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          description: Customer was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a customer
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customers = $client->customers()->load('myCustomerId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: >
        Create or update (upsert) a customer with predefined identifier
        string.

        Read our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)

        to understand more.
      operationId: PutCustomer
      requestBody:
        $ref: "#/components/requestBodies/Customer"
      responses:
        "200":
          $ref: "#/components/responses/Customer"
        "201":
          $ref: "#/components/responses/Customer"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Upsert a customer with predefined ID
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: >
            $customerForm = new Rebilly\Entities\Customer();

            $customerForm->setPrimaryAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $customer = $client->customers()->update('myCustomerId', $customerForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/customers/{id}/lead-source":
    delete:
      description: |
        Delete a Lead Source that belongs to a certain customer
      operationId: DeleteCustomerLeadSource
      responses:
        "204":
          description: Lead Source was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete a Lead Source for a customer
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customer = $client->customers()->deleteLeadSource('myCustomerId');
    get:
      description: |
        Retrieve a Lead Source of given customer
      operationId: GetCustomerLeadSource
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadSource"
          description: Lead Source was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a customer's Lead Source
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customer = $client->customers()->load('myCustomerId');
            $leadSource = $customer->getLeadSource();
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create a Lead Source for a customer
      operationId: PutCustomerLeadSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeadSource"
        description: Lead Source resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadSource"
          description: Lead Source was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a Lead Source for a customer
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: >
            $leadSourceForm = new Rebilly\Entities\LeadSource();

            $leadSourceForm->setSource('TestSource');

            $leadSourceForm->setCampaign('TestCampaign');


            try {
                $customer = $client->customers()->updateLeadSource('myCustomerId', $leadSourceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/customers/{id}/timeline":
    get:
      description: |
        Retrieve a list of customer timeline messages
      operationId: GetCustomerTimelineCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomerTimeline"
                type: array
          description: A list of customer timeline messages was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of customer timeline messages
      tags:
        - Customers Timeline
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a customer Timeline comment or custom defined event
      operationId: PostCustomerTimeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerTimeline"
        description: Customer Timeline resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerTimeline"
          description: Customer Timeline comment or custom defined event was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a customer Timeline comment or custom defined event
      tags:
        - Customers Timeline
  "/customers/{id}/timeline/{messageId}":
    delete:
      description: |
        Delete a Customer Timeline message with predefined identifier string
      operationId: DeleteCustomerTimeline
      responses:
        "204":
          description: Customer Timeline message was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete a Customer Timeline message
      tags:
        - Customers Timeline
    get:
      description: |
        Retrieve a customer message with specified identifier string
      operationId: GetCustomerTimeline
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerTimeline"
          description: Customer message was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a customer Timeline message
      tags:
        - Customers Timeline
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - description: The Customer Timeline message ID
        in: path
        name: messageId
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
  "/customers/{id}/upcoming-invoices":
    get:
      description: >
        Retrieve a list of upcoming invoices from the subscriptions which
        belong to the given customer.

        The endpoint is temporary before upcoming invoices get a complete integration.
      operationId: GetCustomerUpcomingInvoiceCollection
      parameters:
        - $ref: "#/components/parameters/collectionExpand"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Invoice"
                type: array
          description: Upcoming invoices are retrieved successfully.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve customer's upcoming invoices
      tags:
        - Invoices
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /disputes:
    get:
      description: |
        Retrieve a list of disputes
      operationId: GetDisputeCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Dispute"
                type: array
          description: A list of disputes was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of disputes
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $disputes = $client->disputes()->search([
                'filter' => 'transactionId:testId',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a dispute
      operationId: PostDispute
      requestBody:
        $ref: "#/components/requestBodies/Dispute"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dispute"
          description: Dispute was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a dispute
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $disputeForm = new Rebilly\Entities\Dispute();
            $disputeForm->setTransactionId('transactionId');
            $disputeForm->setCurrency('USD');
            $disputeForm->setAmount(10);
            $disputeForm->setReasonCode(1000);
            $disputeForm->setType($disputeForm::TYPE_1CB);
            $disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);
            $disputeForm->setPostedTime('2025-01-01 05:00:00');

            try {
                $dispute = $client->disputes()->create($disputeForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/disputes/{id}":
    get:
      description: |
        Retrieve a dispute with specified identifier string
      operationId: GetDispute
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dispute"
          description: Dispute was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a dispute
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $dispute = $client->disputes()->load('disputeId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create or update a Dispute with predefined identifier string
      operationId: PutDispute
      requestBody:
        $ref: "#/components/requestBodies/Dispute"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dispute"
          description: Dispute was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dispute"
          description: Dispute was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or update a Dispute with predefined ID
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $disputeForm = new Rebilly\Entities\Dispute();
            $disputeForm->setTransactionId('transactionId');
            $disputeForm->setCurrency('USD');
            $disputeForm->setAmount(10);
            $disputeForm->setReasonCode(1000);
            $disputeForm->setType($disputeForm::TYPE_1CB);
            $disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);
            $disputeForm->setPostedTime('2025-01-01 05:00:00');

            try {
                $dispute = $client->disputes()->update('disputeId', $dispute);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/disputes/{id}/matched-rules":
    get:
      description: Get matched rules for the dispute
      operationId: GetDisputeMatchedRuleCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MatchedRule"
                type: array
          description: List of matched rules was retrieved successfully.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get matched rules for the dispute
      tags:
        - Disputes
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /files:
    get:
      description: |
        Retrieve a list of files
      operationId: GetFileCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - $ref: "#/components/parameters/collectionQuery"
        - $ref: "#/components/parameters/collectionExpand"
        - $ref: "#/components/parameters/collectionFields"
        - description: The collection items sort field and order (prefix with "-" for
            descending sort).
          explode: false
          in: query
          name: sort
          schema:
            items:
              enum:
                - id
                - -id
                - name
                - -name
                - extension
                - -extension
                - size
                - -size
                - width
                - -width
                - height
                - -height
                - createdTime
                - -createdTime
                - updatedTime
                - -updatedTime
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/File"
                type: array
          description: A list of Files was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of files
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $files = $client->files()->search([
                'filter' => 'name:TestFile',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Additionally, a file can be sent with:
         - multipart/form-data POST request: in this case all property names are the same as the JSON ones (`file` is an uploaded file)
         - file body request: the file body is sent as the request body, with the appropriate `Content-Type`. No additional
         properties can be set along the request data

        The following file types only are allowed:
         - jpg
         - png
         - gif
         - pdf
         - mp3


        If using a Publishable Api Key, only private files can be created. The files can later on be modified or used using
         a secret API key.
      operationId: PostFile
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/FileCreateFromInline"
                - $ref: "#/components/schemas/FileCreateFromUrl"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
          description: File was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      security:
        - SecretApiKey: []
        - JWT: []
        - PublishableApiKey: []
      summary: Create a file
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $fileForm = new Rebilly\Entities\File();
            $fileForm->setUrl('http://test.com/somefile.jpg');

            try {
                $file = $client->files()->create($fileForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/files/{id}":
    delete:
      description: |
        Delete the File with predefined identifier string
      operationId: DeleteFile
      responses:
        "204":
          description: File was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete a File
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $client->files()->delete('fileId');
    get:
      description: |
        Retrieve a File with specified identifier string
      operationId: GetFile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
          description: File was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a File Record
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $file = $client->files()->load('fileId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: >
        Update the File with predefined ID. Note that file can be uploaded
        with POST only.
      operationId: PutFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/File"
        description: File resource
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
          description: File was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Update the File with predefined ID
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $fileForm = new Rebilly\Entities\File();
            $fileForm->setDescription('This is a test file');

            try {
                $file = $client->files()->update('fileId', $fileForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/files/{id}/download":
    get:
      description: |
        Download a file
      operationId: GetFileDownload
      responses:
        "200":
          content:
            application/json:
              schema:
                readOnly: true
                type: string
          description: The file was retrieved successfully
          headers:
            Content-Length:
              description: The number of bytes in the file
              schema:
                type: integer
            Content-Type:
              description: The MIME type of the file
              schema:
                type: string
        "302":
          $ref: "#/components/responses/Found"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Download a file
      tags:
        - Files
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/files/{id}/download{extension}":
    get:
      description: |
        Download image in specific format. Images are converted server-side
      operationId: GetFileDownloadExtension
      responses:
        "200":
          content:
            application/json:
              schema:
                readOnly: true
                type: string
          description: The file was retrieved successfully
          headers:
            Content-Length:
              description: The number of bytes in the file
              schema:
                type: integer
            Content-Type:
              description: The MIME type of the file
              schema:
                type: string
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Download image in specific format
      tags:
        - Files
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - description: File extension which also indicates the desired file format
        in: path
        name: extension
        required: true
        schema:
          enum:
            - .png
            - .jpg
            - .gif
          type: string
      - $ref: "#/components/parameters/organizationId"
  /invoices:
    get:
      description: |
        Retrieve a list of invoices
      operationId: GetInvoiceCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
              - text/csv
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Invoice"
                type: array
            text/csv:
              schema:
                items:
                  $ref: "#/components/schemas/Invoice"
                type: array
          description: A list of invoices was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of invoices
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoices = $client->invoices()->search([
                'filter' => 'customerId:testCustomerId',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create an invoice
      operationId: PostInvoice
      requestBody:
        $ref: "#/components/requestBodies/Invoice"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            <?
            $invoiceForm = new Rebilly\Entities\Invoice();
            $invoiceForm->setCustomerId('customerId');
            $invoiceForm->setWebsiteId('websiteId');
            $invoiceForm->setCurrency('USD');
            $invoiceForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);

            try {
                $invoice = $client->invoices()->create($invoiceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/invoices/{id}":
    get:
      description: |
        Retrieve an invoice with specified identifier string
      operationId: GetInvoice
      parameters:
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
              - application/pdf
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
            application/pdf:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->load('invoiceId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create or update an invoice with predefined identifier string
      operationId: PutInvoice
      requestBody:
        $ref: "#/components/requestBodies/Invoice"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or update an invoice with predefined ID
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: >
            <?

            $invoiceForm = new Rebilly\Entities\Invoice();

            $invoiceForm->setCustomerId('customerId');

            $invoiceForm->setWebsiteId('websiteId');

            $invoiceForm->setCurrency('USD');

            $invoiceForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $invoice = $client->invoices()->update('invoiceId', $invoiceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/invoices/{id}/abandon":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Abandon an invoice with specified identifier string
      operationId: PostInvoiceAbandonment
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was abandoned successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Abandon an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->abandon('invoiceId');
  "/invoices/{id}/issue":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Issue an invoice with specified identifier string. It must be in
        `draft` status.
      operationId: PostInvoiceIssuance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceIssue"
        description: InvoiceIssue resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was issued successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Issue an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: >
            $invoice = $client->invoices()->issue('invoiceId', '2025-01-01
            05:00:00');
  "/invoices/{id}/items":
    get:
      description: |
        Retrieve an invoice items with specified invoice identifier string
      operationId: GetInvoiceItemCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceItem"
                type: array
          description: Invoice items were retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve invoice items
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoiceItems = $client->invoiceItems()->search('invoiceId', [
                'filter' => 'quantity:5',
            ]);
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create an invoice item
      operationId: PostInvoiceItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceItem"
        description: InvoiceItem resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceItem"
          description: InvoiceItem was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create an invoice item
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: >
            $invoiceItemForm = new Rebilly\Entities\InvoiceItem();

            $invoiceItemForm->setType($invoiceItemForm::TYPE_DEBIT);

            $invoiceItemForm->setUnitPrice(0.99);

            $invoiceItemForm->setQuantity(5);


            try {
                $invoiceItem = $client->invoiceItems()->create($invoiceItemForm, 'invoiceId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/invoices/{id}/matched-rules":
    get:
      description: Get matched rules for the invoice
      operationId: GetInvoiceMatchedRuleCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MatchedRule"
                type: array
          description: List of matched rules was retrieved successfully.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get matched rules for the invoice
      tags:
        - Invoices
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/invoices/{id}/recalculate":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Recalculate an invoice with specified identifier string.

        It will recalculate shipping rates, taxes, discounts. It is useful when coupon was revoked or customer redeemed coupon after invoice was issued and you want to apply it to this invoice.
      operationId: PostInvoiceRecalculation
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was recalculated successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Recalculate an invoice
      tags:
        - Invoices
  "/invoices/{id}/reissue":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Reissue an invoice with specified identifier string. It must be
        issued (status must be `unpaid` or `past-due`).
      operationId: PostInvoiceReissuance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceReissue"
        description: InvoiceReissue resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was reissued successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Reissue an invoice
      tags:
        - Invoices
  "/invoices/{id}/timeline":
    get:
      description: |
        Retrieve a list of invoice timeline messages
      operationId: GetInvoiceTimelineCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceTimeline"
                type: array
          description: A list of invoice timeline messages was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of invoice timeline messages
      tags:
        - Invoices
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create an invoice Timeline comment
      operationId: PostInvoiceTimeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceTimeline"
        description: Invoice Timeline resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceTimeline"
          description: Invoice Timeline comment was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create an invoice Timeline comment
      tags:
        - Invoices
  "/invoices/{id}/timeline/{messageId}":
    delete:
      description: |
        Delete an Invoice Timeline message with predefined identifier string
      operationId: DeleteInvoiceTimeline
      responses:
        "204":
          description: Invoice Timeline message was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete an Invoice Timeline message
      tags:
        - Invoices
    get:
      description: |
        Retrieve a invoice message with specified identifier string
      operationId: GetInvoiceTimeline
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceTimeline"
          description: Invoice message was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve an Invoice Timeline message
      tags:
        - Invoices
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - description: The Invoice Timeline message ID
        in: path
        name: messageId
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
  "/invoices/{id}/transaction-allocations":
    get:
      description: Get the precise amounts from a transaction allocated as invoice payments
      operationId: GetInvoiceTransactionAllocationCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InvoiceTransactionAllocation"
                type: array
          description: List of allocations was retrieved successfully.
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get transaction amounts allocated to an invoice
      tags:
        - Invoices
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/invoices/{id}/void":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Void an invoice with specified identifier string
      operationId: PostInvoiceVoid
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was voided successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Void an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->void('invoiceId');
  /kyc-documents:
    get:
      description: |
        Retrieve a list of KYC documents
      operationId: GetKycDocumentCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - description: The collection items sort field and order (prefix with "-" for
            descending sort).
          explode: false
          in: query
          name: sort
          schema:
            items:
              enum:
                - id
                - -id
                - createdTime
                - -createdTime
                - updatedTime
                - -updatedTime
              type: string
            type: array
          style: form
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/KycDocument"
                type: array
          description: A list of KYC documents was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of KYC documents
      tags:
        - KYC Documents
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a KYC Document
      operationId: PostKycDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KycDocument"
        description: Kyc document resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KycDocument"
          description: Kyc document was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a KYC Document
      tags:
        - KYC Documents
  "/kyc-documents/{id}":
    get:
      description: Retrieve a KYC document with specified identifier string.
      operationId: GetKycDocument
      parameters:
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KycDocument"
          description: KYC document was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a KYC Document
      tags:
        - KYC Documents
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: Create or update a KYC document with predefined identifier string.
      operationId: PutKycDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KycDocument"
        description: KYC document resource.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KycDocument"
          description: KYC document was updated.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KycDocument"
          description: KYC document was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or update a KYC document with predefined ID
      tags:
        - KYC Documents
  "/kyc-documents/{id}/acceptance":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Marks that status of the document as `accepted`. Updates the review
        time and reviewer information. Intended to be used for manual overrides.
      operationId: PostKycDocumentAcceptance
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KycDocument"
          description: KYC document acceptance was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Accept a KYC document
      tags:
        - KYC Documents
  "/kyc-documents/{id}/rejection":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Marks that status of the document as `rejected`. Updates the review
        time and reviewer information. Intended to be used for manual overrides.
      operationId: PostKycDocumentRejection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KycDocumentRejection"
        description: KYC document resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KycDocument"
          description: KYC document rejection was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Reject a KYC document
      tags:
        - KYC Documents
  "/kyc-documents/{id}/review":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: Mark the KYC document as reviewed. Updates the review time and
        reviewer information.
      operationId: PostKycDocumentReview
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KycDocument"
          description: KYC document was reviewed.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Review a KYC document
      tags:
        - KYC Documents
  /password-tokens:
    get:
      description: |
        Retrieve a list of tokens
      operationId: GetPasswordTokenCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ResetPasswordToken"
                type: array
          description: A list of Reset Password Tokens was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of tokens
      tags:
        - Customer Authentication
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a Reset Password Token
      operationId: PostPasswordToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordToken"
        description: ResetPasswordToken resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetPasswordToken"
          description: Reset Password Token was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a Reset Password Token
      tags:
        - Customer Authentication
  "/password-tokens/{id}":
    delete:
      description: |
        Delete a Reset Password Token with predefined identifier string
      operationId: DeletePasswordToken
      responses:
        "204":
          description: ResetPasswordToken was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete a Reset Password Token
      tags:
        - Customer Authentication
    get:
      description: |
        Retrieve a Reset Password Token with specified identifier string
      operationId: GetPasswordToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetPasswordToken"
          description: ResetPasswordToken was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a Reset Password Token
      tags:
        - Customer Authentication
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /payment-cards:
    get:
      description: |
        Retrieve a list of Payments Cards
      operationId: GetPaymentCardCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PaymentCard"
                type: array
          description: A list of Payment Card was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of Payment Cards
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCards = $client->paymentCards()->search([
                'filter' => 'status:active',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a Payment Card
      operationId: PostPaymentCard
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/PaymentCardCreateToken"
                - $ref: "#/components/schemas/PaymentCardCreatePlain"
        description: PaymentCard resource
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment Card was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment Card was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: >
            $paymentCardForm = new Rebilly\Entities\PaymentCard();

            $paymentCardForm->setCustomerId('customerId');

            $paymentCardForm->setPan('4111111111111111');

            $paymentCardForm->setExpYear(2025);

            $paymentCardForm->setExpMonth(8);

            $paymentCardForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $paymentCard = $client->paymentCards()->create($paymentCardForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/payment-cards/{id}":
    get:
      description: |
        Retrieve a Payment Card with specified identifier string
      operationId: GetPaymentCard
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment card was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCard = $client->paymentCards()->load('paymentCardId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    patch:
      description: |
        Update any of the payment card's values except for the pan
      operationId: PatchPaymentCard
      requestBody:
        content:
          application/json:
            schema:
              properties:
                billingAddress:
                  allOf:
                    - $ref: "#/components/schemas/ContactObject"
                  description: Card's billing address
                customFields:
                  $ref: "#/components/schemas/ResourceCustomFields"
                cvv:
                  description: Card's cvv (card verification value).
                  type: string
                expMonth:
                  description: Card's expiry month
                  type: integer
                expYear:
                  description: Card's expiry year
                  type: integer
                stickyGatewayAccountId:
                  allOf:
                    - $ref: "#/components/schemas/ResourceId"
                  description: Sticky Gateway Account ID
              type: object
        description: Payment card
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment card was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Update a payment card's values
      tags:
        - Payment Cards
    put:
      operationId: PutPaymentCard
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/PaymentCardCreateToken"
                - $ref: "#/components/schemas/PaymentCardCreatePlain"
        description: Payment card
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment card was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment card was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Payment card already exists and cannot be updated
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a payment card with predefined ID
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: >
            $paymentCardForm = new Rebilly\Entities\PaymentCard();

            $paymentCardForm->setCustomerId('customerId');

            $paymentCardForm->setPan('4111111111111111');

            $paymentCardForm->setExpYear(2025);

            $paymentCardForm->setExpMonth(8);

            $paymentCardForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $paymentCard = $client->paymentCards()->create($paymentCardForm, 'paymentCardId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/payment-cards/{id}/authorization":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      deprecated: true
      description: |
        Authorize a Payment Card

        Instead of using this endpoint a Payment Card will
        be authorized on first usage (new transaction or order).
      operationId: PostPaymentCardAuthorization
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: Amount
                  format: double
                  type: number
                currency:
                  allOf:
                    - $ref: "#/components/schemas/CurrencyCode"
                gatewayAccountId:
                  description: The Gateway account ID
                  type: string
                redirectUrl:
                  description: Redirect URL
                  type: string
                websiteId:
                  description: The Website ID
                  type: string
              required:
                - websiteId
                - currency
              type: object
        description: Payment Card resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment Card was authorized
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Authorize a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: >
            $paymentCardAuthorizationForm = new
            Rebilly\Entities\PaymentCardAuthorization();

            $paymentCardAuthorizationForm->setWebsiteId('websiteId');

            $paymentCardAuthorizationForm->setCurrency('USD');

            $paymentCardAuthorizationForm->setGatewayAccountId('gatewayAccountId');


            try {
                $paymentCard = $client->paymentCards()->authorize('paymentCardId', $paymentCardAuthorizationForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/payment-cards/{id}/deactivation":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Deactivate a Payment Card
      operationId: PostPaymentCardDeactivation
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentCard"
          description: Payment Card was deactivated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Deactivate a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $client->paymentCards()->deactivate('paymentCardId');
  "/payment-cards/{id}/matched-rules":
    get:
      description: Get matched rules for the payment card
      operationId: GetPaymentCardMatchedRuleCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MatchedRule"
                type: array
          description: List of matched rules was retrieved successfully.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get matched rules for the payment card
      tags:
        - Payment Cards
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /payment-instrument-validation:
    get:
      description: >
        Retrieve a Payment Instrument validation with specified identifier string
      operationId: GetPaymentInstrumentValidationCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PaymentInstrumentValidation"
                type: array
          description: Successfully retrieved a payment instrument validation
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a Payment Instrument validation
      tags:
        - Payment Instrument Validation
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Validate a payment instrument
      operationId: PostPaymentInstrumentValidation
      requestBody:
        content:
          application/json:
            schema:
              properties:
                method:
                  description: Payment method
                  type: string
                paymentInstrumentId:
                  description: Payment instrument ID
                  type: string
              required:
                - method
                - paymentInstrumentId
              type: object
        description: Payment instrument
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentInstrumentValidation"
          description: Validation successful
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Validate a payment instrument
      tags:
        - Payment Instrument Validation
  "/payment-instrument-validation/{id}":
    get:
      description: |
        Retrieve a list of validated payment instruments
      operationId: GetPaymentInstrumentValidation
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentInstrumentValidation"
          description: A list of validated payment instrument was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of validated payment instruments
      tags:
        - Payment Instrument Validation
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /payments:
    get:
      deprecated: true
      description: |
        Retrieve a payment list
      operationId: GetPaymentCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
              - text/csv
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Payment"
                type: array
            text/csv:
              schema:
                items:
                  $ref: "#/components/schemas/Payment"
                type: array
          description: Payment list was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a payment list
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $payments = $client->payments()->search([
                'filter' => 'currency:USD',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      deprecated: true
      description: |
        Create a payment (deprecated).  Use create a transaction instead.
      operationId: PostPayment
      requestBody:
        $ref: "#/components/requestBodies/Payment"
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Payment"
                type: array
          description: Payment was processed
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
          description: Payment was accepted
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a payment
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: >
            $paymentForm = new Rebilly\Entities\Payment();


            $paymentForm->setWebsiteId('websiteId');

            $paymentForm->setCustomerId('customerId');

            $paymentForm->setCurrency('USD');

            $paymentForm->setAmount(1.99);


            $data = [
                'method' => Rebilly\Entities\PaymentMethod::METHOD_CASH,
            ];


            $paymentInstrumentForm = new Rebilly\Entities\PaymentMethodInstrument($data);


            $paymentForm->setPaymentInstrument($paymentInstrumentForm);


            try {
                $payment = $client->payments()->create($paymentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/payments/{id}":
    get:
      deprecated: true
      description: |
        Retrieve a payment with specified identifier string
      operationId: GetPayment
      responses:
        "200":
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Payment"
          description: Payment was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a payment
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $payment = $client->payments()->load('paymentId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      deprecated: true
      description: |
        Make a payment with predefined identifier string
      operationId: PutPayment
      requestBody:
        $ref: "#/components/requestBodies/Payment"
      responses:
        "201":
          content:
            application/json; charset=utf-8:
              schema:
                items:
                  $ref: "#/components/schemas/Payment"
                type: array
          description: Payment was processed
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "202":
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Payment"
          description: Payment was accepted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a payment with predefined ID
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: >
            $paymentForm = new Rebilly\Entities\Payment();


            $paymentForm->setWebsiteId('websiteId');

            $paymentForm->setCustomerId('customerId');

            $paymentForm->setCurrency('USD');

            $paymentForm->setAmount(1.99);


            $data = [
                'method' => Rebilly\Entities\PaymentMethod::METHOD_CASH,
            ];


            $paymentInstrumentForm = new Rebilly\Entities\PaymentMethodInstrument($data);


            $paymentForm->setPaymentInstrument($paymentInstrumentForm);


            try {
                $payment = $client->payments()->update('paymentId', $paymentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /paypal-accounts:
    get:
      description: |
        Retrieve a list of PayPal Accounts
      operationId: GetPayPalAccountCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PayPalAccount"
                type: array
          description: A list of PayPal Accounts was retrieved successfully
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of PayPal accounts
      tags:
        - PayPal Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $payPalAccounts = $client->payPalAccounts()->search([
                'filter' => 'status:active',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a PayPal Account
      operationId: PostPayPalAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PayPalAccount"
        description: PayPalAccount resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayPalAccount"
          description: PayPal Account was created
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a PayPal Account
      tags:
        - PayPal Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $payPalForm = new Rebilly\Entities\PayPalAccount();
            $payPalForm->setCustomerId('customerId');
            $payPalForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);

            try {
                $payPalAccount = $client->payPalAccounts()->create($payPalForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/paypal-accounts/{id}":
    get:
      description: |
        Retrieve a PayPal Account with specified identifier string
      operationId: GetPayPalAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayPalAccount"
          description: PayPal Account was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a PayPal Account
      tags:
        - PayPal Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $payPalAccount = $client->payPalAccounts()->load('payPalAccountId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      operationId: PutPayPalAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PayPalAccount"
        description: PayPal Account
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayPalAccount"
          description: PayPal Account was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: PayPal Account exist and cannot be updated
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a PayPal account with predefined ID
      tags:
        - PayPal Accounts
      x-code-samples:
        - lang: PHP
          source: >
            $payPalForm = new Rebilly\Entities\PayPalAccount();

            $payPalForm->setCustomerId('customerId');

            $payPalForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $payPalAccount = $client->payPalAccounts()->create($payPalForm, 'payPalAccountId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/paypal-accounts/{id}/activation":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      deprecated: true
      description: |
        Activate a PayPal Account

        Instead of using this endpoint a PayPal Account will
        be authorized on first usage (new transaction or order).
      operationId: PostPayPalAccountActivation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PayPalAccountAuthorization"
        description: PayPal Account resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayPalAccount"
          description: PayPal Account was activated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Activate a PayPal Account
      tags:
        - PayPal Accounts
      x-code-samples:
        - lang: PHP
          source: >
            $activationData = [
                'websiteId' => 'testWebsiteId',
                'currency' => 'USD',
            ];


            try {
                $client->payPalAccounts()->activate($activationData, 'payPalAccountId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/paypal-accounts/{id}/deactivation":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Deactivate a PayPal Account
      operationId: PostPayPalAccountDeactivation
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayPalAccount"
          description: PayPal Account was deactivated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Deactivate a PayPal Account
      tags:
        - PayPal Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $client->payPalAccounts()->deactivate('payPalAccountId');
  /plans:
    get:
      description: |
        Retrieve a list of plans
      operationId: GetPlanCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Plan"
                type: array
          description: A list of Plans was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of plans
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $plans = $client->plans()->search([
                'filter' => 'name:TestPlan',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a plan
      operationId: PostPlan
      requestBody:
        $ref: "#/components/requestBodies/Plan"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
          description: Plan was created
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a plan
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $planForm = new Rebilly\Entities\Plan();
            $planForm->setName('TestPlan');
            $planForm->setCurrency('USD');
            $planForm->setTrialAmount(1);
            $planForm->setTrialPeriodUnit('day');
            $planForm->setTrialPeriodLength(1);
            $planForm->setProductId('test-product');

            try {
                $plan = $client->plans()->create($planForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/plans/{id}":
    delete:
      description: |
        Delete a Plan with predefined identifier string
      operationId: DeletePlan
      responses:
        "204":
          description: Plan was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete a Plan
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $client->plans()->delete('planId');
    get:
      description: |
        Retrieve a plan with specified identifier string
      operationId: GetPlan
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
          description: Plan was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a plan
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $plan = $client->plans()->load('planId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create or update a Plan with predefined identifier string
      operationId: PutPlan
      requestBody:
        $ref: "#/components/requestBodies/Plan"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
          description: Plan was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
          description: Plan was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create or update a Plan with predefined ID
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $planForm = new Rebilly\Entities\Plan();
            $planForm->setName('TestPlan');
            $planForm->setCurrency('USD');
            $planForm->setTrialAmount(1);
            $planForm->setTrialPeriodUnit('day');
            $planForm->setTrialPeriodLength(1);

            try {
                $plan = $client->plans()->update('planId', $planForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /products:
    get:
      description: |
        Retrieve a list of products
      operationId: GetProductCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
                type: array
          description: A list of products was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of products
      tags:
        - Products
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a Product
      operationId: PostProduct
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: Product was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a Product
      tags:
        - Products
  "/products/{id}":
    delete:
      description: |
        Delete a product with predefined identifier string
      operationId: DeleteProduct
      responses:
        "204":
          description: Product was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete a product
      tags:
        - Products
    get:
      description: |
        Retrieve a product with specified identifier string
      operationId: GetProduct
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: Product was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a product
      tags:
        - Products
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create a product with predefined identifier string
      operationId: PutProduct
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: Product was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
          description: Product was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a product with predefined ID
      tags:
        - Products
  /search:
    get:
      description: >
        Search merchant's data to return resources such as customers,
        invoices, orders, transactions
      operationId: GetSearch
      parameters:
        - description: >
            The default or "global" search. It will search all searchable
            resources across as many fields as possible.
          in: query
          name: q
          schema:
            type: string
        - description: >
            The collection items filter requires a special format.

            Use "," for multiple allowed values.  Use ";" for multiple fields.

            Use one or more of the listed filter fields. i.e. `is:customer email:bob@test.com`.

            The `date` value can be surrounded with quotes. Examples:

            `>2019-01-01`, `last month`, `yesterday`, `<=2019-04-30`.
          in: query
          name: filter
          schema:
            enum:
              - is
              - amount
              - bin
              - coupon
              - currency
              - date
              - email
              - last4
              - name
              - paypalUsername
              - plan
              - product
              - tag
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Search"
                type: array
          description: Results keyed by resource
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Search merchant data
      tags:
        - Search
    parameters:
      - $ref: "#/components/parameters/organizationId"
  /shipping-zones:
    get:
      description: |
        Retrieve a list of shipping zones
      operationId: GetShippingZoneCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ShippingZone"
                type: array
          description: A list of shipping zones was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of shipping zones
      tags:
        - Shipping Zones
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a Shipping Zone
      operationId: PostShippingZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingZone"
        description: Shipping Zone resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingZone"
          description: Shipping Zone was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a Shipping Zone
      tags:
        - Shipping Zones
  "/shipping-zones/{id}":
    delete:
      description: |
        Delete a shipping zone with predefined identifier string
      operationId: DeleteShippingZone
      responses:
        "204":
          description: Shipping zone was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete a shipping zone
      tags:
        - Shipping Zones
    get:
      description: |
        Retrieve a shipping zone with specified identifier string
      operationId: GetShippingZone
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingZone"
          description: Shipping zone was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a shipping zone
      tags:
        - Shipping Zones
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create a shipping zone with predefined identifier string
      operationId: PutShippingZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingZone"
        description: Shipping zone resource
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingZone"
          description: Shipping zone was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShippingZone"
          description: Shipping zone was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a shipping zone with predefined ID
      tags:
        - Shipping Zones
  /subscription-cancellations:
    get:
      description: Retrieve a list of cancellations for all subscriptions
      operationId: GetSubscriptionCancellationCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionCancellation"
                type: array
          description: A list of cancellations was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of cancellations
      tags:
        - Subscriptions
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: Cancel a subscription or preview the cancellation parameters before that
      operationId: PostSubscriptionCancellation
      requestBody:
        $ref: "#/components/requestBodies/SubscriptionCancellation"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionCancellation"
          description: Cancellation was created, subscription is or will be deactivated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Cancel a subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: >
            $subscriptionCancelForm = new Rebilly\Entities\SubscriptionCancel();

            $subscriptionCancelForm->setEffectiveTime(new DateTime());


            try {
                $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/subscription-cancellations/{id}":
    delete:
      description: Delete a subscription's cancellation. Only draft can be deleted.
      operationId: DeleteSubscriptionCancellation
      responses:
        "204":
          description: Cancellaton was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete a cancellation
      tags:
        - Subscriptions
    get:
      description: Retrieve a subscription сancellation with specified identifier string
      operationId: GetSubscriptionCancellation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionCancellation"
          description: Cancellation was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a subscription сancellation
      tags:
        - Subscriptions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: Cancel a subscription
      operationId: PutSubscriptionCancellation
      requestBody:
        $ref: "#/components/requestBodies/SubscriptionCancellation"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionCancellation"
          description: Cancellation was updated, subscription is or will be deactivated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionCancellation"
          description: Cancellation was created, subscription is or will be deactivated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Cancel a subscription
      tags:
        - Subscriptions
  /subscription-reactivations:
    get:
      description: Retrieve a list of reactivations for all subscriptions
      operationId: GetSubscriptionReactivationCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionReactivation"
                type: array
          description: A list of reactivations was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of reactivations
      tags:
        - Subscriptions
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: Reactivate a subscription
      operationId: PostSubscriptionReactivation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionReactivation"
        description: Reactivation resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionReactivation"
          description: >
            Reactivation was created, subscription is active and won't be
            deactivated.

            If there was a cancellation with status "confirmed", it is revoked.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Reactivate a subscription
      tags:
        - Subscriptions
  "/subscription-reactivations/{id}":
    get:
      description: Retrieve a subscription reactivation with specified identifier string
      operationId: GetSubscriptionReactivation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionReactivation"
          description: Reactivation was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a subscription reactivation
      tags:
        - Subscriptions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  /subscriptions:
    get:
      description: |
        Retrieve a list of subscriptions
      operationId: GetSubscriptionCollection
      parameters:
        - $ref: "#/components/parameters/subscriptionExpand"
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
              - text/csv
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Subscription"
                type: array
            text/csv:
              schema:
                items:
                  $ref: "#/components/schemas/Subscription"
                type: array
          description: A list of subscriptions was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of subscriptions
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscriptions = $client->subscriptions()->search([
                'filter' => 'customerId:testCustomerId',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a subscription. Consider using the upsert
        operation to accomplish this task.
      operationId: PostSubscription
      parameters:
        - $ref: "#/components/parameters/subscriptionExpand"
      requestBody:
        $ref: "#/components/requestBodies/Subscription"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Subscription was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: >
            $subscriptionForm = new Rebilly\Entities\Subscription();

            $subscriptionForm->setCustomerId('customerId');

            $subscriptionForm->setWebsiteId('websiteId');

            $subscriptionForm->setItems([
                [
                    'planId' => 'my-plan',
                    'quantity' => 1,
                ],
            ]);

            $subscriptionForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $subscription = $client->subscriptions()->create($subscriptionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/subscriptions/{id}":
    get:
      description: |
        Retrieve a subscription with specified identifier string
      operationId: GetSubscription
      parameters:
        - $ref: "#/components/parameters/subscriptionExpand"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Subscription was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscription = $client->subscriptions()->load('subscriptionId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    put:
      description: |
        Create or update a subscription with predefined identifier string
      operationId: PutSubscription
      parameters:
        - $ref: "#/components/parameters/subscriptionExpand"
      requestBody:
        $ref: "#/components/requestBodies/Subscription"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Subscription was updated
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Subscription was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Upsert a subscription with predefined ID
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: >
            $subscriptionForm = new Rebilly\Entities\Subscription();

            $subscriptionForm->setCustomerId('customerId');

            $subscriptionForm->setWebsiteId('websiteId');

            $subscriptionForm->setItems($subscriptionForm->createItems([
                'planId' => 'my-plan',
                'quantity' => 1,
            ]));

            $subscriptionForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            try {
                $subscription = $client->subscriptions()->update('subscriptionId', $subscriptionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/subscriptions/{id}/change-plan":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Change a subscription's plan and designate when and if there should
        be pro rata credits given.

        Only active subscriptions with a single plan can be changed.

        Edit pending unpaid subscriptions directly regardless the number of plans.
      operationId: PostSubscriptionPlanChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionChange"
        description: Change the plan
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Subscription was changed
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Change a subscription's plan
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: >
            $subscriptionChangePlanForm = new
            Rebilly\Entities\SubscriptionChangePlan();

            $subscriptionChangePlanForm->setPlanId('newPlanId');

            $subscriptionChangePlanForm->setRenewalPolicy('retain');

            $subscriptionChangePlanForm->setPreview(true);

            $subscriptionChangePlanForm->setProrated(true);

            $subscriptionChangePlanForm->setEffectiveTime('2018-02-02 00:00:00');


            try {
                $subscription = $client->subscriptions()->changePlan('subscriptionId', $subscriptionChangePlanForm);
                echo $subscription->getLineItemSubtotal();
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/subscriptions/{id}/interim-invoice":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Issue an interim invoice for a subscription, typically used in
        conjunction with plan changes and pro rata adjustments.

        This process creates an invoice, adds the subscription's line items to the invoice, and issues the invoice, and applies

        payment to it if a transaction id is supplied.
      operationId: PostSubscriptionInterimInvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionInvoice"
        description: Issue an interim invoice
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Invoice was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Issue an interim invoice for a subscription
      tags:
        - Subscriptions
  "/subscriptions/{id}/matched-rules":
    get:
      description: Get matched rules for the subscription
      operationId: GetSubscriptionMatchedRuleCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MatchedRule"
                type: array
          description: List of matched rules was retrieved successfully.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get matched rules for the subscription
      tags:
        - Subscriptions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/subscriptions/{id}/timeline":
    get:
      description: |
        Retrieve a list of order timeline messages
      operationId: GetSubscriptionTimelineCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OrderTimeline"
                type: array
          description: A list of order timeline messages was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of order timeline messages
      tags:
        - Subscriptions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create an order Timeline comment
      operationId: PostSubscriptionTimeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderTimeline"
        description: Order Timeline resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderTimeline"
          description: Order Timeline comment was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create an order Timeline comment
      tags:
        - Subscriptions
  "/subscriptions/{id}/timeline/{messageId}":
    delete:
      description: |
        Delete an Order Timeline message with predefined identifier string
      operationId: DeleteSubscriptionTimeline
      responses:
        "204":
          description: Order Timeline message was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete an Order Timeline message
      tags:
        - Subscriptions
    get:
      description: |
        Retrieve a order message with specified identifier string
      operationId: GetSubscriptionTimeline
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderTimeline"
          description: Order message was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve an Order Timeline message
      tags:
        - Subscriptions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - description: The Order Timeline message ID
        in: path
        name: messageId
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
  "/subscriptions/{id}/upcoming-invoices":
    get:
      description: >
        Retrieve an upcoming invoice from the specified subscription.

        The endpoint is temporary before upcoming invoices get a complete integration.
      operationId: GetSubscriptionUpcomingInvoiceCollection
      parameters:
        - $ref: "#/components/parameters/collectionExpand"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Invoice"
                type: array
          description: Upcoming invoices are retrieved successfully.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve subscription's upcoming invoice
      tags:
        - Invoices
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/subscriptions/{id}/upcoming-invoices/{invoiceId}/issue":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - description: The Upcoming Invoice ID
        in: path
        name: invoiceId
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Issue an upcoming invoice with specified identifier string for early pay.
      operationId: PostUpcomingInvoiceIssuance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceIssue"
        description: InvoiceIssue resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
          description: Upcoming Invoice was issued successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Issue an upcoming invoice for early pay
      tags:
        - Subscriptions
  /tags:
    get:
      description: |
        Retrieve a list of tags
      operationId: GetTagCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - $ref: "#/components/parameters/collectionQuery"
        - description: The collection items sort field and order (prefix with "-" for
            descending sort).
          explode: false
          in: query
          name: sort
          schema:
            items:
              enum:
                - id
                - -id
                - name
                - -name
                - createdTime
                - -createdTime
                - updatedTime
                - -updatedTime
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Tag"
                type: array
          description: A list of tags was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of tags
      tags:
        - Tags
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a tag
      operationId: PostTag
      requestBody:
        $ref: "#/components/requestBodies/Tag"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: Tag was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a tag
      tags:
        - Tags
  "/tags/{tag}":
    delete:
      description: |
        Delete a tag.
        It's an asynchronous operation.
      operationId: DeleteTag
      responses:
        "204":
          description: Tag was deleted
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Delete a tag
      tags:
        - Tags
    get:
      description: |
        Retrieve a tag
      operationId: GetTag
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: Tag with specified name was retrieved successfully
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a tag
      tags:
        - Tags
    parameters:
      - $ref: "#/components/parameters/tag"
      - $ref: "#/components/parameters/organizationId"
    patch:
      description: |
        Update a tag
      operationId: PatchTag
      requestBody:
        $ref: "#/components/requestBodies/Tag"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: Tag was updated
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Update a tag
      tags:
        - Tags
  "/tags/{tag}/customers":
    delete:
      description: |
        Untag a list of customers.
        If the customer from the list is already untagged it will be ignored.
        It's an asynchronous operation.
      operationId: DeleteTagCustomerCollection
      requestBody:
        content:
          application/json:
            schema:
              properties:
                customerIds:
                  description: The list of customer IDs
                  items:
                    type: string
                  maxItems: 1000
                  minItems: 1
                  type: array
              required:
                - customerIds
              type: object
        required: true
      responses:
        "204":
          description: Customers was untagged
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Untag a list of customers
      tags:
        - Tags
    parameters:
      - $ref: "#/components/parameters/tag"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Tag a list of customers.
        If the customer from the list is already tagged it will be ignored.
        It's an asynchronous operation.
      operationId: PostTagCustomerCollection
      requestBody:
        content:
          application/json:
            schema:
              properties:
                customerIds:
                  description: The list of customer IDs
                  items:
                    type: string
                  maxItems: 1000
                  minItems: 1
                  type: array
              required:
                - customerIds
              type: object
        required: true
      responses:
        "204":
          description: Customers was tagged
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Tag a list of customers
      tags:
        - Tags
  "/tags/{tag}/customers/{customerId}":
    delete:
      description: |
        Untag a customer
      operationId: DeleteTagCustomer
      responses:
        "204":
          description: Customer was untagged
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Untag a customer
      tags:
        - Tags
    parameters:
      - $ref: "#/components/parameters/tag"
      - $ref: "#/components/parameters/customerId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Tag a customer
      operationId: PostTagCustomer
      responses:
        "204":
          description: Customer was tagged
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Tag a customer
      tags:
        - Tags
  /tokens:
    get:
      description: |
        Retrieve a list of tokens
      operationId: GetTokenCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PaymentToken"
                type: array
          description: A list of tokens was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of tokens
      tags:
        - Payment Tokens
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardTokens = $client->paymentCardTokens()->search([
                'filter' => 'token:string',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        [FramePay](https://rebilly.github.io/framepay-docs/)
        is the recommended way to
        create a payment token because it minimizes
        PCI DSS compliance.  Once a payment token
        is created, it can only be used once.

        A payment token expires upon first use
        or within 30 minutes of the token creation
        (whichever comes first).
      operationId: PostToken
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/PaymentCardToken"
                - $ref: "#/components/schemas/BankAccountToken"
                - $ref: "#/components/schemas/PaymentToken"
        description: PaymentToken resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/PaymentCardToken"
                  - $ref: "#/components/schemas/BankAccountToken"
                  - $ref: "#/components/schemas/PaymentToken"
          description: Token was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      security:
        - PublishableApiKey: []
        - SecretApiKey: []
        - JWT: []
      summary: Create a payment token
      tags:
        - Payment Tokens
      x-code-samples:
        - lang: PHP
          source: >
            $paymentCardTokenForm = new Rebilly\Entities\PaymentCardToken();

            $paymentCardTokenForm->setBillingAddress([
                'firstName' => 'John',
                'lastName' => 'Doe',
                'organization' => 'Test LTD',
                'address' => 'Test street 5',
                'address2' => 'Test house 5',
                'city' => 'New York',
                'region' => 'Long Island',
                'country' => 'US',
                'postalCode' => '123456',
                'emails' => [
                    [
                        'label' => 'main',
                        'value' => 'johndoe@testemail.com',
                        'primary' => true,
                    ],
                    [
                        'label' => 'secondary',
                        'value' => 'otheremail@testemail.com',
                    ],
                ],
                'phoneNumbers' => [
                    [
                        'label' => 'work',
                        'value' => '+123456789',
                        'primary' => true,
                    ],
                    [
                        'label' => 'home',
                        'value' => '+9874654321',
                    ],
                ],
            ]);


            $paymentInstrumentForm = new Entities\PaymentInstruments\PaymentCardPaymentInstrument();

            $paymentInstrumentForm->setPan('4111111111111111');

            $paymentInstrumentForm->setExpYear(2025);

            $paymentInstrumentForm->setExpMonth(8);

            $paymentInstrumentForm->setCvv(123);


            $paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);


            try {
                $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/tokens/{token}":
    get:
      description: |
        Retrieve a token with specified identifier string
      operationId: GetToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentToken"
          description: Token was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - PublishableApiKey: []
      summary: Retrieve a token
      tags:
        - Payment Tokens
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardToken = $client->paymentCardTokens()->load('tokenId');
    parameters:
      - description: The token identifier string
        in: path
        name: token
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
  /transactions:
    get:
      description: |
        Retrieve a list of transactions
      operationId: GetTransactionCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
        - $ref: "#/components/parameters/collectionQuery"
        - $ref: "#/components/parameters/collectionSort"
        - description: The response media type
          in: header
          name: Accept
          schema:
            default: application/json
            enum:
              - application/json
              - text/csv
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Transaction"
                type: array
            text/csv:
              schema:
                items:
                  $ref: "#/components/schemas/Transaction"
                type: array
          description: A list of transactions was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Retrieve a list of transactions
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $transactions = $client->transactions()->search([
                'filter' => 'result:approved',
            ]);
    parameters:
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a transactions of type `sale`, `authorize`, or `credit`.
        This endpoint supports two main styles of transactions:
          1. A real-time decision and response.
          2. User approval/interaction is required.

        A real-time decision is very familiar.  You send a request, and
        inspect the `result` of the response for `approved` or `declined`.

        However, many transactions, especially those for alternative
        methods, require the user to interact with a 3rd party.  You
        may be able to envision PayPal, for example, the user must
        give permission to complete the payment (or accept the
        billing agreement).

        Even payment cards may require user approval in the case of
        3D secure authentication.  In the event that approval is
        required, you will receive a response back and notice
        that the `result` is `unknown`.  You will find that the
        `status` is `waiting-approval`. And you will find in the
        `_links` section of the response a link for the `approvalUrl`.

        In this case you would either open the `approvalUrl` in an
        iframe or in a pop (better workflow for mobile).
      operationId: PostTransaction
      requestBody:
        $ref: "#/components/requestBodies/TransactionRequest"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
          description: Transaction was created
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a transaction
      tags:
        - Transactions
  "/transactions/{id}":
    get:
      description: |
        Retrieve a Transaction with specified identifier string
      operationId: GetTransaction
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
          description: Transaction was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a Transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $transaction = $client->transactions()->load('transactionId');
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/transactions/{id}/cancel":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: Cancel a scheduled transaction. Once handled a transaction cannot
        be canceled
      operationId: PostTransactionCancellation
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
          description: Successful cancel the payment
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Cancel a pending or suspended transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $payment = $client->transactions()->cancel('transactionId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  "/transactions/{id}/gateway-logs":
    get:
      description: Retrieve Gateway communication Logs for Transaction with specified
        identifier string
      operationId: GetTransactionGatewayLogCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionGatewayLog"
          description: Logs were retrieved successfully
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a Transaction Gateway Logs
      tags:
        - Transactions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/transactions/{id}/matched-rules":
    get:
      description: Get matched rules for the transaction
      operationId: GetTransactionMatchedRuleCollection
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/MatchedRule"
                type: array
          description: List of matched rules was retrieved successfully.
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get matched rules for the transaction
      tags:
        - Transactions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
  "/transactions/{id}/refund":
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: >
        Refund a Transaction with specified identifier string.

        Note that the refund will be in the same currency as the original transaction.
      operationId: PostTransactionRefund
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionRefund"
        description: Transaction resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
          description: Transaction was refunded successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Refund a Transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: >
            $transaction = $client->transactions()->refund('transactionId', 1.99);
  "/transactions/{id}/timeline":
    get:
      description: |
        Retrieve a list of transaction timeline messages
      operationId: GetTransactionTimelineCollection
      parameters:
        - $ref: "#/components/parameters/collectionLimit"
        - $ref: "#/components/parameters/collectionOffset"
        - $ref: "#/components/parameters/collectionFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TransactionTimeline"
                type: array
          description: A list of transaction timeline messages was retrieved successfully
          headers:
            Pagination-Limit:
              $ref: "#/components/headers/Pagination-Limit"
            Pagination-Offset:
              $ref: "#/components/headers/Pagination-Offset"
            Pagination-Total:
              $ref: "#/components/headers/Pagination-Total"
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
      summary: Retrieve a list of transaction timeline messages
      tags:
        - Transactions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - $ref: "#/components/parameters/organizationId"
    post:
      description: |
        Create a transaction Timeline comment
      operationId: PostTransactionTimeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionTimeline"
        description: Transaction Timeline resource
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionTimeline"
          description: Transaction Timeline comment was created
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "422":
          $ref: "#/components/responses/InvalidDataError"
      summary: Create a transaction Timeline comment
      tags:
        - Transactions
  "/transactions/{id}/timeline/{messageId}":
    delete:
      description: |
        Delete a Transaction Timeline message with predefined identifier string
      operationId: DeleteTransactionTimeline
      responses:
        "204":
          description: Transaction Timeline message was deleted
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
      summary: Delete a Transaction Timeline message
      tags:
        - Transactions
    get:
      description: |
        Retrieve a timeline message with specified identifier string
      operationId: GetTransactionTimeline
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionTimeline"
          description: Timeline message was retrieved successfully
          headers:
            Rate-Limit-Limit:
              $ref: "#/components/headers/Rate-Limit-Limit"
            Rate-Limit-Remaining:
              $ref: "#/components/headers/Rate-Limit-Remaining"
            Rate-Limit-Reset:
              $ref: "#/components/headers/Rate-Limit-Reset"
        "401":
          $ref: "#/components/responses/AccessForbidden"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Retrieve a transaction Timeline message
      tags:
        - Transactions
    parameters:
      - $ref: "#/components/parameters/resourceId"
      - description: The Transaction Timeline message ID
        in: path
        name: messageId
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/organizationId"
components:
  headers:
    Pagination-Limit:
      description: Items per page limit
      schema:
        type: integer
    Pagination-Offset:
      description: Pagination offset
      schema:
        type: integer
    Pagination-Total:
      description: Total items count
      schema:
        type: integer
    Rate-Limit-Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
    Rate-Limit-Remaining:
      description: The number of remaining requests in the current period
      schema:
        type: integer
    Rate-Limit-Reset:
      description: >
        The date in format defined by [RFC
        822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)

        when the current period will reset
      schema:
        type: string
  parameters:
    collectionExpand:
      description: >
        Expand a response to get a full related object included inside

        of the `_embedded` path in the response.


        It accepts a comma-separated list of objects to expand.


        See the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.
      in: query
      name: expand
      schema:
        type: string
    collectionFields:
      description: Limit the returned fields to the list specified, separated by
        comma. Note that id is always returned.
      in: query
      name: fields
      schema:
        type: string
    collectionFilter:
      description: >
        The collection items filter requires a special format.

        Use "," for multiple allowed values.  Use ";" for multiple fields.

        See the [filter guide](#section/Using-filter) for more options and examples about this format.
      in: query
      name: filter
      schema:
        type: string
    collectionLimit:
      description: The collection items limit
      in: query
      name: limit
      schema:
        maximum: 1000
        minimum: 0
        type: integer
    collectionOffset:
      description: The collection items offset
      in: query
      name: offset
      schema:
        minimum: 0
        type: integer
    collectionQuery:
      description: The partial search of the text fields.
      in: query
      name: q
      schema:
        type: string
    collectionSort:
      description: The collection items sort field and order (prefix with "-" for
        descending sort).
      explode: false
      in: query
      name: sort
      schema:
        items:
          type: string
        type: array
      style: form
    customFieldResource:
      description: The resource type string
      in: path
      name: resource
      required: true
      schema:
        enum:
          - customers
          - payment-cards
          - subscriptions
          - transactions
          - websites
          - contacts
          - products
          - plans
        type: string
    customerId:
      description: The customer identifier string
      in: path
      name: customerId
      required: true
      schema:
        maxLength: 50
        pattern: ^[@~\-\.\w]+$
        type: string
    organizationId:
      description: Organization identifier in scope of which need to perform request
        (if not specified, the default organization will be used)
      in: header
      name: Organization-Id
      required: false
      schema:
        $ref: "#/components/schemas/ResourceId"
    resourceId:
      description: The resource identifier string
      in: path
      name: id
      required: true
      schema:
        maxLength: 50
        pattern: ^[@~\-\.\w]+$
        type: string
    subscriptionExpand:
      description: >
        Expand a response to get a full related object included inside

        of the `_embedded` path in the response.


        To expand multiple objects, it accepts a comma-separated

        list of objects (example: `expand=recentInvoice,initialInvoice`).


        Available arguments are:
          - recentInvoice
          - initialInvoice
          - customer
          - website

        See the [expand guide](#section/Expand-to-Include-Embedded-Objects) for more info.
      in: query
      name: expand
      schema:
        type: string
    tag:
      description: The tag name
      in: path
      name: tag
      required: true
      schema:
        pattern: ^[@~\-\.\w\s]+$
        type: string
  requestBodies:
    Attachment:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attachment"
      description: Attachment resource
      required: true
    Blacklist:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Blacklist"
      description: Blacklist resource
      required: true
    Contact:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Contact"
      description: Contact resource
      required: true
    Coupon:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Coupon"
      description: Coupon resource
      required: true
    Credential:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Credential"
      description: Credential resource
      required: true
    Customer:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Customer"
      description: Customer resource
      required: true
    Dispute:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Dispute"
      description: Dispute resource
      required: true
    Invoice:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invoice"
      description: Invoice resource
      required: true
    Payment:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Payment"
      description: Payment resource
      required: true
    Plan:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Plan"
      description: Plan resource
      required: true
    Product:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
      description: Product resource
      required: true
    Subscription:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Subscription"
      description: Subscription resource
      required: true
    SubscriptionCancellation:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SubscriptionCancellation"
      description: Cancellation resource
      required: true
    Tag:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
      description: Tag resource
      required: true
    TransactionRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TransactionRequest"
      description: Payment resource
      required: true
  responses:
    AccessForbidden:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      description: Access forbidden, invalid API-KEY was used
    Conflict:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      description: Conflict
    Customer:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Customer"
      description: Customer
      headers:
        Rate-Limit-Limit:
          $ref: "#/components/headers/Rate-Limit-Limit"
        Rate-Limit-Remaining:
          $ref: "#/components/headers/Rate-Limit-Remaining"
        Rate-Limit-Reset:
          $ref: "#/components/headers/Rate-Limit-Reset"
    Found:
      description: Resource was moved
      headers:
        Location:
          schema:
            type: string
    InvalidDataError:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidError"
      description: Invalid data was sent
    NotFound:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      description: Resource was not found
  schemas:
    A1Gateway:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: A1Gateway credentials object
              properties:
                accountId:
                  description: A1Gateway account ID
                  type: string
                password:
                  description: A1Gateway password
                  format: password
                  type: string
              required:
                - accountId
                - password
              type: object
            mpi:
              $ref: "#/components/schemas/A1GatewayMpis"
          required:
            - credentials
          type: object
      description: A1Gateway config
    A1GatewayMpis:
      description: A1Gateway Mpis
      discriminator:
        mapping:
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaayMpi
            - Other
      required:
        - name
      type: object
    AlipayInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: Alipay payment instrument object
    AmexVPC:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: AmexVPC credentials object
              properties:
                accessCode:
                  description: Access Code
                  format: password
                  type: string
                merchantId:
                  description: Merchant ID
                  type: string
                password:
                  description: Password (used for refund, void and capture)
                  format: password
                  type: string
                user:
                  description: User (used for refund, void and capture)
                  type: string
              required:
                - merchantId
                - accessCode
                - user
                - password
              type: object
            settings:
              description: AmexVPC settings object
              properties:
                url:
                  description: Virtual Payment Client URL
                  type: string
              required:
                - url
              type: object
          required:
            - credentials
            - settings
          type: object
      description: AmexVPC config
    AmountAdjustment:
      discriminator:
        mapping:
          discount: "#/components/schemas/discount"
          partial: "#/components/schemas/partial"
        propertyName: method
      properties:
        method:
          enum:
            - none
            - partial
            - discount
          type: string
      required:
        - method
      type: object
    ApcoPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: ApcoPay credentials object
              properties:
                MerchantID:
                  description: ApcoPay merchant ID
                  type: string
                MerchantPassword:
                  description: ApcoPay merchant password
                  format: password
                  type: string
                profileID:
                  description: ApcoPay profile ID
                  type: string
                secretWord:
                  description: ApcoPay secret word
                  format: password
                  type: string
              required:
                - profileID
                - secretWord
                - MerchantID
                - MerchantPassword
              type: object
            settings:
              properties:
                method:
                  description: ApcoPay's method
                  enum:
                    - AFTERPAY
                    - IDEAL
                    - CREDITCLICK
                    - BANCONTACT
                    - ONLINEUBERWEISEN
                  type: string
              required:
                - method
              type: object
          required:
            - credentials
          type: object
      description: ApcoPay config
    ApprovalUrlLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - approvalUrl
          type: string
      required:
        - rel
      type: object
    AsiaPaymentGateway:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: AsiaPaymentGateway credentials object
              properties:
                merchantNumber:
                  description: AsiaPaymentGateway merchant number
                  type: string
                secretKey:
                  description: AsiaPaymentGateway secret key for hash
                  format: password
                  type: string
              required:
                - merchantNumber
                - secretKey
              type: object
          required:
            - credentials
          type: object
      description: AsiaPaymentGateway config
    AstroPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: AstroPay credentials object
              properties:
                secret_key:
                  description: AstroPay secret key
                  format: password
                  type: string
                web_pay_login:
                  description: AstroPay web pay status login
                  type: string
                web_pay_tran_key:
                  description: AstroPay web pay status password
                  format: password
                  type: string
                x_login:
                  description: AstroPay login
                  type: string
                x_tran_key:
                  description: AstroPay transaction key
                  format: password
                  type: string
              required:
                - x_login
                - x_tran_key
                - secret_key
                - web_pay_login
                - web_pay_tran_key
              type: object
            settings:
              description: AstroPay settings object
              properties:
                banks:
                  description: list of banks which will show on hook page
                  items:
                    $ref: "#/components/schemas/AstroPayBanks"
                  type: array
                skipStep:
                  description: Skip step for user to enter their personal information.
                  type: boolean
              type: object
          required:
            - credentials
          type: object
      description: AstroPay config
    AstroPay-CardInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: AstroPay Card payment instrument object
    AstroPayBanks:
      enum:
        - CU
        - SE
        - BV
        - BM
        - SM
        - OX
        - BQ
        - EN
        - FA
        - BW
        - SS
        - SU
        - WA
        - FB
        - TC
        - I
        - BB
        - B
        - CA
        - SB
        - BL
        - NB
        - UI
      type: string
    AstroPayCard:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: AstroPay Card credentials object
              properties:
                secret_key:
                  description: AstroPay Card secret key
                  format: password
                  type: string
                x_login:
                  description: AstroPay Card login
                  type: string
                x_tran_key:
                  description: AstroPay Card transaction key
                  format: password
                  type: string
              required:
                - x_login
                - x_tran_key
                - secret_key
              type: object
          required:
            - credentials
          type: object
      description: AstroPay Card config
    Attachment:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/FileEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/FileLink"
              - $ref: "#/components/schemas/AttachmentResourceLink"
          minItems: 3
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Creation date/time
        description:
          description: The Attachment description
          type: string
        fileId:
          description: Linked File object id
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          readOnly: true
        name:
          description: The Original Attachment name
          type: string
        relatedId:
          description: Linked object Id
          type: string
        relatedType:
          description: Linked object type
          enum:
            - customer
            - dispute
            - gateway-timeline-comment
            - invoice
            - organization
            - payment
            - plan
            - product
            - subscription
            - transaction
            - customer-timeline-comment
            - transaction-timeline-comment
            - order-timeline-comment
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Latest update date/time
      required:
        - fileId
        - relatedId
        - relatedType
      type: object
    AttachmentResourceLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - customer
            - dispute
            - invoice
            - payment
            - plan
            - product
            - subscription
            - transaction
          type: string
      required:
        - rel
      type: object
    AuthTransactionEmbed:
      description: Auth Transaction object
      properties:
        authTransaction:
          $ref: "#/components/schemas/Transaction"
      readOnly: true
      type: object
    AuthTransactionLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - authTransaction
          type: string
      required:
        - rel
      type: object
    AuthenticationOptions:
      properties:
        authTokenTtl:
          description: The default lifetime of the auth-token in seconds
          type: integer
        credentialTtl:
          description: The default lifetime of the credential in seconds
          type: integer
        otpRequired:
          description: Should OTP be required to exchange token
          type: boolean
        passwordPattern:
          description: Allowed password pattern
          type: string
        resetTokenTtl:
          description: The default lifetime of the reset-token in seconds
          type: integer
      type: object
    AuthenticationToken:
      discriminator:
        mapping:
          password: "#/components/schemas/password"
          passwordless: "#/components/schemas/passwordless"
        propertyName: mode
      properties:
        credentialId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The credential's ID
          readOnly: true
        mode:
          default: password
          description: The token's generation mode
          enum:
            - password
            - passwordless
          type: string
          writeOnly: true
        otpRequired:
          description: Should OTP be required to exchange this token
          type: boolean
        token:
          description: The token identifier string
          readOnly: true
          type: string
      type: object
    AuthenticationTokenMetadata:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        expiredTime:
          description: Token's expired time
          format: date-time
          type: string
      type: object
    AuthorizeNet:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiLoginId:
                  description: AuthorizeNet Gateway api login ID
                  type: string
                transactionKey:
                  description: AuthorizeNet Gateway Transaction Key
                  format: password
                  type: string
              required:
                - apiLoginId
                - transactionKey
              type: object
          required:
            - credentials
          type: object
      description: AuthorizeNet Gateway config
    BBANInstrument:
      allOf:
        - $ref: "#/components/schemas/TokenBankAccountInstrument"
        - properties:
            accountNumber:
              description: Bank Account Number
              pattern: ^[0-9]+$
              type: string
              writeOnly: true
            accountType:
              description: Bank Account Type
              enum:
                - checking
                - savings
                - other
              type: string
            bankName:
              description: Bank name
              type: string
            bic:
              description: Bank Identifier Code
              type: string
            last4:
              description: Bank Account Number's last 4 digits
              readOnly: true
              type: string
            routingNumber:
              description: Bank Routing Number
              pattern: ^[0-9]+$
              type: string
          required:
            - accountNumber
            - routingNumber
            - accountType
          type: object
      description: Payment Token instrument object
    BBANType:
      allOf:
        - $ref: "#/components/schemas/BankAccountCreatePlain"
        - properties:
            accountNumber:
              description: Bank's Account Number.
              pattern: ^[0-9]+$
              type: string
            accountType:
              description: Bank's Account type.
              enum:
                - checking
                - savings
                - other
              type: string
            address:
              allOf:
                - $ref: "#/components/schemas/ContactObject"
              description: The Address.
            bankName:
              description: Bank's name.
              type: string
            bic:
              description: Bank Identifier Code.
              type: string
            customFields:
              $ref: "#/components/schemas/ResourceCustomFields"
            customerId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The Customer's ID.
            routingNumber:
              description: Bank's Routing Number.
              pattern: ^[0-9]+$
              type: string
          required:
            - customerId
            - accountNumber
            - routingNumber
            - accountType
            - address
          type: object
      description: BBAN type object
    Bambora:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiPasscode:
                  description: Bambora Gateway API Passcode
                  format: password
                  type: string
                merchantId:
                  description: Bambora Gateway merchant ID
                  type: string
              required:
                - merchantId
                - apiPasscode
              type: object
          required:
            - credentials
          type: object
      description: Bambora Gateway config
    BankAccount:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/CustomerEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
          minItems: 1
          readOnly: true
          type: array
        accountNumberType:
          default: BBAN
          description: Bank's Account Number type. A valid value is basic bank account
            number (BBAN) or international bank account number (IBAN).
          enum:
            - BBAN
            - IBAN
          type: string
        accountType:
          description: Bank's Account type.
          enum:
            - checking
            - savings
            - other
          type: string
        address:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: The Address.
        bankName:
          description: Bank's name.
          type: string
        bic:
          description: Bank Identifier Code
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Bank Account created time
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Customer's ID.
        fingerprint:
          description: A unique value to identify the Bank Account. It contains
            alphanumeric values.
          readOnly: true
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The bank account identifier string
          readOnly: true
        last4:
          description: The last 4 digits of the bank account
          readOnly: true
          type: string
        method:
          description: The method of payment instrument
          enum:
            - bank-account
          readOnly: true
          type: string
        routingNumber:
          description: Bank's Routing Number.
          type: string
        status:
          description: Bank Account status
          enum:
            - active
            - deactivated
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Bank Account updated time
      required:
        - customerId
      type: object
    BankAccountCreatePlain:
      discriminator:
        mapping:
          BBAN: "#/components/schemas/BBANType"
          IBAN: "#/components/schemas/IBANType"
        propertyName: accountNumberType
      properties:
        accountNumberType:
          default: BBAN
          description: Bank's Account Number type. A valid value is basic bank account
            number (BBAN) or international bank account number (IBAN).
          enum:
            - IBAN
            - BBAN
          type: string
      required:
        - accountNumberType
      type: object
    BankAccountCreateToken:
      properties:
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Customer's ID.
        token:
          description: BankAccountToken ID.
          type: string
      required:
        - customerId
        - token
      type: object
    BankAccountEmbed:
      description: Bank Account object
      properties:
        bankAccount:
          $ref: "#/components/schemas/BankAccount"
      readOnly: true
      type: object
    BankAccountToken:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: The billing address object
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token created time
        expirationTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token expiration time
        fingerprint:
          description: Device fingerprint hash
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The token identifier string
          readOnly: true
        isUsed:
          default: false
          description: Whether the token was already used
          readOnly: true
          type: boolean
        leadSource:
          allOf:
            - $ref: "#/components/schemas/LeadSource"
          writeOnly: true
        method:
          description: The token payment method
          enum:
            - ach
          type: string
        paymentInstrument:
          allOf:
            - $ref: "#/components/schemas/TokenBankAccountInstrument"
          description: The payment instrument details
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token updated time
        usageTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token usage time
      required:
        - method
        - paymentInstrument
        - billingAddress
      title: Bank Account Token
      type: object
    BitPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: BitPay credentials object
              properties:
                token:
                  description: BitPay merchant API token
                  format: password
                  type: string
              required:
                - token
              type: object
          required:
            - credentials
          type: object
      description: BitPay Gateway config
    Blacklist:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The blacklist created time
        expirationTime:
          description: The blacklist expiration time
          format: date-time
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The blacklist identifier string
          readOnly: true
        type:
          description: The blacklist type
          enum:
            - payment-card
            - bank-account
            - customer-id
            - email
            - email-domain
            - ip-address
            - country
            - fingerprint
            - bin
            - address
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The blacklist updated time
        value:
          description: The blacklist value
          type: string
      required:
        - type
        - value
      type: object
    BlueSnap:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: BlueSnap credentials object
              properties:
                password:
                  description: BlueSnap merchant's api password.
                  format: password
                  type: string
                username:
                  description: BlueSnap merchant's api username.
                  type: string
              required:
                - username
                - password
              type: object
          required:
            - credentials
          type: object
      description: BlueSnap config
    BoletoInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: Boleto payment instrument object
    BraintreePayments:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantAccountId:
                  description: BraintreePayments merchant account ID
                  format: password
                  type: string
                merchantId:
                  description: BraintreePayments merchant ID
                  format: password
                  type: string
                privateKey:
                  description: BraintreePayments Private Key
                  format: password
                  type: string
                publicKey:
                  description: BraintreePayments Public Key
                  type: string
              required:
                - publicKey
                - privateKey
                - merchantId
                - merchantAccountId
              type: object
          required:
            - credentials
          type: object
      description: BraintreePayments Gateway config
    CASHlib:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: CASHlib credentials object
              properties:
                apiKey:
                  description: CASHlib API Key
                  format: password
                  type: string
                merchantId:
                  description: CASHlib merchant id
                  type: string
              required:
                - apiKey
                - merchantId
              type: object
          required:
            - credentials
          type: object
      description: CASHlib config
    CODVoucher:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: COD Voucher credentials object
              properties:
                apiKey:
                  description: COD Voucher API key
                  format: password
                  type: string
                apiSecret:
                  description: COD Voucher API secret
                  format: password
                  type: string
              required:
                - apiKey
                - apiSecret
              type: object
          required:
            - credentials
          type: object
      description: COD Voucher config
    CancelUrlLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - cancelUrl
          type: string
      required:
        - rel
      type: object
    CardinalCommerce:
      allOf:
        - $ref: "#/components/schemas/PayvisionMpis"
        - properties:
            merchantId:
              description: Cardinal MerchantId
              type: string
            processorId:
              description: Cardinal ProcessorId
              type: string
            transactionPwd:
              description: Cardinal TransactionPwd
              format: password
              type: string
          required:
            - merchantId
            - processorId
            - transactionPwd
          type: object
      description: CardinalCommerce Mpi Credentials
    Cardknox:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                xKey:
                  description: Cardknox xKey
                  format: password
                  type: string
              required:
                - xKey
              type: object
          required:
            - credentials
          type: object
      description: Cardknox Gateway config
    CashToCode:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: CashToCode credentials object
              properties:
                cashToCodePassword:
                  description: CashToCode credentials password
                  format: password
                  type: string
                cashToCodeUsername:
                  description: CashToCode credentials Username
                  type: string
                merchantPassword:
                  description: Merchant credentials password
                  format: password
                  type: string
                merchantUsername:
                  description: Merchant credentials Username
                  type: string
              required:
                - cashToCodeUsername
                - cashToCodePassword
                - merchantUsername
                - merchantPassword
              type: object
            settings:
              properties:
                skipAmountSelection:
                  default: false
                  description: Skip amount selection screen
                  type: boolean
              type: object
          required:
            - credentials
          type: object
      description: CashToCode config
    Cashflows:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                authId:
                  description: Cashflows Gateway auth ID
                  type: string
                authPassword:
                  description: Cashflows Gateway auth password
                  format: password
                  type: string
              required:
                - authPassword
                - authId
              type: object
          required:
            - credentials
          type: object
      description: Cashflows Gateway config
    CauriPayment:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: CauriPayment credentials object
              properties:
                privateKey:
                  description: CauriPayment merchant's private key.
                  format: password
                  type: string
                publicKey:
                  description: CauriPayment merchant's public key.
                  type: string
              required:
                - publicKey
                - privateKey
              type: object
          required:
            - credentials
          type: object
      description: CauriPayment config
    Cayan:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantKey:
                  description: Cayan Gateway merchant key
                  format: password
                  type: string
                merchantName:
                  description: Cayan Gateway merchant name
                  type: string
                merchantSiteId:
                  description: Cayan Gateway merchant site ID
                  type: string
              required:
                - merchantSiteId
                - merchantName
                - merchantKey
              type: object
          required:
            - credentials
          type: object
      description: Cayan Gateway config
    Chase:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                coNumber:
                  description: Chase Gateway CO Number used for delimited file reports
                  type: string
                divisionId:
                  description: Chase Gateway division ID
                  type: string
                partialAuth:
                  default: false
                  description: Support for Partial Auths
                  type: boolean
                password:
                  description: Chase Gateway Net Connect password
                  format: password
                  type: string
                username:
                  description: Chase Gateway Net Connect username
                  type: string
              required:
                - username
                - password
                - coNumber
                - divisionId
                - partialAuth
              type: object
          required:
            - credentials
          type: object
      description: Chase Gateway config
    China-UnionPayInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: China UnionPay payment instrument object
    Citadel:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Citadel credentials object
              properties:
                password:
                  description: Password
                  format: password
                  type: string
                storeId:
                  description: Store ID
                  type: string
                storeName:
                  description: Store name
                  type: string
                username:
                  description: Username
                  type: string
              required:
                - storeName
                - storeId
                - username
                - password
              type: object
          required:
            - credentials
          type: object
      description: Citadel config
    Clearhaus:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKey:
                  description: Clearhaus api key
                  format: password
                  type: string
              required:
                - apiKey
              type: object
            mpi:
              $ref: "#/components/schemas/ClearhausMpis"
          required:
            - credentials
          type: object
      description: Clearhaus Gateway config
    ClearhausMpi:
      allOf:
        - $ref: "#/components/schemas/ClearhausMpis"
        - properties:
            acquirerBin:
              description: Acquiring institution identification code.
              type: string
            apiKey:
              description: Mpi Api key
              format: password
              type: string
            merchantId:
              description: Merchant account ID or Card Acceptor ID provided by the acquiring
                bank.
              type: string
          required:
            - merchantId
            - acquirerBin
            - apiKey
          type: object
      description: Clearhaus Mpi Credentials
    ClearhausMpis:
      description: Clearhaus Mpis
      discriminator:
        mapping:
          ClearhausMpi: "#/components/schemas/ClearhausMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - ClearhausMpi
      required:
        - name
      type: object
    CommonScheduleInstruction:
      description: The calculation instruction of scheduled time
      discriminator:
        mapping:
          auto: "#/components/schemas/auto"
          date-interval: "#/components/schemas/date-interval"
          day-of-month: "#/components/schemas/day-of-month"
          day-of-week: "#/components/schemas/day-of-week"
          immediately: "#/components/schemas/immediately"
          intelligent: "#/components/schemas/intelligent"
        propertyName: method
      properties:
        method:
          enum:
            - auto
            - intelligent
            - immediately
            - date-interval
            - day-of-month
            - day-of-week
          type: string
      required:
        - method
      type: object
    Condition:
      discriminator:
        mapping:
          and: "#/components/schemas/and"
          between: "#/components/schemas/between"
          equals: "#/components/schemas/equals"
          gt: "#/components/schemas/gt"
          gte: "#/components/schemas/gte"
          in: "#/components/schemas/in"
          lt: "#/components/schemas/lt"
          lte: "#/components/schemas/lte"
          not: "#/components/schemas/not"
          or: "#/components/schemas/or"
        propertyName: op
      properties:
        op:
          description: The condition operation
          enum:
            - and
            - or
            - not
            - between
            - equals
            - in
            - gt
            - gte
            - lt
            - lte
          type: string
      required:
        - op
      type: object
    Conekta:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Conekta credentials object
              properties:
                apiKey:
                  description: Conekta private API key
                  format: password
                  type: string
              required:
                - apiKey
              type: object
          required:
            - credentials
          type: object
      description: Conekta config
    Contact:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/CustomerEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
          minItems: 1
          readOnly: true
          type: array
        address:
          description: The contact street address
          maxLength: 60
          type: string
        address2:
          description: The contact street address (second line)
          maxLength: 60
          type: string
        city:
          description: The contact city
          maxLength: 45
          type: string
        country:
          description: The contact country ISO Alpha-2 code
          pattern: ^[A-Z]{2}$
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The contact created time
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The contact customer ID
        emails:
          $ref: "#/components/schemas/ContactEmails"
        firstName:
          description: The contact first name
          type: string
        hash:
          description: A hash that can be used to compare multiple contacts for identical
            attribute values, excluding id, customer id, createdTime,
            updatedTime.
          example: 056ae6d97c788b9e98b049ebafd7b229bf852221
          maxLength: 40
          readOnly: true
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The contact identifier string
          readOnly: true
        lastName:
          description: The contact last name
          type: string
        organization:
          description: The contact organization
          type: string
        phoneNumbers:
          $ref: "#/components/schemas/ContactPhoneNumbers"
        postalCode:
          description: The contact postal code
          maxLength: 10
          type: string
        region:
          description: The contact region (state)
          maxLength: 45
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The contact updated time
      type: object
    ContactEmails:
      description: The list of emails
      items:
        properties:
          label:
            description: The email label
            example: main
            type: string
          primary:
            description: True if email is primary
            example: true
            type: boolean
          value:
            description: The email value
            example: rebilly@example.com
            type: string
        required:
          - label
          - value
        type: object
      type: array
    ContactObject:
      properties:
        address:
          description: The contact street address
          example: 36 Craven St
          maxLength: 60
          nullable: true
          type: string
        address2:
          description: The contact street address (second line)
          maxLength: 60
          nullable: true
          type: string
        city:
          description: The contact city
          example: London
          maxLength: 45
          nullable: true
          type: string
        country:
          description: The contact country ISO Alpha-2 code
          example: GB
          nullable: true
          pattern: ^[A-Z]{2}$
          type: string
        emails:
          $ref: "#/components/schemas/ContactEmails"
        firstName:
          description: The contact first name
          example: Benjamin
          nullable: true
          type: string
        hash:
          description: A hash that can be used to compare multiple contacts for identical
            attribute values
          example: 056ae6d97c788b9e98b049ebafd7b229bf852221
          maxLength: 40
          readOnly: true
          type: string
        lastName:
          description: The contact last name
          example: Franklin
          nullable: true
          type: string
        organization:
          description: The contact organization
          example: null
          nullable: true
          type: string
        phoneNumbers:
          $ref: "#/components/schemas/ContactPhoneNumbers"
        postalCode:
          description: The contact postal code
          example: WC2N 5NF
          maxLength: 10
          nullable: true
          type: string
        region:
          description: The contact region (state)
          example: London
          maxLength: 45
          nullable: true
          type: string
      type: object
    ContactPhoneNumbers:
      description: The list of phone numbers
      items:
        properties:
          label:
            description: The phone label
            example: main
            type: string
          primary:
            description: True if phone is primary
            example: true
            type: boolean
          value:
            description: The phone value
            example: 512-710-1640
            type: string
        required:
          - label
          - value
        type: object
      type: array
    Coppr:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Coppr credentials object
              properties:
                apiKey:
                  description: Coppr api key
                  format: password
                  type: string
                organizationId:
                  description: Coppr Organization's ID
                  type: string
              required:
                - organizationId
                - apiKey
              type: object
          required:
            - credentials
          type: object
      description: Coppr config
    Coupon:
      description: Coupons and Discounts
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Coupon created time
        description:
          description: >
            Your coupon description. When it is not empty this is used for
            invoice discount item description,

            otherwise the item's description uses coupon's redemptionCode like 'Coupon "redemptionCode"'
          type: string
        discount:
          $ref: "#/components/schemas/Discount"
        expiredTime:
          description: Coupon's expire time (end time)
          format: date-time
          type: string
        issuedTime:
          description: Coupon's issued time (start time)
          format: date-time
          type: string
        redemptionCode:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Coupon's redemption code
          readOnly: true
        redemptionsCount:
          description: Coupon's redemptions count
          minimum: 0
          readOnly: true
          type: integer
        restrictions:
          description: Coupon restrictions
          items:
            $ref: "#/components/schemas/CouponRestriction"
          type: array
        status:
          description: If coupon enabled
          enum:
            - draft
            - issued
            - expired
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Coupon updated time.
      required:
        - discount
        - issuedTime
      type: object
    CouponExpiration:
      properties:
        expiredTime:
          description: The coupon's expiry time, must be greater than the issued time.
            Null or empty string will immediately expire the coupon.
          format: date-time
          type: string
      required:
        - expiredTime
      type: object
    CouponRedemption:
      description: Coupons redemption log
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        additionalRestrictions:
          description: Additional restrictions for coupon's redemptions
          items:
            $ref: "#/components/schemas/RedemptionRestriction"
          type: array
        canceledTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Coupon redemption canceled time
          readOnly: true
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Coupon redeem time
          readOnly: true
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Customer's ID
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          readOnly: true
        redemptionCode:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Coupon's redemption code
      type: object
    CouponRestriction:
      description: Coupon restrictions
      discriminator:
        mapping:
          discounts-per-redemption: "#/components/schemas/discounts-per-redemption"
          minimum-order-amount: "#/components/schemas/minimum-order-amount"
          paid-by-time: "#/components/schemas/paid-by-time"
          redemptions-per-customer: "#/components/schemas/redemptions-per-customer"
          restrict-to-invoices: "#/components/schemas/restrict-to-invoices"
          restrict-to-plans: "#/components/schemas/restrict-to-plans"
          restrict-to-products: "#/components/schemas/restrict-to-products"
          restrict-to-subscriptions: "#/components/schemas/restrict-to-subscriptions"
          total-redemptions: "#/components/schemas/total-redemptions"
        propertyName: type
      properties:
        type:
          description: Coupon's restriction type
          enum:
            - discounts-per-redemption
            - minimum-order-amount
            - redemptions-per-customer
            - restrict-to-invoices
            - restrict-to-plans
            - restrict-to-subscriptions
            - restrict-to-products
            - total-redemptions
            - paid-by-time
          type: string
      required:
        - type
      type: object
    Credential:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
          minItems: 1
          readOnly: true
          type: array
        customerId:
          description: The credential's customer ID
          type: string
        expiredTime:
          description: The credential's expired time
          format: date-time
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The credential identifier string
          readOnly: true
        password:
          description: The credential's password
          format: password
          type: string
          writeOnly: true
        username:
          description: Credential's username
          type: string
      required:
        - username
        - password
        - customerId
      type: object
    Credorax:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantId:
                  description: Credorax Gateway merchant ID
                  type: string
                merchantMd5Signature:
                  description: Credorax Gateway md5 signature
                  format: password
                  type: string
              required:
                - merchantId
                - merchantMd5Signature
              type: object
          required:
            - credentials
          type: object
      description: Credorax Gateway config
    Cryptonator:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Cryptonator credentials object
              properties:
                merchant_id:
                  description: Cryptonator merchant ID
                  type: string
                secret:
                  description: Cryptonator secret
                  format: password
                  type: string
              required:
                - merchant_id
                - secret
              type: object
          required:
            - credentials
          type: object
      description: Cryptonator config
    CurrencyCode:
      description: ISO 4217 alphabetic currency code
      example: USD
      maxLength: 3
      minLength: 3
      type: string
    CustomEventScheduleInstruction:
      description: The calculation instruction of scheduled time
      discriminator:
        mapping:
          date-interval: "#/components/schemas/date-interval"
          day-of-month: "#/components/schemas/day-of-month"
          day-of-week: "#/components/schemas/day-of-week"
        propertyName: method
      properties:
        method:
          enum:
            - date-interval
            - day-of-month
            - day-of-week
          type: string
      required:
        - method
      type: object
    CustomField:
      description: A separate Custom Field schema
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        additionalSchema:
          description: >
            Additional parameters which can be added according to type:


            Parameter Name | Types         | Description

            -------------- | ------------- | -------------

            allowedValues  | string, array | List of allowed values

            maxLength      | string        | Maximum allowed length for the string, 255 by default, up to 4000
        description:
          description: The custom field description
          type: string
        name:
          description: The name of the custom field
          readOnly: true
          type: string
        type:
          description: >
            Type value    | Description

            ------------- | -------------

            array         | An array of strings up to 255 characters, maximum size is 1000 elements

            boolean       | true or false

            date          | String of format "full-date" (YYYY-MM-DD) from RFC-3339 (full-date)

            datetime      | String of format "date-time" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)

            integer       | Cardinal value of -2^31..2^31-1

            number        | Float value. It can take cardinal values also which are interpreted as float

            string        | Regular string up to 255 characters

            monetary      | A map of 3-letters currency code and amount, e.g. {"currency": "EUR", "amount": 25.30}
          enum:
            - array
            - boolean
            - datetime
            - integer
            - number
            - string
            - monetary
          type: string
      required:
        - type
      type: object
    Customer:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/LeadSourceEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/DefaultPaymentInstrumentLink"
              - $ref: "#/components/schemas/LeadSourceLink"
              - $ref: "#/components/schemas/WebsiteLink"
          minItems: 3
          readOnly: true
          type: array
        averageValue:
          $ref: "#/components/schemas/CustomerAverageValue"
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The customer created time
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        defaultPaymentInstrument:
          $ref: "#/components/schemas/PaymentInstrument"
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The customer identifier string
          readOnly: true
        invoiceCount:
          description: An auto-incrementing number based on the sequence of invoices. If
            set to 0, then this record is a Lead, otherwise is a Customer
          readOnly: true
          type: integer
        lastPaymentTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The most recent time of an approved payment for the customer
        lifetimeRevenue:
          $ref: "#/components/schemas/CustomerLifetimeRevenue"
        paymentCount:
          description: The number of approved payments for the customer
          readOnly: true
          type: integer
        paymentToken:
          description: |
            A write-only payment token; if supplied, it will be converted into a
            payment instrument and be set as the `defaultPaymentInstrument`. The
            value of this property will override the `defaultPaymentInstrument`
            in the case that both are supplied. The token may only be used once
            before it is expired.
          type: string
          writeOnly: true
        primaryAddress:
          $ref: "#/components/schemas/ContactObject"
        revision:
          description: >
            The number of times the customer data has been modified.

            The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.
          readOnly: true
          type: integer
        tags:
          description: A list of customer's tags
          items:
            $ref: "#/components/schemas/Tag"
          readOnly: true
          type: array
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The customer updated time
        websiteId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The website's ID
      type: object
    CustomerAverageValue:
      properties:
        amount:
          description: Average approved payment amount in Merchant's reporting currency
          format: double
          type: number
        amountUsd:
          description: Average approved payment amount in USD
          format: double
          type: number
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
          description: Merchant's reporting currency
      readOnly: true
      type: object
    CustomerEmbed:
      description: Customer object
      properties:
        customer:
          $ref: "#/components/schemas/Customer"
      readOnly: true
      type: object
    CustomerJWT:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/CustomerLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          description: Session created time
          format: date-time
          readOnly: true
          type: string
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The customer's ID
          readOnly: true
        expiredTime:
          description: Session expired time. Defaults to one hour
          format: date-time
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The session identifier string
          readOnly: true
        invalidate:
          default: true
          description: Whether to invalidate token after exchange or not
          example: true
          type: boolean
          writeOnly: true
        oneTimePassword:
          description: The one time password sent via an email. Should contain digits only.
          example: "123456"
          pattern: ^[0-9]{6}$
          type: string
          writeOnly: true
        token:
          description: The session's token used for authentication
          readOnly: true
          type: string
        type:
          description: Session type
          enum:
            - customer
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Session updated time
      type: object
    CustomerLifetimeRevenue:
      properties:
        amount:
          description: Revenue amount in Merchant's reporting currency
          format: double
          type: number
        amountUsd:
          description: Revenue amount in USD
          format: double
          type: number
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
          description: Merchant's reporting currency
      readOnly: true
      type: object
    CustomerLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - customer
          type: string
      required:
        - rel
      type: object
    CustomerTimeline:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        customData:
          description: Timeline custom event data. Used with `custom-event` type. Will be
            transformed to `extraData` two-column table in response
          example:
            customAttribute: customValue
            otherAttribute: otherValue
          type: object
          writeOnly: true
        customEventType:
          description: Timeline custom event type. Used with `custom-event` type. Must be
            defined using [Customer Timeline custom event
            API](#operation/PostCustomerTimelineCustomEventType)
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        extraData:
          $ref: "#/components/schemas/TimelineExtraData"
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Timeline message identifier string
          readOnly: true
        message:
          description: The message that describes the message details
          type: string
        occurredTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Timeline message time
        triggeredBy:
          description: Shows who or what triggered the Timeline message
          enum:
            - rebilly
            - app
            - direct-api
          readOnly: true
          type: string
        type:
          description: Timeline message type
          enum:
            - customer-comment-created
            - customer-created
            - primary-address-changed
            - default-payment-instrument-changed
            - lead-source-changed
            - custom-fields-changed
            - coupon-applied
            - coupon-redeemed
            - coupon-redemption-canceled
            - kyc-document-created
            - kyc-document-accepted
            - kyc-document-manually-accepted
            - kyc-document-rejected
            - kyc-document-manually-rejected
            - payment-card-expired
            - payment-instrument-created
            - payment-instrument-deactivated
            - customer-blacklisted
            - customer-payment-card-blacklisted
            - invoice-created
            - invoice-issued
            - invoice-abandoned
            - invoice-voided
            - invoice-past-due
            - invoice-paid
            - invoice-partially-paid
            - invoice-disputed
            - invoice-refunded
            - invoice-partially-refunded
            - order-created
            - order-renewed
            - order-activated
            - order-completed
            - order-reactivated
            - order-canceled
            - order-upgraded
            - order-downgraded
            - order-churned
            - order-paid-early
            - transaction-approved
            - transaction-canceled
            - transaction-declined
            - transaction-abandoned
            - transaction-refunded
            - transaction-voided
            - transaction-discrepancy-found
            - transaction-amount-discrepancy-found
            - email-message-sent
            - custom-event-processed
            - custom-event
            - transaction-waiting-gateway
          type: string
      type: object
    CustomerTimelineCustomEvent:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Customer Timeline Custom event created time
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Customer Timeline Custom Event identifier string
          readOnly: true
        name:
          description: Customer Timeline Custom Event type name. It must not be similar to
            any Rebilly system event.
          maxLength: 255
          minLength: 1
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Customer Timeline Custom event updated time
      required:
        - name
      type: object
    DataCash:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                client:
                  description: DataCash Gateway client
                  type: string
                masterCardPayoutsClient:
                  description: DataCash Gateway client for MasterCard payouts (OCT)
                  type: string
                masterCardPayoutsPassword:
                  description: DataCash Gateway password for MasterCard payouts (OCT)
                  format: password
                  type: string
                password:
                  description: DataCash Gateway password
                  format: password
                  type: string
                reportGroup:
                  description: DataCash report group
                  type: string
                reportPassword:
                  description: DataCash report password
                  format: password
                  type: string
                reportUser:
                  description: DataCash report user
                  type: string
                visaPayoutsClient:
                  description: DataCash Gateway client for Visa payouts (OCT)
                  type: string
                visaPayoutsPassword:
                  description: DataCash Gateway password for Visa payouts (OCT)
                  format: password
                  type: string
              required:
                - client
                - password
              type: object
            mpi:
              $ref: "#/components/schemas/DataCashMpis"
            settings:
              description: Datacash settings object
              properties:
                delay:
                  default: 0
                  description: Auto Capture delay (in hours)
                  minimum: 0
                  type: integer
                policy:
                  default: 2
                  description: Policy
                  maximum: 7
                  minimum: 0
                  type: integer
              type: object
          required:
            - credentials
          type: object
      description: DataCash Gateway config
    DataCashMpi:
      allOf:
        - $ref: "#/components/schemas/DataCashMpis"
      description: DataCash Integrated
    DataCashMpis:
      description: DataCash Mpis
      discriminator:
        mapping:
          DataCashMpi: "#/components/schemas/DataCashMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - DataCashMpi
      required:
        - name
      type: object
    DefaultPaymentInstrumentLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - defaultPaymentInstrument
          type: string
      required:
        - rel
      type: object
    Dengi:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                projectId:
                  description: Dengi Gateway project ID
                  type: string
                publicKey:
                  description: Dengi Gateway public key
                  format: password
                  type: string
                refundKey:
                  description: Dengi Gateway refund key
                  format: password
                  type: string
              required:
                - projectId
                - publicKey
                - refundKey
              type: object
          required:
            - credentials
          type: object
      description: Dengi Gateway config
    Discount:
      discriminator:
        mapping:
          fixed: "#/components/schemas/fixed"
          percent: "#/components/schemas/percent"
        propertyName: type
      properties:
        type:
          description: Discount type
          enum:
            - fixed
            - percent
          type: string
      type: object
    Dispute:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/TransactionEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/TransactionLink"
          minItems: 1
          readOnly: true
          type: array
        acquirerReferenceNumber:
          description: The dispute's acquirer reference number
          type: string
        amount:
          description: The dispute amount
          format: double
          type: number
        category:
          description: The dispute's category
          enum:
            - fraud
            - unrecognized
            - product-not-received
            - product-unacceptable
            - product-not-refunded
            - duplicate
            - subscription-canceled
            - uncategorized
          readOnly: true
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Dispute created time
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        customerId:
          description: The dispute's customer ID
          readOnly: true
          type: string
        deadlineTime:
          description: Dispute deadline time
          format: date-time
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The dispute identifier string
          readOnly: true
        postedTime:
          description: Dispute posted time
          format: date-time
          type: string
        rawResponse:
          description: Dispute raw response from gateway
          readOnly: true
          type: string
        reasonCode:
          description: The dispute's reason code
          enum:
            - "1000"
            - "10.1"
            - "10.2"
            - "10.3"
            - "10.4"
            - "10.5"
            - "11.1"
            - "11.2"
            - "11.3"
            - "12"
            - "12.1"
            - "12.2"
            - "12.3"
            - "12.4"
            - "12.5"
            - "12.6"
            - "12.7"
            - "13.1"
            - "13.2"
            - "13.3"
            - "13.4"
            - "13.5"
            - "13.6"
            - "13.7"
            - "13.8"
            - "13.9"
            - "2"
            - "30"
            - "31"
            - "35"
            - "37"
            - "40"
            - "41"
            - "42"
            - "46"
            - "47"
            - "49"
            - "50"
            - "53"
            - "54"
            - "55"
            - "57"
            - "59"
            - "60"
            - "62"
            - "7"
            - "70"
            - "71"
            - "72"
            - "73"
            - "74"
            - "75"
            - "76"
            - "77"
            - "79"
            - "8"
            - "80"
            - "81"
            - "82"
            - "83"
            - "85"
            - "86"
            - "93"
            - "00"
            - "63"
            - A01
            - A02
            - A08
            - F10
            - F14
            - F22
            - F24
            - F29
            - C02
            - C04
            - C05
            - C08
            - C14
            - C18
            - C28
            - C31
            - C32
            - M10
            - M49
            - P01
            - P03
            - P04
            - P05
            - P07
            - P08
            - P22
            - P23
            - R03
            - R13
            - M01
            - FR1
            - FR4
            - FR6
            - AL
            - AP
            - AW
            - CA
            - CD
            - CR
            - DA
            - DP
            - DP1
            - EX
            - IC
            - IN
            - IS
            - LP
            - N
            - NA
            - NC
            - P
            - RG
            - RM
            - RN1
            - RN2
            - SV
            - TF
            - TNM
            - UA01
            - UA02
            - UA32
            - UA99
            - UA03
            - UA10
            - UA11
            - UA12
            - UA18
            - UA20
            - UA21
            - UA22
            - UA23
            - UA28
            - UA30
            - UA31
            - UA38
            - duplicate
            - fraudulent
            - subscription_canceled
            - product_unacceptable
            - product_not_received
            - unrecognized
            - credit_not_processed
            - customer_initiated
            - incorrect_account_details
            - insufficient_funds
            - bank_cannot_process
            - debit_not_authorized
            - general
          type: string
        resolvedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Dispute resolved time
        status:
          description: The dispute's status
          enum:
            - response-needed
            - under-review
            - forfeited
            - won
            - lost
            - unknown
          type: string
        transactionId:
          description: The dispute's transaction ID
          type: string
        type:
          description: The dispute's type
          enum:
            - information-request
            - first-chargeback
            - second-chargeback
            - arbitration
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Dispute updated time
      required:
        - currency
        - transactionId
        - postedTime
        - type
        - status
        - reasonCode
      type: object
    DisputeLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - dispute
          type: string
      required:
        - rel
      type: object
    DueTimeShiftInstruction:
      default:
        duration: 1
        unit: hour
      description: >
        The calculation instruction of due time.

        This is used in conjunction with the **billing anchor** to calculate due time of invoice.

        The chronology of due time shift is always **after**.
      properties:
        duration:
          description: The number of the units
          minimum: 1
          type: integer
        unit:
          oneOf:
            - $ref: "#/components/schemas/time-unit"
            - $ref: "#/components/schemas/time-plural-unit"
      required:
        - duration
        - unit
      type: object
    EPG:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: EPG credentials object
              properties:
                merchantId:
                  description: Merchant ID
                  type: string
                merchantKey:
                  description: Merchant key
                  format: password
                  type: string
                merchantPassword:
                  description: Merchant password
                  format: password
                  type: string
                productId:
                  description: Product ID
                  type: string
              required:
                - merchantId
                - productId
                - merchantPassword
                - merchantKey
              type: object
          required:
            - credentials
          type: object
      description: EPG config
    EPSInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: EPS payment instrument object
    EcorePay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                accountAuth:
                  description: EcorePay Account Auth
                  format: password
                  type: string
                accountId:
                  description: EcorePay Account ID
                  type: string
              required:
                - accountId
                - accountAuth
              type: object
          required:
            - credentials
          type: object
      description: EcorePay Gateway config
    Elavon:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Elavon credentials object
              properties:
                ssl_merchant_id:
                  description: Elavon merchant ID
                  type: string
                ssl_pin:
                  description: Elavon pin
                  format: password
                  type: string
                ssl_user_id:
                  description: Elavon user ID
                  type: string
              required:
                - ssl_merchant_id
                - ssl_user_id
                - ssl_pin
              type: object
          required:
            - credentials
          type: object
      description: Elavon config
    Error:
      properties:
        error:
          type: string
        status:
          description: The HTTP status code.
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, human-readable summary of the problem type. It SHOULD NOT
            change from occurrence to occurrence of the problem, except for
            purposes of localization.
          type: string
        type:
          description: A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)]
            that identifies the problem type. It should provide human-readable
            documentation for the problem type. When this member is not present,
            its value is assumed to be "about:blank".
          type: string
      type: object
    EventType:
      description: Rebilly event type
      enum:
        - dispute-created
        - gateway-account-requested
        - transaction-processed
        - subscription-activated
        - subscription-canceled
        - subscription-created
        - subscription-renewed
        - payment-card-expired
        - invoice-past-due
        - invoice-paid
        - transaction-declined
        - transaction-process-requested
        - risk-score-changed
        - transaction-discrepancy-found
      readOnly: true
      type: string
    File:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/FileDownloadLink"
              - $ref: "#/components/schemas/SignedLinkLink"
              - $ref: "#/components/schemas/PermalinkLink"
          minItems: 3
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The upload date/time
        description:
          description: The File description
          type: string
        extension:
          description: The File extension
          type: string
        height:
          description: Image height, applicable to images only
          readOnly: true
          type: integer
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          readOnly: true
        isPublic:
          description: Is the file available publicly (without authentication). If true,
            the permalink in the _links section contains the public URL.
          type: boolean
        mime:
          description: The mime type
          enum:
            - image/png
            - image/jpeg
            - image/gif
            - application/pdf
            - audio/mpeg
          readOnly: true
          type: string
        name:
          description: Original File name
          type: string
        sha1:
          description: Hash sum of the file
          readOnly: true
          type: string
        size:
          description: The File size in bytes
          readOnly: true
          type: integer
        tags:
          description: The tags list
          items:
            type: string
          type: array
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The latest update date/time
        width:
          description: Image width, applicable to images only
          readOnly: true
          type: integer
      type: object
    FileCreateFromInline:
      properties:
        description:
          description: The file description
          example: My file description
          type: string
        file:
          description: The file in base64 encoded format.
          example: R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs=
          type: string
        isPublic:
          description: The File visibility. If public a permalink is provided.
          example: false
          type: boolean
        name:
          description: The file name used for downloading
          example: logo.png
          type: string
        tags:
          description: The tags list
          example:
            - test
            - tags
          items:
            type: string
          type: array
      required:
        - file
      type: object
    FileCreateFromUrl:
      properties:
        description:
          description: The file description
          example: My file description
          type: string
        isPublic:
          description: The File visibility. If public a permalink is provided.
          example: false
          type: boolean
        name:
          description: The file name used for downloading
          example: logo.png
          type: string
        tags:
          description: The tags list
          example:
            - test
            - tags
          items:
            type: string
          type: array
        url:
          description: The URL of the file to upload.
          example: https://blog.rebilly.com/wp-content/uploads/2017/09/rb_LogoInverted_Small.png
          type: string
      required:
        - url
      type: object
    FileDownloadLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - download
          type: string
      required:
        - rel
      type: object
    FileEmbed:
      description: File object
      properties:
        file:
          $ref: "#/components/schemas/File"
      readOnly: true
      type: object
    FileLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - file
          type: string
      required:
        - rel
      type: object
    FinTecSystems:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: FinTecSystems credentials object
              properties:
                apiKey:
                  description: FinTecSystems api key
                  format: password
                  type: string
              required:
                - apiKey
              type: object
            settings:
              description: FinTecSystems settings object
              properties:
                recipientBIC:
                  description: BIC of the recipient account
                  type: string
                recipientCountry:
                  description: Two letter country code
                  enum:
                    - AT
                    - CH
                    - DE
                  type: string
                recipientHolder:
                  description: Account holder of the recipient account
                  type: string
                recipientIBAN:
                  description: IBAN of the recipient account
                  type: string
              required:
                - recipientIBAN
                - recipientBIC
                - recipientHolder
                - recipientCountry
              type: object
          required:
            - credentials
            - settings
          type: object
      description: FinTecSystems config
    Finrax:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Finrax credentials object
              properties:
                businessToken:
                  description: Finrax business token
                  format: password
                  type: string
              required:
                - businessToken
              type: object
          required:
            - credentials
          type: object
      description: Finrax config
    Flexepin:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKey:
                  description: Flexepin API Key
                  type: string
                apiSecret:
                  description: Flexepin API Secret
                  format: password
                  type: string
              required:
                - apiKey
                - apiSecret
              type: object
          required:
            - credentials
          type: object
      description: Flexepin Gateway config
    FlexepinInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: Flexepin payment instrument object
    Forte:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                accountId:
                  description: Forte Gateway account ID
                  type: string
                apiAccessId:
                  description: Forte Gateway api access ID
                  format: password
                  type: string
                apiSecretKey:
                  description: Forte Gateway api secret key
                  format: password
                  type: string
                locationId:
                  description: Forte Gateway location ID
                  type: string
              required:
                - accountId
                - locationId
                - apiAccessId
                - apiSecretKey
              type: object
          required:
            - credentials
          type: object
      description: Forte Gateway config
    FundSend:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                clientId:
                  description: FundSend Gateway client ID
                  type: string
                secretWord:
                  description: FundSend Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - credentials
          type: object
      description: FundSend Gateway config
    GET:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                accountId:
                  description: GET Gateway account ID
                  type: string
              required:
                - accountId
              type: object
            mpi:
              $ref: "#/components/schemas/GETMpis"
          required:
            - credentials
          type: object
      description: GET Gateway config
    GETMpis:
      description: GET Mpis
      discriminator:
        mapping:
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaayMpi
            - Other
      required:
        - name
      type: object
    GatewayAccount:
      discriminator:
        mapping:
          A1Gateway: "#/components/schemas/A1Gateway"
          AmexVPC: "#/components/schemas/AmexVPC"
          ApcoPay: "#/components/schemas/ApcoPay"
          AsiaPaymentGateway: "#/components/schemas/AsiaPaymentGateway"
          AstroPay: "#/components/schemas/AstroPay"
          AstroPayCard: "#/components/schemas/AstroPayCard"
          AuthorizeNet: "#/components/schemas/AuthorizeNet"
          Bambora: "#/components/schemas/Bambora"
          BitPay: "#/components/schemas/BitPay"
          BlueSnap: "#/components/schemas/BlueSnap"
          BraintreePayments: "#/components/schemas/BraintreePayments"
          CASHlib: "#/components/schemas/CASHlib"
          CODVoucher: "#/components/schemas/CODVoucher"
          Cardknox: "#/components/schemas/Cardknox"
          CashToCode: "#/components/schemas/CashToCode"
          Cashflows: "#/components/schemas/Cashflows"
          CauriPayment: "#/components/schemas/CauriPayment"
          Cayan: "#/components/schemas/Cayan"
          Chase: "#/components/schemas/Chase"
          Citadel: "#/components/schemas/Citadel"
          Clearhaus: "#/components/schemas/Clearhaus"
          Conekta: "#/components/schemas/Conekta"
          Coppr: "#/components/schemas/Coppr"
          Credorax: "#/components/schemas/Credorax"
          Cryptonator: "#/components/schemas/Cryptonator"
          DataCash: "#/components/schemas/DataCash"
          Dengi: "#/components/schemas/Dengi"
          EPG: "#/components/schemas/EPG"
          EcorePay: "#/components/schemas/EcorePay"
          Elavon: "#/components/schemas/Elavon"
          FinTecSystems: "#/components/schemas/FinTecSystems"
          Finrax: "#/components/schemas/Finrax"
          Flexepin: "#/components/schemas/Flexepin"
          Forte: "#/components/schemas/Forte"
          FundSend: "#/components/schemas/FundSend"
          GET: "#/components/schemas/GET"
          Gigadat: "#/components/schemas/Gigadat"
          GlobalOne: "#/components/schemas/GlobalOne"
          Gooney: "#/components/schemas/Gooney"
          Gpaysafe: "#/components/schemas/Gpaysafe"
          Greenbox: "#/components/schemas/Greenbox"
          INOVAPAY: "#/components/schemas/INOVAPAY"
          Ilixium: "#/components/schemas/Ilixium"
          Ingenico: "#/components/schemas/Ingenico"
          Inovio: "#/components/schemas/Inovio"
          InstaDebit: "#/components/schemas/InstaDebit"
          Intuit: "#/components/schemas/Intuit"
          IpayOptions: "#/components/schemas/IpayOptions"
          JetPay: "#/components/schemas/JetPay"
          Jeton: "#/components/schemas/Jeton"
          LPG: "#/components/schemas/LPG"
          Moneris: "#/components/schemas/Moneris"
          MtaPay: "#/components/schemas/MtaPay"
          NMI: "#/components/schemas/NMI"
          Netbanking: "#/components/schemas/Netbanking"
          Neteller: "#/components/schemas/Neteller"
          NinjaWallet: "#/components/schemas/NinjaWallet"
          OchaPay: "#/components/schemas/OchaPay"
          Onlineueberweisen: "#/components/schemas/Onlineueberweisen"
          Optimal: "#/components/schemas/Optimal"
          Pagsmile: "#/components/schemas/Pagsmile"
          Panamerican: "#/components/schemas/Panamerican"
          PandaGateway: "#/components/schemas/PandaGateway"
          ParamountEft: "#/components/schemas/ParamountEft"
          Pay4Fun: "#/components/schemas/Pay4Fun"
          PayCash: "#/components/schemas/PayCash"
          PayPal: "#/components/schemas/PayPal"
          Payeezy: "#/components/schemas/Payeezy"
          Payflow: "#/components/schemas/Payflow"
          PaymenTechnologies: "#/components/schemas/PaymenTechnologies"
          Payr: "#/components/schemas/Payr"
          Paysafe: "#/components/schemas/Paysafe"
          Paysafecash: "#/components/schemas/Paysafecash"
          Payvision: "#/components/schemas/Payvision"
          Plugnpay: "#/components/schemas/Plugnpay"
          Prosa: "#/components/schemas/Prosa"
          RPN: "#/components/schemas/RPN"
          Realex: "#/components/schemas/Realex"
          Realtime: "#/components/schemas/Realtime"
          Redsys: "#/components/schemas/Redsys"
          Rotessa: "#/components/schemas/Rotessa"
          SMSVoucher: "#/components/schemas/SMSVoucher"
          Sagepay: "#/components/schemas/Sagepay"
          SeamlessChex: "#/components/schemas/SeamlessChex"
          SecureTrading: "#/components/schemas/SecureTrading"
          Skrill: "#/components/schemas/Skrill"
          SmartInvoice: "#/components/schemas/SmartInvoice"
          Sofort: "#/components/schemas/Sofort"
          SparkPay: "#/components/schemas/SparkPay"
          StaticGateway: "#/components/schemas/StaticGateway"
          Stripe: "#/components/schemas/Stripe"
          TestProcessor: "#/components/schemas/TestProcessor"
          ToditoCash: "#/components/schemas/ToditoCash"
          UPayCard: "#/components/schemas/UPayCard"
          USAePay: "#/components/schemas/USAePay"
          VantivLitle: "#/components/schemas/VantivLitle"
          Wallet88: "#/components/schemas/Wallet88"
          Walpay: "#/components/schemas/Walpay"
          Wirecard: "#/components/schemas/Wirecard"
          Worldpay: "#/components/schemas/Worldpay"
          Zotapay: "#/components/schemas/Zotapay"
          eMerchantPay: "#/components/schemas/eMerchantPay"
          ecoPayz: "#/components/schemas/ecoPayz"
          iCanPay: "#/components/schemas/iCanPay"
          iCheque: "#/components/schemas/iCheque"
          iDebit: "#/components/schemas/iDebit"
          vegaaH: "#/components/schemas/vegaaH"
        propertyName: gatewayName
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/schemas_SelfLink"
              - $ref: "#/components/schemas/OnBoardingUrlLink"
          minItems: 1
          readOnly: true
          type: array
        acceptedCurrencies:
          description: Accepted currencies (array of the currency three letter code)
          items:
            type: string
          type: array
        acquirerName:
          $ref: "#/components/schemas/acquirer-name"
        additionalCriteria:
          allOf:
            - $ref: "#/components/schemas/Condition"
          description: >
            The additional criteria that allows to check whether the gateway
            account can be selected for the transaction to be processed.
        approvalWindowTtl:
          default: 3600
          description: The time window (in seconds) allotted for approving a suspended
            transaction before it is automatically canceled
          maximum: 16777215
          minimum: 300
          type: integer
        cityField:
          description: The gateway account's city field (also known as line 2 descriptor)
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Gateway Account created time
        dccForceCurrency:
          description: >
            Force dynamic currency conversion to the specified currency on each
            sale.

            Leave it empty to disable force DCC.
          type: string
        dccMarkup:
          description: Dynamic currency conversion markup in basis points
          maximum: 10000
          minimum: -10000
          type: integer
        descriptor:
          description: The gateway account's descriptor
          type: string
        dynamicDescriptor:
          description: True, if Gateway Account allows dynamic descriptor
          type: boolean
        excludedDccQuoteCurrencies:
          description: Excluded Dynamic Currency Conversion Quote Currencies
          items:
            type: string
          type: array
        gatewayName:
          $ref: "#/components/schemas/gateway-name"
        id:
          allOf:
            - $ref: "#/components/schemas/schemas_ResourceId"
          description: The gateway identifier string
          readOnly: true
        isDown:
          description: True if gateway is currently in downtime period.
          readOnly: true
          type: boolean
        merchantCategoryCode:
          description: The gateway account's merchant category code
          maximum: 9950
          minimum: 742
          type: integer
        method:
          $ref: "#/components/schemas/schemas_Method"
        monthlyLimit:
          description: Monthly Limit
          format: double
          minimum: 0
          type: number
        organizationId:
          allOf:
            - $ref: "#/components/schemas/schemas_ResourceId"
          description: Organization ID
        paymentCardSchemes:
          description: Accepted payment card brands
          items:
            $ref: "#/components/schemas/payment-card-brands"
          type: array
        status:
          description: The gateway account's status
          enum:
            - active
            - inactive
            - pending
            - closed
          readOnly: true
          type: string
        threeDSecure:
          description: True, if Gateway Account allows 3DSecure
          type: boolean
        timeout:
          description: Gateway Account request timeout in seconds
          maximum: 120
          minimum: 10
          nullable: true
          type: integer
        token:
          description: Gateway Account token
          example: TwiX3f92k4AiBE27BzTbQ38hHjicBz_w
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Gateway Account updated time
      required:
        - gatewayName
        - acquirerName
        - merchantCategoryCode
        - websites
        - acceptedCurrencies
        - organizationId
      type: object
    GatewayAccountEmbed:
      description: Gateway Account object
      properties:
        gatewayAccount:
          $ref: "#/components/schemas/GatewayAccount"
      readOnly: true
      type: object
    GatewayAccountLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - gatewayAccount
          type: string
      required:
        - rel
      type: object
    Gigadat:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Gigadat credentials object
              properties:
                accessToken:
                  description: Gigadat access token
                  format: password
                  type: string
                campaignId:
                  description: Gigadat campaign ID
                  type: string
                securityToken:
                  description: Gigadat security token
                  format: password
                  type: string
              required:
                - campaignId
                - accessToken
                - securityToken
              type: object
            settings:
              properties:
                sandbox:
                  default: false
                  description: True if gateway account is in sandbox mode
                  type: boolean
              required:
                - sandbox
              type: object
          required:
            - credentials
          type: object
      description: Gigadat config
    GlobalOne:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                sharedSecret:
                  description: GlobalOne Gateway shared secret
                  format: password
                  type: string
                terminalId:
                  description: GlobalOne Gateway terminal ID
                  type: string
              required:
                - terminalId
                - sharedSecret
              type: object
          required:
            - credentials
          type: object
      description: GlobalOne Gateway config
    Gooney:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Gooney credentials object
              properties:
                apiKey:
                  description: Gooney API key
                  type: string
                apiPassword:
                  description: Gooney API password
                  format: password
                  type: string
                apiSecret:
                  description: Gooney API secret
                  format: password
                  type: string
                apiUser:
                  description: Gooney API user
                  type: string
              required:
                - username
                - password
                - apiKey
                - apiSecret
              type: object
          required:
            - credentials
          type: object
      description: Gooney config
    Gpaysafe:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKey:
                  description: Gpaysafe apiKey
                  type: string
              required:
                - apiKey
              type: object
          required:
            - credentials
          type: object
      description: Gpaysafe Gateway config
    Greenbox:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Greenbox credentials object
              properties:
                clientId:
                  description: Greenbox client ID
                  type: string
                clientSecret:
                  description: Greenbox client secret
                  format: password
                  type: string
                locationId:
                  description: Greenbox location ID
                  type: string
              required:
                - clientId
                - clientSecret
                - locationId
              type: object
          required:
            - credentials
          type: object
      description: Greenbox config
    IBANInstrument:
      allOf:
        - $ref: "#/components/schemas/TokenBankAccountInstrument"
        - properties:
            accountNumber:
              description: >
                Bank Account Number. Detailed information about all ISO
                13616-compliant national IBAN formats is available

                in [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).
              type: string
              writeOnly: true
            bankName:
              description: Bank name
              type: string
            bic:
              description: Bank Identifier Code
              type: string
            last4:
              description: Bank Account Number's last 4 digits
              readOnly: true
              type: string
          required:
            - accountNumber
          type: object
      description: Payment Token instrument object
    IBANType:
      allOf:
        - $ref: "#/components/schemas/BankAccountCreatePlain"
        - properties:
            accountNumber:
              description: >
                Bank's Account Number. Detailed information about all ISO
                13616-compliant national IBAN formats is available

                in [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).
              type: string
            address:
              allOf:
                - $ref: "#/components/schemas/ContactObject"
              description: The Address.
            bankName:
              description: Bank's name.
              type: string
            bic:
              description: Bank Identifier Code.
              type: string
            customFields:
              $ref: "#/components/schemas/ResourceCustomFields"
            customerId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The Customer's ID.
          required:
            - customerId
            - accountNumber
            - address
          type: object
      description: IBAN type object
    INOVAPAY:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: INOVAPAY credentials object
              properties:
                apiKey:
                  description: INOVAPAY API key
                  type: string
                apiSecret:
                  description: INOVAPAY API secret
                  format: password
                  type: string
              required:
                - apiKey
                - apiSecret
              type: object
          required:
            - credentials
          type: object
      description: INOVAPAY config
    Ilixium:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Ilixium credentials object
              properties:
                accountId:
                  description: Ilixium Gateway account ID
                  type: string
                digestPassword:
                  description: Ilixium Gateway digest password
                  format: password
                  type: string
                merchantId:
                  description: Ilixium Gateway merchant ID
                  type: string
              required:
                - merchantId
                - accountId
                - digestPassword
              type: object
            mpi:
              $ref: "#/components/schemas/IlixiumMpis"
            settings:
              description: Ilixium settings object
              properties:
                useIpFrame:
                  description: Force Ilixium to process via Ip Frame
                  type: boolean
              type: object
          required:
            - credentials
          type: object
      description: Ilixium Gateway config
    IlixiumMpi:
      allOf:
        - $ref: "#/components/schemas/IlixiumMpis"
      description: Ilixium Integrated
    IlixiumMpis:
      description: IlixiumMpis Mpis
      discriminator:
        mapping:
          IlixiumMpi: "#/components/schemas/IlixiumMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - IlixiumMpi
      required:
        - name
      type: object
    Ingenico:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKeyId:
                  description: Ingenico Gateway api key ID
                  type: string
                apiSecretKey:
                  description: Ingenico Gateway api secret key
                  format: password
                  type: string
                merchantId:
                  description: Ingenico Gateway merchant ID
                  type: string
                skipFraudService:
                  description: Ingenico skip fraud service
                  type: boolean
              required:
                - merchantId
                - apiKeyId
                - apiSecretKey
              type: object
            mpi:
              $ref: "#/components/schemas/IngenicoMpis"
          required:
            - credentials
          type: object
      description: Ingenico Gateway config
    IngenicoMpi:
      allOf:
        - $ref: "#/components/schemas/IngenicoMpis"
      description: Ingenico Integrated
    IngenicoMpis:
      description: Ingenico Mpis
      discriminator:
        mapping:
          IngenicoMpi: "#/components/schemas/IngenicoMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - IngenicoMpi
      required:
        - name
      type: object
    InitialInvoiceEmbed:
      description: Initial Invoice object
      properties:
        initialInvoice:
          $ref: "#/components/schemas/Invoice"
      readOnly: true
      type: object
    InitialInvoiceLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - initialInvoice
          type: string
      required:
        - rel
      type: object
    Inovio:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Inovio credentials object
              properties:
                password:
                  description: Inovio password
                  format: password
                  type: string
                username:
                  description: Inovio username
                  type: string
              required:
                - username
                - password
              type: object
            mpi:
              $ref: "#/components/schemas/InovioMpis"
            settings:
              description: Inovio settings object
              properties:
                merchantAccountId:
                  description: Inovio merchant account ID
                  type: string
                productId:
                  description: Inovio product ID
                  type: string
                websiteId:
                  description: Inovio website ID
                  type: string
              required:
                - websiteId
                - merchantAccountId
                - productId
              type: object
          required:
            - credentials
            - settings
          type: object
      description: Inovio config
    InovioMpi:
      allOf:
        - $ref: "#/components/schemas/InovioMpis"
      description: Inovio Integrated
    InovioMpis:
      description: Inovio Mpis
      discriminator:
        mapping:
          InovioMpi: "#/components/schemas/InovioMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - InovioMpi
      required:
        - name
      type: object
    InstaDebit:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: InstaDebit credentials object
              properties:
                merchantId:
                  description: InstaDebit merchant account number
                  type: string
                password:
                  description: InstaDebit merchant account password
                  format: password
                  type: string
              required:
                - merchantId
                - password
              type: object
          required:
            - credentials
          type: object
      description: InstaDebit config
    Intuit:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                clientId:
                  description: The Intuit client_id key
                  type: string
                clientSecret:
                  description: The Intuit client_secret key
                  format: password
                  type: string
              required:
                - clientId
                - clientSecret
              type: object
          required:
            - credentials
          type: object
      description: Intuit Gateway config
    InvalidError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            invalidFields:
              example:
                - field: field1
                  message: field1 is invalid
                - field: subObject.field2
                  message: field2 is invalid
                - field: subObject.field2
                  message: another error in the field2
              items:
                properties:
                  field:
                    description: The field name. Dot notation is used for nested object field names.
                    type: string
                  message:
                    type: string
                type: object
              type: array
          type: object
      description: Invalid data was sent
    Invoice:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/CustomerEmbed"
              - $ref: "#/components/schemas/WebsiteEmbed"
              - $ref: "#/components/schemas/OrganizationEmbed"
              - $ref: "#/components/schemas/LeadSourceEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
              - $ref: "#/components/schemas/WebsiteLink"
              - $ref: "#/components/schemas/OrganizationLink"
              - $ref: "#/components/schemas/LeadSourceLink"
              - $ref: "#/components/schemas/TransactionAllocationsLink"
              - $ref: "#/components/schemas/RecalculateInvoiceLink"
              - $ref: "#/components/schemas/SubscriptionLink"
          minItems: 1
          readOnly: true
          type: array
        abandonedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice abandoned time
        amount:
          description: The Invoice's amount
          format: double
          readOnly: true
          type: number
        amountDue:
          description: The Invoice's due amount
          format: double
          readOnly: true
          type: number
        autopayRetryNumber:
          default: 0
          description: Invoice autopay retry number
          minimum: 0
          readOnly: true
          type: integer
        autopayScheduledTime:
          description: Invoice autopay scheduled time
          format: date-time
          type: string
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Invoice's billing address
        collectionPeriod:
          description: Collection Period - difference between paidTime and issuedTime in
            days.
          readOnly: true
          type: integer
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice created time
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The customer's ID
        delinquentCollectionPeriod:
          description: Delinquent Collection Period - difference between paidTime and
            dueTime in days.
          readOnly: true
          type: integer
        deliveryAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Invoice's delivery address
        discountAmount:
          description: The Invoice's discounts amount
          format: double
          readOnly: true
          type: number
        discounts:
          description: Discounts applied
          items:
            allOf:
              - $ref: "#/components/schemas/InvoiceDiscount"
          readOnly: true
          type: array
        dueReminderNumber:
          description: Number of past due reminder events triggered
          readOnly: true
          type: integer
        dueReminderTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Time past due reminder event will be triggered
          nullable: true
        dueTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice due time
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The invoice identifier string
          readOnly: true
        invoiceNumber:
          description: An auto-incrementing number based on the sequence of invoices for
            any particular customer.
          readOnly: true
          type: integer
        issuedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice issued time
        items:
          description: Invoice Items array
          items:
            $ref: "#/components/schemas/InvoiceItem"
          readOnly: true
          type: array
        notes:
          description: Notes for the customer which will be displayed on the invoice
          type: string
        organizationId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The organization's ID
          readOnly: true
        paidTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice paid time
        poNumber:
          description: Purchase order number which will be displayed on the invoice
          example: PO123456
          nullable: true
          type: string
        retryInstruction:
          description: The invoice retry instruction
          properties:
            afterAttemptPolicies:
              description: The policy on the attempt finishes
              items:
                enum:
                  - change-subscription-renewal-time
                type: string
              type: array
            afterRetryEndPolicies:
              description: The policy on the retry ends
              items:
                enum:
                  - abandon-invoice
                  - cancel-subscription
                type: string
              type: array
            attempts:
              items:
                properties:
                  scheduleInstruction:
                    $ref: "#/components/schemas/InvoiceRetryScheduleInstruction"
                required:
                  - scheduleInstruction
                type: object
              minItems: 1
              type: array
          required:
            - attempts
            - afterAttemptPolicies
            - afterRetryEndPolicies
          type: object
        revision:
          description: >
            The number of times the invoice data has been modified.

            The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.
          readOnly: true
          type: integer
        shippingAmount:
          description: The Invoice's shipping amount
          format: double
          readOnly: true
          type: number
        status:
          description: Invoice status.
          enum:
            - draft
            - unpaid
            - paid
            - past-due
            - delinquent
            - abandoned
            - voided
            - partially-paid
            - partially-refunded
            - refunded
            - disputed
          readOnly: true
          type: string
        subscriptionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The related Subscription's ID if available, otherwise null
          readOnly: true
        subtotalAmount:
          description: The Invoice's subtotal amount
          format: double
          readOnly: true
          type: number
        taxAmount:
          description: The Invoice's taxes amount
          format: double
          readOnly: true
          type: number
        taxes:
          description: Taxes applied to this invoice
          items:
            allOf:
              - $ref: "#/components/schemas/InvoiceTax"
          readOnly: true
          type: array
        transactions:
          description: Invoice transactions array
          items:
            $ref: "#/components/schemas/Transaction"
          readOnly: true
          type: array
        type:
          description: Invoice type.
          enum:
            - initial
            - renewal
            - interim
            - cancellation
            - one-time
            - refund
            - charge
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice updated time
        voidedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice voided time
        websiteId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The website's ID
      required:
        - customerId
        - websiteId
        - currency
      type: object
    InvoiceDiscount:
      properties:
        amount:
          description: Total amount that was discounted by this Coupon
          format: double
          type: number
        description:
          description: Discount description
          type: string
        redemptionCode:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Coupon's redemption code
        redemptionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Redemption ID
      readOnly: true
      type: object
    InvoiceIssue:
      properties:
        dueTime:
          description: Invoice due time. Will be set same as `issuedTime` if `null` or
            omitted.
          format: date-time
          nullable: true
          type: string
        issuedTime:
          description: Invoice issued time. Will be issued immediately if `null` or omitted.
          format: date-time
          nullable: true
          type: string
      type: object
    InvoiceItem:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/ProductEmbed"
              - $ref: "#/components/schemas/PlanEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/ProductLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice item created time
        description:
          description: Invoice item's description
          type: string
        discountAmount:
          description: Invoice item discount amount
          format: double
          readOnly: true
          type: number
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The website identifier string
          readOnly: true
        periodEndTime:
          description: End time
          format: date-time
          type: string
        periodNumber:
          description: Invoice item subscription period number
          type: integer
        periodStartTime:
          description: Start time
          format: date-time
          type: string
        price:
          description: Invoice item's total price
          format: double
          readOnly: true
          type: number
        productId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The product's ID
        quantity:
          description: Invoice item's quantity
          type: integer
        type:
          description: Invoice item's type
          enum:
            - debit
            - credit
          type: string
        unitPrice:
          description: Invoice item's price
          format: double
          type: number
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Invoice item updated time
      required:
        - type
        - unitPrice
      type: object
    InvoiceLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - invoice
          type: string
      required:
        - rel
      type: object
    InvoiceReissue:
      properties:
        dueTime:
          description: Invoice due time. Will be set as current date-time if `null` or
            omitted.
          format: date-time
          nullable: true
          type: string
      type: object
    InvoiceRetryScheduleInstruction:
      description: The calculation instruction of scheduled time
      discriminator:
        mapping:
          date-interval: "#/components/schemas/date-interval"
          day-of-month: "#/components/schemas/day-of-month"
          day-of-week: "#/components/schemas/day-of-week"
          immediately: "#/components/schemas/immediately"
          intelligent: "#/components/schemas/intelligent"
        propertyName: method
      properties:
        method:
          enum:
            - intelligent
            - immediately
            - date-interval
            - day-of-month
            - day-of-week
          type: string
      required:
        - method
      type: object
    InvoiceTax:
      properties:
        amount:
          description: Tax amount
          format: double
          type: number
        description:
          description: Tax description
          type: string
      readOnly: true
      type: object
    InvoiceTimeShift:
      description: >
        The invoice time shift in conjunction with `billingTiming` allows
        to setup different billing use cases such as:


        - Bill immediately when the service period _starts_

        - Bill immediately after the service period _ends_

        - Bill _interval of time_ before the service period _starts_

        - Bill _interval of time_ after the service period _starts_

        - Bill _interval of time_ before the service period _ends_

        - Bill _interval of time_ after the service period _ends_
      properties:
        dueTimeShift:
          $ref: "#/components/schemas/DueTimeShiftInstruction"
        issueTimeShift:
          $ref: "#/components/schemas/IssueTimeShiftInstruction"
      type: object
    InvoiceTimeline:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        extraData:
          $ref: "#/components/schemas/TimelineExtraData"
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Timeline message identifier string
          readOnly: true
        message:
          description: The message that describes the message details
          type: string
        occurredTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Timeline message time
          readOnly: true
        triggeredBy:
          description: Shows who or what triggered the Timeline event
          enum:
            - rebilly
            - app
            - direct-api
          readOnly: true
          type: string
        type:
          description: Timeline message type
          enum:
            - timeline-comment-created
            - invoice-created
            - invoice-issued
            - invoice-abandoned
            - invoice-voided
            - invoice-past-due
            - invoice-paid
            - invoice-partially-paid
            - invoice-disputed
            - invoice-refunded
            - invoice-partially-refunded
            - invoice-renewal-payment-declined
            - email-message-sent
            - coupon-applied
            - transaction-approved
            - transaction-abandoned
            - transaction-canceled
            - transaction-declined
            - transaction-refunded
            - transaction-voided
          readOnly: true
          type: string
      type: object
    InvoiceTransactionAllocation:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/InvoiceLink"
              - $ref: "#/components/schemas/TransactionLink"
          maxItems: 2
          minItems: 2
          readOnly: true
          type: array
        amount:
          type: number
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        invoiceId:
          $ref: "#/components/schemas/ResourceId"
        transactionId:
          $ref: "#/components/schemas/ResourceId"
      type: object
    InvoicesEmbed:
      description: Invoices collection
      properties:
        invoices:
          items:
            $ref: "#/components/schemas/Invoice"
          type: array
      readOnly: true
      type: object
    InvoicesLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - invoices
          type: string
      required:
        - rel
      type: object
    IpayOptions:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Ipay Options credentials object
              properties:
                rcode:
                  description: Ipay Options rcode
                  format: password
                  type: string
                sid:
                  description: Ipay Options website ID
                  type: string
              required:
                - sid
                - rcode
              type: object
            settings:
              description: Ipay Options settings object
              properties:
                extraStep:
                  description: Show extra step for user to enter their email and DNI number
                  type: boolean
                platform:
                  description: Platform which IpayOptions will process.
                  enum:
                    - SOAP
                    - TxHandler
                  type: string
                subdomain:
                  description: Subdomain to use when sending request to IpayOptions.
                  enum:
                    - miglite
                    - w88asiapay
                  type: string
              type: object
          required:
            - credentials
            - settings
          type: object
      description: Ipay Options config
    IssueTimeShiftInstruction:
      description: >
        The calculation instruction of billing time.

        This is used in conjunction with the **service period anchor** to calculate the time the invoice is issued.
      properties:
        chronology:
          description: The chronology of the billing time relatively to the service period
            start.
          enum:
            - before
          type: string
        duration:
          description: The number of the units
          minimum: 1
          type: integer
        unit:
          oneOf:
            - $ref: "#/components/schemas/time-unit"
            - $ref: "#/components/schemas/time-plural-unit"
      required:
        - chronology
        - duration
        - unit
      type: object
    JetPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                TerminalID:
                  description: JetPay Gateway terminal ID
                  type: string
              required:
                - TerminalID
              type: object
          required:
            - credentials
          type: object
      description: JetPay Gateway config
    Jeton:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKey:
                  description: Jeton apiKey
                  format: password
                  type: string
              required:
                - apiKey
              type: object
            settings:
              properties:
                method:
                  description: Jeton's method
                  enum:
                    - CHECKOUT
                    - DIRECT
                    - QR
                    - JETGO
                  type: string
              required:
                - method
              type: object
          required:
            - credentials
          type: object
      description: Jeton Gateway config
    KlarnaInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: Klarna payment instrument object
    KycDocument:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/FileLink"
              - $ref: "#/components/schemas/CustomerLink"
          minItems: 3
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Creation date/time
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Linked Customer object id
        documentMatches:
          $ref: "#/components/schemas/KycDocumentMatches"
        documentType:
          description: Document type submitted for validation, only identity-proof type is
            analyzed in an automated manner.
          enum:
            - identity-proof
            - address-proof
          type: string
        fileId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Linked File object id
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          readOnly: true
        processedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Processing date/time
        rejectionReason:
          $ref: "#/components/schemas/KycDocumentRejection"
        reviewTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Date and time of manual review.
          nullable: true
        reviewerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Reviewer's user ID.
          nullable: true
          readOnly: true
          type: string
        reviewerName:
          description: Reviewer's first and last name.
          nullable: true
          readOnly: true
          type: string
        status:
          description: Status of the validation.
          enum:
            - pending
            - in-progress
            - accepted
            - rejected
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Latest update date/time
      required:
        - fileId
        - customerId
        - documentType
        - status
      type: object
    KycDocumentMatches:
      properties:
        data:
          properties:
            containsImage:
              description: Flag that indicates if there is an image that contains a face on it
              example: true
              type: boolean
            dateOfBirth:
              allOf:
                - $ref: "#/components/schemas/ServerTimestamp"
              description: The date of birth found on the document, null if not found
            expiryDate:
              allOf:
                - $ref: "#/components/schemas/ServerTimestamp"
              description: The expiry date found on the document, null if not found
            firstName:
              description: The customer first name if it was matched, null otherwise
              example: John
              type: string
            hasMinimalAge:
              description: Checks the minimal age, 21+ for USA and 18+ for all other
                countries. Null if dateOfBirth could not be determined.
              example: true
              type: boolean
            isIdentityDocument:
              description: Flag that indicates if this looks like and ID
              example: true
              type: boolean
            isPublishedOnline:
              description: If there is an exact match found online
              example: false
              type: boolean
            issueDate:
              allOf:
                - $ref: "#/components/schemas/ServerTimestamp"
              description: The issued date found on the document, null if not found
            lastName:
              description: The customer last name if it was matched, null otherwise
              example: Doe
              type: string
          type: object
        score:
          description: The calculated score that represents the % of confidence that this
            ID represents the given customer
          example: 0.75
          format: double
          type: number
      readOnly: true
      type: object
    KycDocumentRejection:
      properties:
        message:
          description: The rejection message
          example: Provided document is unreadable
          type: string
        type:
          enum:
            - document-unreadable
            - document-expired
            - document-not-matching
            - underage-person
            - other
          type: string
      readOnly: true
      type: object
    LPG:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: LPG credentials object
              properties:
                payoutPassword:
                  description: LPG payout account password
                  format: password
                  type: string
                payoutUsername:
                  description: LPG payout account username
                  format: password
                  type: string
                publicKey:
                  description: LPG public API key
                  type: string
                secureKey:
                  description: LPG secure API key
                  format: password
                  type: string
              required:
                - publicKey
                - secureKey
              type: object
          required:
            - credentials
          type: object
      description: LPG config
    LeadSource:
      allOf:
        - $ref: "#/components/schemas/LeadSourceData"
        - properties:
            original:
              allOf:
                - $ref: "#/components/schemas/LeadSourceData"
              readOnly: true
          type: object
    LeadSourceData:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
          minItems: 1
          readOnly: true
          type: array
        affiliate:
          description: Lead Source's affiliate (eg 123, Bob Smith)
          type: string
        campaign:
          description: Lead Source's campaign (eg go-big-123)
          type: string
        clickId:
          description: Lead Source's click id (may come from an ad server)
          type: string
        content:
          description: Lead Source's content (eg smiley faces)
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: LeadSource created time
        medium:
          description: Lead Source's medium (eg search, display)
          type: string
        path:
          description: Lead Source's path uri (eg www.example.com/some/landing/path)
          type: string
        salesAgent:
          description: Lead Source's sales agent (eg James Bond)
          type: string
        source:
          description: Lead Source's source (eg google, yahoo)
          type: string
        subAffiliate:
          description: Lead Source's sub-affiliate also called a sub-id or click id in
            some circles (eg 123456)
          type: string
        term:
          description: Lead Source's term (eg salt shakers)
          type: string
      type: object
    LeadSourceEmbed:
      description: Lead Source object
      properties:
        leadSource:
          $ref: "#/components/schemas/LeadSource"
      readOnly: true
      type: object
    LeadSourceLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - leadSource
          type: string
      required:
        - rel
      type: object
    Link:
      properties:
        href:
          description: The link URL
          type: string
      required:
        - href
      type: object
    MatchedRule:
      properties:
        context:
          additionalProperties:
            type: string
          description: Event's context
          type: object
        description:
          description: Rule's description
          type: string
        event:
          $ref: "#/components/schemas/EventType"
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Event tracking id
          readOnly: true
        occurredTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Time when event occurred.
        processedRules:
          description: Processed rules
          properties:
            actions:
              description: Rule actions applied
              items:
                type: string
              type: array
            name:
              description: Rule name
              type: string
            result:
              description: Rule result
              type: string
          type: object
        rulesVersion:
          description: Rule version
          type: integer
      readOnly: true
      type: object
    Method:
      description: The payment method
      enum:
        - payment-card
        - ach
        - bank-account
        - cash
        - check
        - paypal
        - Alipay
        - ApplePay
        - AstroPay Card
        - bank-transfer
        - bitcoin
        - Boleto
        - cash-deposit
        - CASHlib
        - CashToCode
        - China UnionPay
        - CODVoucher
        - Conekta-oxxo
        - domestic-cards
        - echeck
        - ecoPayz
        - ecoVoucher
        - EPS
        - ePay.bg
        - Finrax
        - Flexepin
        - Giropay
        - GooglePay
        - Gpaysafe
        - iDebit
        - iDEAL
        - INOVAPAY-pin
        - INOVAPAY-wallet
        - InstaDebit
        - instant-bank-transfer
        - Interac-online
        - Interac-eTransfer
        - Interac-express-connect
        - Interac
        - invoice
        - Jeton
        - Klarna
        - LPG-online
        - LPG-payment-card
        - miscellaneous
        - Netbanking
        - Neteller
        - Nordea-Solo
        - OchaPay
        - online-bank-transfer
        - Onlineueberweisen
        - Pagsmile-lottery
        - Pagsmile-deposit-express
        - PayCash
        - Paysafecard
        - Pay4Fun
        - PinPay
        - phone
        - POLi
        - Przelewy24
        - QQPay
        - Resurs
        - SEPA
        - Skrill
        - Skrill Rapid Transfer
        - SMSVoucher
        - SparkPay
        - swift-dbt
        - ToditoCash-card
        - Trustly
        - UPayCard
        - voucher
        - WeChat Pay
        - Zotapay
      type: string
    Moneris:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiToken:
                  description: Moneris Gateway api token
                  format: password
                  type: string
                storeId:
                  description: Moneris Gateway store ID
                  type: string
              required:
                - storeId
                - apiToken
              type: object
          required:
            - credentials
          type: object
      description: Moneris Gateway config
    MpiName:
      description: The Merchant plug-in Name
      enum:
        - PayvisionMpi
        - WirecardMpi
        - IlixiumMpi
        - DataCashMpi
        - OptimalMpi
        - PaysafeMpi
        - IngenicoMpi
        - CardinalCommerce
        - PaayMpi
        - Panamerican
        - eMerchantPayMpi
        - SecureTradingMpi
        - ClearhausMpi
        - Other
      type: string
    MtaPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                accountId:
                  description: MTA Pay Gateway account ID
                  type: string
                md5key:
                  description: MTA Pay Gateway md5key
                  format: password
                  type: string
                partyId:
                  description: MTA Pay Gateway party ID
                  type: string
              required:
                - accountId
                - partyId
                - md5key
              type: object
            settings:
              description: MTA Pay settings object
              properties:
                goods:
                  description: MTA Pay Gateway goods
                  type: string
                mobilePay:
                  description: MTA Pay Gateway mobile pay param
                  type: string
              required:
                - mobilePay
                - goods
              type: object
          required:
            - credentials
            - settings
          type: object
      description: MTA Pay Gateway config
    NMI:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                password:
                  description: NMI Gateway store ID
                  format: password
                  type: string
                username:
                  description: NMI Gateway api token
                  type: string
              required:
                - username
                - password
              type: object
            mpi:
              $ref: "#/components/schemas/NMIMpis"
          required:
            - credentials
          type: object
      description: NMI Gateway config
    NMIMpis:
      description: NMI Mpis
      discriminator:
        mapping:
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaayMpi
            - Other
      required:
        - name
      type: object
    Netbanking:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Netbanking credentials object
              properties:
                midcode:
                  description: Netbanking MID code
                  type: string
                midsecret:
                  description: Netbanking MID secret key
                  format: password
                  type: string
              required:
                - midcode
                - midsecret
              type: object
          required:
            - credentials
          type: object
      description: Netbanking config
    Neteller:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Neteller credentials object
              properties:
                clientId:
                  description: Neteller App Client ID
                  type: string
                clientSecret:
                  description: Neteller App Client Secret
                  format: password
                  type: string
                webhookSecretKey:
                  description: Neteller Webhook Secret Key
                  format: password
                  type: string
              required:
                - clientId
                - clientSecret
                - webhookSecretKey
              type: object
            settings:
              description: Neteller settings object
              properties:
                netellerGo:
                  description: Enable NETELLERgo! payment flow
                  type: boolean
              type: object
          required:
            - credentials
          type: object
      description: Neteller Gateway config
    NinjaWallet:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: NinjaWallet credentials object
              properties:
                apiKey:
                  description: NinjaWallet api key
                  format: password
                  type: string
                passphrase:
                  description: NinjaWallet passphrase
                  format: password
                  type: string
                secret:
                  description: NinjaWallet secret
                  format: password
                  type: string
              required:
                - apiKey
                - secret
                - passphrase
              type: object
          required:
            - credentials
          type: object
      description: NinjaWallet config
    OchaPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiPassword:
                  description: OchaPay Gateway api password
                  format: password
                  type: string
                apiUsername:
                  description: OchaPay Gateway username
                  type: string
                secretWord:
                  description: OchaPay Gateway secret word
                  format: password
                  type: string
              required:
                - apiUsername
                - apiPassword
                - secretWord
              type: object
          required:
            - credentials
          type: object
      description: OchaPay Gateway config
    OnBoardingUrlLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - onBoardingUrl
          type: string
      required:
        - rel
      type: object
    Onlineueberweisen:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Onlineueberweisen credentials object
              properties:
                apiKey:
                  description: Onlineueberweisen API Key
                  format: password
                  type: string
                nuaPayAccountId:
                  description: NuaPay account ID for reconciliation
                  type: string
                nuaPayApiKey:
                  description: NuaPay API Key for reconciliation
                  format: password
                  type: string
              required:
                - apiKey
              type: object
            settings:
              description: Onlineueberweisen settings object
              properties:
                autoAbandonTtl:
                  description: Auto-abandon if transaction is not reconciled after x hours
                  type: integer
                payformCode:
                  default: default
                  description: Onlineueberweisen payform code to use customized Payform template
                  type: string
              required:
                - autoAbandonTtl
              type: object
          required:
            - credentials
            - settings
          type: object
      description: Onlineueberweisen config
    Optimal:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                accountNum:
                  description: Optimal Gateway account number
                  type: string
                storeId:
                  description: Optimal Gateway store ID
                  type: string
                storePwd:
                  description: Optimal Gateway store password
                  format: password
                  type: string
              required:
                - storeId
                - storePwd
                - accountNum
              type: object
            mpi:
              $ref: "#/components/schemas/OptimalMpis"
          required:
            - credentials
          type: object
      description: Optimal Gateway config
    OptimalMpi:
      allOf:
        - $ref: "#/components/schemas/OptimalMpis"
      description: Optimal Integrated
    OptimalMpis:
      description: Optimal Mpis
      discriminator:
        mapping:
          OptimalMpi: "#/components/schemas/OptimalMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - OptimalMpi
      required:
        - name
      type: object
    OrderTimeline:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        extraData:
          $ref: "#/components/schemas/TimelineExtraData"
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Timeline message identifier string
          readOnly: true
        message:
          description: The message that describes the message details
          type: string
        occurredTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Timeline message time
          readOnly: true
        triggeredBy:
          description: Shows who or what triggered the Timeline message
          enum:
            - rebilly
            - app
            - direct-api
          readOnly: true
          type: string
        type:
          description: Timeline message type
          enum:
            - timeline-comment-created
            - order-renewed
            - order-activated
            - order-completed
            - order-reactivated
            - order-canceled
            - order-upgraded
            - order-downgraded
            - order-billing-address-changed
            - order-delivery-address-changed
            - order-renewal-time-changed
            - order-churned
            - order-custom-fields-changed
            - order-items-changed
            - order-billing-anchor-changed
            - order-recurring-interval-changed
            - order-risk-metadata-changed
            - order-paid-early
            - order-quantity-changed
            - email-message-sent
            - coupon-applied
            - invoice-created
            - invoice-issued
            - invoice-abandoned
            - invoice-voided
            - invoice-past-due
            - invoice-paid
            - invoice-partially-paid
            - invoice-disputed
            - invoice-refunded
            - invoice-partially-refunded
            - invoice-renewal-payment-declined
          readOnly: true
          type: string
      type: object
    Organization:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/schemas_SelfLink"
          minItems: 1
          readOnly: true
          type: array
        address:
          description: The organization street address
          maxLength: 60
          type: string
        address2:
          description: The organization street address
          maxLength: 60
          type: string
        city:
          description: The organization city
          maxLength: 45
          type: string
        country:
          description: The organization country ISO Alpha-2 code
          pattern: ^[A-Z]{2}$
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The organization created time
        emails:
          $ref: "#/components/schemas/schemas_ContactEmails"
        id:
          allOf:
            - $ref: "#/components/schemas/schemas_ResourceId"
          description: The organization identifier string
          readOnly: true
        invoiceTimeZone:
          description: Invoice will use this time zone to display time otherwise UTC will
            be used. Example "America/New_York"
          maxLength: 50
          type: string
        isPrimary:
          description: True, if Organization is primary (available to set as true only,
            other organizations will become as isPrimary=false)
          type: boolean
        name:
          description: The organization name
          maxLength: 60
          type: string
        phoneNumbers:
          $ref: "#/components/schemas/schemas_ContactPhoneNumbers"
        postalCode:
          description: The organization postal code
          maxLength: 10
          type: string
        region:
          description: The organization region (state)
          maxLength: 45
          type: string
        taxDescriptor:
          description: The organization's tax label. This will be displayed on the invoice.
          maxLength: 255
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The organization updated time
      required:
        - name
        - country
      type: object
    OrganizationEmbed:
      description: Organization object
      properties:
        organization:
          $ref: "#/components/schemas/Organization"
      readOnly: true
      type: object
    OrganizationLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - organization
          type: string
      required:
        - rel
      type: object
    Other:
      allOf:
        - $ref: "#/components/schemas/A1GatewayMpis"
        - $ref: "#/components/schemas/eMerchantPayMpis"
        - $ref: "#/components/schemas/GETMpis"
        - $ref: "#/components/schemas/NMIMpis"
        - $ref: "#/components/schemas/PayvisionMpis"
        - $ref: "#/components/schemas/VantivLitleMpis"
        - $ref: "#/components/schemas/WalpayMpis"
        - $ref: "#/components/schemas/WorldpayMpis"
      description: Other
    PaayMpi:
      allOf:
        - $ref: "#/components/schemas/A1GatewayMpis"
        - $ref: "#/components/schemas/eMerchantPayMpis"
        - $ref: "#/components/schemas/GETMpis"
        - $ref: "#/components/schemas/NMIMpis"
        - $ref: "#/components/schemas/PayvisionMpis"
        - $ref: "#/components/schemas/VantivLitleMpis"
        - $ref: "#/components/schemas/WalpayMpis"
        - $ref: "#/components/schemas/WorldpayMpis"
        - properties:
            apiKey:
              description: Paay ApiKey
              type: string
            mpiUrl:
              description: Paay MPI url
              type: string
            sandboxMpiUrl:
              description: Paay sandbox MPI url
              type: string
            secret:
              description: Paay secret
              format: password
              type: string
          required:
            - apiKey
            - secret
            - mpiUrl
            - sandboxMpiUrl
          type: object
      description: Paay
    Pagsmile:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                appId:
                  description: Pagsmile app ID
                  type: string
                merchantId:
                  description: Pagsmile merchant ID
                  type: string
                secretKey:
                  description: Pagsmile secret key
                  format: password
                  type: string
              required:
                - merchantId
                - appId
                - secretKey
              type: object
          required:
            - credentials
          type: object
      description: Pagsmile Gateway config
    Panamerican:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Panamerican credentials object
              properties:
                key:
                  description: Panamerican's key
                  type: string
                password:
                  description: Panamerican's Password
                  format: password
                  type: string
              required:
                - key
                - password
              type: object
            mpi:
              $ref: "#/components/schemas/PanamericanMpis"
            settings:
              description: Panamerican settings object
              properties:
                convertToAscii:
                  description: Will convert all chars to ascii
                  type: boolean
                extraStep:
                  description: Show extra step for user to enter their ID number
                  type: boolean
              required:
                - extraStep
              type: object
          required:
            - credentials
            - settings
          type: object
      description: Panamerican config
    PanamericanMpi:
      allOf:
        - $ref: "#/components/schemas/PanamericanMpis"
      description: Panamerican Integrated
    PanamericanMpis:
      description: Panamerican Mpis
      discriminator:
        mapping:
          Panamerican: "#/components/schemas/PanamericanMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - Panamerican
      required:
        - name
      type: object
    PandaGateway:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiCode:
                  description: Panda Gateway api code
                  type: string
                merchantCode:
                  description: Panda Gateway merchant code
                  type: string
                signKey:
                  description: Panda Gateway sign key
                  format: password
                  type: string
              required:
                - merchantCode
                - apiCode
                - signKey
              type: object
          required:
            - credentials
          type: object
      description: Panda Gateway config
    ParamountEft:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Paramount credentials object
              properties:
                merchant_id:
                  description: Merchant account ID
                  type: string
                merchant_pass:
                  description: Merchant account password
                  format: password
                  type: string
                payee:
                  description: Merchant name/descriptor
                  type: string
              required:
                - merchant_id
                - merchant_pass
                - payee
              type: object
          required:
            - credentials
          type: object
      description: Paramount config
    ParentTransactionEmbed:
      description: Retried Transaction object
      properties:
        parentTransaction:
          $ref: "#/components/schemas/Transaction"
      readOnly: true
      type: object
    ParentTransactionLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - parentTransaction
          type: string
      required:
        - rel
      type: object
    Pay4Fun:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Pay4Fun credentials object
              properties:
                merchantId:
                  description: Pay4Fun merchant ID
                  type: string
                merchantKey:
                  description: Pay4Fun merchant key
                  format: password
                  type: string
                merchantSecret:
                  description: Pay4Fun merchant secret
                  format: password
                  type: string
              required:
                - merchantId
                - merchantSecret
                - merchantKey
              type: object
          required:
            - credentials
          type: object
      description: Pay4Fun config
    PayCash:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: PayCash credentials object
              properties:
                emisor:
                  description: Identify of the company
                  type: string
                token:
                  description: Token
                  format: password
                  type: string
              required:
                - emisor
                - token
              type: object
          required:
            - credentials
          type: object
      description: PayCash config
    PayPal:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantIdInPayPal:
                  description: PayPal Gateway merchant id
                  type: string
              required:
                - merchantIdInPayPal
              type: object
          required:
            - credentials
          type: object
      description: PayPal Gateway config
    PayPalAccount:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
              - $ref: "#/components/schemas/ApprovalUrlLink"
          minItems: 1
          readOnly: true
          type: array
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: The Customer's Billing Address.
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: PayPal Account created time
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Customer's ID.
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The PayPal identifier string
          readOnly: true
        method:
          description: The method of payment instrument.
          enum:
            - paypal
          readOnly: true
          type: string
        status:
          description: PayPal Account status
          enum:
            - inactive
            - active
            - deactivated
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: PayPal Account updated time
        username:
          description: PayPal username.
          readOnly: true
          type: string
      required:
        - customerId
        - billingAddress
      type: object
    PayPalAccountAuthorization:
      properties:
        amount:
          default: 1
          description: The amount to authorize
          format: double
          type: number
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        gatewayAccountId:
          description: The Gateway Account ID which use to send transactions
          type: string
        redirectUrl:
          $ref: "#/components/schemas/TransactionRedirectUrl"
        websiteId:
          description: The Website ID
          type: string
      required:
        - websiteId
        - currency
      type: object
    Payeezy:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKey:
                  description: API Key
                  type: string
                apiSecret:
                  description: API Secret
                  format: password
                  type: string
                merchantId:
                  description: Payeezy Merchant ID
                  type: string
                merchantToken:
                  description: Merchant Token
                  format: password
                  type: string
              required:
                - merchantId
                - merchantToken
                - apiKey
                - apiSecret
              type: object
          required:
            - credentials
          type: object
      description: Payeezy Gateway config
    Payflow:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Payflow credentials object
              properties:
                password:
                  description: The password you defined while registering for the account.
                  format: password
                  type: string
                user:
                  description: If you set up one or more additional users on the account, this
                    value is the ID of the user authorized to process
                    transactions. If, however, you have not set up additional
                    users, USER has the same value as VENDOR
                  type: string
                vendor:
                  description: Your merchant login ID created when you registered for the account.
                  type: string
              required:
                - user
                - vendor
                - password
              type: object
          required:
            - credentials
          type: object
      description: Payflow config
    PaymenTechnologies:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                authenticateId:
                  description: PaymenTechnologies Gateway authenticate ID
                  type: string
                authenticatePw:
                  description: PaymenTechnologies Gateway authenticate password
                  format: password
                  type: string
                publicKey:
                  description: PaymenTechnologies Gateway API public key
                  type: string
                secretKey:
                  description: PaymenTechnologies Gateway API secret key
                  format: password
                  type: string
              required:
                - authenticateId
                - authenticatePw
                - publicKey
                - secretKey
              type: object
            settings:
              properties:
                use3DSEndpoint:
                  description: Use 3DS endpoint
                  type: boolean
              type: object
          required:
            - credentials
          type: object
      description: PaymenTechnologies Gateway config
    Payment:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/WebsiteEmbed"
              - $ref: "#/components/schemas/CustomerEmbed"
              - $ref: "#/components/schemas/TransactionEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/WebsiteLink"
              - $ref: "#/components/schemas/TransactionLink"
              - $ref: "#/components/schemas/ApprovalUrlLink"
              - $ref: "#/components/schemas/LeadSourceLink"
          minItems: 1
          readOnly: true
          type: array
        amount:
          description: The payment amount
          format: double
          type: number
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Billing Address
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Payment created time
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The customer identifier string
        description:
          description: The payment description
          maxLength: 255
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The payment identifier string
          readOnly: true
        invoiceIds:
          description: The array of invoice identifiers
          items:
            $ref: "#/components/schemas/ResourceId"
          type: array
        paymentInstrument:
          $ref: "#/components/schemas/PaymentInstrument"
        result:
          description: Payment result
          enum:
            - approved
            - declined
            - canceled
            - abandoned
            - unknown
          readOnly: true
          type: string
        retriedPaymentId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The retried payment ID
          readOnly: true
        retryInstruction:
          $ref: "#/components/schemas/PaymentRetry"
        retryNumber:
          description: The position in the sequence of retries
          readOnly: true
          type: integer
        riskMetadata:
          allOf:
            - $ref: "#/components/schemas/RiskMetadata"
          description: Risk metadata
        scheduledTime:
          description: The time the payment is scheduled for collection
          format: date-time
          type: string
        status:
          description: Payment status
          enum:
            - scheduled
            - queued
            - in-progress
            - incomplete
            - waiting-gateway
            - suspended
            - completed
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Payment updated time
        websiteId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The website identifier string
      required:
        - websiteId
        - customerId
        - currency
        - amount
      type: object
    PaymentCard:
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/AuthTransactionEmbed"
              - $ref: "#/components/schemas/CustomerEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
              - $ref: "#/components/schemas/AuthTransactionLink"
              - $ref: "#/components/schemas/ApprovalUrlLink"
          minItems: 1
          readOnly: true
          type: array
        bankCountry:
          description: Payment Card bank country
          readOnly: true
          type: string
        bankName:
          description: Payment Card bank name
          readOnly: true
          type: string
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: The Billing Address.
        bin:
          description: The card's bin (the PAN's first 6 digits)
          format: bin
          readOnly: true
          type: string
        brand:
          allOf:
            - $ref: "#/components/schemas/payment-card-brands"
          readOnly: true
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Card created time
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Customer's ID.
        expMonth:
          description: Card's expiry month.
          type: integer
        expYear:
          description: Card's expiry year.
          type: integer
        expirationReminderNumber:
          description: Number of expiration reminder events triggered
          readOnly: true
          type: integer
        expirationReminderTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Time expiration reminder event will be triggered
          nullable: true
        fingerprint:
          description: A unique value to identify the PAN regardless of expiration
            dates.  It contains alphanumeric values.
          readOnly: true
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The card identifier string
          readOnly: true
        last4:
          description: The PAN's last 4 digits
          readOnly: true
          type: string
        method:
          description: The method of payment instrument.
          enum:
            - payment-card
          readOnly: true
          type: string
        panFingerprint:
          deprecated: true
          description: A unique value to identify the PAN regardless of expiration
            dates.  It contains alphanumeric values. Use `fingerprint` instead.
          readOnly: true
          type: string
        status:
          description: >
            Payment Card status.  When a card is `active` it means it has been
            used at least once for an approved transaction.

            To remove a card from being in use, set it as `deactivated` (see the deactivation endpoint).
          enum:
            - active
            - expired
            - inactive
            - deactivated
            - pending
            - verification-needed
          readOnly: true
          type: string
        stickyGatewayAccountId:
          description: Default Gateway Account ID used for transactions
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Card updated time
      required:
        - customerId
      type: object
    PaymentCardCreatePlain:
      properties:
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: The Billing Address.
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Customer's ID.
        cvv:
          description: Card's cvv (card verification value).
          type: string
          writeOnly: true
        expMonth:
          description: Card's expiry month.
          type: integer
        expYear:
          description: Card's expiry year.
          type: integer
        pan:
          description: The card PAN (Primary Account Number).
          type: string
          writeOnly: true
      required:
        - customerId
        - pan
        - expYear
        - expMonth
        - billingAddress
      type: object
    PaymentCardCreateToken:
      properties:
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Customer's ID.
        token:
          description: PaymentCardToken ID.
          type: string
      required:
        - customerId
        - token
      type: object
    PaymentCardEmbed:
      description: Payment Card object
      properties:
        paymentCard:
          $ref: "#/components/schemas/PaymentCard"
      readOnly: true
      type: object
    PaymentCardLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - paymentCard
          type: string
      required:
        - rel
      type: object
    PaymentCardToken:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: The billing address object
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token created time
        expirationTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token expiration time
        fingerprint:
          description: Device fingerprint hash
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The token identifier string
          readOnly: true
        isUsed:
          default: false
          description: Whether the token was already used
          readOnly: true
          type: boolean
        leadSource:
          allOf:
            - $ref: "#/components/schemas/LeadSource"
          writeOnly: true
        method:
          description: The token payment method
          enum:
            - payment-card
          type: string
        paymentInstrument:
          allOf:
            - $ref: "#/components/schemas/TokenPaymentCardInstrument"
          description: The payment instrument details
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token updated time
        usageTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token usage time
      required:
        - method
        - paymentInstrument
        - billingAddress
      title: Payment Card Token
      type: object
    PaymentInstrument:
      discriminator:
        mapping:
          Alipay: "#/components/schemas/AlipayInstrument"
          AlipayInstrument: "#/components/schemas/AlipayInstrument"
          AstroPay Card: "#/components/schemas/AstroPay-CardInstrument"
          AstroPay-CardInstrument: "#/components/schemas/AstroPay-CardInstrument"
          Boleto: "#/components/schemas/BoletoInstrument"
          BoletoInstrument: "#/components/schemas/BoletoInstrument"
          China UnionPay: "#/components/schemas/China-UnionPayInstrument"
          China-UnionPayInstrument: "#/components/schemas/China-UnionPayInstrument"
          EPS: "#/components/schemas/EPSInstrument"
          EPSInstrument: "#/components/schemas/EPSInstrument"
          Flexepin: "#/components/schemas/FlexepinInstrument"
          FlexepinInstrument: "#/components/schemas/FlexepinInstrument"
          Klarna: "#/components/schemas/KlarnaInstrument"
          KlarnaInstrument: "#/components/schemas/KlarnaInstrument"
          QQPay: "#/components/schemas/QQPayInstrument"
          QQPayInstrument: "#/components/schemas/QQPayInstrument"
          SMSVoucher: "#/components/schemas/SMSVoucherInstrument"
          SMSVoucherInstrument: "#/components/schemas/SMSVoucherInstrument"
          Skrill Rapid Transfer: "#/components/schemas/Skrill-Rapid-TransferInstrument"
          Skrill-Rapid-TransferInstrument: "#/components/schemas/Skrill-Rapid-TransferInstrument"
          UPayCard: "#/components/schemas/UPayCardInstrument"
          UPayCardInstrument: "#/components/schemas/UPayCardInstrument"
          WeChat Pay: "#/components/schemas/WeChat-PayInstrument"
          WeChat-PayInstrument: "#/components/schemas/WeChat-PayInstrument"
          ach: "#/components/schemas/achInstrument"
          achInstrument: "#/components/schemas/achInstrument"
          bank-account: "#/components/schemas/bank-accountInstrument"
          bank-accountInstrument: "#/components/schemas/bank-accountInstrument"
          bitcoin: "#/components/schemas/bitcoinInstrument"
          bitcoinInstrument: "#/components/schemas/bitcoinInstrument"
          cash: "#/components/schemas/cashInstrument"
          cashInstrument: "#/components/schemas/cashInstrument"
          check: "#/components/schemas/checkInstrument"
          checkInstrument: "#/components/schemas/checkInstrument"
          ePay-bgInstrument: "#/components/schemas/ePay-bgInstrument"
          ePay.bg: "#/components/schemas/ePay-bgInstrument"
          iDEAL: "#/components/schemas/iDEALInstrument"
          iDEALInstrument: "#/components/schemas/iDEALInstrument"
          payment-card: "#/components/schemas/payment-cardInstrument"
          payment-cardInstrument: "#/components/schemas/payment-cardInstrument"
          paypal: "#/components/schemas/paypalInstrument"
          paypalInstrument: "#/components/schemas/paypalInstrument"
        propertyName: method
      properties:
        method:
          $ref: "#/components/schemas/Method"
      required:
        - method
      type: object
    PaymentInstrumentValidation:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        actionCode:
          description: Action code
          readOnly: true
          type: string
        avsResult:
          description: Address verification result
          readOnly: true
          type: string
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Billing address.
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Payment instrument validation created time.
        cvvResult:
          description: CVV result
          readOnly: true
          type: string
        expMonth:
          description: Payment card's expiry month.
          readOnly: true
          type: integer
        expYear:
          description: Payment card's expiry year.
          readOnly: true
          type: integer
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Payment instrument validation ID
          readOnly: true
        method:
          description: Payment method
          type: string
        paymentInstrumentId:
          description: Payment instrument ID
          type: string
        responseCode:
          description: Response code
          readOnly: true
          type: string
      required:
        - method
        - paymentInstrumentId
      type: object
    PaymentRetry:
      properties:
        afterAttemptPolicy:
          description: The policy on the attempt finishes
          enum:
            - none
            - change-subscription-renewal-time
          type: string
        afterRetryEndPolicy:
          description: The policy on the retry ends
          enum:
            - none
            - cancel-subscription
          type: string
        attempts:
          items:
            properties:
              paymentInstruction:
                $ref: "#/components/schemas/AmountAdjustment"
              scheduleInstruction:
                $ref: "#/components/schemas/CommonScheduleInstruction"
            required:
              - scheduleInstruction
              - paymentInstruction
            type: object
          minItems: 1
          type: array
      required:
        - attempts
        - afterAttemptPolicy
        - afterRetryEndPolicy
      type: object
    PaymentToken:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: The billing address object
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token created time
        expirationTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token expiration time
        fingerprint:
          description: Device fingerprint hash
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The token identifier string
          readOnly: true
        isUsed:
          default: false
          description: Whether the token was already used
          readOnly: true
          type: boolean
        leadSource:
          allOf:
            - $ref: "#/components/schemas/LeadSource"
          writeOnly: true
        method:
          allOf:
            - $ref: "#/components/schemas/TokenMethod"
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token updated time
        usageTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Token usage time
      required:
        - method
        - billingAddress
      title: Payment Token
      type: object
    Payr:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiSecurityToken:
                  description: Hash of the password for the Alliance API (transaction reporting)
                  format: password
                  type: string
                apiUserId:
                  description: Username for the Alliance API (transaction reporting)
                  type: string
                clientId:
                  description: Payr Gateway client ID
                  type: string
                secretWord:
                  description: Payr Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - credentials
          type: object
      description: Payr Gateway config
    Paysafe:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                accountNum:
                  description: Paysafe Gateway account number
                  type: string
                storeId:
                  description: Paysafe Gateway store ID
                  type: string
                storePwd:
                  description: Paysafe Gateway store password
                  format: password
                  type: string
              required:
                - storeId
                - storePwd
                - accountNum
              type: object
            mpi:
              $ref: "#/components/schemas/PaysafeMpis"
          required:
            - credentials
          type: object
      description: Paysafe Gateway config
    PaysafeMpi:
      allOf:
        - $ref: "#/components/schemas/PaysafeMpis"
      description: Paysafe Integrated
    PaysafeMpis:
      description: Paysafe Mpis
      discriminator:
        mapping:
          PaysafeMpi: "#/components/schemas/PaysafeMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaysafeMpi
      required:
        - name
      type: object
    Paysafecash:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKey:
                  description: Paysafecash API key
                  format: password
                  type: string
              required:
                - apiKey
              type: object
          required:
            - credentials
          type: object
      description: Paysafecash Gateway config
    Payvision:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                memberGuid:
                  description: Payvision Gateway member guid
                  format: password
                  type: string
                memberId:
                  description: Payvision Gateway member id
                  type: string
              required:
                - memberId
                - memberGuid
              type: object
            mpi:
              $ref: "#/components/schemas/PayvisionMpis"
            settings:
              description: Payvision settings object
              properties:
                avs:
                  description: Payvision Gateway avs
                  type: boolean
                delay:
                  description: Payvision Gateway delay
                  type: integer
                merchantAccountType:
                  description: Payvision merchant account type
                  type: integer
              required:
                - merchantAccountType
              type: object
          required:
            - credentials
          type: object
      description: Payvision Gateway config
    PayvisionMpi:
      allOf:
        - $ref: "#/components/schemas/PayvisionMpis"
      description: Payvision Integrated
    PayvisionMpis:
      description: Payvision Mpis
      discriminator:
        mapping:
          CardinalCommerce: "#/components/schemas/CardinalCommerce"
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
          PayvisionMpi: "#/components/schemas/PayvisionMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PayvisionMpi
            - Payvision3DS2
            - CardinalCommerce
            - PaayMpi
            - Other
      required:
        - name
      type: object
    PermalinkLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - permalink
          type: string
      required:
        - rel
      type: object
    Plan:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Plan created time
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        currencySign:
          description: Currency sign
          readOnly: true
          type: string
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The plan identifier string
          readOnly: true
        invoiceTimeShift:
          allOf:
            - $ref: "#/components/schemas/InvoiceTimeShift"
          description: You can shift issue time and due time of invoices for this plan.
        isActive:
          description: If the plan is not active, customers cannot subscribe to the plan.
          type: boolean
        name:
          description: The plan name, displayed on invoices and receipts.
          type: string
        pricing:
          $ref: "#/components/schemas/PlanPriceFormula"
        productId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The related product identifier string
        productOptions:
          additionalProperties:
            type: string
          description: Name-value pairs to specify the product options.
          example:
            color: red
            size: xxl
          type: object
        recurringInterval:
          allOf:
            - $ref: "#/components/schemas/PlanPeriod"
            - properties:
                billingTiming:
                  $ref: "#/components/schemas/PlanBillingTiming"
                limit:
                  description: The number of invoices this subscription will generate (if 1, it
                    will not generate any beyond the initial subscription
                    creation).  For example, set this property to `12`, when the
                    `periodUnit` is month and the `periodLength` is 1, for a 1
                    year contract billed monthly.
                  type: integer
                periodAnchorInstruction:
                  $ref: "#/components/schemas/ServicePeriodAnchorInstruction"
              type: object
          description: The service interval. For a one-time item, use `null`.
        setup:
          description: The setup. Set `null` if no setup.
          properties:
            price:
              description: The price of a setup - 0 is a valid value (for free)
              format: double
              type: number
          required:
            - price
          type: object
        subscriptionCount:
          description: Number of subscriptions associated with this plan
          readOnly: true
          type: integer
        trial:
          description: The trial. Set `null` if no trial.
          properties:
            period:
              $ref: "#/components/schemas/PlanPeriod"
            price:
              description: The price of the trial. For a free trial, use `0`.
              format: double
              type: number
          required:
            - price
            - period
          type: object
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Plan updated time
      required:
        - name
        - currency
        - productId
        - pricing
      type: object
    PlanBillingTiming:
      default: prepaid
      description: >
        The billing timing in relation to the service period.

        For `prepaid` plans the customer pays when the service period starts,

        whereas, for `postpaid` plans, the customer pays when the service period ends.
      enum:
        - prepaid
        - postpaid
      type: string
    PlanEmbed:
      description: Plan object
      properties:
        plan:
          $ref: "#/components/schemas/Plan"
      readOnly: true
      type: object
    PlanPeriod:
      properties:
        length:
          description: The length of time
          type: integer
        unit:
          description: The unit of time
          enum:
            - day
            - week
            - month
            - year
          type: string
      required:
        - unit
        - length
      type: object
    PlanPriceFormula:
      discriminator:
        mapping:
          fixed-fee: "#/components/schemas/fixed-fee"
          flat-rate: "#/components/schemas/flat-rate"
          stairstep: "#/components/schemas/stairstep"
          tiered: "#/components/schemas/tiered"
          volume: "#/components/schemas/volume"
        propertyName: formula
      properties:
        formula:
          description: >
            The price formula determines what algorithm is used to calculate
            the invoice price based on a few factors,

            - the quantity in the subscription (which may be variable if usage pricing, otherwise determined when creating the subscription)

            - the price brackets data


            To determine which formula is correct, please see the price formula documentation.
          enum:
            - fixed-fee
            - flat-rate
            - stairstep
            - tiered
            - volume
          type: string
      required:
        - formula
      type: object
    Plugnpay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                publisher-name:
                  description: Plugnpay Gateway member id
                  type: string
                publisher-password:
                  description: Plugnpay Gateway avs
                  format: password
                  type: string
              required:
                - publisher-name
                - publisher-password
              type: object
          required:
            - credentials
          type: object
      description: Plugnpay Gateway config
    PriceBasedShippingRate:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        maxOrderSubtotal:
          description: Maximum order subtotal for which this shipping rate is applicable
            (NULL if no maximum)
          format: double
          type: number
        minOrderSubtotal:
          default: 0
          description: Minimum order subtotal for which this shipping rate is applicable,
            defaults to 0.00
          format: double
          type: number
        name:
          description: The shipping rate name
          maxLength: 255
          type: string
        price:
          description: The shipping price - 0 is a valid value (for free)
          format: double
          type: number
      required:
        - name
        - currency
        - price
      type: object
    Product:
      description: >
        Products include digital goods, services, and physical goods.

        Products appear on invoice line items. If you set a tax category identifier,

        taxes will be calculated upon invoice generation.  If it is shippable,

        shipping will be calculated upon invoice generation.  Pricing and

        variations are set within Plans.
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        accountingCode:
          description: The product accounting code
          example: "4010"
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The product created time
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        description:
          description: The product description
          maxLength: 512
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The product identifier string
          example: membership
          readOnly: true
        name:
          description: The product name
          example: Premium membership
          maxLength: 255
          type: string
        options:
          description: The product options such as Color, Size, etc.  The product options
            definition does not include option values.  Those are defined within
            the Plans.
          items:
            type: string
          type: array
        requiresShipping:
          description: If the product requires shipping, shipping calculations will be
            applied
          example: false
          type: boolean
        taxCategoryId:
          description: The product's tax category identifier string
          enum:
            - "00000"
            - "99999"
            - "20010"
            - "40030"
            - "51020"
            - "51010"
            - "31000"
            - "30070"
          type: string
        unitLabel:
          default: unit
          description: The unit label, such as per `seat` or per `unit`.
          example: seat
          maxLength: 50
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The product updated time
      required:
        - name
      type: object
    ProductEmbed:
      description: Product object
      properties:
        product:
          $ref: "#/components/schemas/Product"
      readOnly: true
      type: object
    ProductLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - product
          type: string
      required:
        - rel
      type: object
    Prosa:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Prosa credentials object
              properties:
                accessToken:
                  description: Access token
                  format: password
                  type: string
                entityId:
                  description: Entity ID
                  type: string
              required:
                - entityId
                - accessToken
              type: object
          required:
            - credentials
          type: object
      description: Prosa config
    QQPayInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: QQPay payment instrument object
    RPN:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                key:
                  description: RPN Key
                  format: password
                  type: string
                mid:
                  description: RPN MID
                  type: string
              required:
                - mid
                - key
              type: object
          required:
            - credentials
          type: object
      description: RPN Gateway config
    Realex:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                account:
                  description: Realex Gateway account
                  type: string
                merchantId:
                  description: Realex Gateway merchant id
                  type: string
                rebatePassword:
                  description: Realex Gateway rebate password
                  format: password
                  type: string
                secretKey:
                  description: Realex Gateway secret key
                  format: password
                  type: string
              required:
                - merchantId
                - secretKey
                - rebatePassword
                - account
              type: object
          required:
            - credentials
          type: object
      description: Realex Gateway config
    Realtime:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                clientId:
                  description: Realtime Gateway client ID
                  type: string
                secretWord:
                  description: Realtime Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - credentials
          type: object
      description: Realtime Gateway config
    RecalculateInvoiceLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - recalculateInvoice
          type: string
      required:
        - rel
      type: object
    RecentInvoiceEmbed:
      description: Recent Invoice object
      properties:
        recentInvoice:
          $ref: "#/components/schemas/Invoice"
      readOnly: true
      type: object
    RecentInvoiceLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - recentInvoice
          type: string
      required:
        - rel
      type: object
    RedemptionRestriction:
      description: Redemption restrictions
      discriminator:
        mapping:
          discounts-per-redemption: "#/components/schemas/discounts-per-redemption"
          minimum-order-amount: "#/components/schemas/minimum-order-amount"
          paid-by-time: "#/components/schemas/paid-by-time"
          restrict-to-invoices: "#/components/schemas/restrict-to-invoices"
          restrict-to-plans: "#/components/schemas/restrict-to-plans"
          restrict-to-products: "#/components/schemas/restrict-to-products"
          restrict-to-subscriptions: "#/components/schemas/restrict-to-subscriptions"
        propertyName: type
      properties:
        type:
          description: Redemption's additional restriction type
          enum:
            - discounts-per-redemption
            - minimum-order-amount
            - restrict-to-invoices
            - restrict-to-plans
            - restrict-to-subscriptions
            - restrict-to-products
            - paid-by-time
          type: string
      required:
        - type
      type: object
    Redsys:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantCode:
                  description: Redsys Gateway merchant code
                  format: password
                  type: string
                secretCode:
                  description: Redsys Gateway secret code
                  format: password
                  type: string
              required:
                - merchantCode
                - secretCode
              type: object
          required:
            - credentials
          type: object
      description: Redsys Gateway config
    RefundUrlLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - refundUrl
          type: string
      required:
        - rel
      type: object
    ResetPasswordToken:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        credentialId:
          description: Token's credential ID
          readOnly: true
          type: string
        expiredTime:
          description: Password expired time
          format: date-time
          type: string
        token:
          description: The token's identifier string
          readOnly: true
          type: string
        username:
          description: The token's username
          type: string
      required:
        - username
        - password
      type: object
    ResourceCustomFields:
      description: >
        "Custom Fields list as a map `{"custom field name": "custom field
        value", ...}"`.

        The format must follow the saved format (see Custom Fields section for the formats).
      type: object
    ResourceId:
      description: The resource ID. Defaults to UUID v4
      example: 4f6cf35x-2c4y-483z-a0a9-158621f77a21
      maxLength: 50
      type: string
    RetriedTransactionEmbed:
      description: Parent Transaction object
      properties:
        retriedTransaction:
          $ref: "#/components/schemas/Transaction"
      readOnly: true
      type: object
    RetriedTransactionLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - retriedTransaction
          type: string
      required:
        - rel
      type: object
    RiskMetadata:
      properties:
        accuracyRadius:
          description: Accuracy radius for specified ipAddress (kilometers)
          readOnly: true
          type: integer
        city:
          description: City for specified ipAddress
          example: New York
          readOnly: true
          type: string
        country:
          description: Country ISO Alpha-2 code for specified ipAddress
          example: US
          maxLength: 2
          readOnly: true
          type: string
        distance:
          description: Distance between IP Address and Billing Address geolocation
            (kilometers)
          readOnly: true
          type: integer
        fingerprint:
          description: The fingerprint
          type: string
        httpHeaders:
          additionalProperties:
            type: string
          description: HTTP headers
          example:
            Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
            User-Agent: Mozilla/5.0
          type: object
        ipAddress:
          description: The customer's IP
          format: ipv4
          type: string
        isHosting:
          description: True if customer's ip address is related to hosting
          readOnly: true
          type: boolean
        isProxy:
          description: True if customer's ip address is related to proxy
          readOnly: true
          type: boolean
        isTor:
          description: True if customer's ip address is related to TOR
          readOnly: true
          type: boolean
        isVpn:
          description: True if customer's ip address is related to VPN
          readOnly: true
          type: boolean
        isp:
          description: Internet Service Provider name, if available
          readOnly: true
          type: string
        latitude:
          description: Latitude for specified ipAddress
          format: double
          readOnly: true
          type: number
        longitude:
          description: Longitude for specified ipAddress
          format: double
          readOnly: true
          type: number
        postalCode:
          description: Postal code for specified ipAddress
          maxLength: 10
          readOnly: true
          type: string
        region:
          description: Region for specified ipAddress
          example: NY
          readOnly: true
          type: string
        score:
          description: Risk score computed per all the factors
          readOnly: true
          type: integer
        timeZone:
          description: Time zone for specified ipAddress
          example: America/New_York
          readOnly: true
          type: string
        vpnServiceName:
          description: VPN service name, if available
          readOnly: true
          type: string
      type: object
    Rotessa:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Rotessa credentials object
              properties:
                apiKey:
                  description: Rotessa api key
                  format: password
                  type: string
              required:
                - apiKey
              type: object
            settings:
              description: Rotessa settings object
              properties:
                delay:
                  description: Rotessa Gateway time delay for them to process transaction
                  type: integer
              required:
                - delay
              type: object
          required:
            - credentials
            - settings
          type: object
      description: Rotessa config
    SMSVoucher:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                AppId:
                  description: SMSVoucher AppId
                  type: string
              required:
                - AppId
              type: object
          required:
            - credentials
          type: object
      description: SMSVoucher Gateway config
    SMSVoucherInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: SMSVoucher payment instrument object
    Sagepay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                M_ID:
                  description: Sagepay Gateway merchant ID
                  type: string
                M_KEY:
                  description: Sagepay Gateway merchant key
                  format: password
                  type: string
              required:
                - M_ID
                - M_KEY
              type: object
          required:
            - credentials
          type: object
      description: Sagepay Gateway config
    SeamlessChex:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: SeamlessChex credentials object
              properties:
                publicKey:
                  description: SeamlessChex publishable key
                  type: string
                secretKey:
                  description: SeamlessChex secret key
                  format: password
                  type: string
              required:
                - publicKey
                - secretKey
              type: object
          required:
            - credentials
          type: object
      description: SeamlessChex config
    Search:
      properties:
        customers:
          description: List of returned customers
          items:
            allOf:
              - $ref: "#/components/schemas/Customer"
          readOnly: true
          type: array
        invoices:
          description: List of returned invoices
          items:
            allOf:
              - $ref: "#/components/schemas/Invoice"
          readOnly: true
          type: array
        orders:
          description: List of returned orders
          items:
            allOf:
              - $ref: "#/components/schemas/Subscription"
          readOnly: true
          type: array
        searched:
          description: Names of searched resources, even if they returned nothing
          items:
            type: string
          readOnly: true
          type: array
        transactions:
          description: List of returned transactions
          items:
            allOf:
              - $ref: "#/components/schemas/Transaction"
          readOnly: true
          type: array
      type: object
    SecureTrading:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: SecureTrading credentials object
              properties:
                password:
                  description: SecureTrading web service password
                  format: password
                  type: string
                username:
                  description: SecureTrading web service username
                  type: string
                websiteId:
                  description: Website ID
                  type: string
              required:
                - websiteId
                - username
                - password
              type: object
            mpi:
              $ref: "#/components/schemas/SecureTradingMpis"
          required:
            - credentials
          type: object
      description: SecureTrading config
    SecureTradingMpi:
      allOf:
        - $ref: "#/components/schemas/SecureTradingMpis"
      description: SecureTrading Mpi
    SecureTradingMpis:
      description: SecureTrading Mpis
      discriminator:
        mapping:
          SecureTradingMpi: "#/components/schemas/SecureTradingMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - SecureTradingMpi
      required:
        - name
      type: object
    SelfLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - self
          type: string
      required:
        - rel
      type: object
    ServerTimestamp:
      description: Read-only timestamp, automatically assigned on back-end.
      format: date-time
      readOnly: true
      type: string
    ServicePeriodAnchorInstruction:
      default:
        method: immediately
      description: >
        Instruction for calculating the service period anchor.

        This is used in conjunction with the **subscription start** to calculate the time the service period starts and ends.
      discriminator:
        mapping:
          day-of-month: "#/components/schemas/day-of-month"
          day-of-week: "#/components/schemas/day-of-week"
          immediately: "#/components/schemas/immediately"
        propertyName: method
      properties:
        method:
          default: immediately
          enum:
            - immediately
            - day-of-month
            - day-of-week
          type: string
      required:
        - method
      type: object
    ShippingZone:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        countries:
          description: >
            Countries covered by the shipping zone. A country can only belong
            to one shipping zone (no overlapping).

            This property can be empty or null to create a default shipping zone for countries that were not specified in other zones.
          items:
            description: Country ISO Alpha-2 code
            pattern: ^[A-Z]{2}$
            type: string
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The shipping zone created time
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The shipping zone identifier string
          readOnly: true
        isDefault:
          description: Is this Shipping Zone default
          readOnly: true
        name:
          description: The shipping zone name
          maxLength: 255
          type: string
        rates:
          description: Price-based shipping rate instructions
          items:
            allOf:
              - $ref: "#/components/schemas/PriceBasedShippingRate"
            description: Price based shipping rate instruction
          type: array
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The shipping zone updated time
      required:
        - name
      type: object
    SignedLinkLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - signedLink
          type: string
      required:
        - rel
      type: object
    Skrill:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Skrill credentials object
              properties:
                accountEmail:
                  description: Email address of your Skrill merchant account
                  type: string
                mqiPassword:
                  description: Password used during MQI/API requests
                  format: password
                  type: string
                secretWord:
                  description: Secret word used for MD5 signature verifications
                  format: password
                  type: string
              required:
                - accountEmail
                - secretWord
              type: object
          required:
            - credentials
          type: object
      description: Skrill config
    Skrill-Rapid-TransferInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: Skrill Rapid Transfer payment instrument object
    SmartInvoice:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: SmartInvoice credentials object
              properties:
                applicationId:
                  description: SmartInvoice application UID
                  format: password
                  type: string
                merchantId:
                  description: SmartInvoice merchant account UID
                  type: string
              required:
                - merchantId
                - applicationId
              type: object
            mpi:
              $ref: "#/components/schemas/SmartInvoiceMpis"
          required:
            - credentials
          type: object
      description: SmartInvoice config
    SmartInvoiceMpi:
      allOf:
        - $ref: "#/components/schemas/SmartInvoiceMpis"
      description: SmartInvoice Integrated
    SmartInvoiceMpis:
      description: SmartInvoice Mpis
      discriminator:
        mapping:
          SmartInvoiceMpi: "#/components/schemas/SmartInvoiceMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - SmartInvoiceMpi
      required:
        - name
      type: object
    Sofort:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Sofort credentials object
              properties:
                configKey:
                  description: Sofort configuration key
                  type: string
              required:
                - configKey
              type: object
          required:
            - credentials
          type: object
      description: Sofort config
    SparkPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: SparkPay credentials object
              properties:
                secretKey:
                  description: SparkPay secret key
                  format: password
                  type: string
                shopId:
                  description: SparkPay shop ID
                  type: string
              required:
                - shopId
                - secretKey
              type: object
          required:
            - credentials
          type: object
      description: SparkPay config
    StaticGateway:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - type: object
      description: StaticGateway Gateway config
    Stripe:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                redirectUrl:
                  description: Stripe Gateway redirect url
                  format: url
                  type: string
              required:
                - redirectUrl
              type: object
          required:
            - credentials
          type: object
      description: Stripe Gateway config
    Subscription:
      discriminator:
        mapping:
          one-time-order: "#/components/schemas/one-time-order"
          subscription-order: "#/components/schemas/subscription-order"
        propertyName: orderType
      properties:
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/RecentInvoiceEmbed"
              - $ref: "#/components/schemas/InitialInvoiceEmbed"
              - $ref: "#/components/schemas/CustomerEmbed"
              - $ref: "#/components/schemas/WebsiteEmbed"
              - $ref: "#/components/schemas/LeadSourceEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
              - $ref: "#/components/schemas/InitialInvoiceLink"
              - $ref: "#/components/schemas/RecentInvoiceLink"
              - $ref: "#/components/schemas/WebsiteLink"
          minItems: 1
          readOnly: true
          type: array
        activationTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Subscription activation time
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Billing address
          nullable: true
        billingStatus:
          description: |
            The billing status of the most recent invoice.  It may
            help you determine if you should change the service status
            such as suspending the service.
          enum:
            - unpaid
            - past-due
            - delinquent
            - paid
            - voided
            - refunded
            - disputed
            - voided
          readOnly: true
          type: string
        couponIds:
          description: >
            A list of coupons to redeem on the customer and restrict to this
            subscription.

            Read more about [coupons here](https://help.rebilly.com/invoices-and-subscriptions/coupons-discounts).


            This parameter respects the following logic:


            - When not passed then applied coupons will not be changed.


            - When empty array passed then all applied coupon redemptions will be canceled.


            - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons

            will not change their state, applied coupons that are not presented in passed list will be canceled.


            If list of applied coupons on pending subscription will be changed due to this param during update subscription,
             Invoice for the subscription will be reissued.
          items:
            description: Coupon ID
            type: string
          nullable: true
          type: array
          writeOnly: true
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Unique id for each customer
        deliveryAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Delivery address
          nullable: true
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Subscription identifier string
          readOnly: true
        initialInvoiceId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Unique id for the initial invoice
          readOnly: true
        items:
          items:
            properties:
              planId:
                allOf:
                  - $ref: "#/components/schemas/ResourceId"
                description: Unique id for each plan
              quantity:
                description: Number of units of the product on the given plan
                type: integer
            required:
              - planId
            type: object
          minItems: 1
          type: array
        orderType:
          default: subscription-order
          description: |
            Specifies the type of order, a subscription or a one-time purchase.
          enum:
            - subscription-order
            - one-time-order
          type: string
        poNumber:
          description: Purchase order number, will be displayed on the issued invoices
          example: PO123456
          nullable: true
          type: string
        recentInvoiceId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Unique id for the most recently issued invoice. It might not be
            `paid` yet.
          readOnly: true
        revision:
          description: >
            The number of times the subscription data has been modified.

            The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.
          readOnly: true
          type: integer
        riskMetadata:
          allOf:
            - $ref: "#/components/schemas/RiskMetadata"
          description: Risk metadata. If null, the value would coalesce to the risk
            metadata captured when creating the payment token.
          example: null
          nullable: true
        websiteId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Unique id for each website
      required:
        - orderType
        - customerId
        - websiteId
        - items
      type: object
    SubscriptionCancellation:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        appliedInvoiceId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The identifier of the invoice where the cancellation fees or
            credits are applied.
          readOnly: true
        canceledBy:
          default: customer
          description: Who did the cancellation
          enum:
            - merchant
            - customer
          type: string
        canceledTime:
          description: The cancellation time (when the status is confirmed which is by
            default unless specified "draft").
          format: date-time
          readOnly: true
          type: string
        churnTime:
          description: The time when the subscription will be deactivated.
          format: date-time
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The time of resource creation (when it is posted).
        description:
          description: Cancel reason description in free form
          maxLength: 255
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Cancellation identifier
          readOnly: true
        lineItemSubtotal:
          description: Subtotal of the line items which will be added after the
            subscription's cancellation
          example: 49.95
          readOnly: true
          type: number
        lineItems:
          allOf:
            - $ref: "#/components/schemas/UpcomingInvoiceItemCollection"
          description: Items to be added to the new invoice. Proration item is generated
            and added automatically.
        prorated:
          default: false
          description: >
            Defines if the customer gets a pro-rata credit for the time
            remaining between `churnTime` and

            subscription's next renewal time.
          type: boolean
        proratedInvoiceId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Identifier of the invoice on which the cancellation proration is
            calculated.
          readOnly: true
        reason:
          default: other
          description: Cancellation reason
          enum:
            - did-not-use
            - did-not-want
            - missing-features
            - bugs-or-problems
            - do-not-remember
            - risk-warning
            - contract-expired
            - too-expensive
            - other
            - billing-failure
          type: string
        status:
          default: confirmed
          description: >
            "draft" defines that the cancellation isn't applied on an invoice
            and subscription but

            can be inspected to see the charge.

            "confirmed" will set a subscription to be canceled when the `churnTime` is reached.

            "completed" is a read-only status which is set by the system when the churnTime is reached.

            The cancellation may not be changed or deleted when the status is "completed".
          enum:
            - draft
            - confirmed
            - completed
            - revoked
          type: string
        subscriptionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Identifier of the canceled subscription
      required:
        - subscriptionId
        - churnTime
      type: object
    SubscriptionCancellationState:
      properties:
        cancelCategory:
          description: Cancel category
          enum:
            - billing-failure
            - did-not-use
            - did-not-want
            - missing-features
            - bugs-or-problems
            - do-not-remember
            - risk-warning
            - contract-expired
            - too-expensive
            - never-started
            - switched-plan
            - other
          readOnly: true
          type: string
        cancelDescription:
          description: Cancel reason description in free form
          maxLength: 255
          readOnly: true
          type: string
        canceledBy:
          description: Canceled by
          enum:
            - merchant
            - customer
            - rebilly
          readOnly: true
          type: string
        canceledTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Subscription canceled time
      type: object
    SubscriptionChange:
      properties:
        effectiveTime:
          description: The date from which the renewal time (for `reset` operations) and
            proration calculations are made.  If omitted, it will default to the
            current time.
          format: date-time
          type: string
        planId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The plan identifier string
        preview:
          default: false
          description: If set to true, it will not change the subscription.  It allows for
            a way to preview the changes that would be made to a subscription.
          type: boolean
        prorated:
          description: >
            Whether or not to give a pro rata credit for the amount of time
            remaining between the `effectiveTime` and the end of the current
            period.

            In addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well,

            for the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size.
          type: boolean
        quantity:
          description: Number of units of the product on the given plan. If null or
            omitted, current quantity will not be changed.
          type: integer
        renewalPolicy:
          description: The value determines whether the subscription retains its current
            `renewalTime` or resets it to a newly calculated `renewalTime`.
          enum:
            - reset
            - retain
          type: string
      required:
        - planId
        - renewalPolicy
        - prorated
      type: object
    SubscriptionInvoice:
      properties:
        transactionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: If present, applies a payment to the invoice created.  If the
            payment is for the invoice total, it would be marked as paid.
      type: object
    SubscriptionLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - subscription
          type: string
      required:
        - rel
      type: object
    SubscriptionMetadata:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/CustomerLink"
              - $ref: "#/components/schemas/WebsiteLink"
              - $ref: "#/components/schemas/LeadSourceLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Subscription created time
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Subscription updated time
      type: object
    SubscriptionReactivation:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        cancellationId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Identifier of the related cancellation
          readOnly: true
        createdTime:
          description: The time of resource creation (when it is posted).
          format: date-time
          readOnly: true
          type: string
        description:
          description: Reactivation reason description in free form
          maxLength: 255
          type: string
        effectiveTime:
          description: >
            The date from which the service period would start, unless the
            subscription is canceled but still active.

            In case the susbcription is still active, the subscription will continue the current service period.

            If omitted, it will default to the current time.
          format: date-time
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Reactivation identifier
          readOnly: true
        renewalTime:
          description: >
            The time of the next subscription renewal. If omitted then it is
            computed from the effective time.

            If the subscription is canceled but active it is ignored, so the next renewal will happen as scheduled.
          format: date-time
          type: string
        subscriptionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Identifier of the reactivated subscription
      required:
        - subscriptionId
      type: object
    Tag:
      description: Tag
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The tag's created time
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The tag's identifier string
          readOnly: true
        name:
          description: The tag's unique name, which is case-insensitive.
          example: New
          maxLength: 255
          pattern: ^[@~\-\.\w\s]+$
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The tag's updated time
      required:
        - name
      type: object
    TestProcessor:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            mpi:
              $ref: "#/components/schemas/TestProcessorMpis"
          type: object
      description: TestProcessor Gateway config
    TestProcessorMpi:
      allOf:
        - $ref: "#/components/schemas/TestProcessorMpis"
      description: TestProcessor Integrated
    TestProcessorMpis:
      description: TestProcessorMpis Mpis
      discriminator:
        mapping:
          TestSandboxMpi: "#/components/schemas/TestProcessorMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - TestSandboxMpi
      required:
        - name
      type: object
    ThreeDSecure:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        amount:
          description: Transaction amount
          format: double
          type: number
        cavv:
          description: The 3D Secure entry cardholder authentication verification value
          type: string
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The 3D Secure entry created time
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Related customer ID
        eci:
          description: The 3D Secure entry electronic commerce indicator
          type: integer
        enrolled:
          description: Is the cardholder enrolled in 3DSecure
          enum:
            - Y
            - N
            - U
          type: string
        enrollmentEci:
          description: The 3D Secure entry enrollment eci
          type: string
        gatewayAccountId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Related gateway account ID
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The 3D Secure entry identifier string
          readOnly: true
        payerAuthResponseStatus:
          description: The 3D Secure entry Auth Response Status
          enum:
            - Y
            - N
            - U
            - A
          type: string
        paymentCardId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Related payment card ID
        signatureVerification:
          description: If signature was verified
          enum:
            - Y
            - N
          type: string
        websiteId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Related Website ID
        xid:
          description: The 3D Secure entry transaction Id
          type: string
      required:
        - enrolled
        - enrollmentEci
        - customerId
        - gatewayAccountId
        - paymentCardId
        - websiteId
        - currency
        - amount
      type: object
    ThreeDSecureResult:
      properties:
        authenticated:
          description: The 3D Secure entry Auth Response Status
          enum:
            - yes
            - no
            - not applicable
            - attempted
          type: string
        enrolled:
          description: Is the cardholder enrolled in 3D Secure
          enum:
            - yes
            - no
            - invalid card/timeout
            - unavailable
          type: string
        liability:
          enum:
            - protected
            - not protected
            - protected (attempt)
          type: string
      readOnly: true
      required:
        - enrolled
        - authenticated
        - liability
      type: object
    TimelineAction:
      discriminator:
        mapping:
          redemption-cancel: "#/components/schemas/redemption-cancel"
          resend-email: "#/components/schemas/resend-email"
        propertyName: action
      properties:
        action:
          enum:
            - resend-email
            - redemption-cancel
          type: string
      readOnly: true
      type: object
    TimelineExtraData:
      description: Additional data
      properties:
        actions:
          description: Actions available to a Timeline message. Can be empty in case no
            actions are available for a message
          items:
            $ref: "#/components/schemas/TimelineAction"
          minItems: 0
          type: array
        author:
          description: Timeline comment author data
          properties:
            userFullName:
              type: string
            userId:
              type: string
          type: object
        links:
          items:
            properties:
              placeholder:
                example: KYC Document
                type: string
              resourceId:
                $ref: "#/components/schemas/ResourceId"
              resourceType:
                enum:
                  - kyc-document
                  - invoice
                  - subscription
                  - transaction
                  - email-message
                  - dispute
                  - credit-memo
                  - coupon
                type: string
            type: object
          type: array
        mentions:
          additionalProperties:
            example:
              "@test@mail.com": userId-1
            type: string
          type: object
        tables:
          items:
            $ref: "#/components/schemas/TimelineTable"
          minItems: 0
          type: array
      readOnly: true
      type: object
    TimelineTable:
      description: Additional information about Timeline message
      discriminator:
        mapping:
          three-columns: "#/components/schemas/three-columns"
          two-columns: "#/components/schemas/two-columns"
        propertyName: type
      properties:
        footer:
          description: Data table footer
          type: string
        title:
          description: Data table title
          type: string
        type:
          enum:
            - two-columns
            - three-columns
          type: string
      type: object
    ToditoCash:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: ToditoCash credentials object
              properties:
                apiKey:
                  description: ToditoCash API key
                  format: password
                  type: string
              required:
                - apiKey
              type: object
          required:
            - credentials
          type: object
      description: ToditoCash config
    TokenBankAccountInstrument:
      discriminator:
        mapping:
          BBAN: "#/components/schemas/BBANInstrument"
          IBAN: "#/components/schemas/IBANInstrument"
        propertyName: accountNumberType
      properties:
        accountNumberType:
          default: BBAN
          description: Bank's Account Number type. A valid value is basic bank account
            number (BBAN) or international bank account number (IBAN).
          enum:
            - IBAN
            - BBAN
          type: string
      required:
        - accountNumberType
      type: object
    TokenMethod:
      description: The token payment method
      enum:
        - cash
        - check
        - paypal
        - Alipay
        - AstroPay Card
        - bank-transfer
        - bitcoin
        - Boleto
        - cash-deposit
        - CASHlib
        - CashToCode
        - China UnionPay
        - domestic-cards
        - echeck
        - ecoPayz
        - ecoVoucher
        - EPS
        - ePay.bg
        - Flexepin
        - Giropay
        - Gpaysafe
        - iDebit
        - iDEAL
        - INOVAPAY-pin
        - INOVAPAY-wallet
        - InstaDebit
        - instant-bank-transfer
        - Interac-online
        - Interac-eTransfer
        - invoice
        - Jeton
        - Klarna
        - miscellaneous
        - Neteller
        - Nordea-Solo
        - OchaPay
        - online-bank-transfer
        - Onlineueberweisen
        - Paysafecard
        - Pay4Fun
        - PinPay
        - phone
        - POLi
        - Przelewy24
        - QQPay
        - Resurs
        - SEPA
        - Skrill
        - Skrill Rapid Transfer
        - SMSVoucher
        - SparkPay
        - Trustly
        - UPayCard
        - voucher
        - WeChat Pay
      type: string
    TokenPaymentCardInstrument:
      description: Payment Token instrument object
      properties:
        bin:
          description: Payment Card BIN (the PAN's first 6 digits)
          format: bin
          readOnly: true
          type: string
        brand:
          allOf:
            - $ref: "#/components/schemas/payment-card-brands"
          readOnly: true
        cvv:
          description: Payment Card CVV/CVC
          type: string
          writeOnly: true
        expMonth:
          description: Payment Card expiry month
          type: integer
        expYear:
          description: Payment Card expiry year
          type: integer
        last4:
          description: Payment Card PAN's last 4 digits
          readOnly: true
          type: string
        pan:
          description: Payment Card PAN (Primary Account Number)
          type: string
          writeOnly: true
      required:
        - pan
        - billingAddress
        - expMonth
        - expYear
      type: object
    Transaction:
      properties:
        3ds:
          allOf:
            - $ref: "#/components/schemas/ThreeDSecureResult"
        _embedded:
          description: Any embedded objects available that are requested by the `expand`
            querystring parameter.
          items:
            anyOf:
              - $ref: "#/components/schemas/ParentTransactionEmbed"
              - $ref: "#/components/schemas/RetriedTransactionEmbed"
              - $ref: "#/components/schemas/GatewayAccountEmbed"
              - $ref: "#/components/schemas/CustomerEmbed"
              - $ref: "#/components/schemas/LeadSourceEmbed"
              - $ref: "#/components/schemas/WebsiteEmbed"
              - $ref: "#/components/schemas/PaymentCardEmbed"
              - $ref: "#/components/schemas/BankAccountEmbed"
              - $ref: "#/components/schemas/InvoicesEmbed"
          minItems: 1
          readOnly: true
          type: array
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: "#/components/schemas/SelfLink"
              - $ref: "#/components/schemas/WebsiteLink"
              - $ref: "#/components/schemas/CustomerLink"
              - $ref: "#/components/schemas/GatewayAccountLink"
              - $ref: "#/components/schemas/PaymentCardLink"
              - $ref: "#/components/schemas/ParentTransactionLink"
              - $ref: "#/components/schemas/RetriedTransactionLink"
              - $ref: "#/components/schemas/LeadSourceLink"
              - $ref: "#/components/schemas/ApprovalUrlLink"
              - $ref: "#/components/schemas/CancelUrlLink"
              - $ref: "#/components/schemas/RefundUrlLink"
              - $ref: "#/components/schemas/DisputeLink"
              - $ref: "#/components/schemas/InvoicesLink"
          minItems: 1
          readOnly: true
          type: array
        acquirerName:
          allOf:
            - $ref: "#/components/schemas/acquirer-name"
          description: Acquirer name, available only when transaction use gateway, else null
          readOnly: true
        amount:
          description: The transactions's amount
          format: double
          readOnly: true
          type: number
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Billing Address
        billingDescriptor:
          description: The billing descriptor that appears on the periodic billing
            statement. Commonly 12 or fewer characters for a credit card
            statement.
          readOnly: true
          type: string
        bin:
          description: Payment Card BIN
          format: bin
          readOnly: true
          type: string
        bumpOffer:
          description: Bump offer information. Null if hasBumpOffer is false
          properties:
            bonus:
              description: Bonus amount and currency
              properties:
                amount:
                  format: double
                  type: number
                currency:
                  allOf:
                    - $ref: "#/components/schemas/CurrencyCode"
              type: object
            bump:
              description: Bump amount and currency
              properties:
                amount:
                  format: double
                  type: number
                currency:
                  allOf:
                    - $ref: "#/components/schemas/CurrencyCode"
              type: object
            language:
              description: The language of the bump offer that was displayed to user (useful
                for finding any translation problems)
              type: string
            order:
              description: Initial amount and currency
              properties:
                amount:
                  format: double
                  type: number
                currency:
                  allOf:
                    - $ref: "#/components/schemas/CurrencyCode"
              type: object
            outcome:
              description: Bump offer outcome
              enum:
                - rejected
                - selected
                - unknown
              type: string
            usdBonus:
              description: The amount of bonus amount translated to USD
              format: double
              type: number
            usdBump:
              description: The amount of bump amount translated to USD
              format: double
              type: number
            usdOrder:
              description: The amount of initial amount translated to USD
              format: double
              type: number
            version:
              description: The name of the version that was picked (useful for measuring split
                tests)
              type: string
          readOnly: true
          type: object
        childTransactions:
          description: The child transaction IDs
          items:
            $ref: "#/components/schemas/ResourceId"
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Transaction created time
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
          readOnly: true
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Customer's ID
          readOnly: true
        dcc:
          description: Dynamic Currency Conversion detailed information. Null if hasDcc is
            false
          properties:
            base:
              description: Initial amount and currency to convert from
              properties:
                amount:
                  format: double
                  type: number
                currency:
                  allOf:
                    - $ref: "#/components/schemas/CurrencyCode"
              type: object
            outcome:
              description: Dynamic Currency Conversion outcome
              enum:
                - rejected
                - selected
                - unknown
              type: string
            quote:
              description: Suggested amount and currency to convert to
              properties:
                amount:
                  format: double
                  type: number
                currency:
                  allOf:
                    - $ref: "#/components/schemas/CurrencyCode"
              type: object
            usdMarkup:
              description: The amount of markup translated to USD
              format: double
              type: number
          readOnly: true
          type: object
        description:
          description: The payment description
          maxLength: 255
          type: string
        gateway:
          description: The related gateway information
          properties:
            avsResponse:
              description: The AVS gateway's response
              properties:
                code:
                  description: The response code
                  type: string
                message:
                  description: The response message
                  type: string
                originalCode:
                  description: The raw response code
                  type: string
                originalMessage:
                  description: The raw response message
                  type: string
              type: object
            cvvResponse:
              description: The CVV gateway's response
              properties:
                code:
                  description: The response code
                  type: string
                message:
                  description: The response message
                  type: string
                originalCode:
                  description: The raw response code
                  type: string
                originalMessage:
                  description: The raw response message
                  type: string
              type: object
            response:
              description: The gateway's response
              properties:
                code:
                  description: The gateway's response code
                  type: string
                message:
                  description: The gateway's response message
                  type: string
                originalCode:
                  description: The raw, unmapped gateway's response code
                  type: string
                originalMessage:
                  description: The raw, unmapped gateway's response message
                  type: string
                type:
                  description: The gateway's response type
                  type: string
              type: object
          readOnly: true
          type: object
        gatewayAccountId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The transactions's Gateway Account ID
          readOnly: true
        gatewayName:
          allOf:
            - $ref: "#/components/schemas/gateway-name"
          description: Payment Gateway name, available only when transaction use gateway,
            else null
          readOnly: true
        gatewayTransactionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The gateway's transaction ID
          readOnly: true
        hadDiscrepancy:
          description: True if the transaction has been updated due to a disprepancy with
            its source of truth
          readOnly: true
          type: boolean
        has3ds:
          readOnly: true
          type: boolean
        hasBumpOffer:
          description: True if transaction has a Bump offer
          readOnly: true
          type: boolean
        hasDcc:
          description: True if transaction has Dynamic Currency Conversion applied
          readOnly: true
          type: boolean
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The transaction identifier string
          readOnly: true
        invoiceIds:
          description: The invoice IDs related to transaction
          items:
            $ref: "#/components/schemas/ResourceId"
          readOnly: true
          type: array
        isDisputed:
          description: True if transaction is disputed
          readOnly: true
          type: boolean
        isRebill:
          readOnly: true
          type: boolean
        isReconciled:
          description: True if the transaction has been verified with gateway batch data
          readOnly: true
          type: boolean
        isRetry:
          description: True if this transaction is retry.
          readOnly: true
          type: boolean
        method:
          allOf:
            - $ref: "#/components/schemas/Method"
          description: Payment Method
        notificationUrl:
          $ref: "#/components/schemas/TransactionNotificationUrl"
        orderId:
          deprecated: true
          description: The transactions's order ID.  This ID must be unique within a 24
            hour period. This field was renamed to the `requestId`.
          type: string
        parentTransactionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The transactions's parent ID
          readOnly: true
        paymentInstrument:
          $ref: "#/components/schemas/PaymentInstrument"
        planIds:
          description: The plan IDs related to transaction's subscription(s)
          items:
            $ref: "#/components/schemas/ResourceId"
          readOnly: true
          type: array
        processedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Transaction processed time
        purchaseAmount:
          description: The transactions's purchase amount
          format: double
          readOnly: true
          type: number
        purchaseCurrency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
          readOnly: true
        rebillNumber:
          description: The transactions's rebill number
          readOnly: true
          type: integer
        redirectUrl:
          $ref: "#/components/schemas/TransactionRedirectUrl"
        referenceData:
          additionalProperties:
            type: string
          description: Transaction reference data
          example:
            gatewayTransactionId: GAT123
          nullable: true
          readOnly: true
          type: object
        reportAmount:
          description: The transactions's amount to report
          format: double
          readOnly: true
          type: number
        reportCurrency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
          readOnly: true
        requestAmount:
          description: The transactions's amount received in the payment request
          format: double
          readOnly: true
          type: number
        requestCurrency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
          readOnly: true
        requestId:
          description: The transactions's request ID.  This ID must be unique within a 24
            hour period. Use this field to prevent duplicated transactions.
          type: string
        result:
          description: Transaction result
          enum:
            - abandoned
            - approved
            - canceled
            - declined
            - unknown
          readOnly: true
          type: string
        retriedTransactionId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The retried transaction ID
          readOnly: true
        retriesResult:
          description: Retries sequence result
          enum:
            - approved
            - canceled
            - declined
            - scheduled
          readOnly: true
          type: string
        retryInstruction:
          $ref: "#/components/schemas/PaymentRetry"
        retryNumber:
          description: The position in the sequence of retries
          readOnly: true
          type: integer
        revision:
          description: >
            The number of times the transaction data has been modified.

            The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.
          readOnly: true
          type: integer
        riskMetadata:
          allOf:
            - $ref: "#/components/schemas/RiskMetadata"
          description: Risk metadata
        riskScore:
          description: The transactions's risk score
          readOnly: true
          type: integer
        scheduledTime:
          description: The time the transaction is scheduled for collection
          format: date-time
          type: string
        status:
          description: Transaction status
          enum:
            - completed
            - conn-error
            - disputed
            - never-sent
            - partially-refunded
            - pending
            - refunded
            - sending
            - timeout
            - voided
            - waiting-approval
            - waiting-capture
            - waiting-gateway
            - waiting-refund
          readOnly: true
          type: string
        subscriptionIds:
          description: The subscription IDs related to transaction's invoice(s)
          items:
            $ref: "#/components/schemas/ResourceId"
          readOnly: true
          type: array
        type:
          description: Transaction type
          enum:
            - authorize
            - capture
            - credit
            - refund
            - sale
            - void
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Transaction updated time
        velocity:
          description: The number of transactions by the same customer in the past 24 hours
          type: integer
        websiteId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: Website's ID
          readOnly: true
      type: object
    TransactionAllocationsLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - transactionAllocations
          type: string
      required:
        - rel
      type: object
    TransactionEmbed:
      description: Transaction object
      properties:
        transaction:
          $ref: "#/components/schemas/Transaction"
      readOnly: true
      type: object
    TransactionGatewayLog:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/TransactionLink"
          minItems: 1
          type: array
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: The log entry created time
        duration:
          description: The request time, msec
          type: integer
        headers:
          description: The request headers
          items:
            type: string
          type: array
        request:
          description: The request body
          type: string
        response:
          description: The response body
          type: string
        url:
          description: The request URL
          type: string
      readOnly: true
      type: object
    TransactionLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - transaction
          type: string
      required:
        - rel
      type: object
    TransactionNotificationUrl:
      description: >
        The URL where a server-to-server POST notification will be
        sent.  It  will be sent when the

        transaction's result is finalized after a timeout or an offsite interaction. Do not trust the

        notification; follow with a GET request to confirm the result of the transaction. Please

        respond with a 2xx HTTP status code, or we will reattempt the request again.

        The 2 placeholders are available to use in this URI: `{id}` and `{result}`.
      format: uri
      type: string
    TransactionRedirectUrl:
      description: >
        The URL to redirect the end-user when an offsite transaction is
        completed.

        The 2 placeholders are available to use in this URI: `{id}` and `{result}`.

        Defaults to the website's configured URL.
      format: uri
      type: string
    TransactionRefund:
      properties:
        amount:
          description: Refund amount
          format: double
          type: number
      required:
        - amount
      type: object
    TransactionRequest:
      properties:
        amount:
          description: >
            The transaction amount.  Use `0` for a zero dollar verification.
            This is important if

            you want to authorize a payment instrument before giving access to a free trial, for example.
          example: 97.97
          format: double
          type: number
        billingAddress:
          allOf:
            - $ref: "#/components/schemas/ContactObject"
          description: Billing Address. If not supplied, we use the billing address
            associated with the payment instrument, and then customer.
          nullable: true
        currency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
        customFields:
          $ref: "#/components/schemas/ResourceCustomFields"
        customerId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The customer identifier string
        description:
          description: The payment description
          maxLength: 255
          nullable: true
          type: string
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The payment identifier string
          readOnly: true
        invoiceIds:
          description: >
            The array of invoice identifiers.  It's important to note that the
            transaction

            amount can be more or less than the combined invoice amounts.  If the transaction

            is a type `sale` and it is `approved` it will be applied to these invoices in

            the order of the first issued invoice to the most recently issued invoice.  If

            there are enough funds to fully pay an invoice, the invoice status will be marked

            as paid.
          items:
            $ref: "#/components/schemas/ResourceId"
          nullable: true
          type: array
        isProcessedOutside:
          default: false
          description: True if transaction was processed outside Rebilly
          type: boolean
        notificationUrl:
          description: >
            The URL where a server-to-server notification request type `POST`
            with a transaction payload will be sent

            when the transaction's result is finalized. Do not trust the notification;

            follow with a `GET` request to confirm the result of the transaction.  Please respond with a `2xx`

            HTTP status code, or we will reattempt the request again.
          format: uri
          nullable: true
          type: string
        paymentInstrument:
          $ref: "#/components/schemas/PaymentInstrument"
        processedTime:
          description: The time the transaction was processed. Can be specified only if
            transaction was processed outside Rebilly.
          format: date-time
          type: string
        redirectUrl:
          description: The URL to redirect the end-user when an offsite transaction is
            completed.  Defaults to the website's configured URL.
          format: uri
          nullable: true
          type: string
        requestId:
          description: The request id is **recommended**. It prevents duplicate
            transaction requests within a short period of time. If a duplicate
            request is sent with the same `requestId` it will be ignored to
            prevent double-billing anyone.  It must be unique within a 24-hour
            period.  We recommend generating a UUID v4 as its value.
          example: 44433322-2c4y-483z-a0a9-158621f77a21
          maxLength: 50
          nullable: true
          pattern: ^[\-\w]+$
          type: string
        type:
          description: >
            The type of transaction requested.

            You should always include the type within your API request.

            This supports a limited subset of Transaction types.  To refund or void, use the refund endpoint.

            To `capture` use the `sale` endpoint.  It will capture if there are any eligible

            transactions of type `authorize` that can be captured.
          enum:
            - sale
            - authorize
            - credit
          type: string
        websiteId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The website identifier string
      required:
        - websiteId
        - customerId
        - currency
        - amount
        - type
      type: object
    TransactionTimeline:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: "#/components/schemas/SelfLink"
          minItems: 1
          readOnly: true
          type: array
        extraData:
          $ref: "#/components/schemas/TimelineExtraData"
        id:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
          description: The Timeline message identifier string
          readOnly: true
        message:
          description: The message that describes the message details
          type: string
        occurredTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Timeline message time
          readOnly: true
        triggeredBy:
          description: Shows who or what triggered the Timeline message
          enum:
            - rebilly
            - app
            - direct-api
          readOnly: true
          type: string
        type:
          description: Timeline message type
          enum:
            - timeline-comment-created
            - transaction-approved
            - transaction-canceled
            - transaction-declined
            - transaction-abandoned
            - transaction-refunded
            - transaction-voided
            - transaction-discrepancy-found
            - transaction-amount-discrepancy-found
            - transaction-reconciled
            - transaction-initiated
            - transaction-retried
            - risk-score-changed
            - transaction-timeout-resolved
            - dispute-created
            - dispute-won
            - dispute-lost
            - dispute-responded
            - dispute-forfeited
            - dispute-changed
            - gateway-response-received
            - transaction-scheduled-time-changed
            - transaction-rules-processed
            - transaction-capture-delayed
            - transaction-captured
            - transaction-waiting-gateway
          readOnly: true
          type: string
      type: object
    UPayCard:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                key:
                  description: merchant key
                  format: password
                  type: string
                receiver_account:
                  description: merchant receiver account
                  type: string
                secret:
                  description: merchant secret
                  format: password
                  type: string
              required:
                - receiver_account
                - key
                - secret
              type: object
            settings:
              description: UpayCard settings object
              properties:
                tolerancePercentage:
                  description: Tolerance paercentage for settled amount
                  type: string
              type: object
          required:
            - credentials
          type: object
      description: UPayCard Gateway config
    UPayCardInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: SMSVoucher payment instrument object
    USAePay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                pin:
                  description: USAePay Gateway pin
                  format: password
                  type: string
                sourceKey:
                  description: USAePay Gateway source key
                  format: password
                  type: string
              required:
                - sourceKey
                - pin
              type: object
          required:
            - credentials
          type: object
      description: USAePay Gateway config
    UpcomingInvoiceItem:
      description: Line item
      properties:
        createdTime:
          allOf:
            - $ref: "#/components/schemas/ServerTimestamp"
          description: Date-time when the item was added to the subscription
        description:
          description: Description of line item
          type: string
        periodEndTime:
          description: Date-time when the period ends for this item
          format: date-time
          type: string
        periodStartTime:
          description: Date-time when the period begins for this item
          format: date-time
          type: string
        quantity:
          description: Quantity of line item
          example: 1
          type: integer
        type:
          description: Type of line item
          enum:
            - debit
            - credit
          type: string
        unitPriceAmount:
          description: Unit price of the line item
          example: 49.95
          format: double
          type: number
        unitPriceCurrency:
          allOf:
            - $ref: "#/components/schemas/CurrencyCode"
      required:
        - type
        - unitPriceAmount
        - unitPriceCurrency
        - quantity
      type: object
    UpcomingInvoiceItemCollection:
      items:
        $ref: "#/components/schemas/UpcomingInvoiceItem"
      type: array
    VantivLitle:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantId:
                  description: VantivLitle Gateway merchant ID
                  type: string
                password:
                  description: VantivLitle Gateway password
                  format: password
                  type: string
                username:
                  description: VantivLitle Gateway username
                  type: string
              required:
                - username
                - password
                - merchantId
              type: object
            mpi:
              $ref: "#/components/schemas/VantivLitleMpis"
          required:
            - credentials
          type: object
      description: VantivLitle Gateway config
    VantivLitleMpis:
      description: VantivLitle Mpis
      discriminator:
        mapping:
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaayMpi
            - Other
      required:
        - name
      type: object
    Wallet88:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: Wallet88 credentials object
              properties:
                password:
                  description: Wallet88 API password
                  format: password
                  type: string
                username:
                  description: Wallet88 API user
                  type: string
              required:
                - username
                - password
              type: object
          required:
            - credentials
          type: object
      description: Wallet88 config
    Walpay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantName:
                  description: Walpay Gateway merchant name
                  type: string
                merchantPin:
                  description: Walpay Gateway merchant pin
                  format: password
                  type: string
              required:
                - merchantName
                - merchantPin
              type: object
            mpi:
              $ref: "#/components/schemas/WalpayMpis"
          required:
            - credentials
          type: object
      description: Walpay Gateway config
    WalpayMpis:
      description: WalpayMpis Mpis
      discriminator:
        mapping:
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaayMpi
            - Other
      required:
        - name
      type: object
    WeChat-PayInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: WeChat Pay payment instrument object
    WebsiteEmbed:
      description: Website object
      properties:
        website:
          type: object
      readOnly: true
      type: object
    WebsiteLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - website
          type: string
      required:
        - rel
      type: object
    Wirecard:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                businessSignature:
                  description: Wirecard Gateway merchant business case signature
                  format: password
                  type: string
                delay:
                  description: Wirecard Gateway delay
                  type: integer
                merchantPassword:
                  description: Wirecard Gateway merchant password
                  format: password
                  type: string
                merchantUsername:
                  description: Wirecard Gateway merchant username
                  type: string
                sftpPrivateKey:
                  description: Wirecard sftp private key.
                  format: password
                  type: string
                sftpUsername:
                  description: Wirecard sftp username.
                  type: string
              required:
                - merchantUsername
                - merchantPassword
                - businessSignature
                - delay
              type: object
            mpi:
              $ref: "#/components/schemas/WirecardMpis"
          required:
            - credentials
          type: object
      description: Wirecard Gateway config
    WirecardMpi:
      allOf:
        - $ref: "#/components/schemas/WirecardMpis"
      description: Wirecard Integrated
    WirecardMpis:
      description: Wirecard Mpis
      discriminator:
        mapping:
          WirecardMpi: "#/components/schemas/WirecardMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - WirecardMpi
      required:
        - name
      type: object
    Worldpay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                merchantCode:
                  description: Worldpay Gateway merchant code
                  format: password
                  type: string
                merchantPassword:
                  description: Worldpay Gateway merchant password
                  format: password
                  type: string
              required:
                - merchantCode
                - merchantPassword
              type: object
            mpi:
              $ref: "#/components/schemas/WorldpayMpis"
          required:
            - credentials
          type: object
      description: Worldpay Gateway config
    WorldpayMpis:
      description: Worldpay Mpis
      discriminator:
        mapping:
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaayMpi
            - Other
      required:
        - name
      type: object
    Zotapay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                endpointId:
                  description: Zotapay's endpoint ID
                  type: string
                merchantId:
                  description: Zotapay's merchant ID
                  type: string
                merchantSecretKey:
                  description: Zotapay's merchant secret key
                  format: password
                  type: string
              required:
                - endpointId
                - merchantId
                - merchantSecretKey
              type: object
          required:
            - credentials
          type: object
      description: Zotapay Gateway config
    achInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
        - properties:
            bankAccountId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The bank account identifier string
          required:
            - bankAccountId
          type: object
      description: ACH payment instrument object
    acquirer-name:
      description: The acquirer name
      enum:
        - Alipay
        - AIB
        - ApcoPay
        - AsiaPaymentGateway
        - AstroPay Card
        - Ipay Options
        - B+S
        - Bambora
        - BitPay
        - Bank of America
        - Bank of Moscow
        - Bank of Rebilly
        - Bank One
        - BMO Harris Bank
        - Borgun
        - BraintreePayments
        - Cardknox
        - CASHlib
        - Catalunya Caixa
        - Chase
        - ChinaUnionPay
        - CIM
        - Citadel
        - Clearhaus
        - CODVoucher
        - Conekta
        - Coppr
        - Credorax
        - Cryptonator
        - ecoPayz
        - EcorePay
        - Elavon
        - EMS
        - EPG
        - Fifth Third Bank
        - Finrax
        - First Data Buypass
        - First Data Nashville
        - First Data North
        - First Data Omaha
        - FinTecSystems
        - Flexepin
        - Forte
        - FundSend
        - Gigadat
        - Global East
        - Gooney
        - Gpaysafe
        - Heartland
        - HSBC
        - iCanPay
        - iCheque
        - Ilixium
        - Ingenico
        - INOVAPAY
        - Intuit
        - Jeton
        - LPG
        - Masapay
        - Merrick
        - Mission Valley Bank
        - Moneris
        - NATWEST
        - Netbanking
        - Neteller
        - NinjaWallet
        - NMI
        - OchaPay
        - Onlineueberweisen
        - Other
        - Panamerican
        - Panda Bank
        - Paramount
        - ParamountEft
        - Pay4fun
        - PayCash
        - PaymenTechnologies
        - Paynetics
        - PayPal
        - Payr
        - Payvision
        - Peoples Trust Company
        - Privatbank
        - Prosa
        - QQPay
        - RBC
        - RBS WorldPay
        - RealTime
        - Rotessa
        - Skrill
        - SmartInvoice
        - SMSVoucher
        - Sofort
        - SparkPay
        - State Bank of Mauritius
        - Stripe
        - TBI
        - TestProcessor
        - ToditoCash
        - TrustPay
        - TSYS
        - UPayCard
        - Vantiv
        - VoicePay
        - Wallet88
        - WeChat Pay
        - Wells Fargo
        - Wing Hang Bank
        - Wirecard
        - WorldPay
        - Zotapay
      type: string
    and:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/logical"
      description: Logical AND
      type: object
    auto:
      allOf:
        - $ref: "#/components/schemas/CommonScheduleInstruction"
    bank-accountInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
        - properties:
            bankAccountId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The bank account identifier string
          required:
            - bankAccountId
          type: object
      description: ACH payment instrument object
    between:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - properties:
            max:
              type: string
            min:
              type: string
            path:
              type: string
          required:
            - path
            - min
            - max
          type: object
      description: Between condition
      type: object
    bitcoinInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: Bitcoin payment instrument object
    cashInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
        - properties:
            receivedBy:
              description: The receiver's name
              type: string
          type: object
      description: Cash payment instrument object
    checkInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
        - properties:
            reference:
              description: Reference data
              type: string
          type: object
      description: Check payment instrument object
    compare:
      properties:
        path:
          type: string
        value:
          type: string
      required:
        - path
        - value
      type: object
    date-interval:
      allOf:
        - $ref: "#/components/schemas/CommonScheduleInstruction"
        - $ref: "#/components/schemas/CustomEventScheduleInstruction"
        - $ref: "#/components/schemas/InvoiceRetryScheduleInstruction"
        - properties:
            duration:
              description: The number of the units
              minimum: 1
              type: integer
            unit:
              oneOf:
                - $ref: "#/components/schemas/time-unit"
                - $ref: "#/components/schemas/time-plural-unit"
          required:
            - duration
            - unit
          type: object
    day-of-month:
      allOf:
        - $ref: "#/components/schemas/CommonScheduleInstruction"
        - $ref: "#/components/schemas/CustomEventScheduleInstruction"
        - $ref: "#/components/schemas/ServicePeriodAnchorInstruction"
        - $ref: "#/components/schemas/InvoiceRetryScheduleInstruction"
        - properties:
            day:
              description: |
                The day of the month when event will be scheduled.
                Be aware if the month has less days,
                the last day of the month will be selected.
              maximum: 31
              minimum: 1
              type: integer
            time:
              $ref: "#/components/schemas/extended-time-iso8601"
          required:
            - day
          type: object
    day-of-week:
      allOf:
        - $ref: "#/components/schemas/CommonScheduleInstruction"
        - $ref: "#/components/schemas/CustomEventScheduleInstruction"
        - $ref: "#/components/schemas/ServicePeriodAnchorInstruction"
        - $ref: "#/components/schemas/InvoiceRetryScheduleInstruction"
        - properties:
            day:
              $ref: "#/components/schemas/long-day-of-week"
            time:
              $ref: "#/components/schemas/extended-time-iso8601"
            week:
              default: next
              enum:
                - next
                - first-in-month
                - last-in-month
              type: string
          required:
            - day
          type: object
    discount:
      allOf:
        - $ref: "#/components/schemas/AmountAdjustment"
        - properties:
            type:
              description: The payment amount discount type
              enum:
                - percent
                - fixed
              type: string
            value:
              description: The payment amount discount
              format: float
              type: number
          required:
            - value
            - type
          type: object
    discounts-per-redemption:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            quantity:
              description: Restriction quantity
              type: integer
          required:
            - quantity
          type: object
      description: discounts-per-redemption restrictions
    eMerchantPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiKey:
                  description: eMerchantPay Gateway api key
                  format: password
                  type: string
                clientId:
                  description: eMerchantPay Gateway client ID
                  type: string
                password:
                  description: eMerchantPay password for Genesis platform
                  format: password
                  type: string
                token:
                  description: eMerchantPay token for Genesis platform
                  type: string
                username:
                  description: eMerchantPay username for Genesis platform
                  type: string
              type: object
            mpi:
              $ref: "#/components/schemas/eMerchantPayMpis"
            settings:
              description: eMerchantPay settings object
              properties:
                platform:
                  description: eMerchantPay platform to process payment. default to IPG
                  enum:
                    - IPG
                    - Genesis
                  type: string
              type: object
          required:
            - credentials
          type: object
      description: eMerchantPay Gateway config
    eMerchantPayMpis:
      description: eMerchantPay Mpis
      discriminator:
        mapping:
          Other: "#/components/schemas/Other"
          PaayMpi: "#/components/schemas/PaayMpi"
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/MpiName"
          enum:
            - PaayMpi
            - eMerchantPayMpi
            - Other
      required:
        - name
      type: object
    ePay-bgInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: ePay.bg payment instrument object
    ecoPayz:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: ecoPayz credentials object
              properties:
                merchantAccountNumber:
                  description: ecoPayz merchant account number
                  type: string
                merchantPassword:
                  description: ecoPayz merchant password
                  format: password
                  type: string
                paymentPageId:
                  description: ecoPayz payment page ID
                  type: string
              required:
                - paymentPageId
                - merchantAccountNumber
                - merchantPassword
              type: object
            settings:
              description: ecoPayz settings object
              properties:
                validCurrency:
                  description: Three letter currency code
                  enum:
                    - CAD
                    - EUR
                    - GBP
                    - USD
                  type: string
              required:
                - validCurrency
              type: object
          required:
            - credentials
          type: object
      description: ecoPayz config
    equals:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/compare"
      description: Equals condition
      type: object
    extended-time-iso8601:
      description: Extended ISO-8601 format of time
      pattern: ^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$
      type: string
    fixed:
      allOf:
        - $ref: "#/components/schemas/Discount"
        - properties:
            amount:
              description: Discount amount
              exclusiveMinimum: true
              format: double
              minimum: 0
              type: number
            currency:
              allOf:
                - $ref: "#/components/schemas/CurrencyCode"
          required:
            - amount
            - currency
          type: object
      description: Coupon fixed amount discount
    fixed-fee:
      allOf:
        - $ref: "#/components/schemas/PlanPriceFormula"
        - properties:
            price:
              description: >
                For the very simple price when it's fixed and does not depend on
                the quantity chosen by customer.


                If the price is 0, it's free.
              example: 99.95
              format: double
              type: number
          required:
            - price
          type: object
    flat-rate:
      allOf:
        - $ref: "#/components/schemas/PlanPriceFormula"
        - properties:
            maxQuantity:
              description: If the value is `null`, it's assumed to be infinite.
              example: 1
              type: integer
            price:
              description: |
                Flat-rate pricing is represented in a simple price per unit.
                Some examples:

                - $30 per unit
                - $0.10 per transaction
                - $50 per period

                If the price is 0, it's free.
              example: 99.95
              format: double
              type: number
          required:
            - price
          type: object
    gateway-name:
      description: The payment gateway name
      enum:
        - A1Gateway
        - AmexVPC
        - ApcoPay
        - AsiaPaymentGateway
        - AstroPay
        - AstroPayCard
        - AuthorizeNet
        - Bambora
        - BitPay
        - BlueSnap
        - BraintreePayments
        - Cardknox
        - Cashflows
        - CASHlib
        - CashToCode
        - CauriPayment
        - Cayan
        - Chase
        - Citadel
        - Clearhaus
        - CODVoucher
        - Conekta
        - Coppr
        - Credorax
        - Cryptonator
        - DataCash
        - Dengi
        - ecoPayz
        - EcorePay
        - Elavon
        - eMerchantPay
        - EPG
        - Finrax
        - Flexepin
        - FinTecSystems
        - FundSend
        - Forte
        - GET
        - Gigadat
        - GlobalOnePay
        - Gooney
        - Gpaysafe
        - Greenbox
        - iCanPay
        - iCheque
        - iDebit
        - Ilixium
        - Ingenico
        - INOVAPAY
        - Inovio
        - Intuit
        - InstaDebit
        - IpayOptions
        - JetPay
        - Jeton
        - LPG
        - Moneris
        - MtaPay
        - Netbanking
        - Neteller
        - NinjaWallet
        - NMI
        - OchaPay
        - Onlineueberweisen
        - Optimal
        - Pagsmile
        - Panamerican
        - ParamountEft
        - PandaGateway
        - Pay4Fun
        - PayCash
        - Payeezy
        - Payflow
        - PaymenTechnologies
        - PayPal
        - Payr
        - Paysafe
        - Paysafecash
        - Payvision
        - Plugnpay
        - Prosa
        - Realex
        - Realtime
        - Redsys
        - Rotessa
        - RPN
        - Sagepay
        - SeamlessChex
        - SecureTrading
        - Skrill
        - SmartInvoice
        - SMSVoucher
        - Sofort
        - SparkPay
        - StaticGateway
        - Stripe
        - TestProcessor
        - ToditoCash
        - UPayCard
        - USAePay
        - VantivLitle
        - vegaaH
        - Wallet88
        - Walpay
        - Wirecard
        - WorldlineAtosFrankfurt
        - Worldpay
        - Zotapay
      type: string
    gt:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/compare"
      description: Greater than condition
      type: object
    gte:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/compare"
      description: Greater than or equals condition
      type: object
    iCanPay:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                authenticateId:
                  description: iCanPay Gateway authenticate ID
                  type: string
                authenticatePw:
                  description: iCanPay Gateway authenticate password
                  format: password
                  type: string
                publicKey:
                  description: iCanPay Gateway API public key
                  type: string
                secretKey:
                  description: iCanPay Gateway API secret key
                  format: password
                  type: string
              required:
                - authenticateId
                - authenticatePw
                - publicKey
                - secretKey
              type: object
          required:
            - credentials
          type: object
      description: iCanPay Gateway config
    iCheque:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                apiSecurityToken:
                  description: Hash of the password for the Alliance API (transaction reporting)
                  format: password
                  type: string
                apiUserId:
                  description: Username for the Alliance API (transaction reporting)
                  type: string
                clientId:
                  description: iCheque Gateway client ID
                  type: string
                secretWord:
                  description: iCheque Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - credentials
          type: object
      description: iCheque Gateway config
    iDEALInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
      description: iDEAL payment instrument object
    iDebit:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              description: iDebit credentials object
              properties:
                merchantId:
                  description: iDebit merchant account number
                  type: string
                password:
                  description: iDebit merchant account password
                  format: password
                  type: string
              required:
                - merchantId
                - password
              type: object
          required:
            - credentials
          type: object
      description: iDebit config
    immediately:
      allOf:
        - $ref: "#/components/schemas/CommonScheduleInstruction"
        - $ref: "#/components/schemas/ServicePeriodAnchorInstruction"
        - $ref: "#/components/schemas/InvoiceRetryScheduleInstruction"
    in:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - properties:
            path:
              type: string
            values:
              items:
                type: string
              type: array
          required:
            - path
            - values
          type: object
      description: In condition
      type: object
    intelligent:
      allOf:
        - $ref: "#/components/schemas/CommonScheduleInstruction"
        - $ref: "#/components/schemas/CustomEventScheduleInstruction"
        - $ref: "#/components/schemas/InvoiceRetryScheduleInstruction"
        - properties:
            duration:
              description: The number of the units
              minimum: 1
              type: integer
            unit:
              oneOf:
                - $ref: "#/components/schemas/time-unit"
                - $ref: "#/components/schemas/time-plural-unit"
          required:
            - duration
            - unit
          type: object
    logical:
      properties:
        conditions:
          items:
            $ref: "#/components/schemas/Condition"
          minItems: 2
          type: array
      required:
        - conditions
      type: object
    logical-not:
      example:
        condition:
          operation: equals
          path: /name
          value: John Dou
        operation: not
      properties:
        condition:
          $ref: "#/components/schemas/Condition"
      required:
        - condition
      type: object
    long-day-of-week:
      enum:
        - Sunday
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
      type: string
    lt:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/compare"
      description: Less than condition
      type: object
    lte:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/compare"
      description: Less than or equals condition
      type: object
    minimum-order-amount:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            amount:
              description: Minimum order quantity
              type: integer
            currency:
              allOf:
                - $ref: "#/components/schemas/CurrencyCode"
          required:
            - amount
            - currency
          type: object
      description: minimum-order-amount restrictions
    not:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/logical-not"
      description: Logical NOT
      type: object
    one-time-order:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - properties:
            status:
              description: One-time order status
              enum:
                - pending
                - completed
                - abandoned
              readOnly: true
              type: string
        - $ref: "#/components/schemas/SubscriptionMetadata"
    or:
      allOf:
        - $ref: "#/components/schemas/Condition"
        - $ref: "#/components/schemas/logical"
      description: Logical OR
      type: object
    paid-by-time:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            time:
              description: The time when the coupon's redemption is no longer valid and
                removed from unpaid invoices if applied. Note that this datetime
                cannot be changed.
              format: date-time
              type: string
          required:
            - time
          type: object
      description: paid-by-time restrictions
    partial:
      allOf:
        - $ref: "#/components/schemas/AmountAdjustment"
        - properties:
            type:
              description: The payment amount type
              enum:
                - percent
                - fixed
              type: string
            value:
              description: The payment amount
              format: float
              type: number
          required:
            - value
            - type
          type: object
    password:
      allOf:
        - $ref: "#/components/schemas/AuthenticationToken"
        - properties:
            customerId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The token's customer ID
              readOnly: true
            password:
              description: The token's password
              format: password
              type: string
              writeOnly: true
            username:
              description: The token's username
              type: string
        - $ref: "#/components/schemas/AuthenticationTokenMetadata"
      required:
        - username
        - password
    passwordless:
      allOf:
        - $ref: "#/components/schemas/AuthenticationToken"
        - properties:
            customerId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The token's customer ID
        - $ref: "#/components/schemas/AuthenticationTokenMetadata"
      required:
        - customerId
    payment-card-brands:
      description: Payment Card brand
      enum:
        - Visa
        - MasterCard
        - American Express
        - Discover
        - Maestro
        - Solo
        - Electron
        - JCB
        - Voyager
        - Diners Club
        - Switch
        - Laser
        - China UnionPay
        - AstroPay Card
      type: string
    payment-cardInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
        - properties:
            paymentCardId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The payment card identifier string
          required:
            - paymentCardId
          type: object
      description: Payment card payment instrument object
    paypalInstrument:
      allOf:
        - $ref: "#/components/schemas/PaymentInstrument"
        - properties:
            payPalAccountId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
              description: The PayPal account identifier string
          required:
            - payPalAccountId
          type: object
      description: PayPal payment instrument object
    percent:
      allOf:
        - $ref: "#/components/schemas/Discount"
        - properties:
            value:
              description: Discount percent
              exclusiveMinimum: true
              format: double
              maximum: 100
              minimum: 0
              type: number
          required:
            - value
          type: object
      description: Coupon percent discount
    redemption-cancel:
      allOf:
        - $ref: "#/components/schemas/TimelineAction"
        - properties:
            redemptionId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
          type: object
      description: Cancel Redemption
    redemptions-per-customer:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            quantity:
              description: Restriction value
              type: integer
          required:
            - quantity
          type: object
      description: Quantity per Customer restrictions
    resend-email:
      allOf:
        - $ref: "#/components/schemas/TimelineAction"
        - properties:
            messageId:
              allOf:
                - $ref: "#/components/schemas/ResourceId"
          type: object
      description: Resend Email action
    restrict-to-invoices:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            invoiceIds:
              description: Invoice IDs coupon can be applied to
              items:
                type: string
              type: array
          required:
            - invoiceIds
          type: object
      description: restrict-to-invoices restrictions
    restrict-to-plans:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            planIds:
              description: Plan IDs coupon can be applied to
              items:
                type: string
              type: array
          required:
            - planIds
          type: object
      description: restrict-to-plans restrictions
    restrict-to-products:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            productIds:
              description: Product IDs coupon can be applied to
              items:
                type: string
              type: array
          required:
            - productIds
          type: object
      description: restrict-to-products restrictions
    restrict-to-subscriptions:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            subscriptionIds:
              description: Subscription IDs coupon can be applied to
              items:
                type: string
              type: array
          required:
            - subscriptionIds
          type: object
      description: restrict-to-subscriptions restrictions
    schemas_ContactEmails:
      description: The list of emails
      items:
        properties:
          label:
            description: The email label
            type: string
          primary:
            description: True if email is primary
            type: boolean
          value:
            description: The email value
            type: string
        required:
          - label
          - value
        type: object
      type: array
    schemas_ContactPhoneNumbers:
      description: The list of phone numbers
      items:
        properties:
          label:
            description: The phone label
            type: string
          primary:
            description: True if phone is primary
            type: boolean
          value:
            description: The phone value
            type: string
        required:
          - label
          - value
        type: object
      type: array
    schemas_Method:
      description: The payment method
      enum:
        - payment-card
        - ach
        - bank-account
        - cash
        - check
        - paypal
        - Alipay
        - ApplePay
        - AstroPay-Card
        - bank-transfer
        - bitcoin
        - Boleto
        - cash-deposit
        - CASHlib
        - CashToCode
        - China-UnionPay
        - Conekta-oxxo
        - domestic-cards
        - echeck
        - ecoPayz
        - ecoVoucher
        - EPS
        - ePay-bg
        - Flexepin
        - Giropay
        - GooglePay
        - Gpaysafe
        - iDebit
        - iDEAL
        - INOVAPAY-pin
        - INOVAPAY-wallet
        - InstaDebit
        - instant-bank-transfer
        - Interac
        - Interac-online
        - Interac-eTransfer
        - invoice
        - Jeton
        - Klarna
        - LPG-online
        - LPG-payment-card
        - miscellaneous
        - Netbanking
        - Neteller
        - Nordea-Solo
        - OchaPay
        - online-bank-transfer
        - Onlineueberweisen
        - Pagsmile-lottery
        - Pagsmile-deposit-express
        - Pagsmile-boleto
        - PayCash
        - Paysafecard
        - Pay4Fun
        - PinPay
        - phone
        - POLi
        - Przelewy24
        - QQPay
        - Resurs
        - SEPA
        - Skrill
        - Skrill-Rapid-Transfer
        - SMSVoucher
        - SparkPay
        - swift-dbt
        - ToditoCash-card
        - Trustly
        - UPayCard
        - voucher
        - WeChat-Pay
        - Zotapay
      type: string
    schemas_ResourceId:
      description: The resource ID. Defaults to UUID v4
      example: 4f6cf35x-2c4y-483z-a0a9-158621f77a21
      maxLength: 50
      pattern: ^[@~\-\.\w\d]+$
      type: string
    schemas_SelfLink:
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          enum:
            - self
          type: string
      required:
        - rel
      type: object
    stairstep:
      allOf:
        - $ref: "#/components/schemas/PlanPriceFormula"
        - properties:
            brackets:
              description: >
                The price brackets, along with the price formula,

                is used to calculate the amount to charge for the product on this plan on the invoice.


                The "stairstep" example:


                Price total | Max quantity | Description

                ------------|--------------|------------

                $5          | 1            | 1

                $13         | 5            | 2 to 5

                $30         | null         | 6 or more


                If someone bought 1 apple, it would be $5.


                If someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case.
              items:
                properties:
                  maxQuantity:
                    description: >
                      If the value is `null`, it's assumed to be infinite.  It starts at
                      the end of the previous bracket.

                      If there is no previous bracket, it starts at 1.
                    example: 1
                    type: integer
                  price:
                    description: If the price is 0, it's free.
                    example: 99.95
                    format: double
                    type: number
                type: object
              minItems: 1
              type: array
          required:
            - brackets
          type: object
    subscription-order:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - properties:
            autopay:
              default: true
              description: Autopay determines if a payment attempt will be automatic
              type: boolean
            endTime:
              allOf:
                - $ref: "#/components/schemas/ServerTimestamp"
              description: Subscription end time
            inTrial:
              description: True if the subscription is currently in a trial period
              readOnly: true
              type: boolean
            invoiceTimeShift:
              allOf:
                - $ref: "#/components/schemas/InvoiceTimeShift"
              description: >
                You can shift issue time and due time of invoices for this
                subscription.

                This setting overrides plan settings. To use plan settings, set `null`.

                To use multiple plans in one subscription they all must have the same billing period,

                this property allows to subscribe to different plans.
              example: null
              nullable: true
            lineItemSubtotal:
              description: Subtotal of line items in this subscription (signed value). If
                credits exceed debits, it will be a negative number.
              properties:
                amount:
                  example: 49.95
                  format: double
                  type: number
                currency:
                  $ref: "#/components/schemas/CurrencyCode"
              readOnly: true
              type: object
            lineItems:
              allOf:
                - $ref: "#/components/schemas/UpcomingInvoiceItemCollection"
              description: Subscription line items which queue until the next renewal (or
                interim) invoice is issued for the subscription.
              readOnly: true
            rebillNumber:
              description: The current period number
              readOnly: true
              type: integer
            recurringInterval:
              description: >
                The recurring interval to override plan settings. To use plan
                settings, set `null`.

                To use multiple plans in one subscription they all must have the same recurring period length,

                this property allows to subscribe to different plans.
              example: null
              nullable: true
              properties:
                periodAnchorInstruction:
                  $ref: "#/components/schemas/ServicePeriodAnchorInstruction"
              type: object
            renewalReminderNumber:
              description: Number of renewal reminder events triggered
              readOnly: true
              type: integer
            renewalReminderTime:
              allOf:
                - $ref: "#/components/schemas/ServerTimestamp"
              description: Time renewal reminder event will be triggered
              nullable: true
            renewalTime:
              description: Subscription renewal time
              format: date-time
              type: string
            startTime:
              description: Subscription start time.  When the value is sent as null, it will
                use the current time. This value can't be in past more than one
                service period.
              example: null
              format: date-time
              nullable: true
              type: string
            status:
              description: |
                The status of the subscription service. A subscription starts
                in the `pending` status, and will become `active` when the
                service period begins.
              enum:
                - pending
                - active
                - canceled
                - churned
                - suspended
                - paused
                - abandoned
              readOnly: true
              type: string
            trial:
              description: To use plan defaults do not send the `trial` key, or send a `null`
                value with it.
              properties:
                enabled:
                  description: Enable or disable the trial for this subscription. If enabled for
                    plans without trial prices, the trial will be free.
                  type: boolean
                endTime:
                  description: The time the trial should end
                  format: date-time
                  type: string
              required:
                - endTime
              type: object
            trialReminderNumber:
              description: Number of renewal reminder events triggered
              readOnly: true
              type: integer
            trialReminderTime:
              allOf:
                - $ref: "#/components/schemas/ServerTimestamp"
              description: Time renewal reminder event will be triggered
              nullable: true
        - $ref: "#/components/schemas/SubscriptionMetadata"
        - $ref: "#/components/schemas/SubscriptionCancellationState"
    three-columns:
      allOf:
        - $ref: "#/components/schemas/TimelineTable"
        - properties:
            data:
              description: Table data. Each array element represents a table row
              items:
                example:
                  attribute: Descriptor
                  newValue: new-test.com
                  previousValue: test.com
                properties:
                  attribute:
                    type: string
                  newValue:
                    type: string
                  previousValue:
                    type: string
                type: object
              type: array
          type: object
    tiered:
      allOf:
        - $ref: "#/components/schemas/PlanPriceFormula"
        - properties:
            brackets:
              description: >
                The price brackets, along with the price formula,

                is used to calculate the amount to charge for the product on this plan on the invoice.


                The "tiered" example:


                Price per apple | Max quantity | Description

                ----------------|--------------|------------

                $5              | 1            | 1

                $4              | 5            | 2 to 5

                $3              | null         | 6 or more


                If someone bought 1 apple, it would be $5.


                If someone bought 2 apples, it would be $9. $5 per apple for the first apple, then $4 per apple for the 2nd to 5th apple.
              items:
                properties:
                  maxQuantity:
                    description: >
                      If the value is `null`, it's assumed to be infinite.  It starts at
                      the end of the previous bracket.

                      If there is no previous bracket, it starts at 1.
                    example: 1
                    type: integer
                  price:
                    description: If the price is 0, it's free.
                    example: 99.95
                    format: double
                    type: number
                type: object
              minItems: 1
              type: array
          required:
            - brackets
          type: object
    time-plural-unit:
      enum:
        - seconds
        - minutes
        - hours
        - days
        - months
        - years
      type: string
    time-unit:
      enum:
        - second
        - minute
        - hour
        - day
        - month
        - year
      type: string
    total-redemptions:
      allOf:
        - $ref: "#/components/schemas/CouponRestriction"
        - $ref: "#/components/schemas/RedemptionRestriction"
        - properties:
            quantity:
              description: Total redemptions quantity
              type: integer
          required:
            - quantity
          type: object
      description: total-redemptions restrictions
    two-columns:
      allOf:
        - $ref: "#/components/schemas/TimelineTable"
        - properties:
            data:
              description: Table data. Each array element represents a table row
              items:
                example:
                  attribute: Who
                  value: John Doe
                properties:
                  attribute:
                    type: string
                  value:
                    type: string
                type: object
              type: array
          type: object
    vegaaH:
      allOf:
        - $ref: "#/components/schemas/GatewayAccount"
        - properties:
            credentials:
              properties:
                password:
                  description: vegaaH Gateway password
                  format: password
                  type: string
                terminalId:
                  description: vegaaH Gateway terminal ID
                  type: string
              required:
                - terminalId
                - password
              type: object
          required:
            - credentials
          type: object
      description: vegaaH Gateway config
    volume:
      allOf:
        - $ref: "#/components/schemas/PlanPriceFormula"
        - properties:
            brackets:
              description: >
                The price brackets, along with the price formula,

                is used to calculate the amount to charge for the product on this plan on the invoice.


                The "volume" example:


                Price per apple | Max quantity | Description

                ----------------|--------------|------------

                $5              | 1            | 1

                $4              | 5            | 2 to 5

                $3              | null         | 6 or more


                If someone bought 1 apple, it would be $5.


                If someone bought 2 apples, it would be $8. For 2 to 5 apples, the price is $4 per apple.
              items:
                properties:
                  maxQuantity:
                    description: >
                      If the value is `null`, it's assumed to be infinite.  It starts at
                      the end of the previous bracket.

                      If there is no previous bracket, it starts at 1.
                    example: 1
                    type: integer
                  price:
                    description: If the price is 0, it's free.
                    example: 99.95
                    format: double
                    type: number
                type: object
              minItems: 1
              type: array
          required:
            - brackets
          type: object
  securitySchemes:
    JWT:
      bearerFormat: JWT
      description: >
        You can create a JSON Web Token (JWT) via our [JWT Session
        resource](hhttps://user-api-docs.rebilly.com/#operation/PostSigninRequest).

        Usage format: `Bearer <JWT>`
      scheme: bearer
      type: http
    PublishableApiKey:
      description: >
        Only for the Tokens resource.

        You can create a Publishable API Key via our [API Keys resource](https://user-api-docs.rebilly.com/#tag/API-Keys), by specifying the type as `publishable`.
      in: header
      name: Authorization
      type: apiKey
    SecretApiKey:
      description: >
        When you sign up for an account, you are given your first secret
        API key.

        To do so please [follow this link.](https://app.rebilly.com/signup)

        Also you can generate additional API keys, and delete API keys (as you may

        need to rotate your keys in the future). All API keys can be restricted to a

        small set of permissions (restricted API keys).
      in: header
      name: REB-APIKEY
      type: apiKey
x-tagGroups:
  - name: Customers
    tags:
      - Customers
      - Customer Authentication
      - Custom Fields
      - Contacts
      - Files
      - KYC Documents
      - Tags
      - Customers Timeline
  - name: Payment Instruments
    tags:
      - Bank Accounts
      - Payment Cards
      - Payment Tokens
      - PayPal Accounts
      - Payment Instrument Validation
  - name: Payments
    tags:
      - 3D Secure
      - Payments
      - Transactions
      - Disputes
      - Blacklists
  - name: Invoices & Subscriptions
    tags:
      - Coupons
      - Invoices
      - Plans
      - Products
      - Shipping Zones
      - Subscriptions
      - Taxes
  - name: Misc
    tags:
      - Reports
      - Search
      - Users
