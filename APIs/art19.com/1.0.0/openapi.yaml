openapi: 3.0.0
servers:
  - url: https://art19.com
info:
  contact:
    email: support@art19.com
    name: ART19 Engineering Team
    x-twitter: art19co
  description: >
    The ART19 Content API conforms to the [JSON:API specification](http://jsonapi.org).


    API requests **MUST** use the HTTP Accept header:


    `Accept: application/vnd.api+json`


    API requests **MUST** be authenticated using the HTTP Authorization header:


    `Authorization: Token token="your-token", credential="your-credential"`


    ## General Notes


    Some query parameters use unencoded [ and ] characters simply for readability. Defaults, examples, and

    possible values are additionally rendered in double quotes for readability. In practice, query parameters should

    not have quotes around the values (e.g., `foo=bar` is valid, not `foo="bar"`), and both query parameter keys

    and values must be percent-encoded, per the requirements in [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).


    ## Rate Limiting


    In order to provide a fair distribution of available resources, all API calls are subject to rate limits.

    If you exceed the number of API calls per minute granted to your credential, a `429 Too Many Requests`

    error response will be returned.


    In that case, a `Retry-After` header MAY be included in the response, describing the number of seconds

    after which a request can be retried.


    If you run into a high number of 429 errors, please reach out to ART19 Support to adjust your rate limit.


    ### Example


    In the following example the request can be retried after waiting for 21 seconds:

        HTTP/1.1 429 Too Many Requests
        Content-Type: text/html
        Retry-After: 21

    ## Pagination


    Requests to collection endpoints **SHOULD** provide pagination parameters.

    Some endpoints **REQUIRE** pagination parameters to be provided.

    Whenever pagination is provided, it **MUST** be valid.

    Failing to provide pagination when it is required or providing wrong or incomplete pagination

    always results in a `400 Bad Request` error response.


    The page numbering starts with `1` and the maximum page size (if not otherwise documented

    on an endpoint) is `100`. Pagination **MUST NOT** be specified if requesting a list of IDs (using an `ids[]` parameter).


    Providing invalid values for page number or page size, as well as providing only a page number or only a page size,

    is considered an error. Pagination is provided like this:


    `page[number]=1&page[size]=25`


    Responses conform to the [JSON:API specification's pagination section](https://jsonapi.org/format/#fetching-pagination)

    by including pagination links. Your requested page size will be carried into the pagination links.


    ## Sorting


    Requests to collection endpoints usually accept a `sort` parameter. Please refer to the

    [JSON:API Specification's sorting section](https://jsonapi.org/format/#fetching-sorting) for further details.


    ## Relationship Linking


    Currently, resources return all of their relationships, in no particular order, pursuant to how relationships

    should be returned [according to the JSON:API specification](https://jsonapi.org/format/#document-resource-object-relationships). Consumers of this API

    **MUST NOT** make assumptions about the order of these collections. Even though this data is not currently paginated, consumers **MUST** support

    paginating relationships per the JSON:API specification if this data is important for their application.
  termsOfService: https://art19.com/business-terms
  title: ART19 Content API Documentation
  version: 1.0.0
  x-apisguru-categories:
    - media
  x-logo:
    url: https://twitter.com/art19co/profile_image?size=original
  x-origin:
    - format: openapi
      url: https://art19.com/swagger_json/external/content.json
      version: "3.0"
  x-providerName: art19.com
security:
  - api_key: []
paths:
  /classification_inclusions:
    get:
      description: >
        Classification Inclusions connect classifications with entities like series, episodes, or campaigns, amongst others.


        In order to retrieve a set of classification inclusions, at least one of the following filter parameters must

        be provided. Failing to do so renders a `400 Bad Request` response.


        - `ids[]`

        - `classified_id` and `classified_type`

        - `classified_id` and `classification_type`

        - `classification_id` and `classified_type`
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: Limit the result to classification inclusions linked to a classification with this ID.
          example: a90609c0-9f0c-48fd-8a41-83eb8414bedb
          in: query
          name: classification_id
          schema:
            format: uuid
            type: string
        - description: >
            The type of classification that the classification inclusions are linked to.

            Depending on the permissions of your credential, only a subset of these types are usable.
          in: query
          name: classification_type
          schema:
            enum:
              - AlternateFeedType
              - Genre
              - Industry
              - Language
              - MediaRating
            type: string
        - description: >
            Limit the result to classification inclusions linked to a resource with this ID.

            You will have to use this filter together with either `classified_type` or `classification_type`.
          example: fee1976e-f1bc-48a9-9ee8-58800f4d3462
          in: query
          name: classified_id
          schema:
            format: uuid
            type: string
        - description: Limit the result to classification inclusions linked to this type of entity.
          in: query
          name: classified_type
          schema:
            enum:
              - Series
              - Season
              - Episode
            type: string
        - description: >
            Limit the result to classification inclusions linked to a classification containing

            the parameter value disregarding case.
          in: query
          name: q
          schema:
            type: string
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: created_at
            enum:
              - classification_value
              - created_at
              - position
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/ClassificationInclusion"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. At least one filter parameter is required.
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get ClassificationInclusion records
      tags:
        - ClassificationInclusion
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/classification_inclusions",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="7f990b9f-6a0a-43ca-87d1-1b1ec6551a8a"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/classification_inclusions?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="6258b178-6656-4faf-a4a1-ab47c6367ede"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/classification_inclusions');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="a666ac05-cad0-4e0a-ad5f-bde42b8112d4"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/classification_inclusions?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="cfb5cc3e-9cf8-4ccc-9853-4b267841984f"' \
              --compressed
  "/classification_inclusions/{id}":
    get:
      parameters:
        - description: The ID of the classification inclusion resource to load.
          example: 810fdbbc-9154-4fed-b043-45cff9767e5b
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/ClassificationInclusion"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific classification inclusion
      tags:
        - ClassificationInclusion
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/classification_inclusions/6a18cd4c-2692-444d-9eb9-e61e58dc80da",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="67d2534a-0470-4788-8cd8-5477d827f2da"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/classification_inclusions/6a18cd4c-2692-444d-9eb9-e61e58dc80da', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="03eeb17e-1c54-45bb-8de9-a6f447e1a4e7"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/classification_inclusions/6a18cd4c-2692-444d-9eb9-e61e58dc80da');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="f36695ea-1014-4faf-8753-4ff540426fdf"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/classification_inclusions/6a18cd4c-2692-444d-9eb9-e61e58dc80da' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="273be550-6c99-4e56-8384-49a58e9a1045"' \
              --compressed
  /classifications:
    get:
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: >
            Limit the result to classifications of this type. The possible values for types

            depends on the privileges of the provided credential.
          example: Genre
          in: query
          name: type
          schema:
            enum:
              - AlternateFeedType
              - Genre
              - Industry
              - Language
              - MediaRating
            type: string
        - description: >
            Limit the result to classifications with a value containing the parameter value

            disregarding case.
          in: query
          name: q
          schema:
            type: string
        - description: >
            If this parameter is provided and not empty, limit the result to classifications

            of type `Geography` representing countries. The credential must have at least one

            privilege with a network, series, or advertiser profile.
          example: "true"
          in: query
          name: is_country
          schema:
            type: string
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: value
            enum:
              - created_at
              - updated_at
              - value
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Classification"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. Filtering by type for AudienceSegment and AudienceTag is no longer supported.
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of classifications
      tags:
        - Classification
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/classifications",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="d197806a-962e-4c31-b257-8f472cfab87e"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/classifications?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="3ae83e90-6a2b-4a96-9553-35755c20339b"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/classifications');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="b6c4b4c7-484b-4973-97e7-c851f2665b3f"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/classifications?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="3be016e5-a43f-43a6-ad7e-1b2c0ca6a4b6"' \
              --compressed
  "/classifications/{id}":
    get:
      parameters:
        - description: The ID of the classification resource to load.
          example: 65f728f5-dee1-4990-8580-395034c95c51
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Classification"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific classification
      tags:
        - Classification
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/classifications/9a0ee48e-20e1-4494-b525-500daa71cecf",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="f6f9754d-3573-4854-9c8f-20be9da7ea27"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/classifications/9a0ee48e-20e1-4494-b525-500daa71cecf', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="d226f894-14e1-44de-9c3e-d98d2911330c"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/classifications/9a0ee48e-20e1-4494-b525-500daa71cecf');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="3fc05163-4330-423f-9726-b3c2e807dbcc"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/classifications/9a0ee48e-20e1-4494-b525-500daa71cecf' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="22d6807d-6c21-42c3-be20-5172c62bfd79"' \
              --compressed
  /credits:
    get:
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: >
            Limit the result to credits for the entity with this ID only. If the entity is not

            published, the credential needs to have the right privilege to list the credits for it.
          example: 76654e16-76ce-4945-92e9-e0a381917853
          in: query
          name: creditable_id
          schema:
            format: uuid
            type: string
        - description: >
            Limit the result to credits linked to this type of entity only.

            Depending on the privileges of the credential, this list might be further reduced to

            only published entities.
          in: query
          name: creditable_type
          schema:
            enum:
              - Series
              - Season
              - Episode
            type: string
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: position
            enum:
              - created_at
              - position
              - updated_at
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Credit"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. 
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of credits
      tags:
        - Credit
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/credits",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="55f91532-8a9b-4789-84c4-8fa480a07f95"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/credits?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="d22420bc-b983-4db9-8ed4-3767c5974b2b"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/credits');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="64f42e85-8612-4808-96d5-cd737e75ba14"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/credits?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="87f7d3ab-a91c-42ef-bea5-3a028b5984d2"' \
              --compressed
  "/credits/{id}":
    get:
      parameters:
        - description: The ID of the credit resource to load.
          example: 1d7a3761-dde2-47c7-944e-15071146132e
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Credit"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific credit
      tags:
        - Credit
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/credits/e89373f3-3b8d-4dca-9c19-ff11b47fb4d4",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="9e35cc09-7239-41b2-a1b7-b225b070d0e7"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/credits/e89373f3-3b8d-4dca-9c19-ff11b47fb4d4', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="56576853-5856-47d0-80fd-6e552ccf316c"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/credits/e89373f3-3b8d-4dca-9c19-ff11b47fb4d4');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="8e924ab5-8e0b-4c3e-9098-2f16ff8a0a51"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/credits/e89373f3-3b8d-4dca-9c19-ff11b47fb4d4' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="f0deb565-5864-496c-bdca-a031766664d2"' \
              --compressed
  /episodes:
    get:
      description: >
        One initial filter must be provided (`ids`, `series_id`, or `season_id`), otherwise a `400 Bad Request` response

        will be returned. Additional filters are allowed.


        This API will only return episodes that your credential has permission to access, which may not be exclusive to

        your account, depending on the filter(s) being used. Be careful to filter the results as needed.
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          required: true
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          required: true
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: Limit the result to episodes usable with an inventory management calendar for the provided AdDeal ID.
          example: b97239ef-1776-489a-a1df-5f70a8407148
          in: query
          name: included_in_inventory_calendar
          schema:
            format: uuid
            type: string
        - description: Limit the result to episodes released in this month.
          in: query
          name: month
          schema:
            type: string
        - description: >
            If `true`, limit the result to published episodes only.

            If `false`, limit the result to _unpublished_ episodes only.
          in: query
          name: published
          schema:
            type: boolean
        - description: Limit the result to episodes with a title containing this parameter in a case-insensitive way.
          in: query
          name: q
          schema:
            type: string
        - description: Limit the result to episodes released after this timestamp.
          in: query
          name: released_after
          schema:
            format: date-time
            type: string
        - description: Limit the result to episodes released before this timestamp.
          in: query
          name: released_before
          schema:
            format: date-time
            type: string
        - description: >
            If `true`, limit the result to published and released episodes holding an available media file.

            If this is `true`, it also changes the default sort order to `-released_at`.
          in: query
          name: rss
          schema:
            type: boolean
        - description: Limit result to episodes linked to this season.
          example: 30e7b568-d099-486b-9a8e-51b7594cab7d
          in: query
          name: season_id
          schema:
            format: uuid
            type: string
        - description: Limit the result to episodes linked to this series.
          example: d0ceb1ff-b95b-4c1e-a7e5-a36ed7b4d3b7
          in: query
          name: series_id
          schema:
            format: uuid
            type: string
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: sort_title
            enum:
              - created_at
              - earliest_released_at
              - released_at
              - released_or_created_at
              - sort_title
              - title
              - updated_at
            items:
              type: string
            type: array
          style: form
        - description: Limit the result to episodes released in this year.
          in: query
          name: year
          schema:
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Episode"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must be present and have a positive page number and a page size no larger than 100. One initial filter must be provided (`ids`, `series_id`, or `season_id`).
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of episodes
      tags:
        - Episode
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/episodes",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="60f5b127-1821-4c64-89a7-49374a781276"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/episodes?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="16b29af0-8469-4c86-94a9-1f639e8ca3bb"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/episodes');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="16611ce9-ad50-4cee-9ee0-b4f96a4cfac3"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/episodes?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="6592dd0a-ca5e-4ca9-b61d-45b8713ddec3"' \
              --compressed
  "/episodes/{id}":
    get:
      parameters:
        - description: The ID of the episode resource to load.
          example: 8c6d5f91-6344-4ff9-8de6-3fd0b916a3c7
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Episode"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific episode
      tags:
        - Episode
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/episodes/171e3836-c13b-4f64-90f9-5e90971165b6",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="70f112ab-f2d0-4a10-ab7d-4944ed48ece4"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/episodes/171e3836-c13b-4f64-90f9-5e90971165b6', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="7fc00b59-4797-4bf7-a5ad-52a03182e598"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/episodes/171e3836-c13b-4f64-90f9-5e90971165b6');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="ca9feeb9-7abc-4d86-b98a-f947f003cdd2"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/episodes/171e3836-c13b-4f64-90f9-5e90971165b6' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="893e51e7-94e6-4a88-addc-f03d74783508"' \
              --compressed
  "/episodes/{id}/next_sibling":
    get:
      parameters:
        - description: The ID of the episode to find the one episode released right after it.
          example: f0a8839d-50b9-4f97-a418-75845ec637c0
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: >
            If `true`, get the next released and published episode with an available media file.
          in: query
          name: rss
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Episode"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get the episode released right after the specified one
      tags:
        - Episode
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/episodes/cd717915-4fb4-44d1-8db5-073b5276d027/next_sibling",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="d6184c5b-407f-40ca-8be2-5642585f47c4"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/episodes/cd717915-4fb4-44d1-8db5-073b5276d027/next_sibling', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="e3158f52-d586-4294-88e5-149067b7abd0"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/episodes/cd717915-4fb4-44d1-8db5-073b5276d027/next_sibling');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="15e539a7-200d-4186-af9b-ae5a5589821d"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/episodes/cd717915-4fb4-44d1-8db5-073b5276d027/next_sibling' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="0d2cb355-76d5-4766-b432-62347292b244"' \
              --compressed
  "/episodes/{id}/previous_sibling":
    get:
      parameters:
        - description: The ID of the episode to find the one episode released right before it.
          example: 25eee531-a678-4fa5-b8f9-5d782f726992
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
        - description: >
            If `true`, get the previously released and published episode with an available media file.
          in: query
          name: rss
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Episode"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get the episode released right before the specified one
      tags:
        - Episode
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/episodes/ac761332-e2a8-4eac-9c05-077cae2feb78/previous_sibling",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="581441b7-5296-4cec-9c72-f5b08f4448bc"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/episodes/ac761332-e2a8-4eac-9c05-077cae2feb78/previous_sibling', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="c02ecc9a-b56d-4f68-977e-b2a46ad1c875"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/episodes/ac761332-e2a8-4eac-9c05-077cae2feb78/previous_sibling');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="42342572-b106-45b0-baf3-9cc6346c1a9f"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/episodes/ac761332-e2a8-4eac-9c05-077cae2feb78/previous_sibling' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="2c36a446-1d5b-4d94-bea2-71258d72cad8"' \
              --compressed
  /images:
    get:
      description: >+
        An image represents a piece of artwork attached to some entity like a series, season, or episode,

        and is _owned_ by an entity called the `bucket`.

        An image is also a container for several `MediaAssets` representing the physical files for various

        styles used.


        ## Media Asset Styles for Images


        Most media assets use square images. You may upload and use a square image, or upload an image of any

        shape and crop it to a square by specifying the cropping area. This area โ identified by a coordinate

        `x, y` and a `width` & `height` โ is the portion of the image used for all cover art. If an image has

        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media

        asset. If the original file is rectangular and does not have cropping, then the system will use a squared

        version of the original file with the smaller of width or height as the square size.


        The original image as uploaded into the system is always retained unmodified and available through

        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.


        An image has media assets with the following styles:


        - `original`: This is the original file provided. May not be available, depending on permissions
          and file type.
        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.
          This should be used for any application needing the original, uncropped, image.
        - `regular`: If the image has cropping defined, this is the cropped image.
          If not, this is a square version of the original.
        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.

        - `square-400`: A square version of the image with a size of `400x400` pixels.

        - `square-640`: A square version of the image with a size of `640x640` pixels.

        - `square-888`: A square version of the image with a size of `888x888` pixels.

        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.
          This variant is only created if the cropped width & height are each at least 3000.
        - `itunes`: A square version of the image with a size of `1400x1400` pixels.


        ### Preferred image used in feeds


        For the main series image used in feeds, it is ideal to use the `square-3000` version.

        If that is not available, the `itunes` version should be used instead.

      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Image"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. 
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of images
      tags:
        - Image
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/images",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="b322596f-271b-41ac-9bf9-350c8bc5294a"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/images?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="5e9168ff-a5da-4604-a135-27a2f0310f6c"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/images');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="c4519394-23bc-475a-bc58-7ff88e1e5019"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/images?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="a19ee417-889b-4471-9deb-3d68210a937f"' \
              --compressed
  "/images/{id}":
    get:
      description: >+
        An image represents a piece of artwork attached to some entity like a series, season, or episode,

        and is _owned_ by an entity called the `bucket`.

        An image is also a container for several `MediaAssets` representing the physical files for various

        styles used.


        ## Media Asset Styles for Images


        Most media assets use square images. You may upload and use a square image, or upload an image of any

        shape and crop it to a square by specifying the cropping area. This area โ identified by a coordinate

        `x, y` and a `width` & `height` โ is the portion of the image used for all cover art. If an image has

        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media

        asset. If the original file is rectangular and does not have cropping, then the system will use a squared

        version of the original file with the smaller of width or height as the square size.


        The original image as uploaded into the system is always retained unmodified and available through

        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.


        An image has media assets with the following styles:


        - `original`: This is the original file provided. May not be available, depending on permissions
          and file type.
        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.
          This should be used for any application needing the original, uncropped, image.
        - `regular`: If the image has cropping defined, this is the cropped image.
          If not, this is a square version of the original.
        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.

        - `square-400`: A square version of the image with a size of `400x400` pixels.

        - `square-640`: A square version of the image with a size of `640x640` pixels.

        - `square-888`: A square version of the image with a size of `888x888` pixels.

        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.
          This variant is only created if the cropped width & height are each at least 3000.
        - `itunes`: A square version of the image with a size of `1400x1400` pixels.


        ### Preferred image used in feeds


        For the main series image used in feeds, it is ideal to use the `square-3000` version.

        If that is not available, the `itunes` version should be used instead.

      parameters:
        - description: The ID of the image resource to load.
          example: 67279677-3a90-42fa-a2a8-362263033b94
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Image"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific image
      tags:
        - Image
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/images/9a059c16-5cae-4549-bc67-5b2dd352ddfc",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="995b8de1-5798-46be-a661-3266822c18b3"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/images/9a059c16-5cae-4549-bc67-5b2dd352ddfc', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="9bf30171-bbdd-47cd-8a37-db9df949c8b3"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/images/9a059c16-5cae-4549-bc67-5b2dd352ddfc');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="81b08e51-c8ed-4f0a-8448-be9759012ad5"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/images/9a059c16-5cae-4549-bc67-5b2dd352ddfc' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="cd717813-77b9-4e15-bf84-2ca16e1088b4"' \
              --compressed
  /media_assets:
    get:
      description: >+
        A media asset is part of a collection of assets or files representing an image or a piece of audio content

        like an episode or an ad. Images, for example, have differently sized versions for better rendering performance,

        and a piece of audio content usually comes in different encoding formats.


        The `style` attribute of a media asset describes the role an asset plays in the context of the collection.

        The collection is what an asset is attached to (`attachment_id|type`).


        ## Styles for Images


        Most media assets use square images. You may upload and use a square image, or upload an image of any

        shape and crop it to a square by specifying the cropping area. This area โ identified by a coordinate

        `x, y` and a `width` & `height` โ is the portion of the image used for all cover art. If an image has

        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media

        asset. If the original file is rectangular and does not have cropping, then the system will use a squared

        version of the original file with the smaller of width or height as the square size.


        The original image as uploaded into the system is always retained unmodified and available through

        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.


        An image has media assets with the following styles:


        - `original`: This is the original file provided. May not be available, depending on permissions
          and file type.
        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.
          This should be used for any application needing the original, uncropped, image.
        - `regular`: If the image has cropping defined, this is the cropped image.
          If not, this is a square version of the original.
        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.

        - `square-400`: A square version of the image with a size of `400x400` pixels.

        - `square-640`: A square version of the image with a size of `640x640` pixels.

        - `square-888`: A square version of the image with a size of `888x888` pixels.

        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.
          This variant is only created if the cropped width & height are each at least 3000.
        - `itunes`: A square version of the image with a size of `1400x1400` pixels.


        ### Preferred image used in feeds


        For the main series image used in feeds, it is ideal to use the `square-3000` version.

        If that is not available, the `itunes` version should be used instead.



        ## Styles for Audio


        - `medium`: A medium-quality version of the audio asset in various formats.

        - `original`: This is the original file provided. May not be available, depending on permissions
          and file type.
        - `waveform_data`: The generated BBC Audiowaveform data in JSON or binary format.

      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: true
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/MediaAsset"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. 
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of media assets
      tags:
        - MediaAsset
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/media_assets",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="71fcf88d-ecfd-4f85-bdac-cfcc0d1dddfe"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/media_assets?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="3cfe3ab2-4a92-40a5-b3fb-a06a843b8b91"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/media_assets');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="76e6b1e8-200d-4455-b439-df24048c68b0"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/media_assets?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="1740deac-0833-4277-b0df-ec6227f7a961"' \
              --compressed
  "/media_assets/{id}":
    get:
      description: >+
        A media asset is part of a collection of assets or files representing an image or a piece of audio content

        like an episode or an ad. Images, for example, have differently sized versions for better rendering performance,

        and a piece of audio content usually comes in different encoding formats.


        The `style` attribute of a media asset describes the role an asset plays in the context of the collection.

        The collection is what an asset is attached to (`attachment_id|type`).


        ## Styles for Images


        Most media assets use square images. You may upload and use a square image, or upload an image of any

        shape and crop it to a square by specifying the cropping area. This area โ identified by a coordinate

        `x, y` and a `width` & `height` โ is the portion of the image used for all cover art. If an image has

        cropping defined, the cropped version of the image will be used in any `regular` or `square` style of media

        asset. If the original file is rectangular and does not have cropping, then the system will use a squared

        version of the original file with the smaller of width or height as the square size.


        The original image as uploaded into the system is always retained unmodified and available through

        the style `original`. All media asset styles except `stripped-original` consist of the cropped image.


        An image has media assets with the following styles:


        - `original`: This is the original file provided. May not be available, depending on permissions
          and file type.
        - `stripped-original`: The original file with all metadata (EXIF, XMP, PNG metadata, etc.) removed.
          This should be used for any application needing the original, uncropped, image.
        - `regular`: If the image has cropping defined, this is the cropped image.
          If not, this is a square version of the original.
        - `thumb`: A square thumbnail of the image with a size of `100x100` pixels.

        - `square-400`: A square version of the image with a size of `400x400` pixels.

        - `square-640`: A square version of the image with a size of `640x640` pixels.

        - `square-888`: A square version of the image with a size of `888x888` pixels.

        - `square-3000`: A square version of the image with a size of `3000x3000` pixels.
          This variant is only created if the cropped width & height are each at least 3000.
        - `itunes`: A square version of the image with a size of `1400x1400` pixels.


        ### Preferred image used in feeds


        For the main series image used in feeds, it is ideal to use the `square-3000` version.

        If that is not available, the `itunes` version should be used instead.



        ## Styles for Audio


        - `medium`: A medium-quality version of the audio asset in various formats.

        - `original`: This is the original file provided. May not be available, depending on permissions
          and file type.
        - `waveform_data`: The generated BBC Audiowaveform data in JSON or binary format.

      parameters:
        - description: The ID of the media asset resource to load.
          example: 17538826-df62-43d1-8862-ef50561ac187
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/MediaAsset"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific media asset
      tags:
        - MediaAsset
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/media_assets/a0608550-aee2-4efa-9b0c-af93555a619c",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="0f71fbbb-f105-4219-be23-8426fe34dfe5"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/media_assets/a0608550-aee2-4efa-9b0c-af93555a619c', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="f10a0193-5ad7-4d65-9594-d9630da9b296"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/media_assets/a0608550-aee2-4efa-9b0c-af93555a619c');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="18640e23-4da3-4a4a-a049-cab95ec8e670"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/media_assets/a0608550-aee2-4efa-9b0c-af93555a619c' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="bf69d753-ded5-40e9-8494-f8eec574e164"' \
              --compressed
  /networks:
    get:
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: Limit the result to networks with a name containing this parameter in a case-insensitive way.
          in: query
          name: q
          schema:
            type: string
        - description: >
            Limit the result to networks containing at least one series with an ad deal of this AdOps profile.
          in: query
          name: ad_rep_account_id
          schema:
            format: uuid
            type: string
        - description: >
            Limit the result to networks containing at least one series with an ad deal matching one of the

            values in this parameter.
          explode: false
          in: query
          name: ad_deal_status
          schema:
            items:
              enum:
                - active
                - inactive
                - pending_active
                - pending_inactive
              type: string
            type: array
          style: form
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: name
            enum:
              - created_at
              - name
              - updated_at
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Network"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. 
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of networks
      tags:
        - Network
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/networks",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="01be268a-bd87-486c-a422-d4e6227c734e"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/networks?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="f2fd7599-bb70-454e-8e49-50d5f0270bc4"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/networks');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="e3d96cfd-3856-4b28-a75c-b76bc8907e18"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/networks?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="6a62f589-a14c-4b4c-a811-bdec64d6baa4"' \
              --compressed
  "/networks/{id}":
    get:
      parameters:
        - description: The ID of the network resource to load.
          example: d65f22ed-dba6-4280-a1be-2035b9ce37fb
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Network"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific network
      tags:
        - Network
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/networks/a48d0e62-c4d5-4223-83ab-dcc55fbb0fe0",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="71b880ab-0706-49cf-95f6-a948de7357db"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/networks/a48d0e62-c4d5-4223-83ab-dcc55fbb0fe0', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="7dba2ab3-5e8c-41b8-a3dd-122b97eb286b"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/networks/a48d0e62-c4d5-4223-83ab-dcc55fbb0fe0');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="7d094ac8-56e9-4e54-b4ff-62d14e29d06e"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/networks/a48d0e62-c4d5-4223-83ab-dcc55fbb0fe0' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="c27bc9cc-692b-4437-916b-2cadefb30e8f"' \
              --compressed
  /people:
    get:
      description: >
        Each series, season, and episode has a Credits section where you may add people and roles.

        This is an internal tool to recognize contributors. It is not related to ART19 users or account permissions.

        Each Person added will have no additional access or permissions granted as a result of being included in the Credits section.
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: Limit the result to people with a full name containing this parameter in a case-insensitive way.
          in: query
          name: q
          schema:
            type: string
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: last_name,first_name
            enum:
              - created_at
              - first_name
              - last_name
              - updated_at
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Person"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. 
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of people
      tags:
        - Person
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/people",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="84af321a-f49d-4d50-be2b-1f1e4e299742"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/people?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="272e4acd-7954-4c3c-9d74-ed2d2c43b9cc"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/people');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="0065361c-c34b-4c94-bdf5-d7d6c7ee3829"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/people?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="1bffd638-37f3-4fd7-81f8-2b9433ea2920"' \
              --compressed
  "/people/{id}":
    get:
      description: >
        Each series, season, and episode has a Credits section where you may add people and roles.

        This is an internal tool to recognize contributors. It is not related to ART19 users or account permissions.

        Each Person added will have no additional access or permissions granted as a result of being included in the Credits section.
      parameters:
        - description: The ID of the person resource to load.
          example: 2b833e97-74f8-487a-8141-e83d2f6820f7
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Person"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific person
      tags:
        - Person
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/people/e65420d8-d337-4f30-81a0-5ab5d624e13d",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="e78bd666-c0c4-4327-9ad3-eaa2a01c5888"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/people/e65420d8-d337-4f30-81a0-5ab5d624e13d', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="67ff16a9-542a-477f-ba3b-35eaef7cdd6f"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/people/e65420d8-d337-4f30-81a0-5ab5d624e13d');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="af468ef7-f6db-4543-8ac8-9af966589b06"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/people/e65420d8-d337-4f30-81a0-5ab5d624e13d' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="f518ade8-fd7d-432a-aace-d198f2e49275"' \
              --compressed
  /seasons:
    get:
      description: >
        When retrieving a list of seasons, the result is automatically filtered depending on the

        privileges the used credential holds. If there are no specific privileges to a series or network,

        only active seasons for active series are included.
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: Limit the result to seasons owned by this series.
          example: 7ebd702d-07c8-4da9-a7a8-cf18ec414d5c
          in: query
          name: series_id
          schema:
            format: uuid
            type: string
        - description: Limit the result to seasons with a title containing this parameter in a case-insensitive way.
          in: query
          name: q
          schema:
            type: string
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: sort_title
            enum:
              - created_at
              - sort_title
              - title
              - updated_at
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Season"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. 
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of seasons
      tags:
        - Season
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/seasons",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="7c1a5621-20ce-4987-b479-7daaab7daf77"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/seasons?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="8ac4212f-312a-4b94-8197-f866e241674e"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/seasons');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="2a78defa-f5ba-4384-891a-cb66c9d31935"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/seasons?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="3084bea6-221d-416d-9c0c-409354ad589f"' \
              --compressed
  "/seasons/{id}":
    get:
      parameters:
        - description: The ID of the season resource to load.
          example: 8df27f8c-9db3-4027-a8f9-8830a1492d97
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Season"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific season
      tags:
        - Season
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/seasons/cf5d14eb-1340-420f-99d4-e3c75eae1370",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="3069f865-09e2-4f83-bd2c-21f5508ef05d"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/seasons/cf5d14eb-1340-420f-99d4-e3c75eae1370', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="a5ac6bf5-a4d8-4594-99b3-c0a7c57bb846"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/seasons/cf5d14eb-1340-420f-99d4-e3c75eae1370');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="f9228eaf-caa7-4236-be53-27fbdadd500f"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/seasons/cf5d14eb-1340-420f-99d4-e3c75eae1370' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="0863f18a-0a39-4e37-b3e2-bb5b4afb5919"' \
              --compressed
  /series:
    get:
      description: >
        When retrieving a list of series, the result is automatically filtered depending on the

        privileges the used credential holds. All credentials will have access to active series

        with a public page enabled (on ART19). Utilizing a filter to limit the result to series

        associated with your account is recommended.
      parameters:
        - description: >
            The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.

            The brackets *MUST* be percent-encoded, per the requirements in

            [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
          explode: true
          in: query
          name: ids[]
          required: false
          schema:
            items:
              format: uuid
              type: string
            type: array
            uniqueItems: true
        - description: >+
            Select which page number to receive results for. Pages are numbered starting at 1.

          in: query
          name: page[number]
          schema:
            minimum: 1
            type: integer
        - description: >+
            Indicate how many records to return per page. The maximum is 100.

          in: query
          name: page[size]
          schema:
            maximum: 100
            minimum: 1
            type: integer
        - description: >
            Limit the result to series with an ad deal of this AdOps profile.
          example: 35eb02fc-54db-4650-98e0-4695b101b71d
          in: query
          name: ad_rep_account_id
          schema:
            format: uuid
            type: string
        - description: Limit the result to series owned by this network.
          example: 5317358a-527e-4365-a343-361854286cc7
          in: query
          name: network_id
          schema:
            format: uuid
            type: string
        - description: Limit the result to series with a title or slug containing this parameter in a case-insensitive way.
          in: query
          name: q
          schema:
            type: string
        - description: >
            Specify how to sort the result. Please refer to either the top section or the

            [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
          explode: false
          in: query
          name: sort
          schema:
            default: sort_title
            enum:
              - created_at
              - episode_released_at
              - sort_title
              - title
              - updated_at
            items:
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Series"
                    type: array
                  links:
                    $ref: "#/components/schemas/Links"
                type: object
          description: Success
        "400":
          description: >
            Bad Request


            Parameters requiring a specific format must adhere to that format.

            Pagination must have a positive page number and a page size no larger than 100. 
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a list of series
      tags:
        - Series
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/series",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="2c59306b-5d65-42d2-9a91-be120b58a2a8"'
              },
              params: {
                # add filters if desired
                page: { number: 1, size: 25 }
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/series?page%5Bnumber%5D=1&page%5Bsize%5D=25', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="7d1ddd51-6dbe-4728-afa6-77d2be4712cd"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // The API endpoint to request data from
              $url = array('https://art19.com/series');

              // Provide extra parameters like filters or pagination to the request
              $url[] = http_build_query(array(
                'page' => array('number' => 1, 'size' => 25)
              ));

              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, implode('?', $url));
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="83c83df7-7687-4faa-9c8a-f61e72cce67f"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/series?page%5Bnumber%5D=1&page%5Bsize%5D=25' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="0059c19d-7f68-4509-b141-e1dd1e38edce"' \
              --compressed
  "/series/{id}":
    get:
      parameters:
        - description: The ID of the series resource to load.
          example: 016c9110-941b-4bd2-ad07-e2b8c555f673
          in: path
          name: id
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/Series"
                  links:
                    $ref: "#/components/schemas/ResourceLink"
                type: object
          description: Success
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not_found"
        "406":
          $ref: "#/components/responses/not_acceptable"
        "429":
          $ref: "#/components/responses/rate_limit_exceeded"
      summary: Get a specific series
      tags:
        - Series
      x-codeSamples:
        - label: Ruby - Typhoeus
          lang: ruby
          source: >
            response = Typhoeus.get(
              "https://art19.com/series/061390ad-d372-482a-bdb0-40bce4a44da0",
              accept_encoding: 'gzip',
              headers: {
                Accept:        'application/vnd.api+json',
                Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="eb5fed32-c6d5-447b-a6a4-44a2af999efe"'
              },
              timeout: 10
            )

            if response.success?
              # HTTP 2xx - JSON:API available to be parsed in response.body
            elsif response.timed_out?
              # Request timed out
            elsif response.code.zero?
              # cURL didn't get back an HTTP response, the reason is in response.return_message
            else
              # Other HTTP status, check response.code for which
            end
        - label: JavaScript - Fetch
          lang: javascript
          source: >
            try {
              const response = await fetch('https://art19.com/series/061390ad-d372-482a-bdb0-40bce4a44da0', {
                headers: {
                  Accept:        'application/vnd.api+json',
                  Authorization: 'Token token="UVd4c0lFTnZjSKbElFSm", credential="45fe424a-266b-4888-a4e0-22091a1a682a"'
                }
              });

              if (response.ok) {
                // Get the response body if HTTP-status is 200-299
                const json = await response.json();
              } else {
                // HTTP request failed, handle error
              }
            } catch(err) {
              // A network error occured
            }
        - label: PHP - cURL
          lang: php
          source: >
            <?php

            // Initialize a cURL resource for a request

            $request = curl_init();


            try {
              // Configure the cURL options
              curl_setopt($request, CURLOPT_URL, 'https://art19.com/series/061390ad-d372-482a-bdb0-40bce4a44da0');
              curl_setopt($request, CURLOPT_FOLLOWLOCATION, true);
              curl_setopt($request, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($request, CURLOPT_ENCODING, '');
              curl_setopt($request, CURLOPT_HTTPHEADER, array(
                'Accept: application/vnd.api+json',
                'Authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="1d73d273-34ed-4dab-9bfc-05744a430052"'
              ));

              // Execute the request and grab all status information
              $output = curl_exec($request);
              $info   = curl_getinfo($request);
              $code   = $info['http_code'];

              if ($code >= 200 && $code < 300) {
                // HTTP 2xx - JSON:API response available to be parsed in $output
                $json = json_decode($output);
              } else if ($code >= 400 && $code < 500) {
                // HTTP 4xx - Client error; JSON:API response evt. available to be parsed in $output
                if (strlen($output) > 0) {
                  $errors = json_decode($output);
                }
              } else {
                // Other HTTP status, treat according to workflow
              }
            } finally {
              // Free up the resource to clear out memory
              curl_close($request);
            }

            ?>
        - label: cURL
          lang: shell
          source: >
            curl 'https://art19.com/series/061390ad-d372-482a-bdb0-40bce4a44da0' \
              -H 'accept: application/vnd.api+json' \
              -H 'authorization: Token token="UVd4c0lFTnZjSKbElFSm", credential="6d2cf7df-7391-46b5-b352-94aedfdd21ef"' \
              --compressed
components:
  responses:
    forbidden:
      description: >
        Forbidden


        The provided credential is not authorized to access the requested resource or collection.

        [See RFC 7231 ยง 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)
    not_acceptable:
      description: >
        Not Acceptable


        The client requested a response format which cannot be satisfied. Ensure that you specify the

        correct `Accept` header. [See RFC 7231 ยง 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6).
    not_found:
      description: >
        Not Found


        The requested resource/collection does not exist. [See RFC 7231 ยง 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4).
    rate_limit_exceeded:
      description: Rate limit exceeded
      headers:
        Retry-After:
          description: >
            The number of seconds after which the request can be retried.

            Since the rate limit is per minute, this value ranges from 1 to 59.

            Conforms to [RFC 7231 ยง 7.1.3](https://tools.ietf.org/html/rfc7231#section-7.1.3).
          schema:
            type: integer
    unauthorized:
      description: >
        Unauthorized


        A valid credential was not supplied, but one is required.

        [See RFC 7235 ยง 3.1](https://tools.ietf.org/html/rfc7235#section-3.1).

        A `WWW-Authenticate` header is not currently returned.
  schemas:
    Classification:
      description: >
        A classification, in general, is something that can describe other resources, such as countries, genres or

        languages. How they're described (included or excluded, and whether they're the primary classification

        of this type) is handled using other resources. Different functions of ART19 rely on classifications differently,

        and could have an effect only on directory information, or may have an effect on ad decisioning.
      properties:
        attributes:
          properties:
            created_at:
              format: date-time
              type: string
            display_name:
              description: Human readable representation of the classification
              type: string
            metadata:
              description: >
                An object with more detailed information about the classification.

                The possible members are different per type of classification.
              type: object
            parent_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `parent` in a future update.<br/>

                For hierarchical classifications, this is the ID of the parent classification
              format: uuid
              type: string
            tree_path:
              description: >
                For hierarchical classifications this is the list of IDs reflecting the hierarchy starting

                with the root level node.
              example:
                - ce5dbc7e-012c-4f7a-a709-4c1ed6c3aef9
                - a2bd7d86-6678-4c08-8fd3-52f7adfcb19f
              items:
                format: uuid
                type: string
              type: array
            type:
              description: >
                The type of classification. The type of retrievable classifications depends on the privileges

                of the credential being used.
              enum:
                - AlternateFeedType
                - Genre
                - Industry
                - Language
                - MediaRating
              example: Genre
              type: string
            updated_at:
              format: date-time
              type: string
            value:
              description: >
                The value the classification represents. The meaning of this attribute depends on the type of classification.
              type: string
            value_path:
              description: >
                For hierarchical classifications this is a concatenated string of all the classification

                values from the root to this classification using a `: ` as separator.
              example: "Comedy: Standup"
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        type:
          description: The type of resource. This is always `classifications`
          example: classifications
          type: string
      type: object
    ClassificationInclusion:
      description: >
        Connects a Classification with a classified item like a Series, Season or Episode.
      properties:
        attributes:
          properties:
            classification_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `classification` in a future update.<br/>

                The ID of the classification linked to the entity
              example: 497aad13-1c96-41d8-80e2-9a5aa7bc96fa
              format: uuid
              type: string
            classification_type:
              deprecated: true
              description: This will be replaced by the relationship `classification` in a future update.<br/>
              enum:
                - AlternateFeedType
                - Genre
                - Industry
                - Language
                - MediaRating
              type: string
            classified_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `classified` in a future update.<br/>

                The ID of the entity linked to the classification
              example: 8e9dc5d8-8a16-424e-ba96-6a7261a9a23b
              format: uuid
              type: string
            classified_type:
              deprecated: true
              description: This will be replaced by the relationship `classified` in a future update.<br/>
              enum:
                - Series
                - Season
                - Episode
              type: string
            created_at:
              format: date-time
              type: string
            position:
              description: The position or order of the linked classification within the classified resource
              type: integer
            primary:
              description: >
                When `true` it describes the best classification of a specific type for a given

                classified item
              type: boolean
            updated_at:
              format: date-time
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        relationships:
          properties:
            classification:
              properties:
                data:
                  $ref: "#/components/schemas/ResourceIdentifier"
              type: object
          type: object
        type:
          description: The type of resource. This is always `classification_inclusion`
          example: classification_inclusion
          type: string
      type: object
    Credit:
      description: >
        A credit links a specific person to a series, season, or episode in a specific role.
      properties:
        attributes:
          properties:
            created_at:
              format: date-time
              type: string
            creditable_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `creditable` in a future update.<br/>

                The ID of the entity this credit is for
              example: c71c6734-ab34-4464-ae03-d7f677e3b658
              format: uuid
              type: string
            creditable_type:
              deprecated: true
              description: >
                This will be replaced by the relationship `creditable` in a future update.<br/>

                The type of entitiy this credit is for
              enum:
                - Series
                - Season
                - Episode
              type: string
            position:
              description: The order of this credit within all credits of the referenced creditable entity
              type: integer
            type:
              description: The type of credit the linked person has on the referenced entity
              enum:
                - AnchorCredit
                - AssociateProducerCredit
                - AuthorCredit
                - CastCredit
                - CoHostCredit
                - ComposerCredit
                - CreatorCredit
                - Credit
                - DirectorCredit
                - EditorCredit
                - EngineerCredit
                - ExecutiveProducerCredit
                - GuestCoHostCredit
                - GuestCredit
                - GuestHostCredit
                - HeadWriterCredit
                - HostCredit
                - ProducerCredit
                - ReporterCredit
                - SeniorProducerCredit
                - SidekickCredit
                - VideoProducerCredit
                - WriterCredit
              type: string
            updated_at:
              format: date-time
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        relationships:
          properties:
            person:
              properties:
                data:
                  $ref: "#/components/schemas/ResourceIdentifier"
              type: object
          type: object
        type:
          description: The type of resource. This is always `credits`
          example: credits
          type: string
      type: object
    Episode:
      properties:
        attributes:
          properties:
            allow_user_comments:
              description: >
                Only visible to credentials having write privileges for the series.
              type: boolean
            cascaded_cover_image_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `cascaded_cover_image` in a future update.<br/>

                The image ID of the cover art for this episode. This is the preferred image ID to use.

                If there is no specific cover for the episode, the image ID of the season or the

                series will be returned, whichever has one defined.

                The `/images` endpoint provides details to the image.
              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17
              format: uuid
              type: string
            cover_image_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `cover_image` in a future update.<br/>

                The image ID of the cover art for this episode, if an episode-specific image has been provided.

                The `/images` endpoint provideds details to the image.
              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17
              format: uuid
              type: string
            created_at:
              format: date-time
              type: string
            description:
              description: The description of the episode, possibly in HTML format
              example: <p><strong>Some</strong> funny example.</p>
              type: string
            description_is_html:
              description: Determines whether `description` is in HTML format or plain.
              type: boolean
            description_plain:
              description: >
                The description with all HTML markup removed. If the description does not contain markup,

                this is identitcal to `description`.
              example: Some funny example.
              type: string
            file_name:
              description: The file name, without extension, to present users when downloading the episode
              type: string
            itunes_type:
              description: The type of the episode according to Apple's type categorization
              enum:
                - full
                - bonus
                - trailer
              type: string
            listen_count:
              description: >
                The number of total downloads all time for this episode.

                Only visible if the credential has the right privilege on the series.
              type: integer
            premium_status:
              description: The current premium status of the episode
              enum:
                - active
                - inactive
                - force-active
                - force-inactive
              type: string
            published:
              description: >
                If true, the episode will be available for download and included in the feed as soon as its

                release time is reached. Aside from that, it also needs to have valid media file associated.
              type: boolean
            release_immediately:
              description: >
                If true, the episode's release time is set in a way it is considered released right away.

                Only visible if the credential has write privileges on the series.
              type: boolean
            released_at:
              description: >
                The date & time when an episode shall be released. It will be available for download and

                included in the feed, if this time is reached and `published` is set to `true` and the episode

                has an available media file associated.
              format: date-time
              type: string
            rss_guid:
              description: >
                A globally unique identifier describing the episode. This ID is commonly used by podcast applications

                to determine whether an episode has already been downloaded or not.
              type: string
            season_id:
              deprecated: true
              description: >
                Use the relationship `season` instead.<br />

                The ID of the season an episode belongs to. This can be `null`. A series can have episodes with and

                without seasons at the same time.
              example: eba5523d-e73a-43ec-bfd9-140ce9db76ac
              format: uuid
              type: string
            series_id:
              deprecated: true
              description: >
                Use the relationship `series` instead.<br />

                The ID of the series an episode belongs to.
              example: 9897f8cb-ffa7-4674-9529-c6037826c738
              format: uuid
              type: string
            sort_title:
              description: >
                The title of the episode modified for sorting. This converts all characters to

                lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
              example: big hit
              type: string
            status:
              description: The status of an episode
              enum:
                - active
                - inactive
              type: string
            title:
              description: The title of the episode
              example: The Big Hit
              type: string
            updated_at:
              format: date-time
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        relationships:
          properties:
            classification_inclusions:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of classifications associated with the episode
              type: object
            credits:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of credits given to people in the episode
              type: object
            default_marker_points:
              description: Only visible if the credential has write privileges on the series
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of default (WarpFeed) marker points
              type: object
            episode_versions:
              description: Only visible if the credential has write privileges on the series
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of episode versions for this episode
              type: object
            images:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: Both the cover image and the cascaded cover image for the season
              type: object
            season:
              properties:
                data:
                  $ref: "#/components/schemas/ResourceIdentifier"
              title: The season the episode belongs to
              type: object
            segment_lists:
              description: Only visible if the credential has write privileges on the series
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of segment lists directly attached to the episode
              type: object
            series:
              properties:
                data:
                  $ref: "#/components/schemas/ResourceIdentifier"
              title: The series an episode belongs to
              type: object
            taggings:
              description: "`DEPRECATED`"
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of associations linking tags to the episodes.
              type: object
            tags:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of tags associated with the episodes
              type: object
          type: object
        type:
          description: The type of resource. This is always `episodes`
          example: episodes
          type: string
      type: object
    Image:
      properties:
        attributes:
          properties:
            bucket_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `bucket` in a future update.<br/>

                The ID of the owning entity
              example: 687282a1-faf7-4d37-8f4a-cbddedf6db8f
              format: uuid
              type: string
            bucket_type:
              deprecated: true
              description: >
                This will be replaced by the relationship `bucket` in a future update.<br/>

                The type of the owning entity
              enum:
                - AdRepAccount
                - Agency
                - Network
                - Series
                - User
              type: string
            created_at:
              format: date-time
              type: string
            crop_data:
              properties:
                height:
                  description: The height of the crop area
                  example: 3000
                  format: float
                  type: number
                left:
                  description: The left coordinate of the crop area
                  example: 100
                  format: float
                  type: number
                top:
                  description: The top coordinate of the crop area
                  example: 150
                  format: float
                  type: number
                width:
                  description: The width of the crop area
                  example: 3000
                  format: float
                  type: number
              title: The crop area within the original media asset
              type: object
            status:
              description: >
                The current value of the image state machine. It starts with `uploaded` and

                transitions to `processing` once a worker has picked it up. If all variations and

                styles of an image have been successfully created, the status becomes `valid`. In

                case of a problem during the processing it changes to `invalid`.
              enum:
                - invalid
                - processing
                - uploaded
                - valid
              type: string
            updated_at:
              format: date-time
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        relationships:
          properties:
            media_assets:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: All media assets available for this image
              type: object
          type: object
        type:
          description: The type of resource. This is always `images`
          example: images
          type: string
      type: object
    Links:
      properties:
        first:
          description: A URL to retrieve the first page of data keeping the provided page size
          type: string
        last:
          description: A URL to retrieve the last page of data keeping the provided page size
          type: string
        next:
          description: A URL to retrieve the next page of data keeping the provided page size
          type: string
        prev:
          description: A URL to retrieve the previous page of keeping using the provided page size
          type: string
        self:
          description: A URL to retrieve the collection as the primary data
          type: string
      type: object
    MediaAsset:
      properties:
        attributes:
          properties:
            attachment_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `attachment` in a future update.<br/>

                The ID of the entity this media asset is attached to
              example: 09a93847-d5bf-47b4-90d6-854e95011951
              format: uuid
              type: string
            attachment_type:
              deprecated: true
              description: >
                This will be replaced by the relationship `attachment` in a future update.<br/>

                The type of the entity this media asset is attached to
              enum:
                - Image
                - Segment
                - SegmentList
              type: string
            cdn_url:
              description: The CDN-URL where the media asset is available
              type: string
            content_type:
              description: The MIME type of the media asset
              example: image/jpeg
              type: string
            created_at:
              format: date-time
              type: string
            file_name:
              description: >
                The filename of the media asset without any path components.
              type: string
            file_size:
              description: The size in bytes of the media asset
              example: 2544307
              type: integer
            size_height:
              description: The height in pixels of the media asset, if the media asset is an image
              example: 1839
              type: integer
            size_width:
              description: The width in pixels of the media asset, if the media asset is an image
              example: 1839
              type: integer
            style:
              description: >
                The style of the media asset. A media asset is part of a collection of related media files,

                for example an image or an episode (audio). Images usually have differently sized versions,

                and episodes can have different audio formats.
              enum:
                - info
                - itunes
                - medium
                - original
                - regular
                - square-400
                - square-640
                - square-888
                - square-3000
                - stripped-original
                - thumb
                - waveform_data
              example: regular
              type: string
            updated_at:
              format: date-time
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        type:
          description: The type of resource. This is always `media_assets`
          example: media_assets
          type: string
      type: object
    Network:
      properties:
        attributes:
          properties:
            copyright:
              description: The copyright of the network
              type: string
            cover_image_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `cover_image` in a future update.<br/>

                The image ID of the cover art for this network. The `/images` endpoint provideds details to the image.
              example: 1fcae36a-0ff5-46ea-aa14-c1f378d28d2f
              format: uuid
              type: string
            created_at:
              format: date-time
              type: string
            description:
              description: The description of the network eventually in HTML format
              example: <p><strong>Some</strong> funny example.</p>
              type: string
            description_is_html:
              description: Determines whether `description` is in HTML format or plain.
              type: boolean
            description_plain:
              description: >
                The description with all HTML markup removed. If the description does not contain markup

                this is identitcal to `description`.
              example: Some funny example.
              type: string
            facebook_url:
              description: Where to find this network on Facebook
              type: string
            instagram_url:
              description: Where to find this network on Instagram
              type: string
            linkedin_url:
              description: Where to find the network on LinkedIn
              type: string
            name:
              description: The name of the network
              type: string
            public_email:
              description: A public point of contact through email
              type: string
            public_page_enabled:
              description: >
                If this is `true`, a public web page for this network is available under

                `https://art19.com/networks/{slug}`, where `slug` is the value of the corresponding attribute.

                This public page provides details about the network as well as descriptive links to all its

                series' public pages. If this is `false`, no such public page is available.
              type: boolean
            slug:
              description: >
                The unique slug for the network also used on its public page for example.

                This value is unique system-wide amongst all networks _and_ series.
              type: string
            tumblr_url:
              description: Where to find the network on Tumblr
              type: string
            twitter_url:
              description: Where to find the network on Twitter
              type: string
            updated_at:
              format: date-time
              type: string
            website_url:
              description: A public website for the network
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        relationships:
          properties:
            images:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: >
                A collection of images linked to the network. This currently only includes

                the cover image for the network.
              type: object
            series:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: List of currently active series within the network
              type: object
          type: object
        type:
          description: The type of resource. This is always `networks`
          example: networks
          type: string
      type: object
    Person:
      properties:
        attributes:
          properties:
            avatar_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `avatar` in a future update.<br/>

                The image ID of an avatar or head shot of the person. Details can be

                retrieved using the `/images` endpoint.
              example: 686ae786-6bbe-42f4-9a51-9e1cf207fc8b
              format: uuid
              type: string
            biography:
              description: The biography of the person without markup.
              type: string
            born:
              description: The birthday of the person
              format: date
              type: string
            created_at:
              format: date-time
              type: string
            died:
              description: The day of death of the person
              format: date
              type: string
            first_name:
              description: The first name of the person
              type: string
            from_country:
              description: The country the person is from
              type: string
            from_locality:
              description: The locality or city the person is from
              type: string
            from_region:
              description: The region/state/province the person is from
              type: string
            last_name:
              description: The last name of the person
              type: string
            public_email:
              description: The public email contact for the person
              type: string
            updated_at:
              format: date-time
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        type:
          description: The type of resource. This is always `people`
          example: people
          type: string
      type: object
    ResourceIdentifier:
      properties:
        id:
          description: The ID of the resource
          example: 0e545515-c464-480e-a841-e216a24fc123
          format: uuid
          type: string
        type:
          description: The type of the resource
          type: string
      type: object
    ResourceLink:
      description: Links related to the retrieved resource
      properties:
        self:
          description: A URL to retrieve the resource as the primary data
          type: string
      title: Links
      type: object
    Season:
      properties:
        attributes:
          properties:
            cascaded_cover_image_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `cascaded_cover_image` in a future update.<br/>

                The image ID of the cover art for this season. If there is no specific cover for the season,

                the image ID of the series' cover art will be returned.

                The `/images` endpoint provideds details to the image.
              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17
              format: uuid
              type: string
            cover_image_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `cover_image` in a future update.<br/>

                The image ID of the cover art for this season. The `/images` endpoint provideds details to the image.
              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17
              format: uuid
              type: string
            created_at:
              format: date-time
              type: string
            description:
              description: The description of the season eventually in HTML format
              example: <p><strong>Some</strong> funny example.</p>
              type: string
            description_is_html:
              description: Determines whether `description` is in HTML format or plain.
              type: boolean
            description_plain:
              description: >
                The description with all HTML markup removed. If the description does not contain markup

                this is identitcal to `description`.
              example: Some funny example.
              type: string
            first_released_episode_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `first_released_episode` in a future update.<br/>

                The ID of the first released episode within the season
              example: 73a97f1a-5c3c-4226-8ab3-1d7f9e486e4d
              format: uuid
              type: string
            last_released_episode_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `last_released_episode` in a future update.<br/>

                The ID of the most recently released episode within the season
              example: a50b7a22-2128-46d7-b3df-2b308df21bf0
              format: uuid
              type: string
            season_number:
              description: The number of the season. This could be `null` as well.
              example: 1
              type: integer
            sort_title:
              description: >
                The title of the season modified for sorting. This converts all characters to

                lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
              example: awesome season
              type: string
            status:
              description: The current status of the season
              enum:
                - active
                - inactive
              type: string
            title:
              description: The title of the season
              example: The Aweseom Season
              type: string
            updated_at:
              format: date-time
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        relationships:
          properties:
            classification_inclusions:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of classifications associated with the season
              type: object
            credits:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of credits given to people in the season
              type: object
            episodes:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of published and released episodes with an actual media file within the season
              type: object
            images:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: Both the cover image and the cascaded cover image for the season
              type: object
            series:
              properties:
                data:
                  $ref: "#/components/schemas/ResourceIdentifier"
              title: The series the season belongs to
              type: object
            taggings:
              description: "`DEPRECATED`"
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of associations linking tags to the season.
              type: object
            tags:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of tags associated with the season
              type: object
          type: object
        type:
          description: The type of resource. This is always `seasons`
          example: seasons
          type: string
      type: object
    Series:
      properties:
        attributes:
          properties:
            amazon_subscription_url:
              description: The Amazon Music subscription URL
              type: string
            castbox_subscription_url:
              description: The CastBox subscription URL
              type: string
            cover_image_id:
              deprecated: true
              description: >
                This will be replaced by the relationship `cover_image` in a future update.<br/>

                The image ID of the cover art for this series. The `/images` endpoint provideds details to the image.
              example: ec8f13bf-77c0-40fe-933a-8c088c16bc17
              format: uuid
              type: string
            created_at:
              format: date-time
              type: string
            description:
              description: The description of the series eventually in HTML format
              example: <p><strong>Some</strong> funny example.</p>
              type: string
            description_is_html:
              description: Determines whether `description` is in HTML format or plain.
              type: boolean
            description_plain:
              description: >
                The description with all HTML markup removed. If the description does not contain markup

                this is identitcal to `description`.
              example: Some funny example.
              type: string
            facebook_url:
              description: The URL of the series on Facebook
              type: string
            google_subscription_url:
              description: The Google subscription URL
              type: string
            iheart_subscription_url:
              description: The iHeartRadio subscription URL
              type: string
            instagram_url:
              description: The URL of the series on Instagram
              type: string
            itunes_subscription_badge_enabled:
              description: If `null` or `true`, the ART19 web player will render an iTunes subscription badge
              type: boolean
            itunes_subscription_url:
              description: The Apple iTunes subscription URL
              type: string
            linkedin_url:
              description: The URL of the series on LinkedIn
              type: string
            pocket_casts_subscription_url:
              description: The Pocket Casts subscription URL
              type: string
            podcast_subscription_url:
              description: The URL of the RSS feed
              example: https://rss.art19.com/greatest-show-ever
              type: string
            public_page_enabled:
              description: >
                If this is `true`, a public web page for this series is available under

                `https://art19.com/shows/{slug}`, where `slug` is the value of the corresponding attribute.

                This public page provides details about the series as well as descriptive links to all its

                episodes. If this is `false`, no such public page is available.
              type: boolean
            public_title:
              description: If present, this is the preferred title for the series in the RSS Feed
              type: string
            radio_public_subscription_url:
              description: The RadioPublic subscription URL
              type: string
            rss_author:
              description: The author responsible for the RSS feed
              type: string
            rss_copyright:
              description: The copyright disclaimer for the contents of the show, appearing after a ยฉ symbol, e.g. `2020 ART19, Inc.`
              type: string
            rss_email:
              description: The pubic point of contact for the show
              type: string
            rss_owner:
              description: The name of the contact for the show
              type: string
            slug:
              description: >
                This slug is unique over all series and networks system wide and is used to access the series' feed

                as well as its eventually enabled public page on ART19.
              example: greatest-show-ever
              type: string
            sort_title:
              description: >
                The title of the series modified for sorting. This converts all characters to

                lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
              example: greatest show ever
              type: string
            spotify_subscription_badge_enabled:
              description: If `null` or `true`, the ART19 web player will render a Spotify subscription badge
              type: boolean
            spotify_subscription_url:
              description: The Spotify subscription URL
              type: string
            status:
              description: The status of the series
              enum:
                - active
                - inactive
              type: string
            stitcher_subscription_badge_enabled:
              description: If `null` or `true`, the ART19 web player will render a Stitcher subscription badge
              type: boolean
            stitcher_subscription_url:
              description: The Stitcher subscription URL
              type: string
            title:
              description: The title of the series
              example: The greatest show ever
              type: string
            tumblr_url:
              description: The URL of the series on Tumblr
              type: string
            tune_in_subscription_url:
              description: The TuneIn subscription URL
              type: string
            twitter_url:
              description: The URL of the series on Twitter
              type: string
            type:
              description: The type of the series
              enum:
                - Series
              type: string
            updated_at:
              format: date-time
              type: string
            website_url:
              description: The custom website URL for the series
              type: string
          type: object
        id:
          example: c1fbb1bf-45b1-4803-986e-123166f7f427
          format: uuid
          type: string
        relationships:
          properties:
            classification_inclusions:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of classifications associated with the series
              type: object
            credits:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of credits given to people in the series
              type: object
            episodes:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of published and released episodes with an actual media file
              type: object
            images:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: The cover image for the series
              type: object
            network:
              properties:
                data:
                  $ref: "#/components/schemas/ResourceIdentifier"
              title: The network the series belongs to
              type: object
            seasons:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of seasons in the series
              type: object
            taggings:
              description: "`DEPRECATED`"
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of associations linking tags to the series
              type: object
            tags:
              properties:
                data:
                  items:
                    $ref: "#/components/schemas/ResourceIdentifier"
                  type: array
              title: A list of tags associated with the series
              type: object
          type: object
        type:
          description: The type of resource. This is always `series`
          example: series
          type: string
      type: object
  securitySchemes:
    api_key:
      description: >
        Authentication is **REQUIRED** for all APIs using an API token, which is placed into an HTTP Authorization header.


        This token is generated by ART19 Support and consists of a shared secret placed in the `token`

        parameter and a credential ID placed in the `credential` parameter.


        The final Authorization header will look like this:


        ```

        Authorization: Token token="V2h5LCBoZWxsbyB0aGVyZSE=", credential="8f71320c-fdbc-4934-b3b9-f1eda4fb39a9"

        ```
      in: header
      name: Authorization
      type: apiKey
