openapi: 3.0.0
servers:
  - description: Live Test Server (live data - latest nightly version)
    url: https://peertube2.cpy.re/api/v1
  - description: Live Test Server (live data - latest RC version)
    url: https://peertube3.cpy.re/api/v1
  - description: Live Test Server (live data - stable version)
    url: https://peertube.cpy.re/api/v1
info:
  contact:
    name: PeerTube Community
    url: https://joinpeertube.org
  description: >
    # Introduction


    The PeerTube API is built on HTTP(S) and is RESTful. You can use your favorite

    HTTP/REST library for your programming language to use PeerTube. The spec API is fully compatible with

    [openapi-generator](https://github.com/OpenAPITools/openapi-generator/wiki/API-client-generator-HOWTO)

    which generates a client SDK in the language of your choice - we generate some client SDKs automatically:


    - [Python](https://framagit.org/framasoft/peertube/clients/python)

    - [Go](https://framagit.org/framasoft/peertube/clients/go)

    - [Kotlin](https://framagit.org/framasoft/peertube/clients/kotlin)


    See the [Quick Start guide](https://docs.joinpeertube.org/#/api-rest-getting-started) so you can play with the PeerTube API.


    # Authentication


    When you sign up for an account, you are given the possibility to generate

    sessions, and authenticate using this session token. One session token can

    currently be used at a time.


    ## Roles


    Accounts are given permissions based on their role. There are three roles on

    PeerTube: Administrator, Moderator, and User. See the [roles guide](https://docs.joinpeertube.org/#/admin-managing-users?id=roles) for a detail of their permissions.


    # Errors


    The API uses standard HTTP status codes to indicate the success or failure

    of the API call. The body of the response will be JSON in the following

    format.


    ```

    {
      "code": "unauthorized_request", // example inner error code
      "error": "Token is invalid." // example exposed error message
    }

    ```
  license:
    name: AGPLv3.0
    url: https://github.com/Chocobozzz/PeerTube/blob/master/LICENSE
  title: PeerTube
  version: 3.0.1
  x-apisguru-categories:
    - social
  x-logo:
    altText: PeerTube Project Homepage
    url: https://joinpeertube.org/img/brand.png
  x-origin:
    - converter:
        url: https://github.com/mermade/oas-kit
        version: 7.0.4
      format: openapi
      url: https://raw.githubusercontent.com/Chocobozzz/PeerTube/develop/support/doc/api/openapi.yaml
      version: "3.0"
  x-providerName: cpy.re
  x-serviceName: peertube
externalDocs:
  url: https://docs.joinpeertube.org/api-rest-reference.html
tags:
  - description: >
      Accounts encompass remote accounts discovered across the federation, and correspond to the main Actor, along with video channels a user can create, which are also Actors.

      When a comment is posted, it is done with your Account's Actor.
    name: Accounts
  - description: >
      Using some features of PeerTube require authentication, for which User provide different levels of permission as well as associated user information. Each user has a corresponding local Account for federation.
    name: Users
  - description: >
      Operations related to your own User, when logged-in.
    name: My User
  - description: >
      Operations related to your subscriptions to video channels, their new videos, and how to keep up to date with their latest publications!
    name: My Subscriptions
  - description: >
      Operations related to your watch history.
    name: My History
  - description: >
      Notifications following new videos, follows or reports. They allow you to keep track of the interactions and overall important information that concerns you. You MAY set per-notification type delivery preference, to receive the info either by mail, by in-browser notification or both.
    name: My Notifications
  - description: >
      Each server exposes public information regarding supported videos and options.
    name: Config
  - description: >
      Jobs are long-running tasks enqueued and processed by the instance itself. No additional worker registration is currently available.
    name: Job
  - description: >
      Managing servers which the instance interacts with is crucial to the concept of federation in PeerTube and external video indexation. The PeerTube server then deals with inter-server ActivityPub operations and propagates information across its social graph by posting activities to actors' inbox endpoints.
    externalDocs:
      url: https://docs.joinpeertube.org/#/admin-following-instances?id=instances-follows
    name: Instance Follows
  - description: >
      Redundancy is part of the inter-server solidarity that PeerTube fosters. Manage the list of instances you wish to help by seeding their videos according to the policy of video selection of your choice. Note that you have a similar functionality to mirror individual videos, see `Video Mirroring`.
    externalDocs:
      url: https://docs.joinpeertube.org/#/admin-following-instances?id=instances-redundancy
    name: Instance Redundancy
  - description: >
      Managing plugins installed from a local path or from NPM, or search for new ones.
    externalDocs:
      url: https://docs.joinpeertube.org/#/api-plugins
    name: Plugins
  - description: >
      Abuses deal with reports of local or remote videos/comments/accounts alike.
    name: Abuses
  - description: >
      Operations dealing with listing, uploading, fetching or modifying videos.
    name: Video
  - description: >
      The search helps to find _videos_ or _channels_ from within the instance and beyond.

      Videos from other instances federated by the instance (that is, instances

      followed by the instance) can be found via keywords and other criteria of

      the advanced search.


      Administrators can also enable the use of a remote search system, indexing

      videos and channels not could be not federated by the instance.
    name: Search
  - description: >
      Operations dealing with comments to a video. Comments are organized in threads.
    name: Video Comments
  - description: >
      Operations dealing with playlists of videos. Playlists are bound to users and/or channels.
    name: Video Playlists
  - description: >
      Operations dealing with the creation, modification and listing of videos within a channel.
    name: Video Channels
  - description: >
      Operations dealing with blocking videos (removing them from view and preventing interactions).
    name: Video Blocks
  - description: >
      Like/dislike a video.
    name: Video Rates
  - description: >
      Server syndication feeds
    name: Feeds
paths:
  /abuses:
    get:
      parameters:
        - description: only list the report with this id
          in: query
          name: id
          schema:
            type: integer
        - description: predefined reason the listed reports should contain
          in: query
          name: predefinedReason
          schema:
            $ref: "#/components/schemas/PredefinedAbuseReasons"
        - description: plain search that will match with video titles, reporter names and more
          in: query
          name: search
          schema:
            type: string
        - in: query
          name: state
          schema:
            $ref: "#/components/schemas/AbuseStateSet"
        - description: only list reports of a specific reporter
          in: query
          name: searchReporter
          schema:
            type: string
        - description: only list reports of a specific reportee
          in: query
          name: searchReportee
          schema:
            type: string
        - description: only list reports of a specific video
          in: query
          name: searchVideo
          schema:
            type: string
        - description: only list reports of a specific video channel
          in: query
          name: searchVideoChannel
          schema:
            type: string
        - description: only list blacklisted or deleted videos
          in: query
          name: videoIs
          schema:
            enum:
              - deleted
              - blacklisted
            type: string
        - description: only list account, comment or video reports
          in: query
          name: filter
          schema:
            enum:
              - video
              - comment
              - account
            type: string
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/abusesSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Abuse"
                type: array
          description: successful operation
      security:
        - OAuth2:
            - admin
            - moderator
      summary: List abuses
      tags:
        - Abuses
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                account:
                  properties:
                    id:
                      description: Account id to report
                      type: number
                  type: object
                comment:
                  properties:
                    id:
                      description: Comment id to report
                      type: number
                  type: object
                predefinedReasons:
                  $ref: "#/components/schemas/PredefinedAbuseReasons"
                reason:
                  description: Reason why the user reports this video
                  minLength: 4
                  type: string
                video:
                  properties:
                    endAt:
                      description: Timestamp in the video that marks the ending of the report
                      minimum: 0
                      type: integer
                    id:
                      description: Video id to report
                      type: number
                    startAt:
                      description: Timestamp in the video that marks the beginning of the report
                      minimum: 0
                      type: integer
                  type: object
              required:
                - reason
              type: object
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          description: incorrect request parameters
      security:
        - OAuth2: []
      summary: Report an abuse
      tags:
        - Abuses
  "/abuses/{abuseId}":
    delete:
      parameters:
        - $ref: "#/components/parameters/abuseId"
      responses:
        "204":
          description: successful operation
        "404":
          description: block not found
      security:
        - OAuth2:
            - admin
            - moderator
      summary: Delete an abuse
      tags:
        - Abuses
    put:
      parameters:
        - $ref: "#/components/parameters/abuseId"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                moderationComment:
                  description: Update the report comment visible only to the moderation team
                  type: string
                state:
                  $ref: "#/components/schemas/AbuseStateSet"
              type: object
      responses:
        "204":
          description: successful operation
        "404":
          description: abuse not found
      security:
        - OAuth2:
            - admin
            - moderator
      summary: Update an abuse
      tags:
        - Abuses
  "/abuses/{abuseId}/messages":
    get:
      parameters:
        - $ref: "#/components/parameters/abuseId"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AbuseMessage"
                type: array
          description: successful operation
      security:
        - OAuth2: []
      summary: List messages of an abuse
      tags:
        - Abuses
    post:
      parameters:
        - $ref: "#/components/parameters/abuseId"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                message:
                  description: Message to send
                  type: string
              required:
                - message
              type: object
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: incorrect request parameters
      security:
        - OAuth2: []
      summary: Add message to an abuse
      tags:
        - Abuses
  "/abuses/{abuseId}/messages/{abuseMessageId}":
    delete:
      parameters:
        - $ref: "#/components/parameters/abuseId"
        - $ref: "#/components/parameters/abuseMessageId"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Delete an abuse message
      tags:
        - Abuses
  /accounts:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Account"
                type: array
          description: successful operation
      summary: List accounts
      tags:
        - Accounts
  "/accounts/{name}":
    get:
      parameters:
        - $ref: "#/components/parameters/name"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
          description: successful operation
        "404":
          description: account not found
      summary: Get an account
      tags:
        - Accounts
  "/accounts/{name}/ratings":
    get:
      parameters:
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
        - description: Optionally filter which ratings to retrieve
          in: query
          name: rating
          required: false
          schema:
            enum:
              - like
              - dislike
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VideoRating"
                type: array
          description: successful operation
      security:
        - OAuth2: []
      summary: List ratings of an account
      tags:
        - Accounts
  "/accounts/{name}/video-channels":
    get:
      parameters:
        - $ref: "#/components/parameters/name"
        - description: include view statistics for the last 30 days (only if authentified as the account user)
          in: query
          name: withStats
          schema:
            type: boolean
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VideoChannel"
                type: array
          description: successful operation
      summary: List video channels of an account
      tags:
        - Video Channels
        - Accounts
  "/accounts/{name}/videos":
    get:
      parameters:
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/categoryOneOf"
        - $ref: "#/components/parameters/tagsOneOf"
        - $ref: "#/components/parameters/tagsAllOf"
        - $ref: "#/components/parameters/licenceOneOf"
        - $ref: "#/components/parameters/languageOneOf"
        - $ref: "#/components/parameters/nsfw"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/skipCount"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/videosSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
      summary: List videos of an account
      tags:
        - Accounts
        - Video
      x-code-samples:
        - lang: JavaScript
          source: >
            fetch('https://peertube2.cpy.re/api/v1/accounts/{name}/videos')

            .then(function(response) {
              return response.json()
            }).then(function(data) {
              console.log(data)
            })
        - lang: Shell
          source: >
            ## DEPENDENCIES: jq

            curl -s https://peertube2.cpy.re/api/v1/accounts/{name}/videos | jq
        - lang: Ruby
          source: >
            require 'net/http'

            require 'json'


            uri = URI.parse("https://peertube2.cpy.re/api/v1/accounts/{name}/videos")


            http = Net::HTTP.new(uri.host, uri.port)

            http.use_ssl = true


            response = http.get(uri.request_uri)


            puts JSON.parse(response.read_body)
        - lang: Python
          source: >
            import requests


            r = requests.get("https://peertube2.cpy.re/api/v1//accounts/{name}/videos")

            json = r.json()


            print(json)
  /blocklist/accounts:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: List account blocks
      tags:
        - Account Blocks
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                accountName:
                  description: account to block, in the form `username@domain`
                  example: chocobozzz@example.org
                  type: string
              required:
                - accountName
              type: object
      responses:
        "200":
          description: successful operation
        "409":
          description: self-blocking forbidden
      security:
        - OAuth2:
            - admin
      summary: Block an account
      tags:
        - Account Blocks
  "/blocklist/accounts/{accountName}":
    delete:
      parameters:
        - description: account to unblock, in the form `username@domain`
          in: path
          name: accountName
          required: true
          schema:
            type: string
      responses:
        "201":
          description: successful operation
        "404":
          description: account or account block does not exist
      security:
        - OAuth2:
            - admin
      summary: Unblock an account by its handle
      tags:
        - Account Blocks
  /blocklist/servers:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: List server blocks
      tags:
        - Server Blocks
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                host:
                  description: server domain to block
                  format: hostname
                  type: string
              required:
                - host
              type: object
      responses:
        "200":
          description: successful operation
        "409":
          description: self-blocking forbidden
      security:
        - OAuth2:
            - admin
      summary: Block a server
      tags:
        - Server Blocks
  "/blocklist/servers/{host}":
    delete:
      parameters:
        - description: server domain to unblock
          in: path
          name: host
          required: true
          schema:
            format: hostname
            type: string
      responses:
        "201":
          description: successful operation
        "404":
          description: account block does not exist
      security:
        - OAuth2:
            - admin
      summary: Unblock a server by its domain
      tags:
        - Server Blocks
  /config:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerConfig"
          description: successful operation
      summary: Get instance public configuration
      tags:
        - Config
  /config/about:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerConfigAbout"
          description: successful operation
      summary: Get instance "About" information
      tags:
        - Config
  /config/custom:
    delete:
      responses:
        "200":
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: Delete instance runtime configuration
      tags:
        - Config
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerConfigCustom"
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: Get instance runtime configuration
      tags:
        - Config
    put:
      responses:
        "200":
          description: successful operation
        "400":
          description: >
            Arises when:
              - the emailer is disabled and the instance is open to registrations
              - webtorrent and hls are disabled with transcoding enabled - you need at least one enabled
          x-summary: field inconsistencies
      security:
        - OAuth2:
            - admin
      summary: Set instance runtime configuration
      tags:
        - Config
  "/feeds/video-comments.{format}":
    get:
      parameters:
        - description: format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))
          in: path
          name: format
          required: true
          schema:
            enum:
              - xml
              - rss
              - rss2
              - atom
              - atom1
              - json
              - json1
            type: string
        - description: limit listing to a specific video
          in: query
          name: videoId
          schema:
            type: string
        - description: limit listing to a specific account
          in: query
          name: accountId
          schema:
            type: string
        - description: limit listing to a specific account
          in: query
          name: accountName
          schema:
            type: string
        - description: limit listing to a specific video channel
          in: query
          name: videoChannelId
          schema:
            type: string
        - description: limit listing to a specific video channel
          in: query
          name: videoChannelName
          schema:
            type: string
      responses:
        "204":
          content:
            application/atom+xml:
              schema:
                $ref: "#/components/schemas/VideoCommentsForXML"
            application/json:
              schema:
                type: object
            application/rss+xml:
              schema:
                $ref: "#/components/schemas/VideoCommentsForXML"
            application/xml:
              schema:
                $ref: "#/components/schemas/VideoCommentsForXML"
            text/xml:
              schema:
                $ref: "#/components/schemas/VideoCommentsForXML"
          description: successful operation
          headers:
            Cache-Control:
              schema:
                default: max-age=900
                type: string
        "400":
          description: >
            Arises when:
              - videoId filter is mixed with a channel filter
          x-summary: field inconsistencies
        "404":
          description: video, video channel or account not found
        "406":
          description: accept header unsupported
      servers:
        - description: Live Test Server (live data - latest nightly version)
          url: https://peertube2.cpy.re
        - description: Live Test Server (live data - latest RC version)
          url: https://peertube3.cpy.re
        - description: Live Test Server (live data - stable version)
          url: https://peertube.cpy.re
      summary: List comments on videos
      tags:
        - Feeds
  "/feeds/videos.{format}":
    get:
      parameters:
        - description: format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))
          in: path
          name: format
          required: true
          schema:
            enum:
              - xml
              - rss
              - rss2
              - atom
              - atom1
              - json
              - json1
            type: string
        - description: limit listing to a specific account
          in: query
          name: accountId
          schema:
            type: string
        - description: limit listing to a specific account
          in: query
          name: accountName
          schema:
            type: string
        - description: limit listing to a specific video channel
          in: query
          name: videoChannelId
          schema:
            type: string
        - description: limit listing to a specific video channel
          in: query
          name: videoChannelName
          schema:
            type: string
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/nsfw"
        - $ref: "#/components/parameters/filter"
      responses:
        "204":
          content:
            application/atom+xml:
              schema:
                $ref: "#/components/schemas/VideosForXML"
            application/json:
              schema:
                type: object
            application/rss+xml:
              schema:
                $ref: "#/components/schemas/VideosForXML"
            application/xml:
              examples:
                nightly:
                  externalValue: https://peertube2.cpy.re/feeds/videos.xml?filter=local
              schema:
                $ref: "#/components/schemas/VideosForXML"
            text/xml:
              schema:
                $ref: "#/components/schemas/VideosForXML"
          description: successful operation
          headers:
            Cache-Control:
              schema:
                default: max-age=900
                type: string
        "404":
          description: video channel or account not found
        "406":
          description: accept header unsupported
      servers:
        - description: Live Test Server (live data - latest nightly version)
          url: https://peertube2.cpy.re
        - description: Live Test Server (live data - latest RC version)
          url: https://peertube3.cpy.re
        - description: Live Test Server (live data - stable version)
          url: https://peertube.cpy.re
      summary: List videos
      tags:
        - Feeds
  "/jobs/{state}":
    get:
      parameters:
        - description: The state of the job ('' for for no filter)
          in: path
          name: state
          required: true
          schema:
            enum:
              - ""
              - active
              - completed
              - failed
              - waiting
              - delayed
            type: string
        - $ref: "#/components/parameters/jobType"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Job"
                    maxItems: 100
                    type: array
                  total:
                    example: 1
                    type: integer
                type: object
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: List instance jobs
      tags:
        - Job
  /plugins:
    get:
      parameters:
        - in: query
          name: pluginType
          schema:
            type: integer
        - in: query
          name: uninstalled
          schema:
            type: boolean
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PluginResponse"
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: List plugins
      tags:
        - Plugins
  /plugins/available:
    get:
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: pluginType
          schema:
            type: integer
        - in: query
          name: currentPeerTubeEngine
          schema:
            type: string
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PluginResponse"
          description: successful operation
        "503":
          description: plugin index unavailable
      security:
        - OAuth2:
            - admin
      summary: List available plugins
      tags:
        - Plugins
  /plugins/install:
    post:
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    npmName:
                      example: peertube-plugin-auth-ldap
                      type: string
                  required:
                    - npmName
                  type: object
                - additionalProperties: false
                  properties:
                    path:
                      type: string
                  required:
                    - path
                  type: object
      responses:
        "204":
          description: successful operation
        "400":
          description: should have either `npmName` or `path` set
      security:
        - OAuth2:
            - admin
      summary: Install a plugin
      tags:
        - Plugins
  /plugins/uninstall:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                npmName:
                  description: name of the plugin/theme in its package.json
                  example: peertube-plugin-auth-ldap
                  type: string
              required:
                - npmName
              type: object
      responses:
        "204":
          description: successful operation
        "404":
          description: existing plugin not found
      security:
        - OAuth2:
            - admin
      summary: Uninstall a plugin
      tags:
        - Plugins
  /plugins/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - additionalProperties: false
                  properties:
                    npmName:
                      example: peertube-plugin-auth-ldap
                      type: string
                  required:
                    - npmName
                  type: object
                - additionalProperties: false
                  properties:
                    path:
                      type: string
                  required:
                    - path
                  type: object
      responses:
        "204":
          description: successful operation
        "400":
          description: should have either `npmName` or `path` set
        "404":
          description: existing plugin not found
      security:
        - OAuth2:
            - admin
      summary: Update a plugin
      tags:
        - Plugins
  "/plugins/{npmName}":
    get:
      parameters:
        - $ref: "#/components/parameters/npmName"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plugin"
          description: successful operation
        "404":
          description: plugin not found
      security:
        - OAuth2:
            - admin
      summary: Get a plugin
      tags:
        - Plugins
  "/plugins/{npmName}/public-settings":
    get:
      parameters:
        - $ref: "#/components/parameters/npmName"
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
          description: successful operation
        "404":
          description: plugin not found
      summary: Get a plugin's public settings
      tags:
        - Plugins
  "/plugins/{npmName}/registered-settings":
    get:
      parameters:
        - $ref: "#/components/parameters/npmName"
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
          description: successful operation
        "404":
          description: plugin not found
      security:
        - OAuth2:
            - admin
      summary: Get a plugin's registered settings
      tags:
        - Plugins
  "/plugins/{npmName}/settings":
    put:
      parameters:
        - $ref: "#/components/parameters/npmName"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                settings:
                  additionalProperties: true
                  type: object
              type: object
      responses:
        "204":
          description: successful operation
        "404":
          description: plugin not found
      security:
        - OAuth2:
            - admin
      summary: Set a plugin's settings
      tags:
        - Plugins
  /redundancy/videos:
    get:
      parameters:
        - description: direction of the mirror
          in: query
          name: target
          required: true
          schema:
            enum:
              - my-videos
              - remote-videos
            type: string
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/videoRedundanciesSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VideoRedundancy"
                type: array
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: List videos being mirrored
      tags:
        - Video Mirroring
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                videoId:
                  type: integer
              required:
                - videoId
              type: object
      responses:
        "204":
          description: successful operation
        "400":
          description: cannot mirror a local video
        "404":
          description: video does not exist
        "409":
          description: video is already mirrored
      security:
        - OAuth2:
            - admin
      summary: Mirror a video
      tags:
        - Video Mirroring
  "/redundancy/videos/{redundancyId}":
    delete:
      parameters:
        - description: id of an existing redundancy on a video
          in: path
          name: redundancyId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: successful operation
        "404":
          description: video redundancy not found
      security:
        - OAuth2:
            - admin
      summary: Delete a mirror done on a video
      tags:
        - Video Mirroring
  "/redundancy/{host}":
    put:
      parameters:
        - description: server domain to mirror
          in: path
          name: host
          required: true
          schema:
            format: hostname
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                redundancyAllowed:
                  description: allow mirroring of the host's local videos
                  type: boolean
              required:
                - redundancyAllowed
              type: object
      responses:
        "204":
          description: successful operation
        "404":
          description: server is not already known
      security:
        - OAuth2:
            - admin
      summary: Update a server redundancy policy
      tags:
        - Instance Redundancy
  /search/video-channels:
    get:
      callbacks:
        searchTarget === search-index:
          $ref: "#/components/callbacks/searchIndex"
      parameters:
        - description: >
            String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete channel information and interact with it.
          in: query
          name: search
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/searchTarget"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VideoChannel"
                type: array
          description: successful operation
        "500":
          description: search index unavailable
      summary: Search channels
      tags:
        - Search
  /search/videos:
    get:
      callbacks:
        searchTarget === search-index:
          $ref: "#/components/callbacks/searchIndex"
      parameters:
        - allowEmptyValue: false
          description: >
            String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete video information and interact with it.
          in: query
          name: search
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/categoryOneOf"
        - $ref: "#/components/parameters/tagsOneOf"
        - $ref: "#/components/parameters/tagsAllOf"
        - $ref: "#/components/parameters/licenceOneOf"
        - $ref: "#/components/parameters/languageOneOf"
        - $ref: "#/components/parameters/nsfw"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/skipCount"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/searchTarget"
        - $ref: "#/components/parameters/videosSearchSort"
        - description: Get videos that are published after this date
          in: query
          name: startDate
          schema:
            format: date-time
            type: string
        - description: Get videos that are published before this date
          in: query
          name: endDate
          schema:
            format: date-time
            type: string
        - description: Get videos that are originally published after this date
          in: query
          name: originallyPublishedStartDate
          schema:
            format: date-time
            type: string
        - description: Get videos that are originally published before this date
          in: query
          name: originallyPublishedEndDate
          schema:
            format: date-time
            type: string
        - description: Get videos that have this minimum duration
          in: query
          name: durationMin
          schema:
            type: integer
        - description: Get videos that have this maximum duration
          in: query
          name: durationMax
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
        "500":
          description: search index unavailable
      summary: Search videos
      tags:
        - Search
  /server/followers:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Follow"
                type: array
          description: successful operation
      summary: List instance followers
      tags:
        - Instance Follows
  /server/following:
    get:
      parameters:
        - in: query
          name: state
          schema:
            enum:
              - pending
              - accepted
            type: string
        - in: query
          name: actorType
          schema:
            enum:
              - Person
              - Application
              - Group
              - Service
              - Organization
            type: string
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Follow"
                type: array
          description: successful operation
      summary: List instances followed by the server
      tags:
        - Instance Follows
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                hosts:
                  items:
                    format: hostname
                    type: string
                  type: array
                  uniqueItems: true
              type: object
      responses:
        "204":
          description: successful operation
        "500":
          description: cannot follow a non-HTTPS server
      security:
        - OAuth2:
            - admin
      summary: Follow a server
      tags:
        - Instance Follows
  "/server/following/{host}":
    delete:
      parameters:
        - description: "The host to unfollow "
          in: path
          name: host
          required: true
          schema:
            format: hostname
            type: string
      responses:
        "201":
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: Unfollow a server
      tags:
        - Instance Follows
  /users:
    get:
      parameters:
        - $ref: "#/components/parameters/usersSearch"
        - $ref: "#/components/parameters/usersBlocked"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/usersSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                type: array
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: List users
      tags:
        - Users
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUser"
        description: User to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddUserResponse"
          description: user created
          links:
            DelUserId:
              operationId: delUserId
              parameters:
                id: $response.body#/user/id
            GetUserId:
              operationId: getUserId
              parameters:
                id: $response.body#/user/id
            PutUserId:
              operationId: putUserId
              parameters:
                id: $response.body#/user/id
        "403":
          description: insufficient authority to create an admin or moderator
      security:
        - OAuth2:
            - admin
      summary: Create a user
      tags:
        - Users
  /users/me:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                type: array
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Get my user information
      tags:
        - My User
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMe"
        required: true
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Update my user information
      tags:
        - My User
  /users/me/abuses:
    get:
      parameters:
        - description: only list the report with this id
          in: query
          name: id
          schema:
            type: integer
        - in: query
          name: state
          schema:
            $ref: "#/components/schemas/AbuseStateSet"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/abusesSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Abuse"
                type: array
          description: successful operation
      security:
        - OAuth2: []
      summary: List my abuses
      tags:
        - Abuses
        - My User
  /users/me/avatar/pick:
    post:
      requestBody:
        content:
          multipart/form-data:
            encoding:
              avatarfile:
                contentType: image/png, image/jpeg
            schema:
              properties:
                avatarfile:
                  description: The file to upload.
                  format: binary
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Avatar"
          description: successful operation
        "413":
          description: image file too large
          headers:
            X-File-Maximum-Size:
              description: Maximum file size for the avatar
              schema:
                format: Nginx size
                type: string
      security:
        - OAuth2: []
      summary: Update my user avatar
      tags:
        - My User
  /users/me/history/videos:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/search"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
      security:
        - OAuth2: []
      summary: List watched videos history
      tags:
        - My History
  /users/me/history/videos/remove:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                beforeDate:
                  description: history before this date will be deleted
                  format: date-time
                  type: string
              type: object
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Clear video history
      tags:
        - My History
  /users/me/notification-settings:
    put:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                abuseAsModerator:
                  $ref: "#/components/schemas/NotificationSettingValue"
                autoInstanceFollowing:
                  $ref: "#/components/schemas/NotificationSettingValue"
                blacklistOnMyVideo:
                  $ref: "#/components/schemas/NotificationSettingValue"
                commentMention:
                  $ref: "#/components/schemas/NotificationSettingValue"
                myVideoImportFinished:
                  $ref: "#/components/schemas/NotificationSettingValue"
                myVideoPublished:
                  $ref: "#/components/schemas/NotificationSettingValue"
                newCommentOnMyVideo:
                  $ref: "#/components/schemas/NotificationSettingValue"
                newFollow:
                  $ref: "#/components/schemas/NotificationSettingValue"
                newInstanceFollower:
                  $ref: "#/components/schemas/NotificationSettingValue"
                newUserRegistration:
                  $ref: "#/components/schemas/NotificationSettingValue"
                newVideoFromSubscription:
                  $ref: "#/components/schemas/NotificationSettingValue"
                videoAutoBlacklistAsModerator:
                  $ref: "#/components/schemas/NotificationSettingValue"
              type: object
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Update my notification settings
      tags:
        - My Notifications
  /users/me/notifications:
    get:
      parameters:
        - description: only list unread notifications
          in: query
          name: unread
          schema:
            type: boolean
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationListResponse"
          description: successful operation
      security:
        - OAuth2: []
      summary: List my notifications
      tags:
        - My Notifications
  /users/me/notifications/read:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: ids of the notifications to mark as read
                  items:
                    type: integer
                  type: array
              required:
                - ids
              type: object
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Mark notifications as read by their id
      tags:
        - My Notifications
  /users/me/notifications/read-all:
    post:
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Mark all my notification as read
      tags:
        - My Notifications
  /users/me/subscriptions:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Get my user subscriptions
      tags:
        - My Subscriptions
    post:
      requestBody:
        content:
          application/json:
            examples:
              default:
                value:
                  uri: 008a0e54-375d-49d0-8379-143202e24152@video.lqdn.fr
            schema:
              properties:
                uri:
                  description: uri of the video channels to subscribe to
                  format: uri
                  type: string
              required:
                - uri
              type: object
      responses:
        "200":
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Add subscription to my user
      tags:
        - My Subscriptions
  /users/me/subscriptions/exist:
    get:
      parameters:
        - $ref: "#/components/parameters/subscriptionsUris"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Get if subscriptions exist for my user
      tags:
        - My Subscriptions
  /users/me/subscriptions/videos:
    get:
      parameters:
        - $ref: "#/components/parameters/categoryOneOf"
        - $ref: "#/components/parameters/tagsOneOf"
        - $ref: "#/components/parameters/tagsAllOf"
        - $ref: "#/components/parameters/licenceOneOf"
        - $ref: "#/components/parameters/languageOneOf"
        - $ref: "#/components/parameters/nsfw"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/skipCount"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/videosSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: List videos of subscriptions of my user
      tags:
        - My Subscriptions
        - Videos
  "/users/me/subscriptions/{subscriptionHandle}":
    delete:
      parameters:
        - $ref: "#/components/parameters/subscriptionHandle"
      responses:
        "200":
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Delete subscription of my user
      tags:
        - My Subscriptions
    get:
      parameters:
        - $ref: "#/components/parameters/subscriptionHandle"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoChannel"
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Get subscription of my user
      tags:
        - My Subscriptions
  /users/me/video-playlists/videos-exist:
    get:
      parameters:
        - description: The video ids to check
          in: query
          name: videoIds
          required: true
          schema:
            items:
              type: integer
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  videoId:
                    items:
                      properties:
                        playlistElementId:
                          type: integer
                        playlistId:
                          type: integer
                        startTimestamp:
                          type: integer
                        stopTimestamp:
                          type: integer
                      type: object
                    type: array
                type: object
          description: successful operation
      security:
        - OAuth2: []
      summary: Check video exists in my playlists
      tags:
        - Video Playlists
  /users/me/video-quota-used:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: number
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Get my user used quota
      tags:
        - My User
  /users/me/videos:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Get videos of my user
      tags:
        - My User
        - Videos
  /users/me/videos/imports:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoImport"
          description: successful operation
      security:
        - OAuth2:
            - user
      summary: Get video imports of my user
      tags:
        - Videos
        - My User
  "/users/me/videos/{videoId}/rating":
    get:
      parameters:
        - description: "The video id "
          in: path
          name: videoId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMeVideoRating"
          description: successful operation
      security:
        - OAuth2: []
      summary: Get rate of my user for a video
      tags:
        - My User
        - Video Rates
  /users/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
        required: true
      responses:
        "204":
          description: successful operation
      summary: Register a user
      tags:
        - Users
  "/users/{id}":
    delete:
      operationId: delUserId
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2:
            - admin
      summary: Delete a user
      tags:
        - Users
    get:
      operationId: getUserId
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: successful operation
      security:
        - OAuth2: []
      summary: Get a user
      tags:
        - Users
    parameters:
      - $ref: "#/components/parameters/id"
    put:
      operationId: putUserId
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
        required: true
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Update a user
      tags:
        - Users
  /video-channels:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/VideoChannel"
                    type: array
                  total:
                    example: 1
                    type: integer
                type: object
          description: successful operation
      summary: List video channels
      tags:
        - Video Channels
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoChannelCreate"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Create a video channel
      tags:
        - Video Channels
  "/video-channels/{channelHandle}":
    delete:
      parameters:
        - $ref: "#/components/parameters/channelHandle"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Delete a video channel
      tags:
        - Video Channels
    get:
      parameters:
        - $ref: "#/components/parameters/channelHandle"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoChannel"
          description: successful operation
      summary: Get a video channel
      tags:
        - Video Channels
    put:
      parameters:
        - $ref: "#/components/parameters/channelHandle"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoChannelUpdate"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Update a video channel
      tags:
        - Video Channels
  "/video-channels/{channelHandle}/videos":
    get:
      parameters:
        - $ref: "#/components/parameters/channelHandle"
        - $ref: "#/components/parameters/categoryOneOf"
        - $ref: "#/components/parameters/tagsOneOf"
        - $ref: "#/components/parameters/tagsAllOf"
        - $ref: "#/components/parameters/licenceOneOf"
        - $ref: "#/components/parameters/languageOneOf"
        - $ref: "#/components/parameters/nsfw"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/skipCount"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/videosSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
      summary: List videos of a video channel
      tags:
        - Video
        - Video Channels
  /video-playlists:
    get:
      parameters:
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/sort"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/VideoPlaylist"
                    type: array
                  total:
                    example: 1
                    type: integer
                type: object
          description: successful operation
      summary: List video playlists
      tags:
        - Video Playlists
    post:
      description: If the video playlist is set as public, the videoChannelId is mandatory.
      requestBody:
        content:
          multipart/form-data:
            encoding:
              thumbnailfile:
                contentType: image/jpeg
            schema:
              properties:
                description:
                  description: Video playlist description
                  type: string
                displayName:
                  description: Video playlist display name
                  type: string
                privacy:
                  $ref: "#/components/schemas/VideoPlaylistPrivacySet"
                thumbnailfile:
                  description: Video playlist thumbnail file
                  format: binary
                  type: string
                videoChannelId:
                  description: Video channel in which the playlist will be published
                  type: integer
              required:
                - displayName
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  videoPlaylist:
                    properties:
                      id:
                        type: integer
                      uuid:
                        type: string
                    type: object
                type: object
          description: successful operation
      security:
        - OAuth2: []
      summary: Create a video playlist
      tags:
        - Video Playlists
  /video-playlists/privacies:
    get:
      responses:
        "200":
          content:
            application/json:
              examples:
                nightly:
                  externalValue: https://peertube2.cpy.re/api/v1/video-playlists/privacies
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      summary: List available playlist privacies
      tags:
        - Video Playlists
  "/video-playlists/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Delete a video playlist
      tags:
        - Video Playlists
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoPlaylist"
          description: successful operation
      summary: Get a video playlist
      tags:
        - Video Playlists
    put:
      description: If the video playlist is set as public, the playlist must have a assigned channel.
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          multipart/form-data:
            encoding:
              thumbnailfile:
                contentType: image/jpeg
            schema:
              properties:
                description:
                  description: Video playlist description
                  type: string
                displayName:
                  description: Video playlist display name
                  type: string
                privacy:
                  $ref: "#/components/schemas/VideoPlaylistPrivacySet"
                thumbnailfile:
                  description: Video playlist thumbnail file
                  format: binary
                  type: string
                videoChannelId:
                  description: Video channel in which the playlist will be published
                  type: integer
              type: object
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Update a video playlist
      tags:
        - Video Playlists
  "/video-playlists/{id}/videos":
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
      summary: List videos of a playlist
      tags:
        - Videos
        - Video Playlists
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                startTimestamp:
                  description: Start the video at this specific timestamp (in seconds)
                  type: integer
                stopTimestamp:
                  description: Stop the video at this specific timestamp (in seconds)
                  type: integer
                videoId:
                  description: Video to add in the playlist
                  type: integer
              required:
                - videoId
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  videoPlaylistElement:
                    properties:
                      id:
                        type: integer
                    type: object
                type: object
          description: successful operation
      security:
        - OAuth2: []
      summary: Add a video in a playlist
      tags:
        - Videos
        - Video Playlists
  "/video-playlists/{id}/videos/reorder":
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                insertAfterPosition:
                  description: New position for the block to reorder, to add the block before the first element
                  minimum: 0
                  type: integer
                reorderLength:
                  description: How many element from `startPosition` to reorder
                  minimum: 1
                  type: integer
                startPosition:
                  description: Start position of the element to reorder
                  minimum: 1
                  type: integer
              required:
                - startPosition
                - insertAfterPosition
              type: object
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Reorder a playlist
      tags:
        - Video Playlists
  "/video-playlists/{id}/videos/{playlistElementId}":
    delete:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/playlistElementId"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Delete an element from a playlist
      tags:
        - Video Playlists
    put:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/playlistElementId"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                startTimestamp:
                  description: Start the video at this specific timestamp (in seconds)
                  type: integer
                stopTimestamp:
                  description: Stop the video at this specific timestamp (in seconds)
                  type: integer
              type: object
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Update a playlist element
      tags:
        - Video Playlists
  /videos:
    get:
      parameters:
        - $ref: "#/components/parameters/categoryOneOf"
        - $ref: "#/components/parameters/tagsOneOf"
        - $ref: "#/components/parameters/tagsAllOf"
        - $ref: "#/components/parameters/licenceOneOf"
        - $ref: "#/components/parameters/languageOneOf"
        - $ref: "#/components/parameters/nsfw"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/skipCount"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/videosSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoListResponse"
          description: successful operation
      summary: List videos
      tags:
        - Video
  /videos/blacklist:
    get:
      parameters:
        - description: >
            list only blocks that match this type:

            - `1`: manual block

            - `2`: automatic block that needs review
          in: query
          name: type
          schema:
            enum:
              - 1
              - 2
            type: integer
        - description: plain search that will match with video titles, and more
          in: query
          name: search
          schema:
            type: string
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/blacklistsSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/VideoBlacklist"
                    type: array
                  total:
                    example: 1
                    type: integer
                type: object
          description: successful operation
      security:
        - OAuth2:
            - admin
            - moderator
      summary: List video blocks
      tags:
        - Video Blocks
  /videos/categories:
    get:
      responses:
        "200":
          content:
            application/json:
              examples:
                nightly:
                  externalValue: https://peertube2.cpy.re/api/v1/videos/categories
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      summary: List available video categories
      tags:
        - Video
  /videos/imports:
    post:
      description: Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)
      requestBody:
        content:
          multipart/form-data:
            encoding:
              previewfile:
                contentType: image/jpeg
              thumbnailfile:
                contentType: image/jpeg
              torrentfile:
                contentType: application/x-bittorrent
            schema:
              properties:
                category:
                  description: Video category
                  type: string
                channelId:
                  description: Channel id that will contain this video
                  type: integer
                commentsEnabled:
                  description: Enable or disable comments for this video
                  type: boolean
                description:
                  description: Video description
                  type: string
                downloadEnabled:
                  description: Enable or disable downloading for this video
                  type: boolean
                language:
                  description: Video language
                  type: string
                licence:
                  description: Video licence
                  type: string
                magnetUri:
                  description: Magnet URI
                  type: string
                name:
                  description: Video name
                  type: string
                nsfw:
                  description: Whether or not this video contains sensitive content
                  type: boolean
                previewfile:
                  description: Video preview file
                  format: binary
                  type: string
                privacy:
                  $ref: "#/components/schemas/VideoPrivacySet"
                scheduleUpdate:
                  $ref: "#/components/schemas/VideoScheduledUpdate"
                support:
                  description: A text tell the audience how to support the video creator
                  example: Please support my work on <insert crowdfunding plateform>! <3
                  type: string
                tags:
                  description: Video tags (maximum 5 tags each between 2 and 30 characters)
                  items:
                    maxLength: 30
                    minLength: 2
                    type: string
                  maxItems: 5
                  minItems: 1
                  type: array
                targetUrl:
                  description: HTTP target URL
                  type: string
                thumbnailfile:
                  description: Video thumbnail file
                  format: binary
                  type: string
                torrentfile:
                  description: Torrent File
                  format: binary
                  type: string
                waitTranscoding:
                  description: Whether or not we wait transcoding before publish the video
                  type: boolean
              required:
                - channelId
                - name
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoUploadResponse"
          description: successful operation
        "400":
          description: "`magnetUri` or `targetUrl` or a torrent file missing"
        "403":
          description: video didn't pass pre-import filter
        "409":
          description: HTTP or Torrent/magnetURI import not enabled
      security:
        - OAuth2: []
      summary: Import a video
      tags:
        - Video
  /videos/languages:
    get:
      responses:
        "200":
          content:
            application/json:
              examples:
                nightly:
                  externalValue: https://peertube2.cpy.re/api/v1/videos/languages
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      summary: List available video languages
      tags:
        - Video
  /videos/licences:
    get:
      responses:
        "200":
          content:
            application/json:
              examples:
                nightly:
                  externalValue: https://peertube2.cpy.re/api/v1/videos/licences
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      summary: List available video licences
      tags:
        - Video
  /videos/live:
    post:
      requestBody:
        content:
          multipart/form-data:
            encoding:
              previewfile:
                contentType: image/jpeg
              thumbnailfile:
                contentType: image/jpeg
            schema:
              properties:
                category:
                  description: Live video/replay category
                  type: string
                channelId:
                  description: Channel id that will contain this live video
                  type: integer
                commentsEnabled:
                  description: Enable or disable comments for this live video/replay
                  type: boolean
                description:
                  description: Live video/replay description
                  type: string
                downloadEnabled:
                  description: Enable or disable downloading for the replay of this live
                  type: boolean
                language:
                  description: Live video/replay language
                  type: string
                licence:
                  description: Live video/replay licence
                  type: string
                name:
                  description: Live video/replay name
                  type: string
                nsfw:
                  description: Whether or not this live video/replay contains sensitive content
                  type: boolean
                permanentLive:
                  description: User can stream multiple times in a permanent live
                  type: boolean
                previewfile:
                  description: Live video/replay preview file
                  format: binary
                  type: string
                privacy:
                  $ref: "#/components/schemas/VideoPrivacySet"
                saveReplay:
                  type: boolean
                support:
                  description: A text tell the audience how to support the creator
                  example: Please support my work on <insert crowdfunding plateform>! <3
                  type: string
                tags:
                  description: Live video/replay tags (maximum 5 tags each between 2 and 30 characters)
                  items:
                    maxLength: 30
                    minLength: 2
                    type: string
                  maxItems: 5
                  minItems: 1
                  type: array
                thumbnailfile:
                  description: Live video/replay thumbnail file
                  format: binary
                  type: string
              required:
                - channelId
                - name
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoUploadResponse"
          description: successful operation
        "403":
          description: Live is not enabled, allow replay is not enabled, or max instance/user live videos limit is exceeded
      security:
        - OAuth2: []
      summary: Create a live
      tags:
        - Live Videos
        - Video
  "/videos/live/{id}":
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiveVideoResponse"
          description: successful operation
      security:
        - OAuth2: []
      summary: Get a live information
      tags:
        - Live Videos
        - Video
    put:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LiveVideoUpdate"
      responses:
        "204":
          description: Successful operation
        "400":
          description: Bad parameters or trying to update a live that has already started
        "403":
          description: Trying to save replay of the live but saving replay is not enabled on the instance
      security:
        - OAuth2: []
      summary: Update a live information
      tags:
        - Live Videos
        - Video
  /videos/ownership:
    get:
      responses:
        "200":
          description: successful operation
      security:
        - OAuth2: []
      summary: List video ownership changes
      tags:
        - Video Ownership Change
  "/videos/ownership/{id}/accept":
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
        "403":
          description: cannot terminate an ownership change of another user
        "404":
          description: video owneship change not found
      security:
        - OAuth2: []
      summary: Accept ownership change request
      tags:
        - Video Ownership Change
  "/videos/ownership/{id}/refuse":
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
        "403":
          description: cannot terminate an ownership change of another user
        "404":
          description: video owneship change not found
      security:
        - OAuth2: []
      summary: Refuse ownership change request
      tags:
        - Video Ownership Change
  /videos/privacies:
    get:
      responses:
        "200":
          content:
            application/json:
              examples:
                nightly:
                  externalValue: https://peertube2.cpy.re/api/v1/videos/privacies
              schema:
                items:
                  type: string
                type: array
          description: successful operation
      summary: List available video privacies
      tags:
        - Video
  /videos/upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            encoding:
              previewfile:
                contentType: image/jpeg
              thumbnailfile:
                contentType: image/jpeg
              videofile:
                contentType: video/mp4, video/webm, video/ogg, video/avi, video/quicktime, video/x-msvideo, video/x-flv, video/x-matroska, application/octet-stream
            schema:
              properties:
                category:
                  description: Video category
                  example: 4
                  type: integer
                channelId:
                  description: Channel id that will contain this video
                  type: integer
                commentsEnabled:
                  description: Enable or disable comments for this video
                  type: boolean
                description:
                  description: Video description
                  type: string
                downloadEnabled:
                  description: Enable or disable downloading for this video
                  type: boolean
                language:
                  description: Video language
                  example: 2
                  type: integer
                licence:
                  description: Video licence
                  type: string
                name:
                  description: Video name
                  type: string
                nsfw:
                  description: Whether or not this video contains sensitive content
                  type: boolean
                originallyPublishedAt:
                  description: Date when the content was originally published
                  format: date-time
                  type: string
                previewfile:
                  description: Video preview file
                  format: binary
                  type: string
                privacy:
                  $ref: "#/components/schemas/VideoPrivacySet"
                scheduleUpdate:
                  $ref: "#/components/schemas/VideoScheduledUpdate"
                support:
                  description: A text tell the audience how to support the video creator
                  example: Please support my work on <insert crowdfunding plateform>! <3
                  type: string
                tags:
                  description: Video tags (maximum 5 tags each between 2 and 30 characters)
                  items:
                    maxLength: 30
                    minLength: 2
                    type: string
                  maxItems: 5
                  minItems: 1
                  type: array
                  uniqueItems: true
                thumbnailfile:
                  description: Video thumbnail file
                  format: binary
                  type: string
                videofile:
                  description: Video file
                  format: binary
                  type: string
                waitTranscoding:
                  description: Whether or not we wait transcoding before publish the video
                  type: boolean
              required:
                - videofile
                - channelId
                - name
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoUploadResponse"
          description: successful operation
        "400":
          description: invalid file field, schedule date or parameter
        "403":
          description: video didn't pass upload filter
        "408":
          description: upload has timed out
        "413":
          description: video file too large, due to quota or max body size limit set by the reverse-proxy
          headers:
            X-File-Maximum-Size:
              description: Maximum file size for the video
              schema:
                format: Nginx size
                type: string
        "415":
          description: video type unsupported
        "422":
          description: video unreadable
      security:
        - OAuth2: []
      summary: Upload a video
      tags:
        - Video
      x-code-samples:
        - lang: Shell
          source: >
            ## DEPENDENCIES: jq

            USERNAME="<your_username>"

            PASSWORD="<your_password>"

            FILE_PATH="<your_file_path>"

            CHANNEL_ID="<your_channel_id>"

            NAME="<video_name>"


            API_PATH="https://peertube2.cpy.re/api/v1"

            ## AUTH

            client_id=$(curl -s "$API_PATH/oauth-clients/local" | jq -r ".client_id")

            client_secret=$(curl -s "$API_PATH/oauth-clients/local" | jq -r ".client_secret")

            token=$(curl -s "$API_PATH/users/token" \
              --data client_id="$client_id" \
              --data client_secret="$client_secret" \
              --data grant_type=password \
              --data response_type=code \
              --data username="$USERNAME" \
              --data password="$PASSWORD" \
              | jq -r ".access_token")
            ## VIDEO UPLOAD

            curl -s "$API_PATH/videos/upload" \
              -H "Authorization: Bearer $token" \
              --max-time 600 \
              --form videofile=@"$FILE_PATH" \
              --form channelId=$CHANNEL_ID \
              --form name="$NAME"
  "/videos/{id}":
    delete:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Delete a video
      tags:
        - Video
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoDetails"
          description: successful operation
      summary: Get a video
      tags:
        - Video
    put:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          multipart/form-data:
            encoding:
              previewfile:
                contentType: image/jpeg
              thumbnailfile:
                contentType: image/jpeg
            schema:
              properties:
                category:
                  description: Video category
                  example: 4
                  type: integer
                commentsEnabled:
                  description: Enable or disable comments for this video
                  type: boolean
                description:
                  description: Video description
                  type: string
                language:
                  description: Video language
                  type: string
                licence:
                  description: Video licence
                  example: 2
                  type: integer
                name:
                  description: Video name
                  type: string
                nsfw:
                  description: Whether or not this video contains sensitive content
                  type: boolean
                originallyPublishedAt:
                  description: Date when the content was originally published
                  format: date-time
                  type: string
                previewfile:
                  description: Video preview file
                  format: binary
                  type: string
                privacy:
                  $ref: "#/components/schemas/VideoPrivacySet"
                scheduleUpdate:
                  $ref: "#/components/schemas/VideoScheduledUpdate"
                support:
                  description: A text tell the audience how to support the video creator
                  example: Please support my work on <insert crowdfunding plateform>! <3
                  type: string
                tags:
                  description: Video tags (maximum 5 tags each between 2 and 30 characters)
                  items:
                    maxLength: 30
                    minLength: 2
                    type: string
                  maxItems: 5
                  minItems: 1
                  type: array
                thumbnailfile:
                  description: Video thumbnail file
                  format: binary
                  type: string
                waitTranscoding:
                  description: Whether or not we wait transcoding before publish the video
                  type: string
              type: object
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Update a video
      tags:
        - Video
  "/videos/{id}/blacklist":
    delete:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
        "404":
          description: block not found
      security:
        - OAuth2:
            - admin
            - moderator
      summary: Unblock a video by its id
      tags:
        - Video Blocks
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2:
            - admin
            - moderator
      summary: Block a video
      tags:
        - Video Blocks
  "/videos/{id}/captions":
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/VideoCaption"
                    type: array
                  total:
                    example: 1
                    type: integer
                type: object
          description: successful operation
      summary: List captions of a video
      tags:
        - Video Captions
  "/videos/{id}/captions/{captionLanguage}":
    delete:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/captionLanguage"
      responses:
        "204":
          description: successful operation
        "404":
          description: video or language or caption for that language not found
      security:
        - OAuth2:
            - user
      summary: Delete a video caption
      tags:
        - Video Captions
    put:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/captionLanguage"
      requestBody:
        content:
          multipart/form-data:
            encoding:
              captionfile:
                contentType: text/vtt, application/x-subrip, text/plain
            schema:
              properties:
                captionfile:
                  description: The file to upload.
                  format: binary
                  type: string
              type: object
      responses:
        "204":
          description: successful operation
        "404":
          description: video or language not found
      security:
        - OAuth2:
            - user
      summary: Add or replace a video caption
      tags:
        - Video Captions
  "/videos/{id}/comment-threads":
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/commentsSort"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentThreadResponse"
          description: successful operation
      summary: List threads of a video
      tags:
        - Video Comments
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                text:
                  description: Text comment
                  type: string
              required:
                - text
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentThreadPostResponse"
          description: successful operation
        "404":
          description: video does not exist
      security:
        - OAuth2: []
      summary: Create a thread
      tags:
        - Video Comments
  "/videos/{id}/comment-threads/{threadId}":
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/threadId"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoCommentThreadTree"
          description: successful operation
      summary: Get a thread
      tags:
        - Video Comments
  "/videos/{id}/comments/{commentId}":
    delete:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/commentId"
      responses:
        "204":
          description: successful operation
        "403":
          description: cannot remove comment of another user
        "404":
          description: comment or video does not exist
        "409":
          description: comment is already deleted
      security:
        - OAuth2: []
      summary: Delete a comment or a reply
      tags:
        - Video Comments
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
        - $ref: "#/components/parameters/commentId"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                text:
                  description: Text comment
                  type: string
              required:
                - text
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentThreadPostResponse"
          description: successful operation
        "404":
          description: thread or video does not exist
      security:
        - OAuth2: []
      summary: Reply to a thread of a video
      tags:
        - Video Comments
  "/videos/{id}/description":
    get:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      summary: Get complete video description
      tags:
        - Video
  "/videos/{id}/give-ownership":
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
              required:
                - username
              type: object
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          description: changing video ownership to a remote account is not supported yet
        "404":
          description: video not found
      security:
        - OAuth2: []
      summary: Request ownership change
      tags:
        - Video Ownership Change
  "/videos/{id}/rate":
    put:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
        "404":
          description: video does not exist
      security:
        - OAuth2: []
      summary: Like/dislike a video
      tags:
        - Video Rates
  "/videos/{id}/views":
    post:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      responses:
        "204":
          description: successful operation
      summary: Add a view to a video
      tags:
        - Video
  "/videos/{id}/watching":
    put:
      parameters:
        - $ref: "#/components/parameters/idOrUUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWatchingVideo"
        required: true
      responses:
        "204":
          description: successful operation
      security:
        - OAuth2: []
      summary: Set watching progress of a video
      tags:
        - Video
components:
  callbacks:
    searchIndex:
      https://search.example.org/api/v1/search/videos:
        post:
          responses:
            "200":
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/VideoListResponse"
              description: successful operation
          summary: third-party search index MAY be used instead of the local index, if enabled by the instance admin. see `searchTarget`
  parameters:
    abuseId:
      description: Abuse id
      in: path
      name: abuseId
      required: true
      schema:
        type: integer
    abuseMessageId:
      description: Abuse message id
      in: path
      name: abuseMessageId
      required: true
      schema:
        type: integer
    abusesSort:
      description: Sort abuses by criteria
      in: query
      name: sort
      required: false
      schema:
        enum:
          - -id
          - -createdAt
          - -state
        type: string
    blacklistsSort:
      description: Sort blacklists by criteria
      in: query
      name: sort
      required: false
      schema:
        enum:
          - -id
          - name
          - -duration
          - -views
          - -likes
          - -dislikes
          - -uuid
          - -createdAt
        type: string
    captionLanguage:
      description: The caption language
      in: path
      name: captionLanguage
      required: true
      schema:
        type: string
    categoryOneOf:
      description: category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))
      explode: false
      in: query
      name: categoryOneOf
      required: false
      schema:
        oneOf:
          - type: integer
          - items:
              type: integer
            type: array
      style: form
    channelHandle:
      description: The video channel handle
      in: path
      name: channelHandle
      required: true
      schema:
        example: my_username | my_username@example.com
        type: string
    commentId:
      description: The comment id
      in: path
      name: commentId
      required: true
      schema:
        type: integer
    commentsSort:
      description: Sort comments by criteria
      in: query
      name: sort
      required: false
      schema:
        enum:
          - -createdAt
          - -totalReplies
        type: string
    count:
      description: Number of items to return
      in: query
      name: count
      required: false
      schema:
        default: 15
        maximum: 100
        minimum: 1
        type: integer
    filter:
      description: >
        Special filters which might require special rights:
         * `local` - only videos local to the instance
         * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)
         * `all` - all videos, showing private and unlisted videos (requires Admin privileges)
      in: query
      name: filter
      required: false
      schema:
        enum:
          - local
          - all-local
        type: string
    id:
      description: The user id
      in: path
      name: id
      required: true
      schema:
        example: 42
        minimum: 0
        type: integer
    idOrUUID:
      description: The object id or uuid
      in: path
      name: id
      required: true
      schema:
        oneOf:
          - example: 42
            minimum: 0
            type: integer
          - example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
            format: uuid
            type: string
    jobType:
      description: job type
      in: query
      name: jobType
      required: false
      schema:
        enum:
          - activitypub-follow
          - activitypub-http-broadcast
          - activitypub-http-fetcher
          - activitypub-http-unicast
          - email
          - video-transcoding
          - video-file-import
          - video-import
          - videos-views
          - activitypub-refresher
          - video-redundancy
          - video-live-ending
        type: string
    languageOneOf:
      description: language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language
      explode: false
      in: query
      name: languageOneOf
      required: false
      schema:
        oneOf:
          - type: string
          - items:
              type: string
            type: array
      style: form
    licenceOneOf:
      description: licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))
      explode: false
      in: query
      name: licenceOneOf
      required: false
      schema:
        oneOf:
          - type: integer
          - items:
              type: integer
            type: array
      style: form
    name:
      description: The username or handle of the account
      in: path
      name: name
      required: true
      schema:
        example: chocobozzz | chocobozzz@example.org
        type: string
    npmName:
      description: name of the plugin/theme on npmjs.com or in its package.json
      in: path
      name: npmName
      required: true
      schema:
        example: peertube-plugin-auth-ldap
        type: string
    nsfw:
      description: whether to include nsfw videos, if any
      in: query
      name: nsfw
      required: false
      schema:
        enum:
          - "true"
          - "false"
        type: string
    playlistElementId:
      description: Playlist element id
      in: path
      name: playlistElementId
      required: true
      schema:
        type: integer
    search:
      description: Plain text search, applied to various parts of the model depending on endpoint
      in: query
      name: search
      required: false
      schema:
        type: string
    searchTarget:
      description: >
        If the administrator enabled search index support, you can override the default search target.


        **Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:
          * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),
          then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.
          After that, you can use the classic REST API endpoints to fetch the complete object or interact with it
          * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch
          the data from the origin instance API
      in: query
      name: searchTarget
      required: false
      schema:
        enum:
          - local
          - search-index
        type: string
    skipCount:
      description: if you don't need the `total` in the response
      in: query
      name: skipCount
      required: false
      schema:
        default: "false"
        enum:
          - "true"
          - "false"
        type: string
    sort:
      description: Sort column
      in: query
      name: sort
      required: false
      schema:
        example: -createdAt
        type: string
    start:
      description: Offset used to paginate results
      in: query
      name: start
      required: false
      schema:
        minimum: 0
        type: integer
    subscriptionHandle:
      description: The subscription handle
      in: path
      name: subscriptionHandle
      required: true
      schema:
        example: my_username | my_username@example.com
        type: string
    subscriptionsUris:
      description: list of uris to check if each is part of the user subscriptions
      in: query
      name: uris
      required: true
      schema:
        items:
          format: uri
          type: string
        type: array
    tagsAllOf:
      description: tag(s) of the video, where all should be present in the video
      explode: false
      in: query
      name: tagsAllOf
      required: false
      schema:
        oneOf:
          - type: string
          - items:
              type: string
            type: array
      style: form
    tagsOneOf:
      description: tag(s) of the video
      explode: false
      in: query
      name: tagsOneOf
      required: false
      schema:
        oneOf:
          - type: string
          - items:
              type: string
            type: array
      style: form
    threadId:
      description: The thread id (root comment id)
      in: path
      name: threadId
      required: true
      schema:
        type: integer
    usersBlocked:
      description: Filter results down to (un)banned users
      in: query
      name: blocked
      required: false
      schema:
        type: boolean
    usersSearch:
      description: Plain text search that will match with user usernames or emails
      in: query
      name: search
      required: false
      schema:
        type: string
    usersSort:
      description: Sort users by criteria
      in: query
      name: sort
      required: false
      schema:
        enum:
          - -id
          - -username
          - -createdAt
        type: string
    videoRedundanciesSort:
      description: Sort abuses by criteria
      in: query
      name: sort
      required: false
      schema:
        enum:
          - name
        type: string
    videosSearchSort:
      description: Sort videos by criteria
      in: query
      name: sort
      required: false
      schema:
        enum:
          - name
          - -duration
          - -createdAt
          - -publishedAt
          - -views
          - -likes
          - -match
        type: string
    videosSort:
      description: Sort videos by criteria
      in: query
      name: sort
      required: false
      schema:
        enum:
          - name
          - -duration
          - -createdAt
          - -publishedAt
          - -views
          - -likes
          - -trending
          - -hot
        type: string
  schemas:
    Abuse:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          example: 7
          type: integer
        moderationComment:
          example: Decided to ban the server since it spams us regularly
          type: string
        predefinedReasons:
          $ref: "#/components/schemas/AbusePredefinedReasons"
        reason:
          example: The video is a spam
          type: string
        reporterAccount:
          $ref: "#/components/schemas/Account"
        state:
          $ref: "#/components/schemas/AbuseStateConstant"
        video:
          properties:
            id:
              type: integer
            name:
              type: string
            uuid:
              example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
              format: uuid
              type: string
          type: object
    AbuseMessage:
      properties:
        account:
          $ref: "#/components/schemas/AccountSummary"
        byModerator:
          type: boolean
        createdAt:
          format: date-time
          type: string
        id:
          type: integer
        message:
          type: string
    AbusePredefinedReasons:
      example:
        - spamOrMisleading
      items:
        enum:
          - violentOrAbusive
          - hatefulOrAbusive
          - spamOrMisleading
          - privacy
          - rights
          - serverRules
          - thumbnails
          - captions
        type: string
      type: array
    AbuseStateConstant:
      properties:
        id:
          $ref: "#/components/schemas/AbuseStateSet"
        label:
          type: string
    AbuseStateSet:
      description: The abuse state (Pending = `1`, Rejected = `2`, Accepted = `3`)
      enum:
        - 1
        - 2
        - 3
      type: integer
    Account:
      allOf:
        - $ref: "#/components/schemas/Actor"
        - properties:
            description:
              type: string
            displayName:
              type: string
            userId:
              example: 2
              type: string
    AccountSummary:
      properties:
        avatar:
          allOf:
            - $ref: "#/components/schemas/Avatar"
          nullable: true
        displayName:
          type: string
        host:
          format: hostname
          type: string
        id:
          type: integer
        name:
          type: string
        url:
          format: url
          type: string
    Actor:
      properties:
        avatar:
          $ref: "#/components/schemas/Avatar"
        createdAt:
          format: date-time
          type: string
        followersCount:
          type: integer
        followingCount:
          type: integer
        host:
          format: hostname
          type: string
        id:
          example: 11
          type: integer
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        url:
          format: url
          type: string
    ActorInfo:
      properties:
        avatar:
          nullable: true
          properties:
            path:
              type: string
          type: object
        displayName:
          type: string
        host:
          format: hostname
          type: string
        id:
          example: 11
          type: integer
        name:
          type: string
    AddUser:
      properties:
        email:
          description: The user email
          format: email
          type: string
        password:
          description: The user password. If the smtp server is configured, you can leave empty and an email will be sent
          format: password
          maxLength: 255
          minLength: 6
          type: string
        role:
          $ref: "#/components/schemas/UserRole"
        username:
          description: The user username
          maxLength: 50
          minLength: 1
          type: string
        videoQuota:
          description: The user video quota
          type: integer
        videoQuotaDaily:
          description: The user daily video quota
          type: integer
      required:
        - username
        - password
        - email
        - videoQuota
        - videoQuotaDaily
        - role
    AddUserResponse:
      properties:
        user:
          properties:
            account:
              properties:
                id:
                  example: 37
                  type: integer
              type: object
            id:
              example: 8
              type: integer
          type: object
    Avatar:
      properties:
        createdAt:
          format: date-time
          type: string
        path:
          type: string
        updatedAt:
          format: date-time
          type: string
    CommentThreadPostResponse:
      properties:
        comment:
          $ref: "#/components/schemas/VideoComment"
    CommentThreadResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/VideoComment"
          maxItems: 100
          type: array
        total:
          example: 1
          type: integer
    FileRedundancyInformation:
      properties:
        createdAt:
          format: date-time
          type: string
        expiresOn:
          format: date-time
          type: string
        fileUrl:
          format: url
          type: string
        id:
          type: integer
        size:
          type: integer
        strategy:
          enum:
            - manual
            - most-views
            - trending
            - recently-added
          type: string
        updatedAt:
          format: date-time
          type: string
    Follow:
      properties:
        createdAt:
          format: date-time
          type: string
        follower:
          $ref: "#/components/schemas/Actor"
        following:
          $ref: "#/components/schemas/Actor"
        id:
          type: integer
        score:
          description: score reflecting the reachability of the actor, with steps of `10` and a base score of `1000`.
          type: number
        state:
          enum:
            - pending
            - accepted
          type: string
        updatedAt:
          format: date-time
          type: string
    GetMeVideoRating:
      properties:
        id:
          description: Id of the video
          type: string
        rating:
          description: Rating of the video
          type: number
      required:
        - id
        - rating
    Job:
      properties:
        createdAt:
          format: date-time
          type: string
        data:
          additionalProperties: true
          type: object
        error:
          additionalProperties: true
          type: object
        finishedOn:
          format: date-time
          type: string
        id:
          example: 42
          minimum: 0
          type: integer
        processedOn:
          format: date-time
          type: string
        state:
          enum:
            - active
            - completed
            - failed
            - waiting
            - delayed
          type: string
        type:
          enum:
            - activitypub-http-unicast
            - activitypub-http-broadcast
            - activitypub-http-fetcher
            - activitypub-follow
            - video-file-import
            - video-transcoding
            - email
            - video-import
            - videos-views
            - activitypub-refresher
            - video-redundancy
          type: string
    LiveVideoResponse:
      properties:
        permanentLive:
          description: User can stream multiple times in a permanent live
          type: boolean
        rtmpUrl:
          type: string
        saveReplay:
          type: boolean
        streamKey:
          description: RTMP stream key to use to stream into this live video
          type: string
    LiveVideoUpdate:
      properties:
        permanentLive:
          description: User can stream multiple times in a permanent live
          type: boolean
        saveReplay:
          type: boolean
    MRSSGroupContent:
      properties:
        duration:
          type: integer
          xml:
            attribute: true
        fileSize:
          type: integer
          xml:
            attribute: true
        framerate:
          type: integer
          xml:
            attribute: true
        height:
          type: integer
          xml:
            attribute: true
        lang:
          type: string
          xml:
            attribute: true
        type:
          type: string
          xml:
            attribute: true
        url:
          format: url
          type: string
          xml:
            attribute: true
      type: object
      xml:
        name: media:content
    MRSSPeerLink:
      properties:
        href:
          type: string
          xml:
            attribute: true
        type:
          enum:
            - application/x-bittorrent
          type: string
          xml:
            attribute: true
      type: object
      xml:
        name: media:peerLink
    NSFWPolicy:
      enum:
        - display
        - blur
        - do_not_list
      type: string
    Notification:
      properties:
        account:
          allOf:
            - $ref: "#/components/schemas/ActorInfo"
          nullable: true
        actorFollow:
          nullable: true
          properties:
            follower:
              $ref: "#/components/schemas/ActorInfo"
            following:
              properties:
                displayName:
                  type: string
                host:
                  format: hostname
                  type: string
                name:
                  type: string
                type:
                  enum:
                    - account
                    - channel
                    - instance
                  type: string
              type: object
            id:
              type: integer
            state:
              enum:
                - pending
                - accepted
              type: string
          type: object
        comment:
          nullable: true
          properties:
            account:
              $ref: "#/components/schemas/ActorInfo"
            id:
              type: integer
            threadId:
              type: integer
            video:
              $ref: "#/components/schemas/VideoInfo"
          type: object
        createdAt:
          format: date-time
          type: string
        id:
          type: integer
        read:
          type: boolean
        type:
          description: >
            Notification type, following the `UserNotificationType` enum:

            - `1` NEW_VIDEO_FROM_SUBSCRIPTION

            - `2` NEW_COMMENT_ON_MY_VIDEO

            - `3` NEW_ABUSE_FOR_MODERATORS

            - `4` BLACKLIST_ON_MY_VIDEO

            - `5` UNBLACKLIST_ON_MY_VIDEO

            - `6` MY_VIDEO_PUBLISHED

            - `7` MY_VIDEO_IMPORT_SUCCESS

            - `8` MY_VIDEO_IMPORT_ERROR

            - `9` NEW_USER_REGISTRATION

            - `10` NEW_FOLLOW

            - `11` COMMENT_MENTION

            - `12` VIDEO_AUTO_BLACKLIST_FOR_MODERATORS

            - `13` NEW_INSTANCE_FOLLOWER

            - `14` AUTO_INSTANCE_FOLLOWING
          type: integer
        updatedAt:
          format: date-time
          type: string
        video:
          allOf:
            - $ref: "#/components/schemas/VideoInfo"
            - properties:
                channel:
                  $ref: "#/components/schemas/ActorInfo"
              type: object
          nullable: true
        videoAbuse:
          nullable: true
          properties:
            id:
              type: integer
            video:
              allOf:
                - $ref: "#/components/schemas/VideoInfo"
          type: object
        videoBlacklist:
          nullable: true
          properties:
            id:
              type: integer
            video:
              allOf:
                - $ref: "#/components/schemas/VideoInfo"
          type: object
        videoImport:
          nullable: true
          properties:
            id:
              type: integer
            magnetUri:
              format: uri
              nullable: true
              type: string
            targetUri:
              format: uri
              nullable: true
              type: string
            torrentName:
              nullable: true
              type: string
            video:
              $ref: "#/components/schemas/VideoInfo"
              nullable: true
          type: object
    NotificationListResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Notification"
          maxItems: 100
          type: array
        total:
          example: 1
          type: integer
    NotificationSettingValue:
      description: >
        Notification type

        - `0` NONE

        - `1` WEB

        - `2` EMAIL
      enum:
        - 0
        - 1
        - 3
      type: integer
    PlaylistElement:
      properties:
        position:
          type: integer
        startTimestamp:
          type: integer
        stopTimestamp:
          type: integer
        video:
          allOf:
            - $ref: "#/components/schemas/Video"
          nullable: true
    Plugin:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        enabled:
          type: boolean
        homepage:
          example: https://framagit.org/framasoft/peertube/official-plugins/tree/master/peertube-plugin-auth-ldap
          format: url
          type: string
        latestVersion:
          example: 0.0.3
          type: string
        name:
          example: peertube-plugin-auth-ldap
          type: string
        peertubeEngine:
          example: 2.2.0
          type: string
        settings:
          additionalProperties: true
          type: object
        type:
          description: >
            - `1`: PLUGIN

            - `2`: THEME
          enum:
            - 1
            - 2
          type: integer
        uninstalled:
          type: boolean
        updatedAt:
          format: date-time
          type: string
        version:
          example: 0.0.1
          type: string
    PluginResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Plugin"
          maxItems: 100
          type: array
        total:
          example: 1
          type: integer
    PredefinedAbuseReasons:
      description: Reason categories that help triage reports
      items:
        enum:
          - violentOrAbusive
          - hatefulOrAbusive
          - spamOrMisleading
          - privacy
          - rights
          - serverRules
          - thumbnails
          - captions
        type: string
      type: array
    RegisterUser:
      properties:
        channel:
          properties:
            displayName:
              description: The display name for the default channel
              maxLength: 120
              minLength: 1
              type: string
            name:
              description: The username for the default channel
              pattern: /^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\-_.:]+$/
              type: string
          type: object
        displayName:
          description: The user display name
          maxLength: 120
          minLength: 1
          type: string
        email:
          description: The email of the user
          format: email
          type: string
        password:
          description: The password of the user
          format: password
          maxLength: 255
          minLength: 6
          type: string
        username:
          description: The username of the user
          maxLength: 50
          minLength: 1
          pattern: /^[a-z0-9._]{1,50}$/
          type: string
      required:
        - username
        - password
        - email
    ServerConfig:
      properties:
        autoBlacklist:
          properties:
            videos:
              properties:
                ofUsers:
                  properties:
                    enabled:
                      type: boolean
                  type: object
              type: object
          type: object
        avatar:
          properties:
            extensions:
              items:
                type: string
              type: array
            file:
              properties:
                size:
                  properties:
                    max:
                      type: integer
                  type: object
              type: object
          type: object
        contactForm:
          properties:
            enabled:
              type: boolean
          type: object
        email:
          properties:
            enabled:
              type: boolean
          type: object
        followings:
          properties:
            instance:
              properties:
                autoFollowIndex:
                  properties:
                    indexUrl:
                      format: url
                      type: string
                  type: object
              type: object
          type: object
        import:
          properties:
            videos:
              properties:
                http:
                  properties:
                    enabled:
                      type: boolean
                  type: object
                torrent:
                  properties:
                    enabled:
                      type: boolean
                  type: object
              type: object
          type: object
        instance:
          properties:
            customizations:
              properties:
                css:
                  type: string
                javascript:
                  type: string
              type: object
            defaultClientRoute:
              type: string
            defaultNSFWPolicy:
              type: string
            isNSFW:
              type: boolean
            name:
              type: string
            shortDescription:
              type: string
          type: object
        plugin:
          properties:
            registered:
              items:
                type: string
              type: array
          type: object
        search:
          properties:
            remoteUri:
              properties:
                anonymous:
                  type: boolean
                users:
                  type: boolean
              type: object
          type: object
        serverCommit:
          type: string
        serverVersion:
          type: string
        signup:
          properties:
            allowed:
              type: boolean
            allowedForCurrentIP:
              type: boolean
            requiresEmailVerification:
              type: boolean
          type: object
        theme:
          properties:
            registered:
              items:
                type: string
              type: array
          type: object
        tracker:
          properties:
            enabled:
              type: boolean
          type: object
        transcoding:
          properties:
            enabledResolutions:
              items:
                type: integer
              type: array
            hls:
              properties:
                enabled:
                  type: boolean
              type: object
            webtorrent:
              properties:
                enabled:
                  type: boolean
              type: object
          type: object
        trending:
          properties:
            videos:
              properties:
                intervalDays:
                  type: integer
              type: object
          type: object
        user:
          properties:
            videoQuota:
              type: integer
            videoQuotaDaily:
              type: integer
          type: object
        video:
          properties:
            file:
              properties:
                extensions:
                  items:
                    type: string
                  type: array
              type: object
            image:
              properties:
                extensions:
                  items:
                    type: string
                  type: array
                size:
                  properties:
                    max:
                      type: integer
                  type: object
              type: object
          type: object
        videoCaption:
          properties:
            file:
              properties:
                extensions:
                  items:
                    type: string
                  type: array
                size:
                  properties:
                    max:
                      type: integer
                  type: object
              type: object
          type: object
    ServerConfigAbout:
      properties:
        instance:
          properties:
            description:
              type: string
            name:
              type: string
            shortDescription:
              type: string
            terms:
              type: string
          type: object
    ServerConfigCustom:
      properties:
        admin:
          properties:
            email:
              format: email
              type: string
          type: object
        autoBlacklist:
          properties:
            videos:
              properties:
                ofUsers:
                  properties:
                    enabled:
                      type: boolean
                  type: object
              type: object
          type: object
        cache:
          properties:
            captions:
              properties:
                size:
                  type: integer
              type: object
            previews:
              properties:
                size:
                  type: integer
              type: object
          type: object
        contactForm:
          properties:
            enabled:
              type: boolean
          type: object
        followers:
          properties:
            instance:
              properties:
                enabled:
                  type: boolean
                manualApproval:
                  type: boolean
              type: object
          type: object
        import:
          properties:
            videos:
              properties:
                http:
                  properties:
                    enabled:
                      type: boolean
                  type: object
                torrent:
                  properties:
                    enabled:
                      type: boolean
                  type: object
              type: object
          type: object
        instance:
          properties:
            customizations:
              properties:
                css:
                  type: string
                javascript:
                  type: string
              type: object
            defaultClientRoute:
              type: string
            defaultNSFWPolicy:
              type: string
            description:
              type: string
            isNSFW:
              type: boolean
            name:
              type: string
            shortDescription:
              type: string
            terms:
              type: string
          type: object
        services:
          properties:
            twitter:
              properties:
                username:
                  type: string
                whitelisted:
                  type: boolean
              type: object
          type: object
        signup:
          properties:
            enabled:
              type: boolean
            limit:
              type: integer
            requiresEmailVerification:
              type: boolean
          type: object
        theme:
          properties:
            default:
              type: string
          type: object
        transcoding:
          properties:
            allowAdditionalExtensions:
              type: boolean
            allowAudioFiles:
              type: boolean
            enabled:
              type: boolean
            hls:
              properties:
                enabled:
                  type: boolean
              type: object
            resolutions:
              properties:
                1080p:
                  type: boolean
                1440p:
                  type: boolean
                2160p:
                  type: boolean
                240p:
                  type: boolean
                360p:
                  type: boolean
                480p:
                  type: boolean
                720p:
                  type: boolean
              type: object
            threads:
              type: integer
          type: object
        user:
          properties:
            videoQuota:
              type: integer
            videoQuotaDaily:
              type: integer
          type: object
    UpdateMe:
      properties:
        autoPlayVideo:
          description: Your new autoPlayVideo
          type: boolean
        displayNSFW:
          description: Your new displayNSFW
          enum:
            - "true"
            - "false"
            - both
          type: string
        email:
          description: Your new email
          format: email
          type: string
        password:
          description: Your new password
          format: password
          maxLength: 255
          minLength: 6
          type: string
      required:
        - password
        - email
        - displayNSFW
        - autoPlayVideo
    UpdateUser:
      properties:
        email:
          description: The updated email of the user
          format: email
          type: string
        id:
          description: The user id
          type: string
        role:
          $ref: "#/components/schemas/UserRole"
        videoQuota:
          description: The updated video quota of the user
          type: integer
        videoQuotaDaily:
          description: The updated daily video quota of the user
          type: integer
      required:
        - id
        - email
        - videoQuota
        - videoQuotaDaily
        - role
    User:
      properties:
        abusesAcceptedCount:
          type: integer
        abusesCount:
          type: integer
        abusesCreatedCount:
          type: integer
        account:
          $ref: "#/components/schemas/Account"
        autoPlayVideo:
          description: Automatically start playing the video on the watch page
          type: boolean
        blocked:
          type: boolean
        blockedReason:
          type: string
        createdAt:
          type: string
        email:
          description: The user email
          format: email
          type: string
        emailVerified:
          description: Has the user confirmed their email address?
          type: boolean
        id:
          readOnly: true
          type: integer
        noInstanceConfigWarningModal:
          type: boolean
        noWelcomeModal:
          type: boolean
        nsfwPolicy:
          $ref: "#/components/schemas/NSFWPolicy"
        role:
          $ref: "#/components/schemas/UserRole"
        roleLabel:
          enum:
            - User
            - Moderator
            - Administrator
          type: string
        theme:
          description: Theme enabled by this user
          type: string
        username:
          description: The user username
          maxLength: 50
          minLength: 1
          type: string
        videoChannels:
          items:
            $ref: "#/components/schemas/VideoChannel"
          type: array
        videoCommentsCount:
          type: integer
        videoQuota:
          description: The user video quota
          type: integer
        videoQuotaDaily:
          description: The user daily video quota
          type: integer
        videosCount:
          type: integer
        webtorrentEnabled:
          description: Enable P2P in the player
          type: boolean
    UserRole:
      description: The user role (Admin = `0`, Moderator = `1`, User = `2`)
      enum:
        - 0
        - 1
        - 2
      example: 2
      type: integer
    UserWatchingVideo:
      properties:
        currentTime:
          description: timestamp within the video, in seconds
          example: 5
          type: integer
    Video:
      properties:
        account:
          $ref: "#/components/schemas/AccountSummary"
        blacklisted:
          nullable: true
          type: boolean
        blacklistedReason:
          nullable: true
          type: string
        category:
          $ref: "#/components/schemas/VideoConstantNumber"
        channel:
          $ref: "#/components/schemas/VideoChannelSummary"
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        dislikes:
          example: 7
          type: integer
        duration:
          example: 1419
          type: integer
        embedPath:
          example: /videos/embed/a65bc12f-9383-462e-81ae-8207e8b434ee
          type: string
        id:
          example: 8
          type: integer
        isLive:
          type: boolean
        isLocal:
          type: boolean
        language:
          $ref: "#/components/schemas/VideoConstantString"
        licence:
          $ref: "#/components/schemas/VideoConstantNumber"
        likes:
          example: 42
          type: integer
        name:
          example: What is PeerTube?
          type: string
        nsfw:
          type: boolean
        originallyPublishedAt:
          format: date-time
          type: string
        previewPath:
          example: /lazy-static/previews/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg
          type: string
        privacy:
          $ref: "#/components/schemas/VideoPrivacyConstant"
        publishedAt:
          format: date-time
          type: string
        scheduledUpdate:
          allOf:
            - $ref: "#/components/schemas/VideoScheduledUpdate"
          nullable: true
        state:
          $ref: "#/components/schemas/VideoStateConstant"
        thumbnailPath:
          example: /static/thumbnails/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg
          type: string
        updatedAt:
          format: date-time
          type: string
        userHistory:
          nullable: true
          properties:
            currentTime:
              type: integer
          type: object
        uuid:
          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
          format: uuid
          type: string
        views:
          example: 1337
          type: integer
        waitTranscoding:
          nullable: true
          type: boolean
    VideoBlacklist:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        dislikes:
          type: integer
        duration:
          type: integer
        id:
          type: integer
        likes:
          type: integer
        name:
          type: string
        nsfw:
          type: boolean
        updatedAt:
          format: date-time
          type: string
        uuid:
          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
          format: uuid
          type: string
        videoId:
          type: integer
        views:
          type: integer
    VideoCaption:
      properties:
        captionPath:
          type: string
        language:
          $ref: "#/components/schemas/VideoConstantString"
    VideoChannel:
      properties:
        description:
          type: string
        displayName:
          type: string
        isLocal:
          type: boolean
        ownerAccount:
          properties:
            id:
              type: integer
            uuid:
              example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
              format: uuid
              type: string
          type: object
    VideoChannelCreate:
      properties:
        description:
          type: string
        displayName:
          type: string
        name:
          type: string
        support:
          description: A text shown by default on all videos of this channel, to tell the audience how to support it
          example: Please support my work on <insert crowdfunding plateform>! <3
          type: string
      required:
        - name
        - displayName
    VideoChannelSummary:
      properties:
        avatar:
          allOf:
            - $ref: "#/components/schemas/Avatar"
          nullable: true
        displayName:
          type: string
        host:
          format: hostname
          type: string
        id:
          type: integer
        name:
          type: string
        url:
          format: url
          type: string
    VideoChannelUpdate:
      properties:
        bulkVideosSupportUpdate:
          description: Update the support field for all videos of this channel
          type: boolean
        description:
          type: string
        displayName:
          type: string
        support:
          description: A text shown by default on all videos of this channel, to tell the audience how to support it
          example: Please support my work on <insert crowdfunding plateform>! <3
          type: string
    VideoComment:
      properties:
        account:
          $ref: "#/components/schemas/Account"
        createdAt:
          format: date-time
          type: string
        id:
          type: integer
        inReplyToCommentId:
          type: integer
        text:
          type: string
        threadId:
          type: integer
        totalReplies:
          type: integer
        totalRepliesFromVideoAuthor:
          type: integer
        updatedAt:
          format: date-time
          type: string
        url:
          format: url
          type: string
        videoId:
          type: integer
    VideoCommentThreadTree:
      properties:
        children:
          items:
            $ref: "#/components/schemas/VideoCommentThreadTree"
          type: array
        comment:
          $ref: "#/components/schemas/VideoComment"
    VideoCommentsForXML:
      items:
        properties:
          content:encoded:
            type: string
          dc:creator:
            type: string
          guid:
            type: string
          link:
            format: url
            type: string
          pubDate:
            format: date-time
            type: string
        type: object
        xml:
          name: item
      type: array
      xml:
        name: channel
        wrapped: true
    VideoConstantNumber:
      properties:
        id:
          type: integer
        label:
          type: string
    VideoConstantString:
      properties:
        id:
          type: string
        label:
          type: string
    VideoDetails:
      allOf:
        - $ref: "#/components/schemas/Video"
        - properties:
            account:
              $ref: "#/components/schemas/Account"
            channel:
              $ref: "#/components/schemas/VideoChannel"
            commentsEnabled:
              type: boolean
            descriptionPath:
              type: string
            downloadEnabled:
              type: boolean
            files:
              description: WebTorrent/raw video files. Can be empty if WebTorrent is disabled on the server. In this case, video files will be in the "streamingPlaylists[].files" property
              items:
                $ref: "#/components/schemas/VideoFile"
              type: array
            streamingPlaylists:
              items:
                $ref: "#/components/schemas/VideoStreamingPlaylists"
              type: array
            support:
              description: A text tell the audience how to support the video creator
              example: Please support my work on <insert crowdfunding plateform>! <3
              type: string
            tags:
              example:
                - flowers
                - gardening
              items:
                type: string
              type: array
            trackerUrls:
              items:
                format: url
                type: string
              type: array
          type: object
    VideoFile:
      properties:
        fileDownloadUrl:
          format: url
          type: string
        fileUrl:
          format: url
          type: string
        fps:
          type: number
        magnetUri:
          type: string
        metadataUrl:
          format: url
          type: string
        resolution:
          $ref: "#/components/schemas/VideoResolutionConstant"
        size:
          description: Video file size in bytes
          type: integer
        torrentDownloadUrl:
          format: url
          type: string
        torrentUrl:
          format: url
          type: string
    VideoImport:
      properties:
        createdAt:
          format: date-time
          type: string
        error:
          type: string
        id:
          example: 2
          type: integer
        magnetUri:
          example: magnet:?xs=https%3A%2F%2Fframatube.org%2Fstatic%2Ftorrents%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.torrent&xt=urn:btih:38b4747ff788b30bf61f59d1965cd38f9e48e01f&dn=What+is+PeerTube%3F&tr=wss%3A%2F%2Fframatube.org%2Ftracker%2Fsocket&tr=https%3A%2F%2Fframatube.org%2Ftracker%2Fannounce&ws=https%3A%2F%2Fframatube.org%2Fstatic%2Fwebseed%2F9c9de5e8-0a1e-484a-b099-e80766180a6d-240.mp4
          format: uri
          type: string
        state:
          $ref: "#/components/schemas/VideoImportStateConstant"
        targetUrl:
          example: https://framatube.org/videos/watch/9c9de5e8-0a1e-484a-b099-e80766180a6d
          format: url
          type: string
        torrentName:
          type: string
        updatedAt:
          format: date-time
          type: string
        video:
          $ref: "#/components/schemas/Video"
    VideoImportStateConstant:
      properties:
        id:
          description: The video import state (Pending = `1`, Success = `2`, Failed = `3`)
          enum:
            - 1
            - 2
            - 3
          type: integer
        label:
          example: Pending
          type: string
    VideoInfo:
      properties:
        id:
          type: integer
        name:
          type: string
        uuid:
          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
          format: uuid
          type: string
    VideoListResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Video"
          maxItems: 100
          type: array
        total:
          example: 1
          type: integer
    VideoPlaylist:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        displayName:
          type: string
        id:
          type: integer
        isLocal:
          type: boolean
        ownerAccount:
          $ref: "#/components/schemas/AccountSummary"
        privacy:
          $ref: "#/components/schemas/VideoPlaylistPrivacyConstant"
        thumbnailPath:
          type: string
        type:
          $ref: "#/components/schemas/VideoPlaylistTypeConstant"
        updatedAt:
          format: date-time
          type: string
        uuid:
          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
          format: uuid
          type: string
        videoChannel:
          $ref: "#/components/schemas/VideoChannelSummary"
        videoLength:
          type: integer
    VideoPlaylistPrivacyConstant:
      properties:
        id:
          $ref: "#/components/schemas/VideoPlaylistPrivacySet"
        label:
          type: string
    VideoPlaylistPrivacySet:
      description: The video playlist privacy (Public = `1`, Unlisted = `2`, Private = `3`)
      enum:
        - 1
        - 2
        - 3
      type: integer
    VideoPlaylistTypeConstant:
      properties:
        id:
          $ref: "#/components/schemas/VideoPlaylistTypeSet"
        label:
          type: string
    VideoPlaylistTypeSet:
      description: The video playlist type (Regular = `1`, Watch Later = `2`)
      enum:
        - 1
        - 2
      type: integer
    VideoPrivacyConstant:
      properties:
        id:
          $ref: "#/components/schemas/VideoPrivacySet"
        label:
          type: string
    VideoPrivacySet:
      description: The video privacy (Public = `1`, Unlisted = `2`, Private = `3`, Internal = `4`)
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
    VideoRating:
      properties:
        rating:
          description: Rating of the video
          type: number
        video:
          $ref: "#/components/schemas/Video"
      required:
        - video
        - rating
    VideoRedundancy:
      properties:
        id:
          type: integer
        name:
          type: string
        redundancies:
          properties:
            files:
              items:
                $ref: "#/components/schemas/FileRedundancyInformation"
              type: array
            streamingPlaylists:
              items:
                $ref: "#/components/schemas/FileRedundancyInformation"
              type: array
          type: object
        url:
          format: url
          type: string
        uuid:
          example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
          format: uuid
          type: string
    VideoResolutionConstant:
      properties:
        id:
          description: Video resolution (240, 360, 720, 1080, 1440 or 2160)
          example: 240
          type: integer
        label:
          example: 240p
          type: string
    VideoScheduledUpdate:
      properties:
        privacy:
          $ref: "#/components/schemas/VideoPrivacySet"
        updateAt:
          description: When to update the video
          format: date
          type: string
      required:
        - updateAt
    VideoStateConstant:
      properties:
        id:
          description: The video state (Published = `1`, to transcode = `2`, to import = `3`)
          enum:
            - 1
            - 2
            - 3
          type: integer
        label:
          type: string
    VideoStreamingPlaylists:
      properties:
        files:
          description: Video files associated to this playlist. The difference with the root "files" property is that these files are fragmented, so they can be used in this streaming playlist (HLS etc)
          items:
            $ref: "#/components/schemas/VideoFile"
          type: array
        id:
          type: integer
        playlistUrl:
          format: url
          type: string
        redundancies:
          items:
            properties:
              baseUrl:
                format: url
                type: string
            type: object
          type: array
        segmentsSha256Url:
          format: url
          type: string
        type:
          description: Playlist type (HLS = `1`)
          enum:
            - 1
          type: integer
    VideoUploadResponse:
      properties:
        video:
          properties:
            id:
              example: 8
              type: integer
            uuid:
              example: 9c9de5e8-0a1e-484a-b099-e80766180a6d
              format: uuid
              type: string
          type: object
    VideosForXML:
      items:
        properties:
          content:encoded:
            description: video description
            type: string
          dc:creator:
            description: publisher user name
            type: string
          description:
            description: video description
            type: string
          enclosure:
            description: main streamable file for the video
            properties:
              length:
                type: integer
                xml:
                  attribute: true
              type:
                enum:
                  - application/x-bittorrent
                type: string
                xml:
                  attribute: true
              url:
                format: url
                type: string
                xml:
                  attribute: true
            type: object
          guid:
            description: video canonical URL
            type: string
          link:
            description: video watch page URL
            format: url
            type: string
          media:category:
            description: video category (MRSS)
            type: integer
          media:community:
            description: see [media:community](https://www.rssboard.org/media-rss#media-community) (MRSS)
            properties:
              media:statistics:
                properties:
                  views:
                    type: integer
                    xml:
                      attribute: true
                type: object
            type: object
          media:description:
            type: string
          media:embed:
            properties:
              url:
                description: video embed path, relative to the canonical URL domain (MRSS)
                format: url
                type: string
                xml:
                  attribute: true
            type: object
          media:group:
            description: list of streamable files for the video. see [media:peerLink](https://www.rssboard.org/media-rss#media-peerlink) and [media:content](https://www.rssboard.org/media-rss#media-content) or  (MRSS)
            items:
              anyOf:
                - $ref: "#/components/schemas/MRSSPeerLink"
                - $ref: "#/components/schemas/MRSSGroupContent"
            type: array
          media:player:
            properties:
              url:
                description: video watch path, relative to the canonical URL domain (MRSS)
                format: url
                type: string
                xml:
                  attribute: true
            type: object
          media:rating:
            description: see [media:rating](https://www.rssboard.org/media-rss#media-rating) (MRSS)
            enum:
              - nonadult
              - adult
            type: string
          media:thumbnail:
            properties:
              height:
                type: integer
                xml:
                  attribute: true
              url:
                format: url
                type: string
                xml:
                  attribute: true
              width:
                type: integer
                xml:
                  attribute: true
            type: object
          media:title:
            description: see [media:title](https://www.rssboard.org/media-rss#media-title) (MRSS). We only use `plain` titles.
            type: string
          pubDate:
            description: video publication date
            format: date-time
            type: string
        type: object
        xml:
          name: item
      type: array
      xml:
        name: channel
        wrapped: true
  securitySchemes:
    OAuth2:
      description: >
        In the header: *Authorization: Bearer <token\>*


        Authenticating via OAuth requires the following steps:


        - Have an account with sufficient authorization levels

        - [Generate](https://docs.joinpeertube.org/#/api-rest-getting-started) a Bearer Token

        - Make Authenticated Requests
      flows:
        password:
          scopes:
            admin: Admin scope
            moderator: Moderator scope
            user: User scope
          tokenUrl: https://peertube.example.com/api/v1/users/token
      type: oauth2
x-tagGroups:
  - name: Accounts
    tags:
      - Accounts
      - Users
      - My User
      - My Subscriptions
      - My Notifications
      - My History
  - name: Videos
    tags:
      - Video
      - Video Captions
      - Video Channels
      - Video Comments
      - Video Rates
      - Video Playlists
      - Video Ownership Change
      - Video Mirroring
      - Live Videos
      - Feeds
  - name: Search
    tags:
      - Search
  - name: Moderation
    tags:
      - Abuses
      - Video Blocks
      - Account Blocks
      - Server Blocks
  - name: Instance Configuration
    tags:
      - Config
      - Instance Follows
      - Instance Redundancy
      - Plugins
  - name: Jobs
    tags:
      - Job
