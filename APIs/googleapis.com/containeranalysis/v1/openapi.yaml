openapi: 3.0.0
servers:
  - url: https://containeranalysis.googleapis.com/
x-hasEquivalentPaths: true
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Container Analysis API
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - format: google
      url: https://containeranalysis.googleapis.com/$discovery/rest?version=v1
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: containeranalysis
externalDocs:
  url: https://cloud.google.com/container-analysis/api/reference/rest/
tags:
  - name: operations
  - name: projects
paths:
  "/v1/{name}":
    delete:
      description: Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource.
      operationId: containeranalysis.projects.occurrences.delete
      parameters:
        - description: Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    get:
      description: Gets the specified occurrence.
      operationId: containeranalysis.projects.occurrences.get
      parameters:
        - description: Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The standard list filter.
          in: query
          name: filter
          schema:
            type: string
        - description: The standard list page size.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: The standard list page token.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Occurrence"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    patch:
      description: Updates the specified occurrence.
      operationId: containeranalysis.projects.occurrences.patch
      parameters:
        - description: Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The fields to update.
          in: query
          name: updateMask
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Occurrence"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Occurrence"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{name}/notes":
    get:
      description: Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.
      operationId: containeranalysis.projects.occurrences.getNotes
      parameters:
        - description: Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  "/v1/{name}/occurrences":
    get:
      description: Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.
      operationId: containeranalysis.projects.notes.occurrences.list
      parameters:
        - description: Required. The name of the note to list occurrences for in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of occurrences to return in the list.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNoteOccurrencesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  "/v1/{name}:cancel":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
      operationId: containeranalysis.operations.cancel
      parameters:
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelOperationRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - operations
  "/v1/{parent}/notes":
    get:
      description: Lists notes for the specified project.
      operationId: containeranalysis.projects.notes.list
      parameters:
        - description: Required. The name of the project to list notes for in the form of `projects/[PROJECT_ID]`.
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of notes to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListNotesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new note.
      operationId: containeranalysis.projects.notes.create
      parameters:
        - description: Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created.
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: Required. The ID to use for this note.
          in: query
          name: noteId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{parent}/notes:batchCreate":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates new notes in batch.
      operationId: containeranalysis.projects.notes.batchCreate
      parameters:
        - description: Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created.
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchCreateNotesRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchCreateNotesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{parent}/occurrences":
    get:
      description: Lists occurrences for the specified project.
      operationId: containeranalysis.projects.occurrences.list
      parameters:
        - description: Required. The name of the project to list occurrences for in the form of `projects/[PROJECT_ID]`.
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
        - description: Number of occurrences to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: Token to provide to skip to a particular spot in the list.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOccurrencesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates a new occurrence.
      operationId: containeranalysis.projects.occurrences.create
      parameters:
        - description: Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created.
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Occurrence"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Occurrence"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{parent}/occurrences:batchCreate":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Creates new occurrences in batch.
      operationId: containeranalysis.projects.occurrences.batchCreate
      parameters:
        - description: Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created.
          in: path
          name: parent
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchCreateOccurrencesRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchCreateOccurrencesResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{parent}/occurrences:vulnerabilitySummary":
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      parameters:
        - description: Required. The name of the project to get a vulnerability summary for in the form of `projects/[PROJECT_ID]`.
          in: path
          name: parent
          required: true
          schema:
            type: string
        - description: The filter expression.
          in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VulnerabilityOccurrencesSummary"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  "/v1/{resource}:getIamPolicy":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.getIamPolicy
      parameters:
        - description: "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field."
          in: path
          name: resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIamPolicyRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{resource}:setIamPolicy":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.setIamPolicy
      parameters:
        - description: "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field."
          in: path
          name: resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetIamPolicyRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
  "/v1/{resource}:testIamPermissions":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.testIamPermissions
      parameters:
        - description: "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field."
          in: path
          name: resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestIamPermissionsRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestIamPermissionsResponse"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      tags:
        - projects
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    AliasContext:
      description: An alias to a repo revision.
      properties:
        kind:
          description: The alias kind.
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          type: string
        name:
          description: The alias name.
          type: string
      type: object
    Artifact:
      description: Artifact describes a build product.
      properties:
        checksum:
          description: Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
          type: string
        id:
          description: Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
          type: string
        names:
          description: Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
          items:
            type: string
          type: array
      type: object
    AttestationNote:
      description: Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
      properties:
        hint:
          $ref: "#/components/schemas/Hint"
          description: Hint hints at the purpose of the attestation authority.
      type: object
    AttestationOccurrence:
      description: Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
      properties:
        jwts:
          description: One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
          items:
            $ref: "#/components/schemas/Jwt"
          type: array
        serializedPayload:
          description: Required. The serialized payload that is verified by one or more `signatures`.
          format: byte
          type: string
        signatures:
          description: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
          items:
            $ref: "#/components/schemas/Signature"
          type: array
      type: object
    BatchCreateNotesRequest:
      description: Request to create notes in batch.
      properties:
        notes:
          additionalProperties:
            $ref: "#/components/schemas/Note"
          description: Required. The notes to create. Max allowed length is 1000.
          type: object
      type: object
    BatchCreateNotesResponse:
      description: Response for creating notes in batch.
      properties:
        notes:
          description: The notes that were created.
          items:
            $ref: "#/components/schemas/Note"
          type: array
      type: object
    BatchCreateOccurrencesRequest:
      description: Request to create occurrences in batch.
      properties:
        occurrences:
          description: Required. The occurrences to create. Max allowed length is 1000.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    BatchCreateOccurrencesResponse:
      description: Response for creating occurrences in batch.
      properties:
        occurrences:
          description: The occurrences that were created.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    Binding:
      description: Associates `members` with a `role`.
      properties:
        condition:
          $ref: "#/components/schemas/Expr"
          description: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        members:
          description: "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
          items:
            type: string
          type: array
        role:
          description: Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          type: string
      type: object
    BuildNote:
      description: Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
      properties:
        builderVersion:
          description: Required. Immutable. Version of the builder which produced this build.
          type: string
      type: object
    BuildOccurrence:
      description: Details of a build occurrence.
      properties:
        intotoProvenance:
          $ref: "#/components/schemas/InTotoProvenance"
          description: In-toto Provenance representation as defined in spec.
        provenance:
          $ref: "#/components/schemas/BuildProvenance"
          description: Required. The actual provenance for the build.
        provenanceBytes:
          description: Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
          type: string
      type: object
    BuildProvenance:
      description: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
      properties:
        buildOptions:
          additionalProperties:
            type: string
          description: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
          type: object
        builderVersion:
          description: Version string of the builder at the time this build was executed.
          type: string
        builtArtifacts:
          description: Output of the build.
          items:
            $ref: "#/components/schemas/Artifact"
          type: array
        commands:
          description: Commands requested by the build.
          items:
            $ref: "#/components/schemas/Command"
          type: array
        createTime:
          description: Time at which the build was created.
          format: google-datetime
          type: string
        creator:
          description: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
          type: string
        endTime:
          description: Time at which execution of the build was finished.
          format: google-datetime
          type: string
        id:
          description: Required. Unique identifier of the build.
          type: string
        logsUri:
          description: URI where any logs for this provenance were written.
          type: string
        projectId:
          description: ID of the project.
          type: string
        sourceProvenance:
          $ref: "#/components/schemas/Source"
          description: Details of the Source input to the build.
        startTime:
          description: Time at which execution of the build was started.
          format: google-datetime
          type: string
        triggerId:
          description: Trigger identifier if the build was triggered automatically; empty if not.
          type: string
      type: object
    BuildStep:
      description: A step in the build pipeline.
      properties:
        args:
          description: A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
          items:
            type: string
          type: array
        dir:
          description: Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
          type: string
        entrypoint:
          description: Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
          type: string
        env:
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        id:
          description: Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
          type: string
        name:
          description: Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
          type: string
        pullTiming:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for pulling this build step's builder image only.
          readOnly: true
        script:
          description: A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
          type: string
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          items:
            type: string
          type: array
        status:
          description: Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          readOnly: true
          type: string
        timeout:
          description: Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
          format: google-duration
          type: string
        timing:
          $ref: "#/components/schemas/TimeSpan"
          description: Output only. Stores timing information for executing this build step.
          readOnly: true
        volumes:
          description: List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
          items:
            $ref: "#/components/schemas/Volume"
          type: array
        waitFor:
          description: The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
          items:
            type: string
          type: array
      type: object
    BuilderConfig:
      properties:
        id:
          type: string
      type: object
    CVSSv3:
      description: Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
      properties:
        attackComplexity:
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
          type: string
        attackVector:
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          type: string
        availabilityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
        baseScore:
          description: The base score is a function of the base metric scores.
          format: float
          type: number
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
        exploitabilityScore:
          format: float
          type: number
        impactScore:
          format: float
          type: number
        integrityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
        privilegesRequired:
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
        scope:
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        userInteraction:
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          type: string
      type: object
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    Category:
      description: The category to which the update belongs.
      properties:
        categoryId:
          description: The identifier of the category.
          type: string
        name:
          description: The localized name of the category.
          type: string
      type: object
    CisBenchmark:
      description: A compliance check that is a CIS benchmark.
      properties:
        profileLevel:
          format: int32
          type: integer
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
      type: object
    CloudRepoSourceContext:
      description: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
      properties:
        aliasContext:
          $ref: "#/components/schemas/AliasContext"
          description: An alias, which may be a branch or tag.
        repoId:
          $ref: "#/components/schemas/RepoId"
          description: The ID of the repo.
        revisionId:
          description: A revision ID.
          type: string
      type: object
    Command:
      description: Command describes a step performed as part of the build pipeline.
      properties:
        args:
          description: Command-line arguments used when executing this command.
          items:
            type: string
          type: array
        dir:
          description: Working directory (relative to project source root) used when running this command.
          type: string
        env:
          description: Environment variables set before running this command.
          items:
            type: string
          type: array
        id:
          description: Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
          type: string
        name:
          description: Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
          type: string
        waitFor:
          description: The ID(s) of the command(s) that this command depends on.
          items:
            type: string
          type: array
      type: object
    Completeness:
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        arguments:
          description: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
          type: boolean
        environment:
          description: If true, the builder claims that recipe.environment is claimed to be complete.
          type: boolean
        materials:
          description: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
          type: boolean
      type: object
    ComplianceNote:
      properties:
        cisBenchmark:
          $ref: "#/components/schemas/CisBenchmark"
        description:
          description: A description about this compliance check.
          type: string
        rationale:
          description: A rationale for the existence of this compliance check.
          type: string
        remediation:
          description: A description of remediation steps if the compliance check fails.
          type: string
        scanInstructions:
          description: Serialized scan instructions with a predefined format.
          format: byte
          type: string
        title:
          description: The title that identifies this compliance check.
          type: string
        version:
          description: The OS and config versions the benchmark applies to.
          items:
            $ref: "#/components/schemas/ComplianceVersion"
          type: array
      type: object
    ComplianceOccurrence:
      description: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
      properties:
        nonComplianceReason:
          type: string
        nonCompliantFiles:
          items:
            $ref: "#/components/schemas/NonCompliantFile"
          type: array
      type: object
    ComplianceVersion:
      description: Describes the CIS benchmark version that is applicable to a given OS and os version.
      properties:
        cpeUri:
          description: The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
          type: string
        version:
          description: The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
          type: string
      type: object
    DSSEAttestationNote:
      properties:
        hint:
          $ref: "#/components/schemas/DSSEHint"
          description: DSSEHint hints at the purpose of the attestation authority.
      type: object
    DSSEAttestationOccurrence:
      properties:
        envelope:
          $ref: "#/components/schemas/Envelope"
          description: If doing something security critical, make sure to verify the signatures in this metadata.
        statement:
          $ref: "#/components/schemas/InTotoStatement"
      type: object
    DSSEHint:
      description: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
      properties:
        humanReadableName:
          description: Required. The human readable name of this attestation authority, for example "cloudbuild-prod".
          type: string
      type: object
    DeploymentNote:
      description: An artifact that can be deployed in some runtime.
      properties:
        resourceUri:
          description: Required. Resource URI for the artifact being deployed.
          items:
            type: string
          type: array
      type: object
    DeploymentOccurrence:
      description: The period during which some deployable was active in a runtime.
      properties:
        address:
          description: Address of the runtime element hosting this deployment.
          type: string
        config:
          description: Configuration used to create this deployment.
          type: string
        deployTime:
          description: Required. Beginning of the lifetime of this deployment.
          format: google-datetime
          type: string
        platform:
          description: Platform hosting this deployment.
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          type: string
        resourceUri:
          description: Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
          items:
            type: string
          type: array
        undeployTime:
          description: End of the lifetime of this deployment.
          format: google-datetime
          type: string
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
      type: object
    Detail:
      description: A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
      properties:
        affectedCpeUri:
          description: Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
          type: string
        affectedPackage:
          description: Required. The package this vulnerability affects.
          type: string
        affectedVersionEnd:
          $ref: "#/components/schemas/Version"
          description: "The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail."
        affectedVersionStart:
          $ref: "#/components/schemas/Version"
          description: "The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail."
        description:
          description: A vendor-specific description of this vulnerability.
          type: string
        fixedCpeUri:
          description: The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
          type: string
        fixedPackage:
          description: The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
          type: string
        fixedVersion:
          $ref: "#/components/schemas/Version"
          description: The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
        isObsolete:
          description: Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
          type: boolean
        packageType:
          description: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
          type: string
        severityName:
          description: The distro assigned severity of this vulnerability.
          type: string
        source:
          description: The source from which the information in this Detail was obtained.
          type: string
        sourceUpdateTime:
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
          format: google-datetime
          type: string
        vendor:
          description: The name of the vendor of the product.
          type: string
      type: object
    DiscoveryNote:
      description: A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
      properties:
        analysisKind:
          description: Required. Immutable. The kind of analysis that is handled by this discovery.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
          type: string
      type: object
    DiscoveryOccurrence:
      description: Provides information about the analysis status of a discovered resource.
      properties:
        analysisStatus:
          description: The status of discovery for the resource.
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          type: string
        analysisStatusError:
          $ref: "#/components/schemas/Status"
          description: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
        continuousAnalysis:
          description: Whether the resource is continuously analyzed.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          type: string
        cpe:
          description: The CPE of the resource being scanned.
          type: string
        lastScanTime:
          description: The last time this resource was scanned.
          format: google-datetime
          type: string
      type: object
    Distribution:
      description: This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
      properties:
        architecture:
          description: The CPU architecture for which packages in this distribution channel were built.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
        cpeUri:
          description: Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
          type: string
        description:
          description: The distribution channel-specific description of this package.
          type: string
        latestVersion:
          $ref: "#/components/schemas/Version"
          description: The latest available version of this package in this distribution channel.
        maintainer:
          description: A freeform string denoting the maintainer of this package.
          type: string
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
      type: object
    Empty:
      description: "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
      properties: {}
      type: object
    Envelope:
      description: MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
      properties:
        payload:
          format: byte
          type: string
        payloadType:
          type: string
        signatures:
          items:
            $ref: "#/components/schemas/EnvelopeSignature"
          type: array
      type: object
    EnvelopeSignature:
      properties:
        keyid:
          type: string
        sig:
          format: byte
          type: string
      type: object
    Expr:
      description: "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information."
      properties:
        description:
          description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
          type: string
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
        location:
          description: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
          type: string
        title:
          description: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
          type: string
      type: object
    FileHashes:
      description: Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
      properties:
        fileHash:
          description: Required. Collection of file hashes.
          items:
            $ref: "#/components/schemas/Hash"
          type: array
      type: object
    Fingerprint:
      description: A set of properties that uniquely identify a given Docker image.
      properties:
        v1Name:
          description: Required. The layer ID of the final layer in the Docker image's v1 representation.
          type: string
        v2Blob:
          description: Required. The ordered list of v2 blobs that represent a given image.
          items:
            type: string
          type: array
        v2Name:
          description: "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept."
          type: string
      type: object
    FixableTotalByDigest:
      description: Per resource and severity counts of fixable and total vulnerabilities.
      properties:
        fixableCount:
          description: The number of fixable vulnerabilities associated with this resource.
          format: int64
          type: string
        resourceUri:
          description: The affected resource.
          type: string
        severity:
          description: The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        totalCount:
          description: The total number of vulnerabilities associated with this resource.
          format: int64
          type: string
      type: object
    GerritSourceContext:
      description: A SourceContext referring to a Gerrit project.
      properties:
        aliasContext:
          $ref: "#/components/schemas/AliasContext"
          description: An alias, which may be a branch or tag.
        gerritProject:
          description: The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
          type: string
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        revisionId:
          description: A revision (commit) ID.
          type: string
      type: object
    GetIamPolicyRequest:
      description: Request message for `GetIamPolicy` method.
      properties:
        options:
          $ref: "#/components/schemas/GetPolicyOptions"
          description: "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
      type: object
    GetPolicyOptions:
      description: Encapsulates settings provided to GetIamPolicy.
      properties:
        requestedPolicyVersion:
          description: Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          format: int32
          type: integer
      type: object
    GitSourceContext:
      description: A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
      properties:
        revisionId:
          description: Git commit hash.
          type: string
        url:
          description: Git repository URL.
          type: string
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      description: Metadata for all operations used and required for all operations that created by Container Analysis Providers
      properties:
        createTime:
          description: Output only. The time this operation was created.
          format: google-datetime
          type: string
        endTime:
          description: Output only. The time that this operation was marked completed or failed.
          format: google-datetime
          type: string
      type: object
    Hash:
      description: Container message for hash values.
      properties:
        type:
          description: Required. The type of hash that was performed, e.g. "SHA-256".
          type: string
        value:
          description: Required. The hash value.
          format: byte
          type: string
      type: object
    Hint:
      description: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
      properties:
        humanReadableName:
          description: Required. The human readable name of this attestation authority, for example "qa".
          type: string
      type: object
    Identity:
      description: The unique identifier of the update.
      properties:
        revision:
          description: The revision number of the update.
          format: int32
          type: integer
        updateId:
          description: The revision independent identifier of the update.
          type: string
      type: object
    ImageNote:
      description: "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url."
      properties:
        fingerprint:
          $ref: "#/components/schemas/Fingerprint"
          description: Required. Immutable. The fingerprint of the base image.
        resourceUrl:
          description: Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
          type: string
      type: object
    ImageOccurrence:
      description: Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
      properties:
        baseResourceUrl:
          description: Output only. This contains the base image URL for the derived image occurrence.
          type: string
        distance:
          description: Output only. The number of layers by which this image differs from the associated image basis.
          format: int32
          type: integer
        fingerprint:
          $ref: "#/components/schemas/Fingerprint"
          description: Required. The fingerprint of the derived image.
        layerInfo:
          description: This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
          items:
            $ref: "#/components/schemas/Layer"
          type: array
      type: object
    InTotoProvenance:
      properties:
        builderConfig:
          $ref: "#/components/schemas/BuilderConfig"
          description: required
        materials:
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
          items:
            type: string
          type: array
        metadata:
          $ref: "#/components/schemas/Metadata"
        recipe:
          $ref: "#/components/schemas/Recipe"
          description: Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
      type: object
    InTotoStatement:
      description: Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
      properties:
        predicateType:
          description: '"https://in-toto.io/Provenance/v0.1" for InTotoProvenance.'
          type: string
        provenance:
          $ref: "#/components/schemas/InTotoProvenance"
        subject:
          items:
            $ref: "#/components/schemas/Subject"
          type: array
        type:
          description: Always "https://in-toto.io/Statement/v0.1".
          type: string
      type: object
    Jwt:
      properties:
        compactJwt:
          description: "The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1"
          type: string
      type: object
    KnowledgeBase:
      properties:
        name:
          description: The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
          type: string
        url:
          description: A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
          type: string
      type: object
    Layer:
      description: Layer holds metadata specific to a layer of a Docker image.
      properties:
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
        directive:
          description: Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
          type: string
      type: object
    ListNoteOccurrencesResponse:
      description: Response for listing occurrences for a note.
      properties:
        nextPageToken:
          description: Token to provide to skip to a particular spot in the list.
          type: string
        occurrences:
          description: The occurrences attached to the specified note.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    ListNotesResponse:
      description: Response for listing notes.
      properties:
        nextPageToken:
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
          type: string
        notes:
          description: The notes requested.
          items:
            $ref: "#/components/schemas/Note"
          type: array
      type: object
    ListOccurrencesResponse:
      description: Response for listing occurrences.
      properties:
        nextPageToken:
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
          type: string
        occurrences:
          description: The occurrences requested.
          items:
            $ref: "#/components/schemas/Occurrence"
          type: array
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: "#/components/schemas/Operation"
          type: array
      type: object
    Location:
      description: An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
      properties:
        cpeUri:
          description: Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
          type: string
        path:
          description: The path from which we gathered that this package/version is installed.
          type: string
        version:
          $ref: "#/components/schemas/Version"
          description: The version installed at this location.
      type: object
    Metadata:
      description: Other properties of the build.
      properties:
        buildFinishedOn:
          description: The timestamp of when the build completed.
          format: google-datetime
          type: string
        buildInvocationId:
          description: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
          type: string
        buildStartedOn:
          description: The timestamp of when the build started.
          format: google-datetime
          type: string
        completeness:
          $ref: "#/components/schemas/Completeness"
          description: Indicates that the builder claims certain fields in this message to be complete.
        reproducible:
          description: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
          type: boolean
      type: object
    NonCompliantFile:
      description: Details about files that caused a compliance check to fail.
      properties:
        displayCommand:
          description: Command to display the non-compliant files.
          type: string
        path:
          description: display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.
          type: string
        reason:
          description: Explains why a file is non compliant for a CIS check.
          type: string
      type: object
    Note:
      description: A type of analysis that can be done for a resource.
      properties:
        attestation:
          $ref: "#/components/schemas/AttestationNote"
          description: A note describing an attestation role.
        build:
          $ref: "#/components/schemas/BuildNote"
          description: A note describing build provenance for a verifiable build.
        compliance:
          $ref: "#/components/schemas/ComplianceNote"
          description: A note describing a compliance check.
        createTime:
          description: Output only. The time this note was created. This field can be used as a filter in list requests.
          format: google-datetime
          type: string
        deployment:
          $ref: "#/components/schemas/DeploymentNote"
          description: A note describing something that can be deployed.
        discovery:
          $ref: "#/components/schemas/DiscoveryNote"
          description: A note describing the initial analysis of a resource.
        dsseAttestation:
          $ref: "#/components/schemas/DSSEAttestationNote"
          description: A note describing a dsse attestation note.
        expirationTime:
          description: Time of expiration for this note. Empty if note does not expire.
          format: google-datetime
          type: string
        image:
          $ref: "#/components/schemas/ImageNote"
          description: A note describing a base image.
        kind:
          description: Output only. The type of analysis. This field can be used as a filter in list requests.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
          type: string
        longDescription:
          description: A detailed description of this note.
          type: string
        name:
          description: Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
          type: string
        package:
          $ref: "#/components/schemas/PackageNote"
          description: A note describing a package hosted by various package managers.
        relatedNoteNames:
          description: Other notes related to this note.
          items:
            type: string
          type: array
        relatedUrl:
          description: URLs associated with this note.
          items:
            $ref: "#/components/schemas/RelatedUrl"
          type: array
        shortDescription:
          description: A one sentence description of this note.
          type: string
        updateTime:
          description: Output only. The time this note was last updated. This field can be used as a filter in list requests.
          format: google-datetime
          type: string
        upgrade:
          $ref: "#/components/schemas/UpgradeNote"
          description: A note describing available package upgrades.
        vulnerability:
          $ref: "#/components/schemas/VulnerabilityNote"
          description: A note describing a package vulnerability.
      type: object
    Occurrence:
      description: An instance of an analysis type that has been found on a resource.
      properties:
        attestation:
          $ref: "#/components/schemas/AttestationOccurrence"
          description: Describes an attestation of an artifact.
        build:
          $ref: "#/components/schemas/BuildOccurrence"
          description: Describes a verifiable build.
        compliance:
          $ref: "#/components/schemas/ComplianceOccurrence"
          description: Describes a compliance violation on a linked resource.
        createTime:
          description: Output only. The time this occurrence was created.
          format: google-datetime
          type: string
        deployment:
          $ref: "#/components/schemas/DeploymentOccurrence"
          description: Describes the deployment of an artifact on a runtime.
        discovery:
          $ref: "#/components/schemas/DiscoveryOccurrence"
          description: Describes when a resource was discovered.
        dsseAttestation:
          $ref: "#/components/schemas/DSSEAttestationOccurrence"
          description: Describes an attestation of an artifact using dsse.
        envelope:
          $ref: "#/components/schemas/Envelope"
          description: https://github.com/secure-systems-lab/dsse
        image:
          $ref: "#/components/schemas/ImageOccurrence"
          description: Describes how this resource derives from the basis in the associated note.
        kind:
          description: Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
          type: string
        name:
          description: Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
          type: string
        noteName:
          description: Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
          type: string
        package:
          $ref: "#/components/schemas/PackageOccurrence"
          description: Describes the installation of a package on the linked resource.
        remediation:
          description: A description of actions that can be taken to remedy the note.
          type: string
        resourceUri:
          description: Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
          type: string
        updateTime:
          description: Output only. The time this occurrence was last updated.
          format: google-datetime
          type: string
        upgrade:
          $ref: "#/components/schemas/UpgradeOccurrence"
          description: Describes an available package upgrade on the linked resource.
        vulnerability:
          $ref: "#/components/schemas/VulnerabilityOccurrence"
          description: Describes a security vulnerability.
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
        error:
          $ref: "#/components/schemas/Status"
          description: The error result of the operation in case of failure or cancellation.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          type: object
        name:
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          type: object
      type: object
    PackageIssue:
      description: A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
      properties:
        affectedCpeUri:
          description: Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
          type: string
        affectedPackage:
          description: Required. The package this vulnerability was found in.
          type: string
        affectedVersion:
          $ref: "#/components/schemas/Version"
          description: Required. The version of the package that is installed on the resource affected by this vulnerability.
        effectiveSeverity:
          description: Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          readOnly: true
          type: string
        fixAvailable:
          description: Output only. Whether a fix is available for this package.
          type: boolean
        fixedCpeUri:
          description: The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
          type: string
        fixedPackage:
          description: The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
          type: string
        fixedVersion:
          $ref: "#/components/schemas/Version"
          description: Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
        packageType:
          description: The type of package (e.g. OS, MAVEN, GO).
          type: string
      type: object
    PackageNote:
      description: This represents a particular package that is distributed over various channels. E.g., glibc (aka libc6) is distributed by many, at various versions.
      properties:
        distribution:
          description: The various channels by which a package is distributed.
          items:
            $ref: "#/components/schemas/Distribution"
          type: array
        name:
          description: Required. Immutable. The name of the package.
          type: string
      type: object
    PackageOccurrence:
      description: Details on how a particular software package was installed on a system.
      properties:
        location:
          description: Required. All of the places within the filesystem versions of this package have been found.
          items:
            $ref: "#/components/schemas/Location"
          type: array
        name:
          description: Output only. The name of the installed package.
          type: string
      type: object
    Policy:
      description: "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
      properties:
        bindings:
          description: Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
          items:
            $ref: "#/components/schemas/Binding"
          type: array
        etag:
          description: "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
          format: byte
          type: string
        version:
          description: "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
          format: int32
          type: integer
      type: object
    ProjectRepoId:
      description: Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
      properties:
        projectId:
          description: The ID of the project.
          type: string
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
      type: object
    Recipe:
      description: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
      properties:
        arguments:
          description: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        definedInMaterial:
          description: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
          format: int64
          type: string
        entryPoint:
          description: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
          type: string
        environment:
          description: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        type:
          description: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
          type: string
      type: object
    RelatedUrl:
      description: Metadata for any related URL information.
      properties:
        label:
          description: Label to describe usage of the URL.
          type: string
        url:
          description: Specific URL associated with the resource.
          type: string
      type: object
    RepoId:
      description: A unique identifier for a Cloud Repo.
      properties:
        projectRepoId:
          $ref: "#/components/schemas/ProjectRepoId"
          description: A combination of a project ID and a repo name.
        uid:
          description: A server-assigned, globally unique identifier.
          type: string
      type: object
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          $ref: "#/components/schemas/Policy"
          description: "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them."
      type: object
    Signature:
      description: 'Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).'
      properties:
        publicKeyId:
          description: 'The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"'
          type: string
        signature:
          description: The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
          format: byte
          type: string
      type: object
    Source:
      description: Source describes the location of the source used for the build.
      properties:
        additionalContexts:
          description: If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
          items:
            $ref: "#/components/schemas/SourceContext"
          type: array
        artifactStorageSourceUri:
          description: If provided, the input binary artifacts for the build came from this location.
          type: string
        context:
          $ref: "#/components/schemas/SourceContext"
          description: If provided, the source code used for the build came from this location.
        fileHashes:
          additionalProperties:
            $ref: "#/components/schemas/FileHashes"
          description: Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
          type: object
      type: object
    SourceContext:
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
      properties:
        cloudRepo:
          $ref: "#/components/schemas/CloudRepoSourceContext"
          description: A SourceContext referring to a revision in a Google Cloud Source Repo.
        gerrit:
          $ref: "#/components/schemas/GerritSourceContext"
          description: A SourceContext referring to a Gerrit project.
        git:
          $ref: "#/components/schemas/GitSourceContext"
          description: A SourceContext referring to any third party Git repo (e.g., GitHub).
        labels:
          additionalProperties:
            type: string
          description: Labels with user defined metadata.
          type: object
      type: object
    Status:
      description: "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
    Subject:
      properties:
        digest:
          additionalProperties:
            type: string
          description: '"": ""'
          type: object
        name:
          type: string
      type: object
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          description: The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
          items:
            type: string
          type: array
      type: object
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          items:
            type: string
          type: array
      type: object
    TimeSpan:
      description: Start and end times for a build execution phase.
      properties:
        endTime:
          description: End of time span.
          format: google-datetime
          type: string
        startTime:
          description: Start of time span.
          format: google-datetime
          type: string
      type: object
    UpgradeDistribution:
      description: The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
      properties:
        classification:
          description: The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
          type: string
        cpeUri:
          description: Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
          type: string
        cve:
          description: The cve tied to this Upgrade.
          items:
            type: string
          type: array
        severity:
          description: The severity as specified by the upstream operating system.
          type: string
      type: object
    UpgradeNote:
      description: An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
      properties:
        distributions:
          description: Metadata about the upgrade for each specific operating system.
          items:
            $ref: "#/components/schemas/UpgradeDistribution"
          type: array
        package:
          description: Required for non-Windows OS. The package this Upgrade is for.
          type: string
        version:
          $ref: "#/components/schemas/Version"
          description: Required for non-Windows OS. The version of the package in machine + human readable form.
        windowsUpdate:
          $ref: "#/components/schemas/WindowsUpdate"
          description: Required for Windows OS. Represents the metadata about the Windows update.
      type: object
    UpgradeOccurrence:
      description: An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
      properties:
        distribution:
          $ref: "#/components/schemas/UpgradeDistribution"
          description: Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
        package:
          description: Required for non-Windows OS. The package this Upgrade is for.
          type: string
        parsedVersion:
          $ref: "#/components/schemas/Version"
          description: Required for non-Windows OS. The version of the package in a machine + human readable form.
        windowsUpdate:
          $ref: "#/components/schemas/WindowsUpdate"
          description: Required for Windows OS. Represents the metadata about the Windows update.
      type: object
    Version:
      description: Version contains structured information about the version of a package.
      properties:
        epoch:
          description: Used to correct mistakes in the version numbering scheme.
          format: int32
          type: integer
        fullName:
          description: Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
          type: string
        inclusive:
          description: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
          type: boolean
        kind:
          description: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          type: string
        name:
          description: Required only when version kind is NORMAL. The main part of the version name.
          type: string
        revision:
          description: The iteration of the package build from the above version.
          type: string
      type: object
    Volume:
      description: Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
      properties:
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
      type: object
    VulnerabilityNote:
      description: A security vulnerability that can be found in resources.
      properties:
        cvssScore:
          description: The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
          format: float
          type: number
        cvssV3:
          $ref: "#/components/schemas/CVSSv3"
          description: The full description of the CVSSv3 for this vulnerability.
        details:
          description: Details of all known distros and packages affected by this vulnerability.
          items:
            $ref: "#/components/schemas/Detail"
          type: array
        severity:
          description: The note provider assigned severity of this vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        sourceUpdateTime:
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
          format: google-datetime
          type: string
        windowsDetails:
          description: Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
          items:
            $ref: "#/components/schemas/WindowsDetail"
          type: array
      type: object
    VulnerabilityOccurrence:
      description: An occurrence of a severity vulnerability on a resource.
      properties:
        cvssScore:
          description: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
          format: float
          type: number
        effectiveSeverity:
          description: The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        fixAvailable:
          description: Output only. Whether at least one of the affected packages has a fix available.
          type: boolean
        longDescription:
          description: Output only. A detailed description of this vulnerability.
          type: string
        packageIssue:
          description: Required. The set of affected locations and their fixes (if available) within the associated resource.
          items:
            $ref: "#/components/schemas/PackageIssue"
          type: array
        relatedUrls:
          description: Output only. URLs related to this vulnerability.
          items:
            $ref: "#/components/schemas/RelatedUrl"
          type: array
        severity:
          description: Output only. The note provider assigned severity of this vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        shortDescription:
          description: Output only. A one sentence description of this vulnerability.
          type: string
        type:
          description: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
          type: string
      type: object
    VulnerabilityOccurrencesSummary:
      description: A summary of how many vulnerability occurrences there are per resource and severity type.
      properties:
        counts:
          description: A listing by resource of the number of fixable and total vulnerabilities.
          items:
            $ref: "#/components/schemas/FixableTotalByDigest"
          type: array
      type: object
    WindowsDetail:
      properties:
        cpeUri:
          description: Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
          type: string
        description:
          description: The description of this vulnerability.
          type: string
        fixingKbs:
          description: Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
          items:
            $ref: "#/components/schemas/KnowledgeBase"
          type: array
        name:
          description: Required. The name of this vulnerability.
          type: string
      type: object
    WindowsUpdate:
      description: Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
      properties:
        categories:
          description: The list of categories to which the update belongs.
          items:
            $ref: "#/components/schemas/Category"
          type: array
        description:
          description: The localized description of the update.
          type: string
        identity:
          $ref: "#/components/schemas/Identity"
          description: Required - The unique identifier for the update.
        kbArticleIds:
          description: The Microsoft Knowledge Base article IDs that are associated with the update.
          items:
            type: string
          type: array
        lastPublishedTimestamp:
          description: The last published timestamp of the update.
          format: google-datetime
          type: string
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
        title:
          description: The localized title of the update.
          type: string
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2
source:
  url: {}
