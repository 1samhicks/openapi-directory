swagger: '2.0'
schemes:
  - https
host: tracing.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: |
    Send and retrieve trace data from Google Stackdriver Trace.
  license:
    name: Creative Commons Attribution 3.0
    url: 'http://creativecommons.org/licenses/by/3.0/'
  termsOfService: 'https://developers.google.com/terms/'
  title: Google Tracing
  version: v2
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.0.1
      format: google
      url: 'https://tracing.googleapis.com/$discovery/rest?version=v2'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: tracing
externalDocs:
  url: 'https://cloud.google.com/trace'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 implicit authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/trace.append': Write Trace data for a project or application
      'https://www.googleapis.com/auth/trace.readonly': Read Trace data for a project or application
    type: oauth2
  Oauth2c:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 accessCode authentication
    flow: accessCode
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/trace.append': Write Trace data for a project or application
      'https://www.googleapis.com/auth/trace.readonly': Read Trace data for a project or application
    tokenUrl: 'https://accounts.google.com/o/oauth2/token'
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: projects
paths:
  '/v2/{name}':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    put:
      description: Creates a new Span.
      operationId: tracing.projects.traces.spans.create
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Span'
        - description: |-
            The resource name of Span in the format
            `projects/PROJECT_ID/traces/TRACE_ID/spans/SPAN_ID`.
            `TRACE_ID` is a unique identifier for a trace within a project and is a
            base16-encoded, case-insensitive string and is required to be 32 char long.
            `SPAN_ID` is a unique identifier for a span within a trace. It is a
            base 16-encoded, case-insensitive string of a 8-bytes array and is required
            to be 16 char long.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Span'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.append'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.append'
      tags:
        - projects
  '/v2/{name}/traces:batchWrite':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Sends new spans to Stackdriver Trace or updates existing traces. If the
        name of a trace that you send matches that of an existing trace, new spans
        are added to the existing trace. Attempt to update existing spans results
        undefined behavior. If the name does not match, a new trace is created
        with given set of spans.
      operationId: tracing.projects.traces.batchWrite
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/BatchWriteSpansRequest'
        - description: |-
            Name of the project where the spans belong to. Format is
            `projects/PROJECT_ID`.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.append'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.append'
      tags:
        - projects
  '/v2/{parent}/traces':
    get:
      description: Returns of a list of traces that match the specified filter conditions.
      operationId: tracing.projects.traces.list
      parameters:
        - description: |-
            End of the time interval (inclusive) during which the trace data was
            collected from the application.
          in: query
          name: endTime
          type: string
        - description: |-
            An optional filter for the request.
            Example:
            `version_label_key:a some_label:some_label_key`
            returns traces from version `a` and has `some_label` with `some_label_key`.
          in: query
          name: filter
          type: string
        - description: |-
            Field used to sort the returned traces. Optional.
            Can be one of the following:

            *   `trace_id`
            *   `name` (`name` field of root span in the trace)
            *   `duration` (difference between `end_time` and `start_time` fields of
                 the root span)
            *   `start` (`start_time` field of the root span)

            Descending order can be specified by appending `desc` to the sort field
            (for example, `name desc`).

            Only one sort field is permitted.
          in: query
          name: orderBy
          type: string
        - description: |-
            Maximum number of traces to return. If not specified or <= 0, the
            implementation selects a reasonable value. The implementation may
            return fewer traces than the requested page size. Optional.
          in: query
          name: pageSize
          type: integer
        - description: |-
            Token identifying the page of results to return. If provided, use the
            value of the `next_page_token` field from a previous request. Optional.
          in: query
          name: pageToken
          type: string
        - description: |-
            ID of the Cloud project where the trace data is stored which is
            `projects/PROJECT_ID`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
        - description: |-
            Start of the time interval (inclusive) during which the trace data was
            collected from the application.
          in: query
          name: startTime
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListTracesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.readonly'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v2/{parent}:listSpans':
    get:
      description: Returns a list of spans within a trace.
      operationId: tracing.projects.traces.listSpans
      parameters:
        - description: |-
            Token identifying the page of results to return. If provided, use the
            value of the `nextPageToken` field from a previous request. Optional.
          in: query
          name: pageToken
          type: string
        - description: |-
            ID of the trace for which to list child spans. Format is
            `projects/PROJECT_ID/traces/TRACE_ID`.
          in: path
          name: parent
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ListSpansResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.readonly'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
definitions:
  Annotation:
    description: |-
      Text annotation with a set of attributes. A maximum of 32 annotations are
      allowed per Span.
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
        description: |-
          A set of attributes on the annotation. A maximum of 4 attributes are
          allowed per Annotation.
      description:
        $ref: '#/definitions/TruncatableString'
        description: |-
          A user-supplied message describing the event. The maximum length for
          the description is 256 bytes.
    type: object
  AttributeValue:
    description: 'The allowed types for the value side of an attribute key:value pair.'
    properties:
      boolValue:
        description: A boolean value.
        type: boolean
      intValue:
        description: An integer value.
        format: int64
        type: string
      stringValue:
        $ref: '#/definitions/TruncatableString'
        description: A string value (up to 256 bytes).
    type: object
  Attributes:
    description: 'Attributes of a span with a key:value format.'
    properties:
      attributeMap:
        additionalProperties:
          $ref: '#/definitions/AttributeValue'
        description: |-
          The maximum key length is 128 bytes (attributes are dropped if the
          key size is larger than the maximum allowed). The value can be a string
          (up to 256 bytes), integer, or boolean (true/false). Some common pair
          examples:

              "/instance_id": "my-instance"
              "/zone": "us-central1-a"
              "/grpc/peer_address": "ip:port" (dns, etc.)
              "/grpc/deadline": "Duration"
              "/http/user_agent"
              "/http/request_bytes": 300
              "/http/response_bytes": 1200
              "/http/url": google.com/apis
              "abc.com/myattribute": true
        type: object
      droppedAttributesCount:
        description: |-
          The number of dropped attributes after the maximum size was enforced. If
          0 then no attributes were dropped.
        format: int32
        type: integer
    type: object
  BatchWriteSpansRequest:
    description: The request message for the `BatchWriteSpans` method.
    properties:
      spans:
        description: A collection of spans.
        items:
          $ref: '#/definitions/Span'
        type: array
    type: object
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  Link:
    description: |-
      A pointer from this span to another span in a different `Trace` within
      the same service project or within a different service project. Used
      (for example) in batching operations, where a single batch handler
      processes multiple requests from different traces or when receives a
      request from a different service project.
    properties:
      spanId:
        description: |-
          `SPAN_ID` is a unique identifier for a span within a trace. It is a
          base16-encoded, case-insensitive string of a 8-bytes array and is
          required to be 16 char long.
        type: string
      traceId:
        description: |-
          `TRACE_ID` is a unique identifier for a trace within a project. It is
          a base16-encoded, case-insensitive string of a 16-bytes array and is
          required to be 32 char long.
        type: string
      type:
        description: The relationship of the current span relative to the linked span.
        enum:
          - TYPE_UNSPECIFIED
          - CHILD
          - PARENT
        type: string
    type: object
  Links:
    description: |-
      A collection of links, which are references from this span to a span
      in the same or different trace.
    properties:
      droppedLinksCount:
        description: |-
          The number of dropped links after the maximum size was enforced. If
          0 then no links were dropped.
        format: int32
        type: integer
      link:
        description: A collection of links.
        items:
          $ref: '#/definitions/Link'
        type: array
    type: object
  ListSpansResponse:
    description: The response message for the `ListSpans` method.
    properties:
      nextPageToken:
        description: |-
          If defined, indicates that there are more spans that match the request.
          Pass this as the value of `pageToken` in a subsequent request to retrieve
          additional spans.
        type: string
      spans:
        description: The requested spans if there are any in the specified trace.
        items:
          $ref: '#/definitions/Span'
        type: array
    type: object
  ListTracesResponse:
    description: The response message for the `ListTraces` method.
    properties:
      nextPageToken:
        description: |-
          If defined, indicates that there are more traces that match the request
          and that this value should be passed to the next request to continue
          retrieving additional traces.
        type: string
      traces:
        description: List of trace records returned.
        items:
          $ref: '#/definitions/Trace'
        type: array
    type: object
  Module:
    description: Binary module.
    properties:
      buildId:
        $ref: '#/definitions/TruncatableString'
        description: |-
          Build_id is a unique identifier for the module, usually a hash of its
          contents (up to 128 characters).
      module:
        $ref: '#/definitions/TruncatableString'
        description: |-
          E.g. main binary, kernel modules, and dynamic libraries
          such as libc.so, sharedlib.so (up to 256 characters).
    type: object
  NetworkEvent:
    description: |-
      An event describing an RPC message sent/received on the network. A
      maximum of 128 network events are allowed per Span.
    properties:
      messageId:
        description: 'An identifier for the message, which must be unique in this span.'
        format: uint64
        type: string
      messageSize:
        description: The number of bytes sent or received.
        format: uint64
        type: string
      time:
        description: |-
          If available, this is the kernel time:

          *  For sent messages, this is the time at which the first bit was sent.
          *  For received messages, this is the time at which the last bit was
             received.
        format: google-datetime
        type: string
      type:
        description: |-
          Type of NetworkEvent. Indicates whether the RPC message was sent or
          received.
        enum:
          - TYPE_UNSPECIFIED
          - SENT
          - RECV
        type: string
    type: object
  Span:
    description: |-
      A span represents a single operation within a trace. Spans can be nested
      to form a trace tree. Often, a trace contains a root span that
      describes the end-to-end latency and, optionally, one or more subspans for
      its sub-operations. (A trace could alternatively contain multiple root spans,
      or none at all.) Spans do not need to be contiguous. There may be gaps
      and/or overlaps between spans in a trace.
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
        description: |-
          A set of attributes on the span. A maximum of 32 attributes are allowed per
          Span.
      displayName:
        $ref: '#/definitions/TruncatableString'
        description: |-
          Description of the operation in the span. It is sanitized and displayed in
          the Stackdriver Trace tool in the
          {% dynamic print site_values.console_name %}.
          The display_name may be a method name or some other per-call site
          name. For the same executable and the same call point, a best practice is
          to use a consistent operation name, which makes it easier to correlate
          cross-trace spans.
          The maximum length for the display_name is 128 bytes.
      endTime:
        description: |-
          End time of the span.
          On the client side, this is the local machine clock time at which the span
          execution was ended; on the server
          side, this is the time at which the server application handler stopped
          running.
        format: google-datetime
        type: string
      links:
        $ref: '#/definitions/Links'
        description: A maximum of 128 links are allowed per Span.
      name:
        description: |-
          The resource name of Span in the format
          `projects/PROJECT_ID/traces/TRACE_ID/spans/SPAN_ID`.
          `TRACE_ID` is a unique identifier for a trace within a project and is a
          base16-encoded, case-insensitive string and is required to be 32 char long.
          `SPAN_ID` is a unique identifier for a span within a trace. It is a
          base 16-encoded, case-insensitive string of a 8-bytes array and is required
          to be 16 char long.
        type: string
      parentSpanId:
        description: |-
          ID of parent span which is a base 16-encoded, case-insensitive string of
          a 8-bytes array and is required to be 16 char long. If this is a root span,
          the value must be empty.
        type: string
      spanId:
        description: |-
          Unique identifier for a span within a trace. It is a base 16-encoded,
          case-insensitive string of a 8-bytes array and is required.
        type: string
      stackTrace:
        $ref: '#/definitions/StackTrace'
        description: Stack trace captured at the start of the span.
      startTime:
        description: |-
          Start time of the span.
          On the client side, this is the local machine clock time at which the span
          execution was started; on the server
          side, this is the time at which the server application handler started
          running.
        format: google-datetime
        type: string
      status:
        $ref: '#/definitions/Status'
        description: An optional final status for this span.
      timeEvents:
        $ref: '#/definitions/TimeEvents'
        description: A maximum of 32 annotations and 128 network events are allowed per Span.
    type: object
  StackFrame:
    description: Represents a single stack frame in a stack trace.
    properties:
      columnNumber:
        description: |-
          Column number is important in JavaScript (anonymous functions).
          May not be available in some languages.
        format: int64
        type: string
      fileName:
        $ref: '#/definitions/TruncatableString'
        description: The filename of the file containing this frame (up to 256 characters).
      functionName:
        $ref: '#/definitions/TruncatableString'
        description: |-
          The fully-qualified name that uniquely identifies this function or
          method (up to 1024 characters).
      lineNumber:
        description: Line number of the frame.
        format: int64
        type: string
      loadModule:
        $ref: '#/definitions/Module'
        description: Binary module the code is loaded from.
      originalFunctionName:
        $ref: '#/definitions/TruncatableString'
        description: |-
          Used when the function name is
          [mangled](http://www.avabodh.com/cxxin/namemangling.html). May be
          fully-qualified (up to 1024 characters).
      sourceVersion:
        $ref: '#/definitions/TruncatableString'
        description: The version of the deployed source code (up to 128 characters).
    type: object
  StackFrames:
    description: Represents collection of StackFrames that can be truncated.
    properties:
      droppedFramesCount:
        description: |-
          The number of dropped stack frames after the maximum size was enforced.
          If 0 then no frames were dropped.
        format: int32
        type: integer
      frame:
        description: Stack frames in this stack trace.
        items:
          $ref: '#/definitions/StackFrame'
        type: array
    type: object
  StackTrace:
    description: StackTrace collected in a trace.
    properties:
      stackFrames:
        $ref: '#/definitions/StackFrames'
        description: Stack frames in this stack trace. A maximum of 128 frames are allowed.
      stackTraceHashId:
        description: |-
          The hash ID is used to conserve network bandwidth for duplicate
          stack traces within a single trace.

          Often multiple spans will have identical stack traces.
          The first occurance of a stack trace should contain both the
          `stackFrame` content and a value in `stackTraceHashId`.

          Subsequent spans within the same request can refer
          to that stack trace by only setting `stackTraceHashId`.
        format: uint64
        type: string
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` which can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting purpose.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There will be a
          common set of message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  TimeEvent:
    description: A time-stamped annotation in the Span.
    properties:
      annotation:
        $ref: '#/definitions/Annotation'
        description: 'One or more key:value pairs.'
      networkEvent:
        $ref: '#/definitions/NetworkEvent'
        description: An event describing an RPC message sent/received on the network.
      time:
        description: The timestamp indicating the time the event occurred.
        format: google-datetime
        type: string
    type: object
  TimeEvents:
    description: |-
      A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
      on the span, consisting of either user-supplied key:value pairs, or
      details of an RPC message sent/received on the network.
    properties:
      droppedAnnotationsCount:
        description: |-
          The number of dropped annotations after the maximum size was enforced. If
          0 then no annotations were dropped.
        format: int32
        type: integer
      droppedNetworkEventsCount:
        description: |-
          The number of dropped network events after the maximum size was enforced.
          If 0 then no annotations were dropped.
        format: int32
        type: integer
      timeEvent:
        description: A collection of `TimeEvent`s.
        items:
          $ref: '#/definitions/TimeEvent'
        type: array
    type: object
  Trace:
    description: |-
      A trace describes how long it takes for an application to perform some
      operations. It consists of a set of spans, each representing
      an operation and including time information and operation details.
    properties:
      name:
        description: |-
          The resource name of Trace in the format
          `projects/PROJECT_ID/traces/TRACE_ID`. `TRACE_ID` is a unique identifier
          for a trace within a project and is a base16-encoded, case-insensitive
          string and is required to be 32 char long.
        type: string
    type: object
  TruncatableString:
    description: Represents a string value that might be truncated.
    properties:
      truncatedCharacterCount:
        description: |-
          The number of characters truncated from the original string value. If 0 it
          means that the string value was not truncated.
        format: int32
        type: integer
      value:
        description: |-
          The truncated string value. E.g. for a string attribute this may have up to
          256 bytes.
        type: string
    type: object
