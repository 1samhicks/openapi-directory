swagger: '2.0'
schemes:
  - https
host: genomics.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: 'Uploads, processes, queries, and searches Genomics data in the cloud.'
  title: Genomics
  version: v1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.7.31
      format: google
      url: 'https://genomics.googleapis.com/$discovery/rest?version=v1'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: genomics
externalDocs:
  url: 'https://cloud.google.com/genomics'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/genomics': View and manage Genomics data
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: operations
paths:
  '/v1/{name}':
    get:
      description: |-
        Gets the latest state of a long-running operation.
        Clients can use this method to poll the operation result at intervals as
        recommended by the API service.
        Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission&#58;

        * `genomics.operations.get`
      operationId: genomics.operations.get
      parameters:
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Operation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - operations
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1/{name}:cancel':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Starts asynchronous cancellation on a long-running operation.
        The server makes a best effort to cancel the operation, but success is not
        guaranteed. Clients may use Operations.GetOperation
        or Operations.ListOperations
        to check whether the cancellation succeeded or the operation completed
        despite cancellation.
        Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission&#58;

        * `genomics.operations.cancel`
      operationId: genomics.operations.cancel
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/CancelOperationRequest'
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Empty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/genomics'
      tags:
        - operations
definitions:
  CancelOperationRequest:
    description: The request message for Operations.CancelOperation.
    properties: {}
    type: object
  ComputeEngine:
    description: |-
      Describes a Compute Engine resource that is being managed by a running
      pipeline.
    properties:
      diskNames:
        description: The names of the disks that were created for this pipeline.
        items:
          type: string
        type: array
      instanceName:
        description: The instance on which the operation is running.
        type: string
      machineType:
        description: The machine type of the instance.
        type: string
      zone:
        description: The availability zone in which the instance resides.
        type: string
    type: object
  ContainerKilledEvent:
    description: |-
      An event generated when a container is forcibly terminated by the
      worker. Currently, this only occurs when the container outlives the
      timeout specified by the user.
    properties:
      actionId:
        description: The numeric ID of the action that started the container.
        format: int32
        type: integer
    type: object
  ContainerStartedEvent:
    description: An event generated when a container starts.
    properties:
      actionId:
        description: The numeric ID of the action that started this container.
        format: int32
        type: integer
      ipAddress:
        description: |-
          The public IP address that can be used to connect to the container. This
          field is only populated when at least one port mapping is present. If the
          instance was created with a private address, this field will be empty even
          if port mappings exist.
        type: string
      portMappings:
        additionalProperties:
          format: int32
          type: integer
        description: |-
          The container-to-host port mappings installed for this container. This
          set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
          as well as any specified in the `Action` definition.
        type: object
    type: object
  ContainerStoppedEvent:
    description: An event generated when a container exits.
    properties:
      actionId:
        description: The numeric ID of the action that started this container.
        format: int32
        type: integer
      exitStatus:
        description: The exit status of the container.
        format: int32
        type: integer
      stderr:
        description: |-
          The tail end of any content written to standard error by the container.
          If the content emits large amounts of debugging noise or contains
          sensitive information, you can prevent the content from being printed by
          setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag.

          Note that only a small amount of the end of the stream is captured here.
          The entire stream is stored in the `/google/logs` directory mounted into
          each action, and can be copied off the machine as described elsewhere.
        type: string
    type: object
  DelayedEvent:
    description: |-
      An event generated whenever a resource limitation or transient error
      delays execution of a pipeline that was otherwise ready to run.
    properties:
      cause:
        description: |-
          A textual description of the cause of the delay. The string can change
          without notice because it is often generated by another service (such as
          Compute Engine).
        type: string
      metrics:
        description: |-
          If the delay was caused by a resource shortage, this field lists the
          Compute Engine metrics that are preventing this operation from running
          (for example, `CPUS` or `INSTANCES`). If the particular metric is not
          known, a single `UNKNOWN` metric will be present.
        items:
          type: string
        type: array
    type: object
  Empty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  Event:
    description: Carries information about events that occur during pipeline execution.
    properties:
      description:
        description: |-
          A human-readable description of the event. Note that these strings can
          change at any time without notice. Any application logic must use the
          information in the `details` field.
        type: string
      details:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: Machine-readable details about the event.
        type: object
      timestamp:
        description: The time at which the event occurred.
        format: google-datetime
        type: string
    type: object
  FailedEvent:
    description: |-
      An event generated when the execution of a pipeline has failed. Note
      that other events can continue to occur after this event.
    properties:
      cause:
        description: The human-readable description of the cause of the failure.
        type: string
      code:
        description: The Google standard error code that best describes this failure.
        enum:
          - OK
          - CANCELLED
          - UNKNOWN
          - INVALID_ARGUMENT
          - DEADLINE_EXCEEDED
          - NOT_FOUND
          - ALREADY_EXISTS
          - PERMISSION_DENIED
          - UNAUTHENTICATED
          - RESOURCE_EXHAUSTED
          - FAILED_PRECONDITION
          - ABORTED
          - OUT_OF_RANGE
          - UNIMPLEMENTED
          - INTERNAL
          - UNAVAILABLE
          - DATA_LOSS
        type: string
    type: object
  ImportReadGroupSetsResponse:
    description: The read group set import response.
    properties:
      readGroupSetIds:
        description: IDs of the read group sets that were created.
        items:
          type: string
        type: array
    type: object
  ImportVariantsResponse:
    description: The variant data import response.
    properties:
      callSetIds:
        description: IDs of the call sets created during the import.
        items:
          type: string
        type: array
    type: object
  ListOperationsResponse:
    description: The response message for Operations.ListOperations.
    properties:
      nextPageToken:
        description: The standard List next-page token.
        type: string
      operations:
        description: A list of operations that matches the specified filter in the request.
        items:
          $ref: '#/definitions/Operation'
        type: array
    type: object
  Operation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: An OperationMetadata or Metadata object. This will always be returned with the Operation.
        type: object
      name:
        description: 'The server-assigned name, which is only unique within the same service that originally returns it. For example&#58; `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`'
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: 'If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If importing Variants, an ImportVariantsResponse is returned. For pipelines and exports, an Empty response is returned.'
        type: object
    type: object
  OperationEvent:
    description: An event that occurred during an Operation.
    properties:
      description:
        description: Required description of event.
        type: string
      endTime:
        description: |-
          Optional time of when event finished. An event can have a start time and no
          finish time. If an event has a finish time, there must be a start time.
        format: google-datetime
        type: string
      startTime:
        description: Optional time of when event started.
        format: google-datetime
        type: string
    type: object
  OperationMetadata:
    description: Metadata describing an Operation.
    properties:
      clientId:
        description: |-
          This field is deprecated. Use `labels` instead. Optionally provided by the
          caller when submitting the request that creates the operation.
        type: string
      createTime:
        description: The time at which the job was submitted to the Genomics service.
        format: google-datetime
        type: string
      endTime:
        description: The time at which the job stopped running.
        format: google-datetime
        type: string
      events:
        description: |-
          Optional event messages that were generated during the job's execution.
          This also contains any warnings that were generated during import
          or export.
        items:
          $ref: '#/definitions/OperationEvent'
        type: array
      labels:
        additionalProperties:
          type: string
        description: |-
          Optionally provided by the caller when submitting the request that creates
          the operation.
        type: object
      projectId:
        description: The Google Cloud Project in which the job is scoped.
        type: string
      request:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The original request that started the operation. Note that this will be in
          current version of the API. If the operation was started with v1beta2 API
          and a GetOperation is performed on v1 API, a v1 request will be returned.
        type: object
      runtimeMetadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: Runtime metadata on this Operation.
        type: object
      startTime:
        description: The time at which the job began to run.
        format: google-datetime
        type: string
    type: object
  PullStartedEvent:
    description: An event generated when the worker starts pulling an image.
    properties:
      imageUri:
        description: The URI of the image that was pulled.
        type: string
    type: object
  PullStoppedEvent:
    description: An event generated when the worker stops pulling an image.
    properties:
      imageUri:
        description: The URI of the image that was pulled.
        type: string
    type: object
  RunPipelineResponse:
    description: |-
      The response to the RunPipeline method, returned in the operation's result
      field on success.
    properties: {}
    type: object
  RuntimeMetadata:
    description: |-
      Runtime metadata that will be populated in the
      runtimeMetadata
      field of the Operation associated with a RunPipeline execution.
    properties:
      computeEngine:
        $ref: '#/definitions/ComputeEngine'
        description: Execution information specific to Google Compute Engine.
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error
      message, and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  UnexpectedExitStatusEvent:
    description: |-
      An event generated when the execution of a container results in a
      non-zero exit status that was not otherwise ignored. Execution will
      continue, but only actions that are flagged as `ALWAYS_RUN` will be
      executed. Other actions will be skipped.
    properties:
      actionId:
        description: The numeric ID of the action that started the container.
        format: int32
        type: integer
      exitStatus:
        description: The exit status of the container.
        format: int32
        type: integer
    type: object
  WorkerAssignedEvent:
    description: |-
      An event generated after a worker VM has been assigned to run the
      pipeline.
    properties:
      instance:
        description: The worker's instance name.
        type: string
      zone:
        description: The zone the worker is running in.
        type: string
    type: object
  WorkerReleasedEvent:
    description: |-
      An event generated when the worker VM that was assigned to the pipeline
      has been released (deleted).
    properties:
      instance:
        description: The worker's instance name.
        type: string
      zone:
        description: The zone the worker was running in.
        type: string
    type: object
