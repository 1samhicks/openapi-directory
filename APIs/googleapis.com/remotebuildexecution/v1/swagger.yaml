swagger: '2.0'
schemes:
  - https
host: remotebuildexecution.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: Supplies a Remote Execution API service for tools such as bazel.
  title: Remote Build Execution
  version: v1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.7.31
      format: google
      url: 'https://remotebuildexecution.googleapis.com/$discovery/rest?version=v1'
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: remotebuildexecution
externalDocs:
  url: 'https://cloud.google.com/remote-build-execution/docs/'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: media
  - name: operations
  - name: projects
  - name: v1
paths:
  '/v1/media/{resourceName}':
    get:
      description: |-
        Downloads media. Download is supported
        on the URI `/v1/media/{+name}?alt=media`.
      operationId: remotebuildexecution.media.download
      parameters:
        - description: |-
            Name of the media that is being downloaded.  See
            ReadRequest.resource_name.
          in: path
          name: resourceName
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleBytestreamMedia'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - media
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      consumes:
        - application/octet-stream
      description: |-
        Uploads media. Upload is supported on
        the URI `/upload/v1/media/{+name}`.
      operationId: remotebuildexecution.media.upload
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoogleBytestreamMedia'
        - description: |-
            Name of the media that is being downloaded.  See
            ReadRequest.resource_name.
          in: path
          name: resourceName
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleBytestreamMedia'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - media
  '/v1/{name}':
    delete:
      description: |-
        Deletes a long-running operation. This method indicates that the client is
        no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: remotebuildexecution.operations.delete
      parameters:
        - description: The name of the operation resource to be deleted.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleProtobufEmpty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - operations
    get:
      description: |-
        Gets the latest state of a long-running operation.  Clients can use this
        method to poll the operation result at intervals as recommended by the API
        service.
      operationId: remotebuildexecution.projects.operations.get
      parameters:
        - description: The standard list filter.
          in: query
          name: filter
          type: string
        - description: The name of the operation resource.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
        - description: The standard list page size.
          in: query
          name: pageSize
          type: integer
        - description: The standard list page token.
          in: query
          name: pageToken
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleLongrunningOperation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
  '/v1/{name}:cancel':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Starts asynchronous cancellation on a long-running operation.  The server
        makes a best effort to cancel the operation, but success is not
        guaranteed.  If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        Operations.GetOperation or
        other methods to check whether the cancellation succeeded or whether the
        operation completed despite cancellation. On successful cancellation,
        the operation is not deleted; instead, it becomes an operation with
        an Operation.error value with a google.rpc.Status.code of 1,
        corresponding to `Code.CANCELLED`.
      operationId: remotebuildexecution.operations.cancel
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoogleLongrunningCancelOperationRequest'
        - description: The name of the operation resource to be cancelled.
          in: path
          name: name
          required: true
          type: string
          x-reservedExpansion: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleProtobufEmpty'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - operations
  '/v1:watch':
    get:
      description: Start a streaming RPC to get watch information from the server.
      operationId: remotebuildexecution.watch
      parameters:
        - description: |-
            The `resume_marker` specifies how much of the existing underlying state is
            delivered to the client when the watch request is received by the
            system. The client can set this marker in one of the following ways to get
            different semantics:

            *   Parameter is not specified or has the value "".
                Semantics: Fetch initial state.
                The client wants the entity's initial state to be delivered. See the
                description in "Initial State".

            *   Parameter is set to the string "now" (UTF-8 encoding).
                Semantics: Fetch new changes only.
                The client just wants to get the changes received by the system after
                the watch point. The system may deliver changes from before the watch
                point as well.

            *   Parameter is set to a value received in an earlier
                `Change.resume_marker` field while watching the same entity.
                Semantics: Resume from a specific point.
                The client wants to receive the changes from a specific point; this
                value must correspond to a value received in the `Change.resume_marker`
                field. The system may deliver changes from before the `resume_marker`
                as well. If the system cannot resume the stream from this point (e.g.,
                if it is too far behind in the stream), it can raise the
                `FAILED_PRECONDITION` error.

            An implementation MUST support an unspecified parameter and the
            empty string "" marker (initial state fetching) and the "now" marker.
            It need not support resuming from a specific point.
          in: query
          name: resumeMarker
          type: string
        - description: |-
            The `target` value **must** be a valid URL path pointing to an entity
            to watch. Note that the service name **must** be
            removed from the target field (e.g., the target field must say
            "/foo/bar", not "myservice.googleapis.com/foo/bar"). A client is
            also allowed to pass system-specific parameters in the URL that
            are only obeyed by some implementations. Some parameters will be
            implementation-specific. However, some have predefined meaning
            and are listed here:

             * recursive = true|false [default=false]
               If set to true, indicates that the client wants to watch all elements
               of entities in the subtree rooted at the entity's name in `target`. For
               descendants that are not the immediate children of the target, the
               `Change.element` will contain slashes.

               Note that some namespaces and entities will not support recursive
               watching. When watching such an entity, a client must not set recursive
               to true. Otherwise, it will receive an `UNIMPLEMENTED` error.

            Normal URL encoding must be used inside `target`.  For example, if a query
            parameter name or value, or the non-query parameter portion of `target`
            contains a special character, it must be %-encoded.  We recommend that
            clients and servers use their runtime's URL library to produce and consume
            target values.
          in: query
          name: target
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleWatcherV1ChangeBatch'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - v1
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
definitions:
  BuildBazelRemoteExecutionV2Action:
    description: |-
      An `Action` captures all the information about an execution which is required
      to reproduce it.

      `Action`s are the core component of the [Execution] service. A single
      `Action` represents a repeatable action that can be performed by the
      execution service. `Action`s can be succinctly identified by the digest of
      their wire format encoding and, once an `Action` has been executed, will be
      cached in the action cache. Future requests can then use the cached result
      rather than needing to run afresh.

      When a server completes execution of an
      Action, it MAY choose to
      cache the result in
      the ActionCache unless
      `do_not_cache` is `true`. Clients SHOULD expect the server to do so. By
      default, future calls to
      Execute the same
      `Action` will also serve their results from the cache. Clients must take care
      to understand the caching behaviour. Ideally, all `Action`s will be
      reproducible so that serving a result from cache is always desirable and
      correct.
    properties:
      commandDigest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: |-
          The digest of the Command
          to run, which MUST be present in the
          ContentAddressableStorage.
      doNotCache:
        description: 'If true, then the `Action`''s result cannot be cached.'
        type: boolean
      inputRootDigest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: |-
          The digest of the root
          Directory for the input
          files. The files in the directory tree are available in the correct
          location on the build machine before the command is executed. The root
          directory, as well as every subdirectory and content blob referred to, MUST
          be in the
          ContentAddressableStorage.
      timeout:
        description: |-
          A timeout after which the execution should be killed. If the timeout is
          absent, then the client is specifying that the execution should continue
          as long as the server will let it. The server SHOULD impose a timeout if
          the client does not specify one, however, if the client does specify a
          timeout that is longer than the server's maximum timeout, the server MUST
          reject the request.

          The timeout is a part of the
          Action message, and
          therefore two `Actions` with different timeouts are different, even if they
          are otherwise identical. This is because, if they were not, running an
          `Action` with a lower timeout than is required might result in a cache hit
          from an execution run with a longer timeout, hiding the fact that the
          timeout is too short. By encoding it directly in the `Action`, a lower
          timeout will result in a cache miss and the execution timeout will fail
          immediately, rather than whenever the cache entry gets evicted.
        format: google-duration
        type: string
    type: object
  BuildBazelRemoteExecutionV2ActionResult:
    description: |-
      An ActionResult represents the result of an
      Action being run.
    properties:
      executionMetadata:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2ExecutedActionMetadata'
        description: The details of the execution that originally produced this result.
      exitCode:
        description: The exit code of the command.
        format: int32
        type: integer
      outputDirectories:
        description: |-
          The output directories of the action. For each output directory requested
          in the `output_directories` field of the Action, if the corresponding
          directory existed after the action completed, a single entry will be
          present in the output list, which will contain the digest of a
          Tree message containing the
          directory tree, and the path equal exactly to the corresponding Action
          output_directories member.

          As an example, suppose the Action had an output directory `a/b/dir` and the
          execution produced the following contents in `a/b/dir`: a file named `bar`
          and a directory named `foo` with an executable file named `baz`. Then,
          output_directory will contain (hashes shortened for readability):

          ```json
          // OutputDirectory proto:
          {
            path: "a/b/dir"
            tree_digest: {
              hash: "4a73bc9d03...",
              size: 55
            }
          }
          // Tree proto with hash "4a73bc9d03..." and size 55:
          {
            root: {
              files: [
                {
                  name: "bar",
                  digest: {
                    hash: "4a73bc9d03...",
                    size: 65534
                  }
                }
              ],
              directories: [
                {
                  name: "foo",
                  digest: {
                    hash: "4cf2eda940...",
                    size: 43
                  }
                }
              ]
            }
            children : {
              // (Directory proto with hash "4cf2eda940..." and size 43)
              files: [
                {
                  name: "baz",
                  digest: {
                    hash: "b2c941073e...",
                    size: 1294,
                  },
                  is_executable: true
                }
              ]
            }
          }
          ```
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2OutputDirectory'
        type: array
      outputDirectorySymlinks:
        description: |-
          The output directories of the action that are symbolic links to other
          directories. Those may be links to other output directories, or input
          directories, or even absolute paths outside of the working directory,
          if the server supports
          SymlinkAbsolutePathStrategy.ALLOWED.
          For each output directory requested in the `output_directories` field of
          the Action, if the directory file existed after
          the action completed, a single entry will be present either in this field,
          or in the `output_directories` field, if the directory was not a symbolic link.

          If the action does not produce the requested output, or produces a
          file where a directory is expected or vice versa, then that output
          will be omitted from the list. The server is free to arrange the output
          list as desired; clients MUST NOT assume that the output list is sorted.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2OutputSymlink'
        type: array
      outputFileSymlinks:
        description: |-
          The output files of the action that are symbolic links to other files. Those
          may be links to other output files, or input files, or even absolute paths
          outside of the working directory, if the server supports
          SymlinkAbsolutePathStrategy.ALLOWED.
          For each output file requested in the `output_files` field of the Action,
          if the corresponding file existed after
          the action completed, a single entry will be present either in this field,
          or in the `output_files` field, if the file was not a symbolic link.

          If the action does not produce the requested output, or produces a
          directory where a regular file is expected or vice versa, then that output
          will be omitted from the list. The server is free to arrange the output
          list as desired; clients MUST NOT assume that the output list is sorted.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2OutputSymlink'
        type: array
      outputFiles:
        description: |-
          The output files of the action. For each output file requested in the
          `output_files` field of the Action, if the corresponding file existed after
          the action completed, a single entry will be present either in this field,
          or in the output_file_symlinks field, if the file was a symbolic link to
          another file.

          If the action does not produce the requested output, or produces a
          directory where a regular file is expected or vice versa, then that output
          will be omitted from the list. The server is free to arrange the output
          list as desired; clients MUST NOT assume that the output list is sorted.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2OutputFile'
        type: array
      stderrDigest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: |-
          The digest for a blob containing the standard error of the action, which
          can be retrieved from the
          ContentAddressableStorage.
          See `stderr_raw` for when this will be set.
      stderrRaw:
        description: |-
          The standard error buffer of the action. The server will determine, based
          on the size of the buffer, whether to return it in raw form or to return
          a digest in `stderr_digest` that points to the buffer. If neither is set,
          then the buffer is empty. The client SHOULD NOT assume it will get one of
          the raw buffer or a digest on any given request and should be prepared to
          handle either.
        format: byte
        type: string
      stdoutDigest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: |-
          The digest for a blob containing the standard output of the action, which
          can be retrieved from the
          ContentAddressableStorage.
          See `stdout_raw` for when this will be set.
      stdoutRaw:
        description: |-
          The standard output buffer of the action. The server will determine, based
          on the size of the buffer, whether to return it in raw form or to return
          a digest in `stdout_digest` that points to the buffer. If neither is set,
          then the buffer is empty. The client SHOULD NOT assume it will get one of
          the raw buffer or a digest on any given request and should be prepared to
          handle either.
        format: byte
        type: string
    type: object
  BuildBazelRemoteExecutionV2Command:
    description: |-
      A `Command` is the actual command executed by a worker running an
      Action and specifications of its
      environment.

      Except as otherwise required, the environment (such as which system
      libraries or binaries are available, and what filesystems are mounted where)
      is defined by and specific to the implementation of the remote execution API.
    properties:
      arguments:
        description: |-
          The arguments to the command. The first argument must be the path to the
          executable, which must be either a relative path, in which case it is
          evaluated with respect to the input root, or an absolute path.
        items:
          type: string
        type: array
      environmentVariables:
        description: |-
          The environment variables to set when running the program. The worker may
          provide its own default environment variables; these defaults can be
          overridden using this field. Additional variables can also be specified.

          In order to ensure that equivalent
          Commands always hash to the same
          value, the environment variables MUST be lexicographically sorted by name.
          Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2CommandEnvironmentVariable'
        type: array
      outputDirectories:
        description: |-
          A list of the output directories that the client expects to retrieve from
          the action. Only the listed directories will be returned (an entire
          directory structure will be returned as a
          Tree message digest, see
          OutputDirectory), as
          well as files listed in `output_files`. Other files or directories that
          may be created during command execution are discarded.

          The paths are relative to the working directory of the action execution.
          The paths are specified using a single forward slash (`/`) as a path
          separator, even if the execution platform natively uses a different
          separator. The path MUST NOT include a trailing slash, nor a leading slash,
          being a relative path. The special value of empty string is allowed,
          although not recommended, and can be used to capture the entire working
          directory tree, including inputs.

          In order to ensure consistent hashing of the same Action, the output paths
          MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
          bytes).

          An output directory cannot be duplicated or have the same path as any of
          the listed output files.

          Directories leading up to the output directories (but not the output
          directories themselves) are created by the worker prior to execution, even
          if they are not explicitly part of the input root.
        items:
          type: string
        type: array
      outputFiles:
        description: |-
          A list of the output files that the client expects to retrieve from the
          action. Only the listed files, as well as directories listed in
          `output_directories`, will be returned to the client as output.
          Other files or directories that may be created during command execution
          are discarded.

          The paths are relative to the working directory of the action execution.
          The paths are specified using a single forward slash (`/`) as a path
          separator, even if the execution platform natively uses a different
          separator. The path MUST NOT include a trailing slash, nor a leading slash,
          being a relative path.

          In order to ensure consistent hashing of the same Action, the output paths
          MUST be sorted lexicographically by code point (or, equivalently, by UTF-8
          bytes).

          An output file cannot be duplicated, be a parent of another output file, or
          have the same path as any of the listed output directories.

          Directories leading up to the output files are created by the worker prior
          to execution, even if they are not explicitly part of the input root.
        items:
          type: string
        type: array
      platform:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Platform'
        description: |-
          The platform requirements for the execution environment. The server MAY
          choose to execute the action on any worker satisfying the requirements, so
          the client SHOULD ensure that running the action on any such worker will
          have the same result.
      workingDirectory:
        description: |-
          The working directory, relative to the input root, for the command to run
          in. It must be a directory which exists in the input tree. If it is left
          empty, then the action is run in the input root.
        type: string
    type: object
  BuildBazelRemoteExecutionV2CommandEnvironmentVariable:
    description: |-
      An `EnvironmentVariable` is one variable to set in the running program's
      environment.
    properties:
      name:
        description: The variable name.
        type: string
      value:
        description: The variable value.
        type: string
    type: object
  BuildBazelRemoteExecutionV2Digest:
    description: |-
      A content digest. A digest for a given blob consists of the size of the blob
      and its hash. The hash algorithm to use is defined by the server, but servers
      SHOULD use SHA-256.

      The size is considered to be an integral part of the digest and cannot be
      separated. That is, even if the `hash` field is correctly specified but
      `size_bytes` is not, the server MUST reject the request.

      The reason for including the size in the digest is as follows: in a great
      many cases, the server needs to know the size of the blob it is about to work
      with prior to starting an operation with it, such as flattening Merkle tree
      structures or streaming it to a worker. Technically, the server could
      implement a separate metadata store, but this results in a significantly more
      complicated implementation as opposed to having the client specify the size
      up-front (or storing the size along with the digest in every message where
      digests are embedded). This does mean that the API leaks some implementation
      details of (what we consider to be) a reasonable server implementation, but
      we consider this to be a worthwhile tradeoff.

      When a `Digest` is used to refer to a proto message, it always refers to the
      message in binary encoded form. To ensure consistent hashing, clients and
      servers MUST ensure that they serialize messages according to the following
      rules, even if there are alternate valid encodings for the same message:

      * Fields are serialized in tag order.
      * There are no unknown fields.
      * There are no duplicate fields.
      * Fields are serialized according to the default semantics for their type.

      Most protocol buffer implementations will always follow these rules when
      serializing, but care should be taken to avoid shortcuts. For instance,
      concatenating two messages to merge them may produce duplicate fields.
    properties:
      hash:
        description: |-
          The hash. In the case of SHA-256, it will always be a lowercase hex string
          exactly 64 characters long.
        type: string
      sizeBytes:
        description: 'The size of the blob, in bytes.'
        format: int64
        type: string
    type: object
  BuildBazelRemoteExecutionV2Directory:
    description: |-
      A `Directory` represents a directory node in a file tree, containing zero or
      more children FileNodes,
      DirectoryNodes and
      SymlinkNodes.
      Each `Node` contains its name in the directory, either the digest of its
      content (either a file blob or a `Directory` proto) or a symlink target, as
      well as possibly some metadata about the file or directory.

      In order to ensure that two equivalent directory trees hash to the same
      value, the following restrictions MUST be obeyed when constructing a
      a `Directory`:

      * Every child in the directory must have a path of exactly one segment.
        Multiple levels of directory hierarchy may not be collapsed.
      * Each child in the directory must have a unique path segment (file name).
      * The files, directories and symlinks in the directory must each be sorted
        in lexicographical order by path. The path strings must be sorted by code
        point, equivalently, by UTF-8 bytes.

      A `Directory` that obeys the restrictions is said to be in canonical form.

      As an example, the following could be used for a file named `bar` and a
      directory named `foo` with an executable file named `baz` (hashes shortened
      for readability):

      ```json
      // (Directory proto)
      {
        files: [
          {
            name: "bar",
            digest: {
              hash: "4a73bc9d03...",
              size: 65534
            }
          }
        ],
        directories: [
          {
            name: "foo",
            digest: {
              hash: "4cf2eda940...",
              size: 43
            }
          }
        ]
      }

      // (Directory proto with hash "4cf2eda940..." and size 43)
      {
        files: [
          {
            name: "baz",
            digest: {
              hash: "b2c941073e...",
              size: 1294,
            },
            is_executable: true
          }
        ]
      }
      ```
    properties:
      directories:
        description: The subdirectories in the directory.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2DirectoryNode'
        type: array
      files:
        description: The files in the directory.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2FileNode'
        type: array
      symlinks:
        description: The symlinks in the directory.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2SymlinkNode'
        type: array
    type: object
  BuildBazelRemoteExecutionV2DirectoryNode:
    description: |-
      A `DirectoryNode` represents a child of a
      Directory which is itself
      a `Directory` and its associated metadata.
    properties:
      digest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: |-
          The digest of the
          Directory object
          represented. See Digest
          for information about how to take the digest of a proto message.
      name:
        description: The name of the directory.
        type: string
    type: object
  BuildBazelRemoteExecutionV2ExecuteOperationMetadata:
    description: |-
      Metadata about an ongoing
      execution, which
      will be contained in the metadata
      field of the
      Operation.
    properties:
      actionDigest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: |-
          The digest of the Action
          being executed.
      stage:
        enum:
          - UNKNOWN
          - CACHE_CHECK
          - QUEUED
          - EXECUTING
          - COMPLETED
        type: string
      stderrStreamName:
        description: |-
          If set, the client can use this name with
          ByteStream.Read to stream the
          standard error.
        type: string
      stdoutStreamName:
        description: |-
          If set, the client can use this name with
          ByteStream.Read to stream the
          standard output.
        type: string
    type: object
  BuildBazelRemoteExecutionV2ExecuteResponse:
    description: |-
      The response message for
      Execution.Execute,
      which will be contained in the response
      field of the
      Operation.
    properties:
      cachedResult:
        description: 'True if the result was served from cache, false if it was executed.'
        type: boolean
      message:
        description: |-
          Freeform informational message with details on the execution of the action
          that may be displayed to the user upon failure or when requested explicitly.
        type: string
      result:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2ActionResult'
        description: The result of the action.
      serverLogs:
        additionalProperties:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2LogFile'
        description: |-
          An optional list of additional log outputs the server wishes to provide. A
          server can use this to return execution-specific logs however it wishes.
          This is intended primarily to make it easier for users to debug issues that
          may be outside of the actual job execution, such as by identifying the
          worker executing the action or by providing logs from the worker's setup
          phase. The keys SHOULD be human readable so that a client can display them
          to a user.
        type: object
      status:
        $ref: '#/definitions/GoogleRpcStatus'
        description: |-
          If the status has a code other than `OK`, it indicates that the action did
          not finish execution. For example, if the operation times out during
          execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
          use this field for errors in execution, rather than the error field on the
          `Operation` object.

          If the status code is other than `OK`, then the result MUST NOT be cached.
          For an error status, the `result` field is optional; the server may
          populate the output-, stdout-, and stderr-related fields if it has any
          information available, such as the stdout and stderr of a timed-out action.
    type: object
  BuildBazelRemoteExecutionV2ExecutedActionMetadata:
    description: ExecutedActionMetadata contains details about a completed execution.
    properties:
      executionCompletedTimestamp:
        description: When the worker completed executing the action command.
        format: google-datetime
        type: string
      executionStartTimestamp:
        description: When the worker started executing the action command.
        format: google-datetime
        type: string
      inputFetchCompletedTimestamp:
        description: When the worker finished fetching action inputs.
        format: google-datetime
        type: string
      inputFetchStartTimestamp:
        description: When the worker started fetching action inputs.
        format: google-datetime
        type: string
      outputUploadCompletedTimestamp:
        description: When the worker finished uploading action outputs.
        format: google-datetime
        type: string
      outputUploadStartTimestamp:
        description: When the worker started uploading action outputs.
        format: google-datetime
        type: string
      queuedTimestamp:
        description: When was the action added to the queue.
        format: google-datetime
        type: string
      worker:
        description: The name of the worker which ran the execution.
        type: string
      workerCompletedTimestamp:
        description: 'When the worker completed the action, including all stages.'
        format: google-datetime
        type: string
      workerStartTimestamp:
        description: When the worker received the action.
        format: google-datetime
        type: string
    type: object
  BuildBazelRemoteExecutionV2FileNode:
    description: A `FileNode` represents a single file and associated metadata.
    properties:
      digest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: The digest of the file's content.
      isExecutable:
        description: 'True if file is executable, false otherwise.'
        type: boolean
      name:
        description: The name of the file.
        type: string
    type: object
  BuildBazelRemoteExecutionV2LogFile:
    description: A `LogFile` is a log stored in the CAS.
    properties:
      digest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: The digest of the log contents.
      humanReadable:
        description: |-
          This is a hint as to the purpose of the log, and is set to true if the log
          is human-readable text that can be usefully displayed to a user, and false
          otherwise. For instance, if a command-line client wishes to print the
          server logs to the terminal for a failed action, this allows it to avoid
          displaying a binary file.
        type: boolean
    type: object
  BuildBazelRemoteExecutionV2OutputDirectory:
    description: |-
      An `OutputDirectory` is the output in an `ActionResult` corresponding to a
      directory's full contents rather than a single file.
    properties:
      path:
        description: |-
          The full path of the directory relative to the working directory. The path
          separator is a forward slash `/`. Since this is a relative path, it MUST
          NOT begin with a leading forward slash. The empty string value is allowed,
          and it denotes the entire working directory.
        type: string
      treeDigest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: |-
          The digest of the encoded
          Tree proto containing the
          directory's contents.
    type: object
  BuildBazelRemoteExecutionV2OutputFile:
    description: |-
      An `OutputFile` is similar to a
      FileNode, but it is used as an
      output in an `ActionResult`. It allows a full file path rather than
      only a name.

      `OutputFile` is binary-compatible with `FileNode`.
    properties:
      digest:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Digest'
        description: The digest of the file's content.
      isExecutable:
        description: 'True if file is executable, false otherwise.'
        type: boolean
      path:
        description: |-
          The full path of the file relative to the working directory, including the
          filename. The path separator is a forward slash `/`. Since this is a
          relative path, it MUST NOT begin with a leading forward slash.
        type: string
    type: object
  BuildBazelRemoteExecutionV2OutputSymlink:
    description: |-
      An `OutputSymlink` is similar to a
      Symlink, but it is used as an
      output in an `ActionResult`.

      `OutputSymlink` is binary-compatible with `SymlinkNode`.
    properties:
      path:
        description: |-
          The full path of the symlink relative to the working directory, including the
          filename. The path separator is a forward slash `/`. Since this is a
          relative path, it MUST NOT begin with a leading forward slash.
        type: string
      target:
        description: |-
          The target path of the symlink. The path separator is a forward slash `/`.
          The target path can be relative to the parent directory of the symlink or
          it can be an absolute path starting with `/`. Support for absolute paths
          can be checked using the Capabilities
          API. The canonical form forbids the substrings `/./` and `//` in the target
          path. `..` components are allowed anywhere in the target path.
        type: string
    type: object
  BuildBazelRemoteExecutionV2Platform:
    description: |-
      A `Platform` is a set of requirements, such as hardware, operating system, or
      compiler toolchain, for an
      Action's execution
      environment. A `Platform` is represented as a series of key-value pairs
      representing the properties that are required of the platform.
    properties:
      properties:
        description: |-
          The properties that make up this platform. In order to ensure that
          equivalent `Platform`s always hash to the same value, the properties MUST
          be lexicographically sorted by name, and then by value. Sorting of strings
          is done by code point, equivalently, by the UTF-8 bytes.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2PlatformProperty'
        type: array
    type: object
  BuildBazelRemoteExecutionV2PlatformProperty:
    description: |-
      A single property for the environment. The server is responsible for
      specifying the property `name`s that it accepts. If an unknown `name` is
      provided in the requirements for an
      Action, the server SHOULD
      reject the execution request. If permitted by the server, the same `name`
      may occur multiple times.

      The server is also responsible for specifying the interpretation of
      property `value`s. For instance, a property describing how much RAM must be
      available may be interpreted as allowing a worker with 16GB to fulfill a
      request for 8GB, while a property describing the OS environment on which
      the action must be performed may require an exact match with the worker's
      OS.

      The server MAY use the `value` of one or more properties to determine how
      it sets up the execution environment, such as by making specific system
      files available to the worker.
    properties:
      name:
        description: The property name.
        type: string
      value:
        description: The property value.
        type: string
    type: object
  BuildBazelRemoteExecutionV2RequestMetadata:
    description: |-
      An optional Metadata to attach to any RPC request to tell the server about an
      external context of the request. The server may use this for logging or other
      purposes. To use it, the client attaches the header to the call using the
      canonical proto serialization:

      * name: `build.bazel.remote.execution.v2.requestmetadata-bin`
      * contents: the base64 encoded binary `RequestMetadata` message.
    properties:
      actionId:
        description: |-
          An identifier that ties multiple requests to the same action.
          For example, multiple requests to the CAS, Action Cache, and Execution
          API are used in order to compile foo.cc.
        type: string
      correlatedInvocationsId:
        description: |-
          An identifier to tie multiple tool invocations together. For example,
          runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
        type: string
      toolDetails:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2ToolDetails'
        description: The details for the tool invoking the requests.
      toolInvocationId:
        description: |-
          An identifier that ties multiple actions together to a final result.
          For example, multiple actions are required to build and run foo_test.
        type: string
    type: object
  BuildBazelRemoteExecutionV2SymlinkNode:
    description: A `SymlinkNode` represents a symbolic link.
    properties:
      name:
        description: The name of the symlink.
        type: string
      target:
        description: |-
          The target path of the symlink. The path separator is a forward slash `/`.
          The target path can be relative to the parent directory of the symlink or
          it can be an absolute path starting with `/`. Support for absolute paths
          can be checked using the Capabilities
          API. The canonical form forbids the substrings `/./` and `//` in the target
          path. `..` components are allowed anywhere in the target path.
        type: string
    type: object
  BuildBazelRemoteExecutionV2ToolDetails:
    description: Details for the tool used to call the API.
    properties:
      toolName:
        description: 'Name of the tool, e.g. bazel.'
        type: string
      toolVersion:
        description: 'Version of the tool used for the request, e.g. 5.0.3.'
        type: string
    type: object
  BuildBazelRemoteExecutionV2Tree:
    description: |-
      A `Tree` contains all the
      Directory protos in a
      single directory Merkle tree, compressed into one message.
    properties:
      children:
        description: |-
          All the child directories: the directories referred to by the root and,
          recursively, all its children. In order to reconstruct the directory tree,
          the client must take the digests of each of the child directories and then
          build up a tree starting from the `root`.
        items:
          $ref: '#/definitions/BuildBazelRemoteExecutionV2Directory'
        type: array
      root:
        $ref: '#/definitions/BuildBazelRemoteExecutionV2Directory'
        description: The root directory in the tree.
    type: object
  GoogleBytestreamMedia:
    description: Media resource.
    properties:
      resourceName:
        description: Name of the media resource.
        type: string
    type: object
  GoogleDevtoolsRemotebuildbotCommandDurations:
    description: |-
      CommandDuration contains the various duration metrics tracked when a bot
      performs a command.
    properties:
      dockerPrep:
        description: |-
          The time spent preparing the command to be run in a Docker container
          (includes pulling the Docker image, if necessary).
        format: google-duration
        type: string
      download:
        description: |-
          The time spent downloading the input files and constructing the working
          directory.
        format: google-duration
        type: string
      execution:
        description: 'The time spent executing the command (i.e., doing useful work).'
        format: google-duration
        type: string
      isoPrepDone:
        description: The timestamp when preparation is done and bot starts downloading files.
        format: google-datetime
        type: string
      overall:
        description: 'The time spent completing the command, in total.'
        format: google-duration
        type: string
      stdout:
        description: The time spent uploading the stdout logs.
        format: google-duration
        type: string
      upload:
        description: The time spent uploading the output files.
        format: google-duration
        type: string
    type: object
  GoogleDevtoolsRemotebuildbotCommandEvents:
    description: |-
      CommandEvents contains counters for the number of warnings and errors
      that occurred during the execution of a command.
    properties:
      dockerCacheHit:
        description: |-
          Indicates whether we are using a cached Docker image (true) or had to pull
          the Docker image (false) for this command.
        type: boolean
      inputCacheMiss:
        description: The input cache miss ratio.
        format: float
        type: number
      numErrors:
        description: The number of errors reported.
        format: uint64
        type: string
      numWarnings:
        description: The number of warnings reported.
        format: uint64
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateInstanceRequest:
    description: The request used for `CreateInstance`.
    properties:
      instance:
        $ref: '#/definitions/GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance'
        description: |-
          Specifies the instance to create.
          The name in the instance, if specified in the instance, is ignored.
      instanceId:
        description: |-
          ID of the created instance.
          A valid `instance_id` must:
          be 6-50 characters long,
          contain only lowercase letters, digits, hyphens and underscores,
          start with a lowercase letter, and
          end with a lowercase letter or a digit.
        type: string
      parent:
        description: |-
          Resource name of the project containing the instance.
          Format: `projects/[PROJECT_ID]`.
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaCreateWorkerPoolRequest:
    description: The request used for `CreateWorkerPool`.
    properties:
      parent:
        description: |-
          Resource name of the instance in which to create the new worker pool.
          Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
        type: string
      poolId:
        description: |-
          ID of the created worker pool.
          A valid pool ID must:
          be 6-50 characters long,
          contain only lowercase letters, digits, hyphens and underscores,
          start with a lowercase letter, and
          end with a lowercase letter or a digit.
        type: string
      workerPool:
        $ref: '#/definitions/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool'
        description: |-
          Specifies the worker pool to create.
          The name in the worker pool, if specified, is ignored.
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteInstanceRequest:
    description: The request used for `DeleteInstance`.
    properties:
      name:
        description: |-
          Name of the instance to delete.
          Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaDeleteWorkerPoolRequest:
    description: The request used for DeleteWorkerPool.
    properties:
      name:
        description: |-
          Name of the worker pool to delete.
          Format:
          `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`.
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetInstanceRequest:
    description: The request used for `GetInstance`.
    properties:
      name:
        description: |-
          Name of the instance to retrieve.
          Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaGetWorkerPoolRequest:
    description: The request used for GetWorkerPool.
    properties:
      name:
        description: |-
          Name of the worker pool to retrieve.
          Format:
          `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`.
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance:
    description: |-
      Instance conceptually encapsulates all Remote Build Execution resources
      for remote builds.
      An instance consists of storage and compute resources (for example,
      `ContentAddressableStorage`, `ActionCache`, `WorkerPools`) used for
      running remote builds.
      All Remote Build Execution API calls are scoped to an instance.
    properties:
      location:
        description: The location is a GCP region. Currently only `us-central1` is supported.
        type: string
      loggingEnabled:
        description: Output only. Whether stack driver logging is enabled for the instance.
        type: boolean
      name:
        description: |-
          Output only. Instance resource name formatted as:
          `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
          Name should not be populated when creating an instance since it is provided
          in the `instance_id` field.
        type: string
      state:
        description: Output only. State of the instance.
        enum:
          - STATE_UNSPECIFIED
          - CREATING
          - RUNNING
          - INACTIVE
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesRequest:
    properties:
      parent:
        description: |-
          Resource name of the project.
          Format: `projects/[PROJECT_ID]`.
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaListInstancesResponse:
    properties:
      instances:
        description: The list of instances in a given project.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemotebuildexecutionAdminV1alphaInstance'
        type: array
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsRequest:
    properties:
      parent:
        description: |-
          Resource name of the instance.
          Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`.
        type: string
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaListWorkerPoolsResponse:
    properties:
      workerPools:
        description: The list of worker pools in a given instance.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool'
        type: array
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest:
    description: The request used for UpdateWorkerPool.
    properties:
      updateMask:
        description: |-
          The update mask applies to worker_pool. For the `FieldMask` definition,
          see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
          If an empty update_mask is provided, only the non-default valued field in
          the worker pool field will be updated. Note that in order to update a field
          to the default value (zero, false, empty string) an explicit update_mask
          must be provided.
        format: google-fieldmask
        type: string
      workerPool:
        $ref: '#/definitions/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool'
        description: Specifies the worker pool to update.
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig:
    description: |-
      Defines the configuration to be used for a creating workers in
      the worker pool.
    properties:
      diskSizeGb:
        description: |-
          Required. Size of the disk attached to the worker, in GB.
          See https://cloud.google.com/compute/docs/disks/
        format: int64
        type: string
      diskType:
        description: |-
          Required. Disk Type to use for the worker.
          See [Storage options](https://cloud.google.com/compute/docs/disks/#introduction).
          Currently only `pd-standard` is supported.
        type: string
      machineType:
        description: |-
          Required. Machine type of the worker, such as `n1-standard-2`.
          See https://cloud.google.com/compute/docs/machine-types for a list of
          supported machine types. Note that `f1-micro` and `g1-small` are not yet
          supported.
        type: string
      minCpuPlatform:
        description: |-
          Minimum CPU platform to use when creating the worker.
          See [CPU Platforms](https://cloud.google.com/compute/docs/cpu-platforms).
        type: string
      reserved:
        description: |-
          Determines whether the worker is reserved (equivalent to a Compute Engine
          on-demand VM and therefore won't be preempted).
          See [Preemptible VMs](https://cloud.google.com/preemptible-vms/) for more
          details.
        type: boolean
    type: object
  GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool:
    description: A worker pool resource in the Remote Build Execution API.
    properties:
      name:
        description: |-
          WorkerPool resource name formatted as:
          `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`.
          name should not be populated when creating a worker pool since it is
          provided in the `poolId` field.
        type: string
      state:
        description: Output only. State of the worker pool.
        enum:
          - STATE_UNSPECIFIED
          - CREATING
          - RUNNING
          - UPDATING
          - DELETING
          - INACTIVE
        type: string
      workerConfig:
        $ref: '#/definitions/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig'
        description: |-
          Specifies the properties, such as machine type and disk size, used for
          creating workers in a worker pool.
      workerCount:
        description: |-
          The desired number of workers in the worker pool. Must be a value between
          0 and 1000.
        format: int64
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testActionResult:
    description: |-
      An ActionResult represents the result of an
      Action being run.
    properties:
      exitCode:
        description: The exit code of the command.
        format: int32
        type: integer
      outputDirectories:
        description: |-
          The output directories of the action. For each output directory requested
          in the `output_directories` field of the Action, if the corresponding
          directory existed after the action completed, a single entry will be
          present in the output list, which will contain the digest of
          a Tree message containing
          the directory tree, and the path equal exactly to the corresponding Action
          output_directories member.
          As an example, suppose the Action had an output directory `a/b/dir` and the
          execution produced the following contents in `a/b/dir`: a file named `bar`
          and a directory named `foo` with an executable file named `baz`. Then,
          output_directory will contain (hashes shortened for readability):

          ```json
          // OutputDirectory proto:
          {
            path: "a/b/dir"
            tree_digest: {
              hash: "4a73bc9d03...",
              size: 55
            }
          }
          // Tree proto with hash "4a73bc9d03..." and size 55:
          {
            root: {
              files: [
                {
                  name: "bar",
                  digest: {
                    hash: "4a73bc9d03...",
                    size: 65534
                  }
                }
              ],
              directories: [
                {
                  name: "foo",
                  digest: {
                    hash: "4cf2eda940...",
                    size: 43
                  }
                }
              ]
            }
            children : {
              // (Directory proto with hash "4cf2eda940..." and size 43)
              files: [
                {
                  name: "baz",
                  digest: {
                    hash: "b2c941073e...",
                    size: 1294,
                  },
                  is_executable: true
                }
              ]
            }
          }
          ```
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testOutputDirectory'
        type: array
      outputFiles:
        description: |-
          The output files of the action. For each output file requested in the
          `output_files` field of the Action, if the corresponding file existed after
          the action completed, a single entry will be present in the output list.

          If the action does not produce the requested output, or produces a
          directory where a regular file is expected or vice versa, then that output
          will be omitted from the list. The server is free to arrange the output
          list as desired; clients MUST NOT assume that the output list is sorted.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testOutputFile'
        type: array
      stderrDigest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: |-
          The digest for a blob containing the standard error of the action, which
          can be retrieved from the
          ContentAddressableStorage.
          See `stderr_raw` for when this will be set.
      stderrRaw:
        description: |-
          The standard error buffer of the action. The server will determine, based
          on the size of the buffer, whether to return it in raw form or to return
          a digest in `stderr_digest` that points to the buffer. If neither is set,
          then the buffer is empty. The client SHOULD NOT assume it will get one of
          the raw buffer or a digest on any given request and should be prepared to
          handle either.
        format: byte
        type: string
      stdoutDigest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: |-
          The digest for a blob containing the standard output of the action, which
          can be retrieved from the
          ContentAddressableStorage.
          See `stdout_raw` for when this will be set.
      stdoutRaw:
        description: |-
          The standard output buffer of the action. The server will determine, based
          on the size of the buffer, whether to return it in raw form or to return
          a digest in `stdout_digest` that points to the buffer. If neither is set,
          then the buffer is empty. The client SHOULD NOT assume it will get one of
          the raw buffer or a digest on any given request and should be prepared to
          handle either.
        format: byte
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testCommand:
    description: |-
      A `Command` is the actual command executed by a worker running an
      Action.

      Except as otherwise required, the environment (such as which system
      libraries or binaries are available, and what filesystems are mounted where)
      is defined by and specific to the implementation of the remote execution API.
    properties:
      arguments:
        description: |-
          The arguments to the command. The first argument must be the path to the
          executable, which must be either a relative path, in which case it is
          evaluated with respect to the input root, or an absolute path.

          The working directory will always be the input root.
        items:
          type: string
        type: array
      environmentVariables:
        description: |-
          The environment variables to set when running the program. The worker may
          provide its own default environment variables; these defaults can be
          overridden using this field. Additional variables can also be specified.

          In order to ensure that equivalent `Command`s always hash to the same
          value, the environment variables MUST be lexicographically sorted by name.
          Sorting of strings is done by code point, equivalently, by the UTF-8 bytes.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable'
        type: array
    type: object
  GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable:
    description: |-
      An `EnvironmentVariable` is one variable to set in the running program's
      environment.
    properties:
      name:
        description: The variable name.
        type: string
      value:
        description: The variable value.
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testDigest:
    description: |-
      A content digest. A digest for a given blob consists of the size of the blob
      and its hash. The hash algorithm to use is defined by the server, but servers
      SHOULD use SHA-256.

      The size is considered to be an integral part of the digest and cannot be
      separated. That is, even if the `hash` field is correctly specified but
      `size_bytes` is not, the server MUST reject the request.

      The reason for including the size in the digest is as follows: in a great
      many cases, the server needs to know the size of the blob it is about to work
      with prior to starting an operation with it, such as flattening Merkle tree
      structures or streaming it to a worker. Technically, the server could
      implement a separate metadata store, but this results in a significantly more
      complicated implementation as opposed to having the client specify the size
      up-front (or storing the size along with the digest in every message where
      digests are embedded). This does mean that the API leaks some implementation
      details of (what we consider to be) a reasonable server implementation, but
      we consider this to be a worthwhile tradeoff.

      When a `Digest` is used to refer to a proto message, it always refers to the
      message in binary encoded form. To ensure consistent hashing, clients and
      servers MUST ensure that they serialize messages according to the following
      rules, even if there are alternate valid encodings for the same message.
      - Fields are serialized in tag order.
      - There are no unknown fields.
      - There are no duplicate fields.
      - Fields are serialized according to the default semantics for their type.

      Most protocol buffer implementations will always follow these rules when
      serializing, but care should be taken to avoid shortcuts. For instance,
      concatenating two messages to merge them may produce duplicate fields.
    properties:
      hash:
        description: |-
          The hash. In the case of SHA-256, it will always be a lowercase hex string
          exactly 64 characters long.
        type: string
      sizeBytes:
        description: 'The size of the blob, in bytes.'
        format: int64
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testDirectory:
    description: |-
      A `Directory` represents a directory node in a file tree, containing zero or
      more children FileNodes
      and DirectoryNodes.
      Each `Node` contains its name in the directory, the digest of its content
      (either a file blob or a `Directory` proto), as well as possibly some
      metadata about the file or directory.

      In order to ensure that two equivalent directory trees hash to the same
      value, the following restrictions MUST be obeyed when constructing a
      a `Directory`:
        - Every child in the directory must have a path of exactly one segment.
          Multiple levels of directory hierarchy may not be collapsed.
        - Each child in the directory must have a unique path segment (file name).
        - The files and directories in the directory must each be sorted in
          lexicographical order by path. The path strings must be sorted by code
          point, equivalently, by UTF-8 bytes.

      A `Directory` that obeys the restrictions is said to be in canonical form.

      As an example, the following could be used for a file named `bar` and a
      directory named `foo` with an executable file named `baz` (hashes shortened
      for readability):

      ```json
      // (Directory proto)
      {
        files: [
          {
            name: "bar",
            digest: {
              hash: "4a73bc9d03...",
              size: 65534
            }
          }
        ],
        directories: [
          {
            name: "foo",
            digest: {
              hash: "4cf2eda940...",
              size: 43
            }
          }
        ]
      }

      // (Directory proto with hash "4cf2eda940..." and size 43)
      {
        files: [
          {
            name: "baz",
            digest: {
              hash: "b2c941073e...",
              size: 1294,
            },
            is_executable: true
          }
        ]
      }
      ```
    properties:
      directories:
        description: The subdirectories in the directory.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDirectoryNode'
        type: array
      files:
        description: The files in the directory.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testFileNode'
        type: array
    type: object
  GoogleDevtoolsRemoteexecutionV1testDirectoryNode:
    description: |-
      A `DirectoryNode` represents a child of a
      Directory which is itself
      a `Directory` and its associated metadata.
    properties:
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: |-
          The digest of the
          Directory object
          represented. See Digest
          for information about how to take the digest of a proto message.
      name:
        description: The name of the directory.
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testExecuteOperationMetadata:
    description: |-
      Metadata about an ongoing
      execution, which
      will be contained in the metadata
      field of the
      Operation.
    properties:
      actionDigest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: |-
          The digest of the Action
          being executed.
      stage:
        enum:
          - UNKNOWN
          - CACHE_CHECK
          - QUEUED
          - EXECUTING
          - COMPLETED
        type: string
      stderrStreamName:
        description: |-
          If set, the client can use this name with
          ByteStream.Read to stream the
          standard error.
        type: string
      stdoutStreamName:
        description: |-
          If set, the client can use this name with
          ByteStream.Read to stream the
          standard output.
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testExecuteResponse:
    description: |-
      The response message for
      Execution.Execute,
      which will be contained in the response
      field of the
      Operation.
    properties:
      cachedResult:
        description: 'True if the result was served from cache, false if it was executed.'
        type: boolean
      result:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testActionResult'
        description: The result of the action.
      serverLogs:
        additionalProperties:
          $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testLogFile'
        description: |-
          An optional list of additional log outputs the server wishes to provide. A
          server can use this to return execution-specific logs however it wishes.
          This is intended primarily to make it easier for users to debug issues that
          may be outside of the actual job execution, such as by identifying the
          worker executing the action or by providing logs from the worker's setup
          phase. The keys SHOULD be human readable so that a client can display them
          to a user.
        type: object
      status:
        $ref: '#/definitions/GoogleRpcStatus'
        description: |-
          If the status has a code other than `OK`, it indicates that the action did
          not finish execution. For example, if the operation times out during
          execution, the status will have a `DEADLINE_EXCEEDED` code. Servers MUST
          use this field for errors in execution, rather than the error field on the
          `Operation` object.

          If the status code is other than `OK`, then the result MUST NOT be cached.
          For an error status, the `result` field is optional; the server may
          populate the output-, stdout-, and stderr-related fields if it has any
          information available, such as the stdout and stderr of a timed-out action.
    type: object
  GoogleDevtoolsRemoteexecutionV1testFileNode:
    description: A `FileNode` represents a single file and associated metadata.
    properties:
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: The digest of the file's content.
      isExecutable:
        description: 'True if file is executable, false otherwise.'
        type: boolean
      name:
        description: The name of the file.
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testLogFile:
    description: A `LogFile` is a log stored in the CAS.
    properties:
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: The digest of the log contents.
      humanReadable:
        description: |-
          This is a hint as to the purpose of the log, and is set to true if the log
          is human-readable text that can be usefully displayed to a user, and false
          otherwise. For instance, if a command-line client wishes to print the
          server logs to the terminal for a failed action, this allows it to avoid
          displaying a binary file.
        type: boolean
    type: object
  GoogleDevtoolsRemoteexecutionV1testOutputDirectory:
    description: |-
      An `OutputDirectory` is the output in an `ActionResult` corresponding to a
      directory's full contents rather than a single file.
    properties:
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: 'DEPRECATED: This field is deprecated and should no longer be used.'
      path:
        description: |-
          The full path of the directory relative to the working directory. The path
          separator is a forward slash `/`. Since this is a relative path, it MUST
          NOT begin with a leading forward slash. The empty string value is allowed,
          and it denotes the entire working directory.
        type: string
      treeDigest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: |-
          The digest of the encoded
          Tree proto containing the
          directory's contents.
    type: object
  GoogleDevtoolsRemoteexecutionV1testOutputFile:
    description: |-
      An `OutputFile` is similar to a
      FileNode, but it is
      tailored for output as part of an `ActionResult`. It allows a full file path
      rather than only a name, and allows the server to include content inline.

      `OutputFile` is binary-compatible with `FileNode`.
    properties:
      content:
        description: |-
          The raw content of the file.

          This field may be used by the server to provide the content of a file
          inline in an
          ActionResult and
          avoid requiring that the client make a separate call to
          [ContentAddressableStorage.GetBlob] to retrieve it.

          The client SHOULD NOT assume that it will get raw content with any request,
          and always be prepared to retrieve it via `digest`.
        format: byte
        type: string
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDigest'
        description: The digest of the file's content.
      isExecutable:
        description: 'True if file is executable, false otherwise.'
        type: boolean
      path:
        description: |-
          The full path of the file relative to the input root, including the
          filename. The path separator is a forward slash `/`. Since this is a
          relative path, it MUST NOT begin with a leading forward slash.
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testRequestMetadata:
    description: |-
      An optional Metadata to attach to any RPC request to tell the server about an
      external context of the request. The server may use this for logging or other
      purposes. To use it, the client attaches the header to the call using the
      canonical proto serialization:
      name: google.devtools.remoteexecution.v1test.requestmetadata-bin
      contents: the base64 encoded binary RequestMetadata message.
    properties:
      actionId:
        description: |-
          An identifier that ties multiple requests to the same action.
          For example, multiple requests to the CAS, Action Cache, and Execution
          API are used in order to compile foo.cc.
        type: string
      correlatedInvocationsId:
        description: |-
          An identifier to tie multiple tool invocations together. For example,
          runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
        type: string
      toolDetails:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testToolDetails'
        description: The details for the tool invoking the requests.
      toolInvocationId:
        description: |-
          An identifier that ties multiple actions together to a final result.
          For example, multiple actions are required to build and run foo_test.
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testToolDetails:
    description: Details for the tool used to call the API.
    properties:
      toolName:
        description: 'Name of the tool, e.g. bazel.'
        type: string
      toolVersion:
        description: 'Version of the tool used for the request, e.g. 5.0.3.'
        type: string
    type: object
  GoogleDevtoolsRemoteexecutionV1testTree:
    description: |-
      A `Tree` contains all the
      Directory protos in a
      single directory Merkle tree, compressed into one message.
    properties:
      children:
        description: |-
          All the child directories: the directories referred to by the root and,
          recursively, all its children. In order to reconstruct the directory tree,
          the client must take the digests of each of the child directories and then
          build up a tree starting from the `root`.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDirectory'
        type: array
      root:
        $ref: '#/definitions/GoogleDevtoolsRemoteexecutionV1testDirectory'
        description: The root directory in the tree.
    type: object
  GoogleDevtoolsRemoteworkersV1test2AdminTemp:
    description: |-
      AdminTemp is a prelimiary set of administration tasks. It's called "Temp"
      because we do not yet know the best way to represent admin tasks; it's
      possible that this will be entirely replaced in later versions of this API.
      If this message proves to be sufficient, it will be renamed in the alpha or
      beta release of this API.

      This message (suitably marshalled into a protobuf.Any) can be used as the
      inline_assignment field in a lease; the lease assignment field should simply
      be `"admin"` in these cases.

      This message is heavily based on Swarming administration tasks from the LUCI
      project (http://github.com/luci/luci-py/appengine/swarming).
    properties:
      arg:
        description: The argument to the admin action; see `Command` for semantics.
        type: string
      command:
        description: The admin action; see `Command` for legal values.
        enum:
          - UNSPECIFIED
          - BOT_UPDATE
          - BOT_RESTART
          - BOT_TERMINATE
          - HOST_RESTART
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2Blob:
    description: Describes a blob of binary content with its digest.
    properties:
      contents:
        description: The contents of the blob.
        format: byte
        type: string
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2Digest'
        description: The digest of the blob. This should be verified by the receiver.
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandOutputs:
    description: |-
      DEPRECATED - use CommandResult instead.
      Describes the actual outputs from the task.
    properties:
      exitCode:
        description: |-
          exit_code is only fully reliable if the status' code is OK. If the task
          exceeded its deadline or was cancelled, the process may still produce an
          exit code as it is cancelled, and this will be populated, but a successful
          (zero) is unlikely to be correct unless the status code is OK.
        format: int32
        type: integer
      outputs:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2Digest'
        description: |-
          The output files. The blob referenced by the digest should contain
          one of the following (implementation-dependent):
             * A marshalled DirectoryMetadata of the returned filesystem
             * A LUCI-style .isolated file
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandOverhead:
    description: |-
      DEPRECATED - use CommandResult instead.
      Can be used as part of CompleteRequest.metadata, or are part of a more
      sophisticated message.
    properties:
      duration:
        description: |-
          The elapsed time between calling Accept and Complete. The server will also
          have its own idea of what this should be, but this excludes the overhead of
          the RPCs and the bot response time.
        format: google-duration
        type: string
      overhead:
        description: |-
          The amount of time *not* spent executing the command (ie
          uploading/downloading files).
        format: google-duration
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandResult:
    description: |-
      All information about the execution of a command, suitable for providing as
      the Bots interface's `Lease.result` field.
    properties:
      duration:
        description: |-
          The elapsed time between calling Accept and Complete. The server will also
          have its own idea of what this should be, but this excludes the overhead of
          the RPCs and the bot response time.
        format: google-duration
        type: string
      exitCode:
        description: |-
          The exit code of the process. An exit code of "0" should only be trusted if
          `status` has a code of OK (otherwise it may simply be unset).
        format: int32
        type: integer
      metadata:
        description: |-
          Implementation-dependent metadata about the task. Both servers and bots
          may define messages which can be encoded here; bots are free to provide
          metadata in multiple formats, and servers are free to choose one or more
          of the values to process and ignore others. In particular, it is *not*
          considered an error for the bot to provide the server with a field that it
          doesn't know about.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      outputs:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2Digest'
        description: |-
          The output files. The blob referenced by the digest should contain
          one of the following (implementation-dependent):
             * A marshalled DirectoryMetadata of the returned filesystem
             * A LUCI-style .isolated file
      overhead:
        description: |-
          The amount of time *not* spent executing the command (ie
          uploading/downloading files).
        format: google-duration
        type: string
      status:
        $ref: '#/definitions/GoogleRpcStatus'
        description: |-
          An overall status for the command. For example, if the command timed out,
          this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for
          memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandTask:
    description: |-
      Describes a shell-style task to execute, suitable for providing as the Bots
      interface's `Lease.payload` field.
    properties:
      expectedOutputs:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs'
        description: The expected outputs from the task.
      inputs:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs'
        description: The inputs to the task.
      timeouts:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts'
        description: The timeouts of this task.
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandTaskInputs:
    description: Describes the inputs to a shell-style task.
    properties:
      arguments:
        description: |-
          The command itself to run (e.g., argv).

          This field should be passed directly to the underlying operating system,
          and so it must be sensible to that operating system. For example, on
          Windows, the first argument might be "C:\Windows\System32\ping.exe" -
          that is, using drive letters and backslashes. A command for a *nix
          system, on the other hand, would use forward slashes.

          All other fields in the RWAPI must consistently use forward slashes,
          since those fields may be interpretted by both the service and the bot.
        items:
          type: string
        type: array
      environmentVariables:
        description: All environment variables required by the task.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable'
        type: array
      files:
        description: |-
          The input filesystem to be set up prior to the task beginning. The
          contents should be a repeated set of FileMetadata messages though other
          formats are allowed if better for the implementation (eg, a LUCI-style
          .isolated file).

          This field is repeated since implementations might want to cache the
          metadata, in which case it may be useful to break up portions of the
          filesystem that change frequently (eg, specific input files) from those
          that don't (eg, standard header files).
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2Digest'
        type: array
      inlineBlobs:
        description: |-
          Inline contents for blobs expected to be needed by the bot to execute the
          task. For example, contents of entries in `files` or blobs that are
          indirectly referenced by an entry there.

          The bot should check against this list before downloading required task
          inputs to reduce the number of communications between itself and the
          remote CAS server.
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2Blob'
        type: array
      workingDirectory:
        description: |-
          Directory from which a command is executed. It is a relative directory
          with respect to the bot's working directory (i.e., "./"). If it is
          non-empty, then it must exist under "./". Otherwise, "./" will be used.
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandTaskInputsEnvironmentVariable:
    description: An environment variable required by this task.
    properties:
      name:
        description: The envvar name.
        type: string
      value:
        description: The envvar value.
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandTaskOutputs:
    description: Describes the expected outputs of the command.
    properties:
      directories:
        description: |-
          A list of expected directories, relative to the execution root. All paths
          MUST be delimited by forward slashes.
        items:
          type: string
        type: array
      files:
        description: |-
          A list of expected files, relative to the execution root. All paths
          MUST be delimited by forward slashes.
        items:
          type: string
        type: array
      stderrDestination:
        description: |-
          The destination to which any stderr should be sent. The method by which
          the bot should send the stream contents to that destination is not
          defined in this API. As examples, the destination could be a file
          referenced in the `files` field in this message, or it could be a URI
          that must be written via the ByteStream API.
        type: string
      stdoutDestination:
        description: |-
          The destination to which any stdout should be sent. The method by which
          the bot should send the stream contents to that destination is not
          defined in this API. As examples, the destination could be a file
          referenced in the `files` field in this message, or it could be a URI
          that must be written via the ByteStream API.
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts:
    description: Describes the timeouts associated with this task.
    properties:
      execution:
        description: |-
          This specifies the maximum time that the task can run, excluding the
          time required to download inputs or upload outputs. That is, the worker
          will terminate the task if it runs longer than this.
        format: google-duration
        type: string
      idle:
        description: |-
          This specifies the maximum amount of time the task can be idle - that is,
          go without generating some output in either stdout or stderr. If the
          process is silent for more than the specified time, the worker will
          terminate the task.
        format: google-duration
        type: string
      shutdown:
        description: |-
          If the execution or IO timeouts are exceeded, the worker will try to
          gracefully terminate the task and return any existing logs. However,
          tasks may be hard-frozen in which case this process will fail. This
          timeout specifies how long to wait for a terminated task to shut down
          gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g.
          SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
        format: google-duration
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2Digest:
    description: |-
      The CommandTask and CommandResult messages assume the existence of a service
      that can serve blobs of content, identified by a hash and size known as a
      "digest." The method by which these blobs may be retrieved is not specified
      here, but a model implementation is in the Remote Execution API's
      "ContentAddressibleStorage" interface.

      In the context of the RWAPI, a Digest will virtually always refer to the
      contents of a file or a directory. The latter is represented by the
      byte-encoded Directory message.
    properties:
      hash:
        description: |-
          A string-encoded hash (eg "1a2b3c", not the byte array [0x1a, 0x2b, 0x3c])
          using an implementation-defined hash algorithm (eg SHA-256).
        type: string
      sizeBytes:
        description: |-
          The size of the contents. While this is not strictly required as part of an
          identifier (after all, any given hash will have exactly one canonical
          size), it's useful in almost all cases when one might want to send or
          retrieve blobs of content and is included here for this reason.
        format: int64
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2Directory:
    description: |-
      The contents of a directory. Similar to the equivalent message in the Remote
      Execution API.
    properties:
      directories:
        description: Any subdirectories
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata'
        type: array
      files:
        description: The files in this directory
        items:
          $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2FileMetadata'
        type: array
    type: object
  GoogleDevtoolsRemoteworkersV1test2DirectoryMetadata:
    description: |-
      The metadata for a directory. Similar to the equivalent message in the Remote
      Execution API.
    properties:
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2Digest'
        description: |-
          A pointer to the contents of the directory, in the form of a marshalled
          Directory message.
      path:
        description: 'The path of the directory, as in FileMetadata.path.'
        type: string
    type: object
  GoogleDevtoolsRemoteworkersV1test2FileMetadata:
    description: |-
      The metadata for a file. Similar to the equivalent message in the Remote
      Execution API.
    properties:
      contents:
        description: |-
          If the file is small enough, its contents may also or alternatively be
          listed here.
        format: byte
        type: string
      digest:
        $ref: '#/definitions/GoogleDevtoolsRemoteworkersV1test2Digest'
        description: |-
          A pointer to the contents of the file. The method by which a client
          retrieves the contents from a CAS system is not defined here.
      isExecutable:
        description: Properties of the file
        type: boolean
      path:
        description: |-
          The path of this file. If this message is part of the
          CommandOutputs.outputs fields, the path is relative to the execution root
          and must correspond to an entry in CommandTask.outputs.files. If this
          message is part of a Directory message, then the path is relative to the
          root of that directory. All paths MUST be delimited by forward slashes.
        type: string
    type: object
  GoogleLongrunningCancelOperationRequest:
    description: The request message for Operations.CancelOperation.
    properties: {}
    type: object
  GoogleLongrunningListOperationsResponse:
    description: The response message for Operations.ListOperations.
    properties:
      nextPageToken:
        description: The standard List next-page token.
        type: string
      operations:
        description: A list of operations that matches the specified filter in the request.
        items:
          $ref: '#/definitions/GoogleLongrunningOperation'
        type: array
    type: object
  GoogleLongrunningOperation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/GoogleRpcStatus'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
    type: object
  GoogleProtobufEmpty:
    description: |-
      A generic empty message that you can re-use to avoid defining duplicated
      empty messages in your APIs. A typical example is to use it as the request
      or the response type of an API method. For instance:

          service Foo {
            rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
          }

      The JSON representation for `Empty` is empty JSON object `{}`.
    properties: {}
    type: object
  GoogleRpcStatus:
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error
      message, and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
  GoogleWatcherV1Change:
    description: A Change indicates the most recent state of an element.
    properties:
      continued:
        description: |-
          If true, this Change is followed by more Changes that are in the same group
          as this Change.
        type: boolean
      data:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The actual change data. This field is present only when `state() == EXISTS`
          or `state() == ERROR`. Please see google.protobuf.Any about how to use
          the Any type.
        type: object
      element:
        description: |-
          Name of the element, interpreted relative to the entity's actual
          name. "" refers to the entity itself. The element name is a valid
          UTF-8 string.
        type: string
      resumeMarker:
        description: |-
          If present, provides a compact representation of all the messages that have
          been received by the caller for the given entity, e.g., it could be a
          sequence number or a multi-part timestamp/version vector. This marker can
          be provided in the Request message, allowing the caller to resume the stream
          watching at a specific point without fetching the initial state.
        format: byte
        type: string
      state:
        description: The state of the `element`.
        enum:
          - EXISTS
          - DOES_NOT_EXIST
          - INITIAL_STATE_SKIPPED
          - ERROR
        type: string
    type: object
  GoogleWatcherV1ChangeBatch:
    description: A batch of Change messages.
    properties:
      changes:
        description: A list of Change messages.
        items:
          $ref: '#/definitions/GoogleWatcherV1Change'
        type: array
    type: object
