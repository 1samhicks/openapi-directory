openapi: 3.0.2
servers:
  - url: https://api.corrently.io/v2.0
info:
  contact:
    email: dev@stromdao.com
    url: https://stromdao.de/kontakt
  description: >
    *Corrently - from italian corrente, which is energy*

    # Introduction

    The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management.

    As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://corrently.io/terms/
  title: Corrently.io
  version: 2.0.0
  x-apisguru-categories:
    - open_data
  x-logo:
    url: https://corrently.de/assets/img/Corrently_1000x252.png
  x-origin:
    - format: openapi
      url: https://corrently.io/dist.yaml
      version: "3.0"
  x-providerName: corrently.io
tags:
  - description: >
      Managing accounts and balances for market partners (eq. households, grid operators, traders,..) Stromkonto is based on distributed ledger technology (AKA Blockchain). Instead of using the REST Api to access any energy ledger, you might act as a blockchain node and use the published ABI definitions to get the same results and/or run transactions directly.
    name: Stromkonto (Ledger)
  - description: >
      Green Power Index (GrünstromIndex), an AI based service to forecast energy sources in the grid (regionale Stromherkunft).

      Further Details and sample implementation is available at [gruenstromindex.de](https://www.gruenstromindex.de/).
    name: GreenPowerIndex (GrünstromIndex)
  - description: >
      Provides latest dispatch information of green energy at a specific location in Germany (Herkunft/GrünstromMix). It allows to do schedule management (Fahrplanmanagement) of green energy generation facilities, demand and resilience management for grid operators. The public version (OpenAPI) is always post fact. If you are interessted in pre fact (forecast) data, you might get in contact with STROMDAO GmbH.
    name: Dispatch (Green Energy Distribution API)
  - description: >
      Allows to virtualy act as an Meter Point Operator by decorating meter readings with GreenPowerIndex (GrünstromIndex) handles. In principal this service decorates meter [OBIS Code](https://de.wikipedia.org/wiki/OBIS-Kennzahlen) 1.8.0 values to 1.8.1 and 1.8.2 according to the local and actual GSI value. A signature gets applied to the reading and all three OBIS values get hashed into the Energychain for consensus (e.q. creating balancing groups). CO2 footprint of a meter gets provided (as of first reading pushed).This works in conjunction with German Smart Meter Gateways (as of March 2020).
    name: Metering (Decorator)
  - description: Tariff information for the German market region. Provides base price and energy price information for private households (Standardlastprofil H0, SLP H0 Tarifinformation).
    name: Tariff (Price API)
  - description: Helper services and endpoints for smarthome and home automation systems.
    name: SmartHome
paths:
  /gsi/bestHour:
    get:
      description: >
        Simple Wrapper around the GreenPowerIndex for easy integration into almost any SmartHome system that allows access to a JSON/REST Service This endpoint is designed to indicate if a device should be turned on or off. (Switch state).
      operationId: gsiBesthour
      parameters:
        - description: Zipcode (Postleitzahl) of a city in Germany.
          in: query
          name: zip
          schema:
            type: string
        - description: Any valid Stromkonto account (address).
          in: query
          name: key
          schema:
            type: string
        - description: Number of hours to check (default 24 hours from now).
          in: query
          name: timeframe
          schema:
            type: integer
        - description: How many hours in row do you need the device turned on?
          in: query
          name: hours
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                description: true if device should be turned on now. false if not.
                type: boolean
          description: Success
      summary: Get best hour (with most regional green energy) in a given timeframe.
      tags:
        - GreenPowerIndex (GrünstromIndex)
        - SmartHome
  /gsi/dispatch:
    get:
      description: >
        Dispatch of green energy has two aspects to consider:
          - Availability of gerneration facility (depends on weather and installed capacity)
          - Demand of energy
        Using the green power index (GrünstromIndex) we have received a tool to automate distribution of energy in order to prevent redispatch situations. Doing this alows to opimize resource usage (tactical) and leverage data for investment planning (strategic).
      operationId: gsiDispatch
      parameters:
        - description: Zipcode (Postleitzahl) of a city in Germany.
          in: query
          name: zip
          schema:
            type: string
        - description: Any valid Stromkonto account (address).
          in: query
          name: key
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  avg_distance_km:
                    description: Averaged geospatial distance in kilometers between energy generation and usage at requested location.
                    type: number
                  dispatch_from:
                    description: List of current sources of green energy (into requested location)
                    items:
                      $ref: "#/components/schemas/DispatchLocation"
                    type: array
                  dispatch_target:
                    description: List of current targets of green energy (out of requested location)
                    items:
                      $ref: "#/components/schemas/DispatchLocation"
                    type: array
                  postmix:
                    description: Green Energy Mix after dispatch of given city
                    type: object
                  premix:
                    description: Green Energy Mix prior to dispatch of given city
                    type: object
                  timeframe:
                    description: Evaluated timeframe for this request
                    properties:
                      end:
                        description: Ending time of window evaluated for this request/dispatches.
                        type: integer
                      start:
                        description: Starting time of window evaluated in order to get dispatches
                        type: integer
                    type: object
                type: object
          description: Success
      summary: Dispatch (Green Energy Distribution Schedule)
      tags:
        - GreenPowerIndex (GrünstromIndex)
        - Dispatch (Green Energy Distribution API)
  /gsi/prediction:
    get:
      description: >
        Retrieval the GreenPowerIndex (GrünstromIndex) for a given city (by zipcode) in Germany.
      operationId: gsiPrediction
      parameters:
        - description: Zipcode (Postleitzahl) of a city in Germany.
          in: query
          name: zip
          schema:
            type: string
        - description: Any valid Stromkonto account (address).
          in: query
          name: key
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  forecast:
                    description: Prediction for the upcomming hours
                    items:
                      $ref: "#/components/schemas/ForecastItem"
                    type: array
                  location:
                    description: Standarized location info sourced for prediction
                    properties:
                      city:
                        description: Pretty Print city name
                        type: string
                      zip:
                        description: Zipcode (Postleitzahl)
                        type: string
                    type: object
                  matrix:
                    description: Device switching recommendation.
                    items: {}
                    type: array
                type: object
          description: Success
      summary: Prediction
      tags:
        - GreenPowerIndex (GrünstromIndex)
  /metering/reading:
    get:
      description: >
        Retrieves a metered reading using account (Stromkonto).
      operationId: meteringGet
      parameters:
        - description: Account/Address (Stromkonto) to retrieve reading for.
          in: query
          name: account
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  1.8.0:
                    description: Reading as provided as input in Wh
                    type: integer
                  1.8.1:
                    description: Green energy calculated using Green Power Index (GrünstromIndex) in Wh
                    type: integer
                  1.8.2:
                    description: Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
                    type: integer
                  _processingTime:
                    description: Time this reading got imported into consensus (e.q. signed timestamp).
                    type: integer
                  account:
                    description: Stromkonto/Metering address allocated (this is not the MELOID!)
                    type: string
                  co2_g_oekostrom:
                    description: CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
                    type: integer
                  co2_g_standard:
                    description: CO2 Emission of metered energy in a standard mix
                    type: integer
                  credits:
                    description: Update credits this meter has. Gets refilled automtically to prevent too frequent updates
                  timeStamp:
                    description: API Consensus time this reading was fully received
                    type: integer
                  ttl:
                    description: Time to Live for this reader. If no update is provided it gets decommissioned.
                    type: integer
                type: object
          description: Success
      summary: Meter Reading
      tags:
        - Metering (Decorator)
    post:
      description: >
        Post meter reading and get it decorated. Best practice is to first create a new Stromkonto with the register method and choose a nice secret to protect updates. Now regularly send updates to get readings (consumption) split into green power (1.8.1) and grey power (1.8.2).
      operationId: meteringPost
      requestBody:
        content:
          application/json:
            schema:
              properties:
                1.8.0:
                  description: Meter Reading (prefered in Wh)
                  type: integer
                account:
                  description: Stromkonto account (address) associated with this metering.
                  type: string
                energy:
                  description: Alias for 1.8.0
                  type: integer
                secret:
                  description: Some private password you might choose on first update. However you need to use the same secret on every further posts.
                  type: string
                value:
                  description: Alias for 1.8.0
                  type: integer
                zip:
                  description: Zipcode (Postleitzahl) of metered location
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  1.8.0:
                    description: Reading as provided as input in Wh
                    type: integer
                  1.8.1:
                    description: Green energy calculated using Green Power Index (GrünstromIndex) in Wh
                    type: integer
                  1.8.2:
                    description: Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
                    type: integer
                  _processingTime:
                    description: Time this reading got imported into consensus (e.q. signed timestamp).
                    type: integer
                  account:
                    description: Stromkonto/Metering address allocated (this is not the MELOID!)
                    type: string
                  co2_g_oekostrom:
                    description: CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
                    type: integer
                  co2_g_standard:
                    description: CO2 Emission of metered energy in a standard mix
                    type: integer
                  timeStamp:
                    description: API Consensus time this reading was fully received
                    type: integer
                type: object
          description: Success
      summary: Meter Reading
      tags:
        - Metering (Decorator)
  /stromkonto/balances:
    get:
      description: >
        Stromkonto represents a core component of the Corrently Ecosystem. It is a ledger for green energy related transactions and gets heavily used by the public Web-UI on www.stromkonto.net . Beside of some decoration and reformating operations all data is backed by the [Energychain blockchain](https://github.com/energychain/) to provide consensus of balances and transactions. Use this API Endppoint if you prefere not to work with low level Distributed Ledger Technology (Blockchain).
      operationId: stromkontoBalances
      parameters:
        - description: Ethereum style address referencing a valid account (AKA Stromkonto).
          in: query
          name: account
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Balance"
                type: array
          description: Success
      summary: Balances
      tags:
        - Stromkonto (Ledger)
  /stromkonto/login:
    post:
      description: >
        Sends a mail to a given email address to login this user. This function makes life a bit easier in order to not having to deal with private key protection on the user side as a shared key is used to sign transactions onbehalf of a particular account.  However viewing consensus information (balances) are public and *might move* from account to account without prior notification. Best practice for third party uses is to always start a session with the login RESP call and only create a user in case the response indicates an `unregistered` status.
      operationId: stromkontoLogin
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  status:
                    description: Registration status of a user. In case unregistered gets returned use the `register` endpoint to (re-)register.
                    enum:
                      - registered
                      - unregistered
                    type: string
                type: object
          description: Success
      summary: Login (via Mail)
      tags:
        - Stromkonto (Ledger)
  /stromkonto/prepareTransaction:
    post:
      description: >
        Prepares and inques a transaction (transfer) between two accounts (Stromkonten). This might be used to send any balanced entity. Using this endpoint will only prepare the transaction and enques it for signing and countersigning. This is done from within the user UI using validation process. Note: This API method does not validate any transations. In other words authentication, authorization, validation and actual transfer of value is done using a smart contract during processing in the energy blockchain.
      operationId: prepareTransaction
      requestBody:
        content:
          application/json:
            schema:
              properties:
                account:
                  description: Stromkonto account address of sender
                  type: string
                signature:
                  description: Signature per Stromkonto setting (might be simple email confirmation link)
                  type: string
                to:
                  description: Stromkonto account address of reciever
                  type: string
                value:
                  description: Amount to transfer (in Watthours for electricity, or pcs for trees)
                  type: integer
                variation:
                  enum:
                    - gsb
                    - erzeugung
                    - eigenstrom
                    - co2
                    - baeume
                  type: string
              type: object
        required: true
      responses:
        "200":
          description: Success
      summary: Prepare Transaction
      tags:
        - Stromkonto (Ledger)
  /stromkonto/register:
    post:
      description: >
        Calling this method with an unregistered (new) email will create a new account (Stromkonto) with all balances having a value of `0` and no transaction history. In addition some basic properties like region and zipcode are set to allow further operation of account.
      operationId: stromkontoRegister
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                zipcode:
                  type: string
              type: object
        required: true
      responses:
        "200":
          description: Success
      summary: Register (new Stromkonto)
      tags:
        - Stromkonto (Ledger)
  /tariff/slph0:
    get:
      description: >
        Provides pricing data for private households with standard load profiles (Standardlastprofil H0).
      operationId: tariffSLPH0
      parameters:
        - description: Zipcode (Postzleitzahl) of a city in Germany.
          in: query
          name: zipcode
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Tariffh0"
                type: array
          description: Success
      summary: Energy Tariff information
      tags:
        - Tariff (Price API)
components:
  schemas:
    Balance:
      properties:
        balance:
          description: Sum owned - sum due by account
          example: 20
          type: integer
        haben:
          description: Sum owned by account
          example: 20
          type: integer
        soll:
          description: Sum due by account
          example: 20
          type: integer
        txs:
          items:
            $ref: "#/components/schemas/Transactions"
          type: array
        variation:
          description: Type of subbalance (sub account)
          enum:
            - gsb
            - erzeugung
            - eigenstrom
            - co2
            - baeume
          type: string
      type: object
    DispatchLocation:
      properties:
        energy:
          description: Percentage of energy
          example: 0.2345677
          type: number
        location:
          description: GeoJSON encoded location of target or source of green energy.
          type: object
      type: object
    ForecastItem:
      properties:
        co2_g_oekostrom:
          description: CO2 footprint in Gramm per kwh (only Green Power)
          example: 23
          type: integer
        energyprice:
          description: Local/regional energyprice modification (cent per kWh or euro per MWh).
          example: -0.219
          type: number
        epochtime:
          description: Timestamps in Seconds
          example: 1609293600
          type: integer
        gsi:
          description: Actual GreenPowerIndex for given Timestamp (between 0-100)
          example: 43
          type: integer
        scaled:
          description: Indicates if scaling is in operation to predict values
          type: boolean
        sci:
          description: Subindex just for Solar Energy
          example: 43
          type: integer
        timeStamp:
          description: Timestamp in Standard Milliseconds
          example: 1609293600000
          type: integer
      type: object
    Tariffh0:
      properties:
        ap:
          description: Energy price in cent per kwh. (Arbeitspreis) including all taxes and fees.
          example: 22.12
          type: integer
        gp:
          description: Base price in euro per montah (Grundpreis) including all taxes and fees.
          example: 7.5
          type: integer
      type: object
    Transactions:
      properties:
        cashier:
          description: Pretty print of counter signing party
          example: Miller
          type: string
        timeStamp:
          description: Cross signed timestamp of transaction
          example: 1606777200000
          type: integer
        txid:
          description: Unique hash of this transaction as provided by counter signing party
          example: 722d30b2-b46f-4ed4-a8cd-16d262180d37
          type: string
        txtype:
          description: Type of transaction per cashier implementation and schema
          example: bank.incGSB
          type: string
        value:
          description: Amount covered by transaction
          example: 1337
          type: integer
      type: object
