swagger: "2.0"
schemes:
  - https
host: southcentralus.api.cognitive.microsoft.com
basePath: /customvision/v3.0/prediction
info:
  contact:
    x-twitter: microsoft
  title: Custom Vision Prediction Client
  version: "3.0"
  x-apisguru-categories:
    - cloud
  x-logo:
    url: https://twitter.com/microsoft/profile_image?size=original
  x-origin:
    - format: swagger
      url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cognitiveservices/data-plane/CustomVision/Prediction/stable/v3.0/Prediction.json
      version: "2.0"
  x-preferred: true
  x-providerName: microsoft.com
  x-serviceName: cognitiveservices-Prediction
  x-tags:
    - Microsoft
securityDefinitions:
  apim_key:
    in: header
    name: Prediction-Key
    type: apiKey
security:
  - apim_key: []
parameters:
  Endpoint:
    description: Supported Cognitive Services endpoints.
    in: path
    name: Endpoint
    required: true
    type: string
    x-ms-parameter-location: client
    x-ms-skip-url-encoding: true
paths:
  "/{projectId}/classify/iterations/{publishedName}/image":
    post:
      consumes:
        - multipart/form-data
        - application/octet-stream
      operationId: ClassifyImage
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
        - description: Binary image data. Supported formats are JPEG, GIF, PNG, and BMP.
            Supports images up to 4MB.
          in: formData
          name: imageData
          required: true
          type: file
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Classify an image and saves the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful ClassifyImage request:
          $ref: ./examples/ClassifyImage.json
  "/{projectId}/classify/iterations/{publishedName}/image/nostore":
    post:
      consumes:
        - multipart/form-data
        - application/octet-stream
      operationId: ClassifyImageWithNoStore
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
        - description: Binary image data. Supported formats are JPEG, GIF, PNG, and BMP.
            Supports images up to 0MB.
          in: formData
          name: imageData
          required: true
          type: file
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Classify an image without saving the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful ClassifyImageWithNoStore request:
          $ref: ./examples/ClassifyImageWithNoStore.json
  "/{projectId}/classify/iterations/{publishedName}/url":
    post:
      consumes:
        - application/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      operationId: ClassifyImageUrl
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: An ImageUrl that contains the url of the image to be evaluated.
          in: body
          name: imageUrl
          required: true
          schema:
            $ref: "#/definitions/ImageUrl"
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Classify an image url and saves the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful ClassifyImageUrl request:
          $ref: ./examples/ClassifyImageUrl.json
  "/{projectId}/classify/iterations/{publishedName}/url/nostore":
    post:
      consumes:
        - application/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      operationId: ClassifyImageUrlWithNoStore
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: An {Iris.Web.Api.Models.ImageUrl} that contains the url of the
            image to be evaluated.
          in: body
          name: imageUrl
          required: true
          schema:
            $ref: "#/definitions/ImageUrl"
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Classify an image url without saving the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful ClassifyImageUrlWithNoStore request:
          $ref: ./examples/ClassifyImageUrlWithNoStore.json
  "/{projectId}/detect/iterations/{publishedName}/image":
    post:
      consumes:
        - multipart/form-data
        - application/octet-stream
      operationId: DetectImage
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
        - description: Binary image data. Supported formats are JPEG, GIF, PNG, and BMP.
            Supports images up to 4MB.
          in: formData
          name: imageData
          required: true
          type: file
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Detect objects in an image and saves the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful DetectImage request:
          $ref: ./examples/DetectImage.json
  "/{projectId}/detect/iterations/{publishedName}/image/nostore":
    post:
      consumes:
        - multipart/form-data
        - application/octet-stream
      operationId: DetectImageWithNoStore
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
        - description: Binary image data. Supported formats are JPEG, GIF, PNG, and BMP.
            Supports images up to 0MB.
          in: formData
          name: imageData
          required: true
          type: file
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Detect objects in an image without saving the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful DetectImageWithNoStore request:
          $ref: ./examples/DetectImageWithNoStore.json
  "/{projectId}/detect/iterations/{publishedName}/url":
    post:
      consumes:
        - application/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      operationId: DetectImageUrl
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: An ImageUrl that contains the url of the image to be evaluated.
          in: body
          name: imageUrl
          required: true
          schema:
            $ref: "#/definitions/ImageUrl"
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Detect objects in an image url and saves the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful DetectImageUrl request:
          $ref: ./examples/DetectImageUrl.json
  "/{projectId}/detect/iterations/{publishedName}/url/nostore":
    post:
      consumes:
        - application/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      operationId: DetectImageUrlWithNoStore
      parameters:
        - description: The project id.
          format: uuid
          in: path
          name: projectId
          required: true
          type: string
          x-nullable: false
        - description: Specifies the name of the model to evaluate against.
          in: path
          name: publishedName
          required: true
          type: string
        - description: An {Iris.Web.Api.Models.ImageUrl} that contains the url of the
            image to be evaluated.
          in: body
          name: imageUrl
          required: true
          schema:
            $ref: "#/definitions/ImageUrl"
        - description: Optional. Specifies the name of application using the endpoint.
          in: query
          name: application
          required: false
          type: string
          x-nullable: true
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ImagePrediction"
        default:
          description: Error response
          schema:
            $ref: "#/definitions/CustomVisionError"
      summary: Detect objects in an image url without saving the result.
      tags:
        - ImagePredictionApi
      x-ms-examples:
        Successful DetectImageUrlWithNoStore request:
          $ref: ./examples/DetectImageUrlWithNoStore.json
definitions:
  BoundingBox:
    description: Bounding box that defines a region of an image.
    properties:
      height:
        description: Height.
        format: float
        readOnly: false
        type: number
        x-nullable: false
      left:
        description: Coordinate of the left boundary.
        format: float
        readOnly: false
        type: number
        x-nullable: false
      top:
        description: Coordinate of the top boundary.
        format: float
        readOnly: false
        type: number
        x-nullable: false
      width:
        description: Width.
        format: float
        readOnly: false
        type: number
        x-nullable: false
    required:
      - left
      - top
      - width
      - height
    type: object
  CustomVisionError:
    properties:
      code:
        description: The error code.
        enum:
          - NoError
          - BadRequest
          - BadRequestExceededBatchSize
          - BadRequestNotSupported
          - BadRequestInvalidIds
          - BadRequestProjectName
          - BadRequestProjectNameNotUnique
          - BadRequestProjectDescription
          - BadRequestProjectUnknownDomain
          - BadRequestProjectUnknownClassification
          - BadRequestProjectUnsupportedDomainTypeChange
          - BadRequestProjectUnsupportedExportPlatform
          - BadRequestIterationName
          - BadRequestIterationNameNotUnique
          - BadRequestIterationDescription
          - BadRequestIterationIsNotTrained
          - BadRequestWorkspaceCannotBeModified
          - BadRequestWorkspaceNotDeletable
          - BadRequestTagName
          - BadRequestTagNameNotUnique
          - BadRequestTagDescription
          - BadRequestTagType
          - BadRequestMultipleNegativeTag
          - BadRequestImageTags
          - BadRequestImageRegions
          - BadRequestNegativeAndRegularTagOnSameImage
          - BadRequestRequiredParamIsNull
          - BadRequestIterationIsPublished
          - BadRequestInvalidPublishName
          - BadRequestInvalidPublishTarget
          - BadRequestUnpublishFailed
          - BadRequestSubscriptionApi
          - BadRequestExceedProjectLimit
          - BadRequestExceedIterationPerProjectLimit
          - BadRequestExceedTagPerProjectLimit
          - BadRequestExceedTagPerImageLimit
          - BadRequestExceededQuota
          - BadRequestCannotMigrateProjectWithName
          - BadRequestNotLimitedTrial
          - BadRequestImageBatch
          - BadRequestImageStream
          - BadRequestImageUrl
          - BadRequestImageFormat
          - BadRequestImageSizeBytes
          - BadRequestImageExceededCount
          - BadRequestTrainingNotNeeded
          - BadRequestTrainingNotNeededButTrainingPipelineUpdated
          - BadRequestTrainingValidationFailed
          - BadRequestClassificationTrainingValidationFailed
          - BadRequestMultiClassClassificationTrainingValidationFailed
          - BadRequestMultiLabelClassificationTrainingValidationFailed
          - BadRequestDetectionTrainingValidationFailed
          - BadRequestTrainingAlreadyInProgress
          - BadRequestDetectionTrainingNotAllowNegativeTag
          - BadRequestInvalidEmailAddress
          - BadRequestDomainNotSupportedForAdvancedTraining
          - BadRequestExportPlatformNotSupportedForAdvancedTraining
          - BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining
          - BadRequestExportValidationFailed
          - BadRequestExportAlreadyInProgress
          - BadRequestPredictionIdsMissing
          - BadRequestPredictionIdsExceededCount
          - BadRequestPredictionTagsExceededCount
          - BadRequestPredictionResultsExceededCount
          - BadRequestPredictionInvalidApplicationName
          - BadRequestPredictionInvalidQueryParameters
          - BadRequestInvalid
          - UnsupportedMediaType
          - Forbidden
          - ForbiddenUser
          - ForbiddenUserResource
          - ForbiddenUserSignupDisabled
          - ForbiddenUserSignupAllowanceExceeded
          - ForbiddenUserDoesNotExist
          - ForbiddenUserDisabled
          - ForbiddenUserInsufficientCapability
          - ForbiddenDRModeEnabled
          - ForbiddenInvalid
          - NotFound
          - NotFoundProject
          - NotFoundProjectDefaultIteration
          - NotFoundIteration
          - NotFoundIterationPerformance
          - NotFoundTag
          - NotFoundImage
          - NotFoundDomain
          - NotFoundApimSubscription
          - NotFoundInvalid
          - Conflict
          - ConflictInvalid
          - ErrorUnknown
          - ErrorProjectInvalidWorkspace
          - ErrorProjectInvalidPipelineConfiguration
          - ErrorProjectInvalidDomain
          - ErrorProjectTrainingRequestFailed
          - ErrorProjectExportRequestFailed
          - ErrorFeaturizationServiceUnavailable
          - ErrorFeaturizationQueueTimeout
          - ErrorFeaturizationInvalidFeaturizer
          - ErrorFeaturizationAugmentationUnavailable
          - ErrorFeaturizationUnrecognizedJob
          - ErrorFeaturizationAugmentationError
          - ErrorExporterInvalidPlatform
          - ErrorExporterInvalidFeaturizer
          - ErrorExporterInvalidClassifier
          - ErrorPredictionServiceUnavailable
          - ErrorPredictionModelNotFound
          - ErrorPredictionModelNotCached
          - ErrorPrediction
          - ErrorPredictionStorage
          - ErrorRegionProposal
          - ErrorInvalid
        type: string
        x-ms-enum:
          modelAsString: true
          name: CustomVisionErrorCodes
      message:
        description: A message explaining the error reported by the service.
        type: string
    required:
      - code
      - message
    type: object
  ImagePrediction:
    description: Result of an image prediction request.
    properties:
      created:
        description: Date this prediction was created.
        format: date-time
        readOnly: true
        type: string
        x-nullable: false
      id:
        description: Prediction Id.
        format: uuid
        readOnly: true
        type: string
        x-nullable: false
      iteration:
        description: Iteration Id.
        format: uuid
        readOnly: true
        type: string
        x-nullable: false
      predictions:
        description: List of predictions.
        items:
          $ref: "#/definitions/Prediction"
          x-nullable: false
        readOnly: true
        type: array
      project:
        description: Project Id.
        format: uuid
        readOnly: true
        type: string
        x-nullable: false
    type: object
  ImageUrl:
    description: Image url.
    properties:
      url:
        description: Url of the image.
        readOnly: false
        type: string
        x-nullable: false
    required:
      - url
    type: object
  Prediction:
    description: Prediction result.
    properties:
      boundingBox:
        $ref: "#/definitions/BoundingBox"
        description: Bounding box of the prediction.
        readOnly: true
        x-nullable: true
      probability:
        description: Probability of the tag.
        format: float
        readOnly: true
        type: number
        x-nullable: false
      tagId:
        description: Id of the predicted tag.
        format: uuid
        readOnly: true
        type: string
        x-nullable: false
      tagName:
        description: Name of the predicted tag.
        readOnly: true
        type: string
        x-nullable: true
    type: object
x-ms-parameterized-host:
  hostTemplate: "{Endpoint}"
  parameters:
    - $ref: "#/parameters/Endpoint"
  useSchemePrefix: false
