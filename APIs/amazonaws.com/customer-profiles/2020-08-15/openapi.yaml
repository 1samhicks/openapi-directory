openapi: 3.0.0
info:
  version: '2020-08-15'
  x-release: v4
  title: Amazon Connect Customer Profiles
  description: '<fullname>Amazon Connect Customer Profiles</fullname> <p>Welcome to the Amazon Connect Customer Profiles API Reference. This guide provides information about the Amazon Connect Customer Profiles API, including supported operations, data types, parameters, and schemas.</p> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center.</p> <p>If you''re new to Amazon Connect, you might find it helpful to also review the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/what-is-amazon-connect.html">Amazon Connect Administrator Guide</a>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: customer-profiles
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/customer-profiles-2020-08-15.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/profile/'
servers:
  - url: 'http://profile.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Customer Profiles multi-region endpoint
  - url: 'https://profile.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Customer Profiles multi-region endpoint
  - url: 'http://profile.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Customer Profiles endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://profile.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Customer Profiles endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/domains/{DomainName}/profiles/keys':
    post:
      operationId: AddProfileKey
      description: '<p>Associates a new key value with a specific profile, such as a Contact Trace Record (CTR) ContactId.</p> <p>A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddProfileKeyResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
                - KeyName
                - Values
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                KeyName:
                  description: A searchable identifier of a customer profile.
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                Values:
                  description: A list of key values.
                  type: array
                  items:
                    $ref: '#/components/schemas/string1To255'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}':
    post:
      operationId: CreateDomain
      description: '<p>Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations.</p> <p>Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DefaultExpirationDays
              properties:
                DefaultExpirationDays:
                  description: The default number of days until the data within the domain expires.
                  type: integer
                  minimum: 1
                  maximum: 1098
                DefaultEncryptionKey:
                  description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
                  type: string
                  minLength: 0
                  maxLength: 255
                DeadLetterQueueUrl:
                  description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
                  type: string
                  minLength: 0
                  maxLength: 255
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteDomain
      description: 'Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    get:
      operationId: GetDomain
      description: Returns information about a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: A unique name for the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    put:
      operationId: UpdateDomain
      description: '<p>Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key.</p> <p>Once a domain is created, the name can’t be changed.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name for the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DefaultExpirationDays:
                  description: The default number of days until the data within the domain expires.
                  type: integer
                  minimum: 1
                  maximum: 1098
                DefaultEncryptionKey:
                  description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.'
                  type: string
                  minLength: 0
                  maxLength: 255
                DeadLetterQueueUrl:
                  description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
                  type: string
                  minLength: 0
                  maxLength: 255
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/domains/{DomainName}/profiles':
    post:
      operationId: CreateProfile
      description: <p>Creates a standard profile.</p> <p>A standard profile represents the following attributes for a customer profile in a domain.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AccountNumber:
                  description: A unique account number that you have given to the customer.
                  type: string
                  minLength: 1
                  maxLength: 255
                AdditionalInformation:
                  description: Any additional information relevant to the customer's profile.
                  type: string
                  minLength: 1
                  maxLength: 1000
                PartyType:
                  description: The type of profile used to describe the customer.
                  type: string
                  enum:
                    - INDIVIDUAL
                    - BUSINESS
                    - OTHER
                BusinessName:
                  description: The name of the customer’s business.
                  type: string
                  minLength: 1
                  maxLength: 255
                FirstName:
                  description: The customer’s first name.
                  type: string
                  minLength: 1
                  maxLength: 255
                MiddleName:
                  description: The customer’s middle name.
                  type: string
                  minLength: 1
                  maxLength: 255
                LastName:
                  description: The customer’s last name.
                  type: string
                  minLength: 1
                  maxLength: 255
                BirthDate:
                  description: The customer’s birth date.
                  type: string
                  minLength: 1
                  maxLength: 255
                Gender:
                  description: The gender with which the customer identifies.
                  type: string
                  enum:
                    - MALE
                    - FEMALE
                    - UNSPECIFIED
                PhoneNumber:
                  description: 'The customer''s phone number, which has not been specified as a mobile, home, or business number.'
                  type: string
                  minLength: 1
                  maxLength: 255
                MobilePhoneNumber:
                  description: The customer’s mobile phone number.
                  type: string
                  minLength: 1
                  maxLength: 255
                HomePhoneNumber:
                  description: The customer’s home phone number.
                  type: string
                  minLength: 1
                  maxLength: 255
                BusinessPhoneNumber:
                  description: The customer’s business phone number.
                  type: string
                  minLength: 1
                  maxLength: 255
                EmailAddress:
                  description: 'The customer''s email address, which has not been specified as a personal or business address.'
                  type: string
                  minLength: 1
                  maxLength: 255
                PersonalEmailAddress:
                  description: The customer’s personal email address.
                  type: string
                  minLength: 1
                  maxLength: 255
                BusinessEmailAddress:
                  description: The customer’s business email address.
                  type: string
                  minLength: 1
                  maxLength: 255
                Address:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                ShippingAddress:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                MailingAddress:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                BillingAddress:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                Attributes:
                  description: A key value pair of attributes of a customer profile.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/string1To255'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: UpdateProfile
      description: '<p>Updates the properties of a profile. The ProfileId is required for updating a customer profile.</p> <p>When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                AdditionalInformation:
                  description: Any additional information relevant to the customer's profile.
                  type: string
                  minLength: 0
                  maxLength: 1000
                AccountNumber:
                  description: A unique account number that you have given to the customer.
                  type: string
                  minLength: 0
                  maxLength: 255
                PartyType:
                  description: The type of profile used to describe the customer.
                  type: string
                  enum:
                    - INDIVIDUAL
                    - BUSINESS
                    - OTHER
                BusinessName:
                  description: The name of the customer’s business.
                  type: string
                  minLength: 0
                  maxLength: 255
                FirstName:
                  description: The customer’s first name.
                  type: string
                  minLength: 0
                  maxLength: 255
                MiddleName:
                  description: The customer’s middle name.
                  type: string
                  minLength: 0
                  maxLength: 255
                LastName:
                  description: The customer’s last name.
                  type: string
                  minLength: 0
                  maxLength: 255
                BirthDate:
                  description: The customer’s birth date.
                  type: string
                  minLength: 0
                  maxLength: 255
                Gender:
                  description: The gender with which the customer identifies.
                  type: string
                  enum:
                    - MALE
                    - FEMALE
                    - UNSPECIFIED
                PhoneNumber:
                  description: 'The customer''s phone number, which has not been specified as a mobile, home, or business number.'
                  type: string
                  minLength: 0
                  maxLength: 255
                MobilePhoneNumber:
                  description: The customer’s mobile phone number.
                  type: string
                  minLength: 0
                  maxLength: 255
                HomePhoneNumber:
                  description: The customer’s home phone number.
                  type: string
                  minLength: 0
                  maxLength: 255
                BusinessPhoneNumber:
                  description: The customer’s business phone number.
                  type: string
                  minLength: 0
                  maxLength: 255
                EmailAddress:
                  description: 'The customer''s email address, which has not been specified as a personal or business address.'
                  type: string
                  minLength: 0
                  maxLength: 255
                PersonalEmailAddress:
                  description: The customer’s personal email address.
                  type: string
                  minLength: 0
                  maxLength: 255
                BusinessEmailAddress:
                  description: The customer’s business email address.
                  type: string
                  minLength: 0
                  maxLength: 255
                Address:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                ShippingAddress:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                MailingAddress:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                BillingAddress:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                Attributes:
                  description: A key value pair of attributes of a customer profile.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/string0To255'
  '/domains/{DomainName}/integrations/delete':
    post:
      operationId: DeleteIntegration
      description: Removes an integration from a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIntegrationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/delete':
    post:
      operationId: DeleteProfile
      description: Deletes the standard customer profile and all data pertaining to the profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/keys/delete':
    post:
      operationId: DeleteProfileKey
      description: Removes a searchable key from a customer profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileKeyResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
                - KeyName
                - Values
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                KeyName:
                  description: A searchable identifier of a customer profile.
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                Values:
                  description: A list of key values.
                  type: array
                  items:
                    $ref: '#/components/schemas/string1To255'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/objects/delete':
    post:
      operationId: DeleteProfileObject
      description: Removes an object associated with a profile of a given ProfileObjectType.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileObjectResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
                - ProfileObjectUniqueKey
                - ObjectTypeName
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                ProfileObjectUniqueKey:
                  description: The unique identifier of the profile object generated by the service.
                  type: string
                  minLength: 1
                  maxLength: 255
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/object-types/{ObjectTypeName}':
    delete:
      operationId: DeleteProfileObjectType
      description: 'Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileObjectTypeResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ObjectTypeName
          in: path
          required: true
          description: The name of the profile object type.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetProfileObjectType
      description: Returns the object types for a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileObjectTypeResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ObjectTypeName
          in: path
          required: true
          description: The name of the profile object type.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
    put:
      operationId: PutProfileObjectType
      description: Defines a ProfileObjectType.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutProfileObjectTypeResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ObjectTypeName
          in: path
          required: true
          description: The name of the profile object type.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Description
              properties:
                Description:
                  description: Description of the profile object type.
                  type: string
                  minLength: 1
                  maxLength: 1000
                TemplateId:
                  description: A unique identifier for the object template.
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                ExpirationDays:
                  description: The number of days until the data in the object expires.
                  type: integer
                  minimum: 1
                  maximum: 1098
                EncryptionKey:
                  description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
                  type: string
                  minLength: 0
                  maxLength: 255
                AllowProfileCreation:
                  description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
                  type: boolean
                Fields:
                  description: A map of the name and ObjectType field.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ObjectTypeField'
                Keys:
                  description: A list of unique keys that can be used to map data to the profile.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ObjectTypeKeyList'
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/domains/{DomainName}/integrations':
    post:
      operationId: GetIntegration
      description: Returns an integration for a domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListIntegrations
      description: Lists all of the integrations in your domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListIntegrations API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    put:
      operationId: PutIntegration
      description: '<p>Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect.</p> <p>An integration can belong to only one domain.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutIntegrationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Uri
                - ObjectTypeName
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/templates/{TemplateId}':
    get:
      operationId: GetProfileObjectTypeTemplate
      description: '<p>Returns the template information for a specific object type.</p> <p>A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileObjectTypeTemplateResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: TemplateId
          in: path
          required: true
          description: A unique identifier for the object template.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /integrations:
    post:
      operationId: ListAccountIntegrations
      description: Lists all of the integrations associated to a specific URI in the AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountIntegrationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListAccountIntegrations API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Uri
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /domains:
    get:
      operationId: ListDomains
      description: Returns a list of all the domains for an AWS account that have been created.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDomainsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListDomain API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /templates:
    get:
      operationId: ListProfileObjectTypeTemplates
      description: Lists all of the template information for object types.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfileObjectTypeTemplatesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListObjectTypeTemplates API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/object-types':
    get:
      operationId: ListProfileObjectTypes
      description: Lists all of the templates available within the service.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfileObjectTypesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: Identifies the next page of results to return.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/objects':
    post:
      operationId: ListProfileObjects
      description: Returns a list of objects associated with a profile of a given ProfileObjectType.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfileObjectsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous call to ListProfileObjects.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ObjectTypeName
                - ProfileId
              properties:
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: PutProfileObject
      description: '<p>Adds additional objects to customer profiles of a given ObjectType.</p> <p>When adding a specific profile object, like a Contact Trace Record (CTR), an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional CTRs with the same phone number will be mapped to the same inferred profile.</p> <p>When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition.</p> <p>PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutProfileObjectResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ObjectTypeName
                - Object
              properties:
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
                Object:
                  description: A string that is serialized from a JSON object.
                  type: string
                  minLength: 1
                  maxLength: 256000
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: 'Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of the resource for which you want to view tags.
          schema:
            type: string
            pattern: '^arn:[a-z0-9]{1,10}:profile'
            maxLength: 256
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: '<p>Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.</p> <p>Tags don''t have any semantic meaning to AWS and are interpreted strictly as strings of characters.</p> <p>You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of the resource that you're adding tags to.
          schema:
            type: string
            pattern: '^arn:[a-z0-9]{1,10}:profile'
            maxLength: 256
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/domains/{DomainName}/profiles/search':
    post:
      operationId: SearchProfiles
      description: 'Searches for profiles within a specific domain name using name, phone number, email address, account number, or a custom defined index.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchProfilesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous SearchProfiles API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - KeyName
                - Values
              properties:
                KeyName:
                  description: 'A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _zendeskUserId, _zendeskExternalId, _serviceNowSystemId.'
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                Values:
                  description: A list of key values.
                  type: array
                  items:
                    $ref: '#/components/schemas/string1To255'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: 'Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of the resource from which you are removing tags.
          schema:
            type: string
            pattern: '^arn:[a-z0-9]{1,10}:profile'
            maxLength: 256
        - name: tagKeys
          in: query
          required: true
          description: The list of tag keys to remove from the resource.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 1
            maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddProfileKeyResponse:
      type: object
      properties:
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A searchable identifier of a customer profile.
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
    string1To255:
      type: string
      minLength: 1
      maxLength: 255
    BadRequestException: {}
    AccessDeniedException: {}
    ResourceNotFoundException: {}
    ThrottlingException: {}
    InternalServerException: {}
    CreateDomainResponse:
      type: object
      required:
        - DomainName
        - DefaultExpirationDays
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.'
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    TagValue:
      type: string
      maxLength: 256
    CreateProfileResponse:
      type: object
      required:
        - ProfileId
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
    DeleteDomainResponse:
      type: object
      required:
        - Message
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteIntegrationResponse:
      type: object
      required:
        - Message
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileResponse:
      type: object
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileKeyResponse:
      type: object
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileObjectResponse:
      type: object
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileObjectTypeResponse:
      type: object
      required:
        - Message
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    GetDomainResponse:
      type: object
      required:
        - DomainName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.'
        Stats:
          allOf:
            - $ref: '#/components/schemas/DomainStats'
            - description: Usage-specific statistics about the domain.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    GetIntegrationResponse:
      type: object
      required:
        - DomainName
        - Uri
        - ObjectTypeName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    GetProfileObjectTypeResponse:
      type: object
      required:
        - ObjectTypeName
        - Description
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The description of the profile object type.
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        ExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    GetProfileObjectTypeTemplateResponse:
      type: object
      properties:
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        SourceName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The name of the source of the object template.
        SourceObject:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The source of the object template.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
    ListAccountIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/IntegrationList'
            - description: The list of ListAccountIntegration instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous ListAccountIntegrations API call.
    ListDomainsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/DomainList'
            - description: The list of ListDomains instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous ListDomains API call.
    ListIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/IntegrationList'
            - description: The list of ListIntegrations instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous ListIntegrations API call.
    ListProfileObjectTypeTemplatesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileObjectTypeTemplateList'
            - description: The list of ListProfileObjectType template instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: 'The pagination token from the previous ListObjectTypeTemplates API call. '
    ListProfileObjectTypesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileObjectTypeList'
            - description: The list of ListProfileObjectTypes instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: Identifies the next page of results to return.
    ListProfileObjectsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileObjectList'
            - description: The list of ListProfileObject instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous call to ListProfileObjects.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    PutIntegrationResponse:
      type: object
      required:
        - DomainName
        - Uri
        - ObjectTypeName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    PutProfileObjectResponse:
      type: object
      properties:
        ProfileObjectUniqueKey:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The unique identifier of the profile object generated by the service.
    PutProfileObjectTypeResponse:
      type: object
      required:
        - ObjectTypeName
        - Description
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: Description of the profile object type.
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        ExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    ObjectTypeField:
      type: object
      properties:
        Source:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: 'A field of a ProfileObject. For example: _source.FirstName, where “_source” is a ProfileObjectType of a Zendesk user and “FirstName” is a field in that ObjectType.'
        Target:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: 'The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.'
        ContentType:
          allOf:
            - $ref: '#/components/schemas/FieldContentType'
            - description: The content type of the field. Used for determining equality when searching.
      description: Represents a field in a ProfileObjectType.
    ObjectTypeKeyList:
      type: array
      items:
        $ref: '#/components/schemas/ObjectTypeKey'
    SearchProfilesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileList'
            - description: The list of SearchProfiles instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous SearchProfiles API call.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: '^(?!aws:)[a-zA-Z+-=._:/]+$'
      minLength: 1
      maxLength: 128
    UpdateDomainResponse:
      type: object
      required:
        - DomainName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name for the domain.
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.'
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    UpdateProfileResponse:
      type: object
      required:
        - ProfileId
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
    string0To255:
      type: string
      minLength: 0
      maxLength: 255
    name:
      type: string
      pattern: '^[a-zA-Z0-9_-]+$'
      minLength: 1
      maxLength: 64
    uuid:
      type: string
      pattern: '[a-f0-9]{32}'
    requestValueList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    AddProfileKeyRequest:
      type: object
      required:
        - ProfileId
        - KeyName
        - Values
      title: AddProfileKeyRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A searchable identifier of a customer profile.
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
    Address:
      type: object
      properties:
        Address1:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The first line of a customer address.
        Address2:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The second line of a customer address.
        Address3:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The third line of a customer address.
        Address4:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The fourth line of a customer address.
        City:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The city in which a customer lives.
        County:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The county in which a customer lives.
        State:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The state in which a customer lives.
        Province:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The province in which a customer lives.
        Country:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The country in which a customer lives.
        PostalCode:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The postal code of a customer address.
      description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
    Attributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/string1To255'
    expirationDaysInteger:
      type: integer
      minimum: 1
      maximum: 1098
    encryptionKey:
      type: string
      minLength: 0
      maxLength: 255
    sqsQueueUrl:
      type: string
      minLength: 0
      maxLength: 255
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    CreateDomainRequest:
      type: object
      required:
        - DefaultExpirationDays
      title: CreateDomainRequest
      properties:
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    timestamp:
      type: string
      format: date-time
    string1To1000:
      type: string
      minLength: 1
      maxLength: 1000
    PartyType:
      type: string
      enum:
        - INDIVIDUAL
        - BUSINESS
        - OTHER
    Gender:
      type: string
      enum:
        - MALE
        - FEMALE
        - UNSPECIFIED
    CreateProfileRequest:
      type: object
      title: CreateProfileRequest
      properties:
        AccountNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A unique account number that you have given to the customer.
        AdditionalInformation:
          allOf:
            - $ref: '#/components/schemas/string1To1000'
            - description: Any additional information relevant to the customer's profile.
        PartyType:
          allOf:
            - $ref: '#/components/schemas/PartyType'
            - description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The name of the customer’s business.
        FirstName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s first name.
        MiddleName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s middle name.
        LastName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s last name.
        BirthDate:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s birth date.
        Gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
            - description: The gender with which the customer identifies.
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer''s phone number, which has not been specified as a mobile, home, or business number.'
        MobilePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s business phone number.
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer''s email address, which has not been specified as a personal or business address.'
        PersonalEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s business email address.
        Address:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
        ShippingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s shipping address.
        MailingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s mailing address.
        BillingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s billing address.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/Attributes'
            - description: A key value pair of attributes of a customer profile.
    DeleteDomainRequest:
      type: object
      title: DeleteDomainRequest
      properties: {}
    message:
      type: string
    DeleteIntegrationRequest:
      type: object
      title: DeleteIntegrationRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
    DeleteProfileKeyRequest:
      type: object
      required:
        - ProfileId
        - KeyName
        - Values
      title: DeleteProfileKeyRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A searchable identifier of a customer profile.
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
    typeName:
      type: string
      pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
      minLength: 1
      maxLength: 255
    DeleteProfileObjectRequest:
      type: object
      required:
        - ProfileId
        - ProfileObjectUniqueKey
        - ObjectTypeName
      title: DeleteProfileObjectRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        ProfileObjectUniqueKey:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The unique identifier of the profile object generated by the service.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
    DeleteProfileObjectTypeRequest:
      type: object
      title: DeleteProfileObjectTypeRequest
      properties: {}
    DeleteProfileRequest:
      type: object
      required:
        - ProfileId
      title: DeleteProfileRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
    ListDomainItem:
      type: object
      required:
        - DomainName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
      description: An object in a list that represents a domain.
    DomainList:
      type: array
      items:
        $ref: '#/components/schemas/ListDomainItem'
    long:
      type: integer
    DomainStats:
      type: object
      properties:
        ProfileCount:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The total number of profiles currently in the domain.
        MeteringProfileCount:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: 'The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.'
        ObjectCount:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The total number of objects in domain.
        TotalSize:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: 'The total size, in bytes, of all objects in the domain.'
      description: Usage-specific statistics about the domain.
    FieldContentType:
      type: string
      enum:
        - STRING
        - NUMBER
        - PHONE_NUMBER
        - EMAIL_ADDRESS
        - NAME
    FieldMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ObjectTypeField'
    FieldNameList:
      type: array
      items:
        $ref: '#/components/schemas/name'
    GetDomainRequest:
      type: object
      title: GetDomainRequest
      properties: {}
    GetIntegrationRequest:
      type: object
      title: GetIntegrationRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
    GetProfileObjectTypeRequest:
      type: object
      title: GetProfileObjectTypeRequest
      properties: {}
    text:
      type: string
      minLength: 1
      maxLength: 1000
    boolean:
      type: boolean
    KeyMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ObjectTypeKeyList'
    GetProfileObjectTypeTemplateRequest:
      type: object
      title: GetProfileObjectTypeTemplateRequest
      properties: {}
    ListIntegrationItem:
      type: object
      required:
        - DomainName
        - Uri
        - ObjectTypeName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
      description: An integration in list of integrations.
    IntegrationList:
      type: array
      items:
        $ref: '#/components/schemas/ListIntegrationItem'
    token:
      type: string
      minLength: 1
      maxLength: 1024
    maxSize100:
      type: integer
      minimum: 1
      maximum: 100
    ListAccountIntegrationsRequest:
      type: object
      required:
        - Uri
      title: ListAccountIntegrationsRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
    ListDomainsRequest:
      type: object
      title: ListDomainsRequest
      properties: {}
    ListIntegrationsRequest:
      type: object
      title: ListIntegrationsRequest
      properties: {}
    ListProfileObjectTypeItem:
      type: object
      required:
        - ObjectTypeName
        - Description
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: Description of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
      description: A ProfileObjectType instance.
    ListProfileObjectTypeTemplateItem:
      type: object
      properties:
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        SourceName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The name of the source of the object template.
        SourceObject:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The source of the object template.
      description: A ProfileObjectTypeTemplate in a list of ProfileObjectTypeTemplates.
    ListProfileObjectTypeTemplatesRequest:
      type: object
      title: ListProfileObjectTypeTemplatesRequest
      properties: {}
    ProfileObjectTypeTemplateList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectTypeTemplateItem'
    ListProfileObjectTypesRequest:
      type: object
      title: ListProfileObjectTypesRequest
      properties: {}
    ProfileObjectTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectTypeItem'
    stringifiedJson:
      type: string
      minLength: 1
      maxLength: 256000
    ListProfileObjectsItem:
      type: object
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: 'Specifies the kind of object being added to a profile, such as "Salesforce-Account."'
        ProfileObjectUniqueKey:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The unique identifier of the ProfileObject generated by the service.
        Object:
          allOf:
            - $ref: '#/components/schemas/stringifiedJson'
            - description: A JSON representation of a ProfileObject that belongs to a profile.
      description: A ProfileObject in a list of ProfileObjects.
    ListProfileObjectsRequest:
      type: object
      required:
        - ObjectTypeName
        - ProfileId
      title: ListProfileObjectsRequest
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
    ProfileObjectList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectsItem'
    TagArn:
      type: string
      pattern: '^arn:[a-z0-9]{1,10}:profile'
      maxLength: 256
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    StandardIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/StandardIdentifier'
    ObjectTypeKey:
      type: object
      properties:
        StandardIdentifiers:
          allOf:
            - $ref: '#/components/schemas/StandardIdentifierList'
            - description: 'The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.'
        FieldNames:
          allOf:
            - $ref: '#/components/schemas/FieldNameList'
            - description: The reference for the key name of the fields map.
      description: An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
    Profile:
      type: object
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        AccountNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A unique account number that you have given to the customer.
        AdditionalInformation:
          allOf:
            - $ref: '#/components/schemas/string1To1000'
            - description: Any additional information relevant to the customer's profile.
        PartyType:
          allOf:
            - $ref: '#/components/schemas/PartyType'
            - description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The name of the customer’s business.
        FirstName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s first name.
        MiddleName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s middle name.
        LastName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s last name.
        BirthDate:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s birth date.
        Gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
            - description: The gender with which the customer identifies.
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer''s phone number, which has not been specified as a mobile, home, or business number.'
        MobilePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s home phone number.
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer''s email address, which has not been specified as a personal or business address.'
        PersonalEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s business email address.
        Address:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
        ShippingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s shipping address.
        MailingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s mailing address.
        BillingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s billing address.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/Attributes'
            - description: A key value pair of attributes of a customer profile.
      description: The standard profile of a customer.
    ProfileList:
      type: array
      items:
        $ref: '#/components/schemas/Profile'
    PutIntegrationRequest:
      type: object
      required:
        - Uri
        - ObjectTypeName
      title: PutIntegrationRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    PutProfileObjectRequest:
      type: object
      required:
        - ObjectTypeName
        - Object
      title: PutProfileObjectRequest
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Object:
          allOf:
            - $ref: '#/components/schemas/stringifiedJson'
            - description: A string that is serialized from a JSON object.
    PutProfileObjectTypeRequest:
      type: object
      required:
        - Description
      title: PutProfileObjectTypeRequest
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: Description of the profile object type.
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        ExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    SearchProfilesRequest:
      type: object
      required:
        - KeyName
        - Values
      title: SearchProfilesRequest
      properties:
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: 'A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _zendeskUserId, _zendeskExternalId, _serviceNowSystemId.'
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
    StandardIdentifier:
      type: string
      enum:
        - PROFILE
        - UNIQUE
        - SECONDARY
        - LOOKUP_ONLY
        - NEW_ONLY
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateAddress:
      type: object
      properties:
        Address1:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The first line of a customer address.
        Address2:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The second line of a customer address.
        Address3:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The third line of a customer address.
        Address4:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The fourth line of a customer address.
        City:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The city in which a customer lives.
        County:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The county in which a customer lives.
        State:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The state in which a customer lives.
        Province:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The province in which a customer lives.
        Country:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The country in which a customer lives.
        PostalCode:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The postal code of a customer address.
      description: Updates associated with the address properties of a customer profile.
    UpdateAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/string0To255'
    UpdateDomainRequest:
      type: object
      title: UpdateDomainRequest
      properties:
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    string0To1000:
      type: string
      minLength: 0
      maxLength: 1000
    UpdateProfileRequest:
      type: object
      required:
        - ProfileId
      title: UpdateProfileRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        AdditionalInformation:
          allOf:
            - $ref: '#/components/schemas/string0To1000'
            - description: Any additional information relevant to the customer's profile.
        AccountNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: A unique account number that you have given to the customer.
        PartyType:
          allOf:
            - $ref: '#/components/schemas/PartyType'
            - description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The name of the customer’s business.
        FirstName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s first name.
        MiddleName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s middle name.
        LastName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s last name.
        BirthDate:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s birth date.
        Gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
            - description: The gender with which the customer identifies.
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: 'The customer''s phone number, which has not been specified as a mobile, home, or business number.'
        MobilePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s business phone number.
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: 'The customer''s email address, which has not been specified as a personal or business address.'
        PersonalEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s business email address.
        Address:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
        ShippingAddress:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: The customer’s shipping address.
        MailingAddress:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: The customer’s mailing address.
        BillingAddress:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: The customer’s billing address.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/UpdateAttributes'
            - description: A key value pair of attributes of a customer profile.
security:
  - hmac: []
