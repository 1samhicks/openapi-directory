swagger: '2.0'
info:
  version: '2018-06-27'
  x-release: v4
  title: Amazon Textract
  description: Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: textract
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/textract-2018-06-27.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/textract/'
host: textract.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: query
    type: string
    required: true
  Version:
    name: Version
    in: query
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /:
    post:
      operationId: AnalyzeDocument
      description: '<p>Analyzes an input document for relationships in the detected text and tables. </p> <p>Two types of information are returned: </p> <ul> <li> <p>Words and lines that are related to nearby lines and words. The related information is returned in two <a>Block</a> objects: a KEY Block object and a VALUE Block object. For example, <i>Name: Ana Silva Carolina</i> contains a key and value. <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is the value.</p> </li> <li> <p>Table and table cell data. A TABLE Block contains information about a detected table. A CELL block is returned for each cell in a table.</p> </li> </ul> <p>You can choose which type of analysis to perform by specifying the <code>FeatureTypes</code> list. </p> <p>The output is returned in a list of <code>BLOCK</code> objects (Blocks). For more information, see <a>how-it-works-analyzing</a>.</p> <p> <code>AnalyzeDocument</code> is a synchronous operation. To analyze documents asynchronously, use <a>StartDocumentAnalysis</a>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AnalyzeDocumentResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '482':
          description: UnsupportedDocumentException
          schema:
            $ref: '#/definitions/UnsupportedDocumentException'
        '483':
          description: DocumentTooLargeException
          schema:
            $ref: '#/definitions/DocumentTooLargeException'
        '484':
          description: BadDocumentException
          schema:
            $ref: '#/definitions/BadDocumentException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '488':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AnalyzeDocumentRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DetectDocumentText':
    post:
      operationId: DetectDocumentText
      description: '<p>Detects text in the input document. Amazon Textract can detect lines of text and the words that make up a line of text. The input document must be an image in JPG or PNG format. <code>DetectDocumentText</code> returns the detected text in an array of <a>Block</a> objects. For more information, see <a>how-it-works-detecting</a>.</p> <p> <code>DetectDocumentText</code> is a synchronous operation. To analyze documents asynchronously, use <a>StartDocumentTextDetection</a>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DetectDocumentTextResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '482':
          description: UnsupportedDocumentException
          schema:
            $ref: '#/definitions/UnsupportedDocumentException'
        '483':
          description: DocumentTooLargeException
          schema:
            $ref: '#/definitions/DocumentTooLargeException'
        '484':
          description: BadDocumentException
          schema:
            $ref: '#/definitions/BadDocumentException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '488':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DetectDocumentTextRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDocumentAnalysis':
    post:
      operationId: GetDocumentAnalysis
      description: '<p>Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document image.</p> <p>You start asynchronous text analysis by calling <a>StartDocumentAnalysis</a>, which returns a job identifier (<code>JobId</code>). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that''s registered in the initial call to <code>StartDocumentAnalysis</code>. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetDocumentAnalysis</code>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p> <p> <code>GetDocumentAnalysis</code> returns an array of <a>Block</a> objects. For more information, see <a>how-it-works-analyzing</a>.</p> <p>Use the <code>MaxResults</code> parameter to limit the number of blocks returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetDocumentAnalysis</code>, and populate the <code>NextToken</code> request parameter with the token value that''s returned from the previous call to <code>GetDocumentAnalysis</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDocumentAnalysisResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '483':
          description: InvalidJobIdException
          schema:
            $ref: '#/definitions/InvalidJobIdException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDocumentAnalysisRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDocumentTextDetection':
    post:
      operationId: GetDocumentTextDetection
      description: '<p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document image. Amazon Textract can detect lines of text and the words that make up a line of text.</p> <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that''s registered in the initial call to <code>StartDocumentTextDetection</code>. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentTextDetection</code>.</p> <p> <code>GetDocumentTextDetection</code> returns an array of <a>Block</a> objects. For more information, see <a>how-it-works-detecting</a>.</p> <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request parameter with the token value that''s returned from the previous call to <code>GetDocumentTextDetection</code>.</p> <p>For more information, see Document Text Detection in the Amazon Textract Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDocumentTextDetectionResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '483':
          description: InvalidJobIdException
          schema:
            $ref: '#/definitions/InvalidJobIdException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDocumentTextDetectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartDocumentAnalysis':
    post:
      operationId: StartDocumentAnalysis
      description: '<p>Starts asynchronous analysis of text for relationships in the text and tables that are detected in a document. Amazon Textract returns for two types of information: </p> <ul> <li> <p>Words and lines that are related to nearby lines and words. The related information is returned in two <a>Block</a> objects: A KEY Block object and a VALUE Block object. For example, <i>Name: Ana Silva Carolina</i> contains a key and value. <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is the value.</p> </li> <li> <p>Table and table cell data. A TABLE block contains information about a detected table. A CELL block is returned for each cell in a table.</p> </li> </ul> <p>Amazon Textract can analyze text in document images and PDF files that are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name of the document image. </p> <p> <code>StartDocumentAnalysis</code> returns a job identifier (<code>JobId</code>) that you use to get the results of the operation. When text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in <code>NotificationChannel</code>. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetDocumentAnalysis</a>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentAnalysis</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartDocumentAnalysisResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '482':
          description: UnsupportedDocumentException
          schema:
            $ref: '#/definitions/UnsupportedDocumentException'
        '483':
          description: DocumentTooLargeException
          schema:
            $ref: '#/definitions/DocumentTooLargeException'
        '484':
          description: BadDocumentException
          schema:
            $ref: '#/definitions/BadDocumentException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '488':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '489':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '490':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartDocumentAnalysisRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartDocumentTextDetection':
    post:
      operationId: StartDocumentTextDetection
      description: '<p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.</p> <p>Amazon Textract can detect text in document images and PDF files that are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and the file name of the document image. </p> <p> <code>StartTextDetection</code> returns a job identifier (<code>JobId</code>) that you use to get the results of the operation. When text detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in <code>NotificationChannel</code>. To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartDocumentTextDetection</code>.</p> <p>For more information, see Document Text Detection in the Amazon Textract Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartDocumentTextDetectionResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '482':
          description: UnsupportedDocumentException
          schema:
            $ref: '#/definitions/UnsupportedDocumentException'
        '483':
          description: DocumentTooLargeException
          schema:
            $ref: '#/definitions/DocumentTooLargeException'
        '484':
          description: BadDocumentException
          schema:
            $ref: '#/definitions/BadDocumentException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '488':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '489':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '490':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartDocumentTextDetectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AnalyzeDocumentResponse:
    type: object
    properties:
      DocumentMetadata:
        $ref: '#/definitions/DocumentMetadata'
        description: Metadata about the analyzed document. An example is the number of pages.
      Blocks:
        $ref: '#/definitions/BlockList'
        description: The text that's detected and analyzed by <code>AnalyzeDocument</code>.
  AnalyzeDocumentRequest:
    type: object
    required:
      - Document
      - FeatureTypes
    properties:
      Document:
        $ref: '#/definitions/Document'
        description: 'The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can''t pass image bytes. The document must be an image in JPG or PNG format.'
      FeatureTypes:
        $ref: '#/definitions/FeatureTypes'
        description: 'A list of the types of analysis to perform. Add TABLES to the list to return information about the tables detected in the input document. Add FORMS to return detected fields and the associated text. To perform both types of analysis, add TABLES and FORMS to <code>FeatureTypes</code>.'
  InvalidParameterException: {}
  InvalidS3ObjectException: {}
  UnsupportedDocumentException: {}
  DocumentTooLargeException: {}
  BadDocumentException: {}
  AccessDeniedException: {}
  ProvisionedThroughputExceededException: {}
  InternalServerError: {}
  ThrottlingException: {}
  DetectDocumentTextResponse:
    type: object
    properties:
      DocumentMetadata:
        $ref: '#/definitions/DocumentMetadata'
        description: Metadata about the document. Contains the number of pages that are detected in the document.
      Blocks:
        $ref: '#/definitions/BlockList'
        description: An array of Block objects containing the text detected in the document.
  DetectDocumentTextRequest:
    type: object
    required:
      - Document
    properties:
      Document:
        $ref: '#/definitions/Document'
        description: 'The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can''t pass image bytes. The document must be an image in JPG or PNG format.'
  GetDocumentAnalysisResponse:
    type: object
    properties:
      DocumentMetadata:
        $ref: '#/definitions/DocumentMetadata'
        description: Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract video operation.
      JobStatus:
        $ref: '#/definitions/JobStatus'
        description: The current status of the text detection job.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text detection results.'
      Blocks:
        $ref: '#/definitions/BlockList'
        description: The results of the text analysis operation.
      Warnings:
        $ref: '#/definitions/Warnings'
        description: A list of warnings that occurred during the document analysis operation.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: The current status of an asynchronous document analysis operation.
  GetDocumentAnalysisRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: A unique identifier for the text-detection job. The <code>JobId</code> is returned from <code>StartDocumentAnalysis</code>.
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'The maximum number of results to return per paginated call. The largest value that you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.'
  InvalidJobIdException: {}
  GetDocumentTextDetectionResponse:
    type: object
    properties:
      DocumentMetadata:
        $ref: '#/definitions/DocumentMetadata'
        description: Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract video operation.
      JobStatus:
        $ref: '#/definitions/JobStatus'
        description: The current status of the text detection job.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.'
      Blocks:
        $ref: '#/definitions/BlockList'
        description: The results of the text-detection operation.
      Warnings:
        $ref: '#/definitions/Warnings'
        description: A list of warnings that occurred during the document text-detection operation.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: 'The current status of an asynchronous document text-detection operation. '
  GetDocumentTextDetectionRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: A unique identifier for the text detection job. The <code>JobId</code> is returned from <code>StartDocumentTextDetection</code>.
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'The maximum number of results to return per paginated call. The largest value you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.'
  StartDocumentAnalysisResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The identifier for the document text-detection job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetDocumentAnalysis</code>.
  StartDocumentAnalysisRequest:
    type: object
    required:
      - DocumentLocation
      - FeatureTypes
    properties:
      DocumentLocation:
        $ref: '#/definitions/DocumentLocation'
        description: The location of the document to be processed.
      FeatureTypes:
        $ref: '#/definitions/FeatureTypes'
        description: 'A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected fields and the associated text. To perform both types of analysis, add TABLES and FORMS to <code>FeatureTypes</code>.'
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'The idempotent token that you use to identify the start request. If you use the same token with multiple <code>StartDocumentAnalysis</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentally started more than once. '
      JobTag:
        $ref: '#/definitions/JobTag'
        description: The unique identifier you specify to identify the job in the completion status that's published to the Amazon SNS topic.
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: 'The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to. '
  IdempotentParameterMismatchException: {}
  LimitExceededException: {}
  StartDocumentTextDetectionResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The identifier for the document text-detection job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetDocumentTextDetection</code>.
  StartDocumentTextDetectionRequest:
    type: object
    required:
      - DocumentLocation
    properties:
      DocumentLocation:
        $ref: '#/definitions/DocumentLocation'
        description: The location of the document to be processed.
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'The idempotent token that''s used to identify the start request. If you use the same token with multiple <code>StartDocumentTextDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentally started more than once. '
      JobTag:
        $ref: '#/definitions/JobTag'
        description: A unique identifier you specify to identify the job in the completion status that's published to the Amazon Simple Notification Service (Amazon SNS) topic.
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: 'The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to. '
  Document:
    type: object
    properties:
      Bytes:
        $ref: '#/definitions/ImageBlob'
        description: A blob of documents bytes. The maximum size of a document that's provided in a blob of bytes is 5 MB.
      S3Object:
        $ref: '#/definitions/S3Object'
        description: Identifies an S3 object as the document source. The maximum size of a document stored in an S3 bucket is 5 MB.
    description: '<p>The input document, either as bytes or as an S3 object.</p> <p>You pass image bytes to an Amazon Textract API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass a document loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64 encoded. Your code might not need to encode document file bytes if you''re using an AWS SDK to call Amazon Textract API operations. </p> <p>You pass images stored in an S3 bucket to an Amazon Textract API operation by using the <code>S3Object</code> property. Documents stored in an S3 bucket don''t need to be base64 encoded.</p> <p>The AWS Region for the S3 bucket that contains the S3 object must match the Region that you use for Amazon Textract operations.</p> <p>If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn''t supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property.</p> <p>For Amazon Textract to process an S3 object, the user must have permission to access the S3 object. </p>'
  FeatureTypes:
    type: array
    items:
      $ref: '#/definitions/FeatureType'
  DocumentMetadata:
    type: object
    properties:
      Pages:
        $ref: '#/definitions/UInteger'
        description: The number of pages detected in the document.
    description: Information about the input document.
  BlockList:
    type: array
    items:
      $ref: '#/definitions/Block'
  BlockType:
    type: string
    enum:
      - KEY_VALUE_SET
      - PAGE
      - LINE
      - WORD
      - TABLE
      - CELL
  Percent:
    type: number
    format: float
    minimum: 0
    maximum: 100
  String:
    type: string
  UInteger:
    type: integer
    minimum: 0
  Geometry:
    type: object
    properties:
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: An axis-aligned coarse representation of the location of the recognized text on the document page.
      Polygon:
        $ref: '#/definitions/Polygon'
        description: 'Within the bounding box, a fine-grained polygon around the recognized text.'
    description: 'Information about where a recognized text, key, value, table, or table cell is located on a document page.'
  NonEmptyString:
    type: string
    pattern: .*\S.*
  RelationshipList:
    type: array
    items:
      $ref: '#/definitions/Relationship'
  EntityTypes:
    type: array
    items:
      $ref: '#/definitions/EntityType'
  Block:
    type: object
    properties:
      BlockType:
        $ref: '#/definitions/BlockType'
        description: '<p>The type of text that''s recognized in a block. In text-detection operations, the following types are returned:</p> <ul> <li> <p> <i>PAGE</i> - Contains a list of the LINE Block objects that are detected on a specific page.</p> </li> <li> <p> <i>WORD</i> - One or more ISO basic Latin script characters that aren''t separated by spaces.</p> </li> <li> <p> <i>LINE</i> - A string of equally spaced words.</p> </li> </ul> <p>In text analysis operations, the following types are returned:</p> <ul> <li> <p> <i>PAGE</i> - Contains a list of child Block objects that are detected on a specific page.</p> </li> <li> <p> <i>KEY_VALUE_SET</i> - Stores the KEY and VALUE Block objects for a field that''s detected in a document. Use the <code>EntityType</code> field to determine if a KEY_VALUE_SET object is a KEY Block object or a VALUE Block object. </p> </li> <li> <p> <i>WORD</i> - One or more ISO basic Latin script characters that aren''t separated by spaces.</p> </li> <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words.</p> </li> <li> <p> <i>TABLE</i> - A table that''s detected in the document.</p> </li> <li> <p> <i>CELL</i> - A cell within a detected table. The cell is the parent of the block that contains the text in the cell.</p> </li> </ul>'
      Confidence:
        $ref: '#/definitions/Percent'
        description: The confidence that Amazon Textract has in the accuracy of the recognized text and the accuracy of the geometry points around the recognized text.
      Text:
        $ref: '#/definitions/String'
        description: 'The word or line of text that''s recognized by Amazon Textract. '
      RowIndex:
        $ref: '#/definitions/UInteger'
        description: The row in which a table cell is located. The first row position is 1. <code>RowIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.
      ColumnIndex:
        $ref: '#/definitions/UInteger'
        description: The column in which a table cell appears. The first column position is 1. <code>ColumnIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.
      RowSpan:
        $ref: '#/definitions/UInteger'
        description: The number of rows that a table spans. <code>RowSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.
      ColumnSpan:
        $ref: '#/definitions/UInteger'
        description: 'The number of columns that a table cell spans. <code>ColumnSpan</code> isn''t returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>. '
      Geometry:
        $ref: '#/definitions/Geometry'
        description: 'The location of the recognized text on the image. It includes an axis-aligned, coarse bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial information. '
      Id:
        $ref: '#/definitions/NonEmptyString'
        description: 'The identifier for the recognized text. The identifier is only unique for a single operation. '
      Relationships:
        $ref: '#/definitions/RelationshipList'
        description: '<p>A list of child blocks of the current block. For example a LINE object has child blocks for each WORD block that''s part of the line of text. There aren''t Relationship objects in the list for relationships that don''t exist, such as when the current block has no child blocks. The list size can be the following:</p> <ul> <li> <p>0 - The block has no child blocks.</p> </li> <li> <p>1 - The block has child blocks.</p> </li> </ul>'
      EntityTypes:
        $ref: '#/definitions/EntityTypes'
        description: '<p>The type of entity. The following can be returned:</p> <ul> <li> <p> <i>KEY</i> - An identifier for a field on the document.</p> </li> <li> <p> <i>VALUE</i> - The field text.</p> </li> </ul> <p> <code>EntityTypes</code> isn''t returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>'
      Page:
        $ref: '#/definitions/UInteger'
        description: The page in which a block was detected.
    description: '<p>A <code>Block</code> represents text that''s recognized in a document within a group of pixels close to each other. The information returned in a <code>Block</code> depends on the type of operation. In document-text detection (for example <a>DetectDocumentText</a>), you get information about the detected words and lines of text. In text analysis (for example <a>AnalyzeDocument</a>), you can get information about the fields and tables that are detected in the document.</p> <p>An array of <code>Block</code> objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as <a>DetectDocumentText</a>, the array of <code>Block</code> objects is the entire set of results. In asynchronous operations, such as <a>GetDocumentAnalysis</a>, the array is returned over one or more responses.</p>'
  Float:
    type: number
    format: float
  BoundingBox:
    type: object
    properties:
      Width:
        $ref: '#/definitions/Float'
        description: The width of the bounding box as a ratio of the overall document page width.
      Height:
        $ref: '#/definitions/Float'
        description: The height of the bounding box as a ratio of the overall document page height.
      Left:
        $ref: '#/definitions/Float'
        description: The left coordinate of the bounding box as a ratio of overall document page width.
      Top:
        $ref: '#/definitions/Float'
        description: The top coordinate of the bounding box as a ratio of overall document page height.
    description: '<p>The bounding box around the recognized text, key, value, table or table cell on a document page. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall document page size. For example, if the input image is 700 x 200 pixels, and the top-left coordinate of the bounding box is 350 x 50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall document page dimension. For example, if the document page size is 700 x 200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p>'
  ClientRequestToken:
    type: string
    pattern: '^[a-zA-Z0-9-_]+$'
    minLength: 1
    maxLength: 64
  ImageBlob:
    type: string
    minLength: 1
    maxLength: 5242880
  S3Object:
    type: object
    properties:
      Bucket:
        $ref: '#/definitions/S3Bucket'
        description: The name of the S3 bucket.
      Name:
        $ref: '#/definitions/S3ObjectName'
        description: The file name of the input document. It must be an image file (.JPG or .PNG format). Asynchronous operations also support PDF files.
      Version:
        $ref: '#/definitions/S3ObjectVersion'
        description: 'If the bucket has versioning enabled, you can specify the object version. '
    description: '<p>The S3 bucket name and file name that identifies the document.</p> <p>The AWS Region for the S3 bucket that contains the document must match the Region that you use for Amazon Textract operations.</p> <p>For Amazon Textract to process a file in an S3 bucket, the user must have permission to access the S3 bucket and file. </p>'
  DocumentLocation:
    type: object
    properties:
      S3Object:
        $ref: '#/definitions/S3Object'
        description: The Amazon S3 bucket that contains the input document.
    description: <p>The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations such as <a>StartDocumentTextDetection</a>.</p> <p>The input document can be an image file in JPG or PNG format. It can also be a file in PDF format.</p>
  EntityType:
    type: string
    enum:
      - KEY
      - VALUE
  ErrorCode:
    type: string
  FeatureType:
    type: string
    enum:
      - TABLES
      - FORMS
  Polygon:
    type: array
    items:
      $ref: '#/definitions/Point'
  JobId:
    type: string
    pattern: '^[a-zA-Z0-9-_]+$'
    minLength: 1
    maxLength: 64
  MaxResults:
    type: integer
    minimum: 1
  PaginationToken:
    type: string
    pattern: .*\S.*
    minLength: 1
    maxLength: 255
  JobStatus:
    type: string
    enum:
      - IN_PROGRESS
      - SUCCEEDED
      - FAILED
      - PARTIAL_SUCCESS
  Warnings:
    type: array
    items:
      $ref: '#/definitions/Warning'
  StatusMessage:
    type: string
  IdList:
    type: array
    items:
      $ref: '#/definitions/NonEmptyString'
  JobTag:
    type: string
    pattern: '[a-zA-Z0-9_.\-:]+'
    minLength: 1
    maxLength: 64
  SNSTopicArn:
    type: string
    pattern: '(^arn:([a-z\d-]+):sns:[a-zA-Z\d-]{1,20}:\w{12}:.+$)'
    minLength: 20
    maxLength: 1024
  RoleArn:
    type: string
    pattern: 'arn:([a-z\d-]+):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
    minLength: 20
    maxLength: 2048
  NotificationChannel:
    type: object
    required:
      - SNSTopicArn
      - RoleArn
    properties:
      SNSTopicArn:
        $ref: '#/definitions/SNSTopicArn'
        description: The Amazon SNS topic that Amazon Textract posts the completion status to.
      RoleArn:
        $ref: '#/definitions/RoleArn'
        description: 'The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic. '
    description: 'The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation, such as <a>StartDocumentTextDetection</a>. '
  Pages:
    type: array
    items:
      $ref: '#/definitions/UInteger'
  Point:
    type: object
    properties:
      X:
        $ref: '#/definitions/Float'
        description: The value of the X coordinate for a point on a <code>Polygon</code>.
      'Y':
        $ref: '#/definitions/Float'
        description: The value of the Y coordinate for a point on a <code>Polygon</code>.
    description: '<p>The X and Y coordinates of a point on a document page. The X and Y values returned are ratios of the overall document page size. For example, if the input document is 700 x 200 and the operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the document page.</p> <p>An array of <code>Point</code> objects, <code>Polygon</code>, is returned by <a>DetectDocumentText</a>. <code>Polygon</code> represents a fine-grained polygon around detected text. For more information, see Geometry in the Amazon Textract Developer Guide. </p>'
  RelationshipType:
    type: string
    enum:
      - VALUE
      - CHILD
  Relationship:
    type: object
    properties:
      Type:
        $ref: '#/definitions/RelationshipType'
        description: The type of relationship that the blocks in the IDs array have with the current block. The relationship can be <code>VALUE</code> or <code>CHILD</code>.
      Ids:
        $ref: '#/definitions/IdList'
        description: An array of IDs for related blocks. You can get the type of the relationship from the <code>Type</code> element.
    description: '<p>Information about how blocks are related to each other. A <code>Block</code> object contains 0 or more <code>Relation</code> objects in a list, <code>Relationships</code>. For more information, see <a>Block</a>.</p> <p>The <code>Type</code> element provides the type of the relationship for all blocks in the <code>IDs</code> array. </p>'
  S3Bucket:
    type: string
    pattern: '[0-9A-Za-z\.\-_]*'
    minLength: 3
    maxLength: 255
  S3ObjectName:
    type: string
    pattern: .*\S.*
    minLength: 1
    maxLength: 1024
  S3ObjectVersion:
    type: string
    pattern: .*\S.*
    minLength: 1
    maxLength: 1024
  Warning:
    type: object
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
        description: The error code for the warning.
      Pages:
        $ref: '#/definitions/Pages'
        description: A list of the pages that the warning applies to.
    description: 'A warning about an issue that occurred during asynchronous text analysis (<a>StartDocumentAnalysis</a>) or asynchronous document-text detection (<a>StartDocumentTextDetection</a>). '
