openapi: 3.0.0
info:
  version: '2017-11-28'
  x-release: v4
  title: Amazon GuardDuty
  description: '<p>Amazon GuardDuty is a continuous security monitoring service that analyzes and processes the following data sources: VPC Flow Logs, AWS CloudTrail event logs, and DNS logs. It uses threat intelligence feeds (such as lists of malicious IPs and domains) and machine learning to identify unexpected, potentially unauthorized, and malicious activity within your AWS environment. This can include issues like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, URLs, or domains. For example, GuardDuty can detect compromised EC2 instances that serve malware or mine bitcoin. </p> <p>GuardDuty also monitors AWS account access behavior for signs of compromise. Some examples of this are unauthorized infrastructure deployments such as EC2 instances deployed in a Region that has never been used, or unusual API calls like a password policy change to reduce password strength. </p> <p>GuardDuty informs you of the status of your AWS environment by producing security findings that you can view in the GuardDuty console or through Amazon CloudWatch events. For more information, see the <i> <a href="https://docs.aws.amazon.com/guardduty/latest/ug/what-is-guardduty.html">Amazon GuardDuty User Guide</a> </i>. </p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: guardduty
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/guardduty-2017-11-28.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/guardduty/'
servers:
  - url: 'http://guardduty.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon GuardDuty multi-region endpoint
  - url: 'https://guardduty.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Amazon GuardDuty multi-region endpoint
  - url: 'http://guardduty.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon GuardDuty endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://guardduty.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon GuardDuty endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/detector/{detectorId}/master':
    post:
      operationId: AcceptInvitation
      description: Accepts the invitation to be monitored by a master GuardDuty account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptInvitationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty member account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - masterId
                - invitationId
              properties:
                masterId:
                  description: The account ID of the master GuardDuty account whose invitation you're accepting.
                  type: string
                invitationId:
                  description: The value that is used to validate the master account to the member account.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetMasterAccount
      description: Provides the details for the GuardDuty master account associated with the current GuardDuty member account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMasterAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty member account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
  '/detector/{detectorId}/findings/archive':
    post:
      operationId: ArchiveFindings
      description: <p>Archives GuardDuty findings that are specified by the list of finding IDs.</p> <note> <p>Only the master account can archive findings. Member accounts don't have permission to archive findings from their accounts.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings you want to archive.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
              properties:
                findingIds:
                  description: The IDs of the findings that you want to archive.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /detector:
    post:
      operationId: CreateDetector
      description: 'Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - enable
              properties:
                enable:
                  description: A Boolean value that specifies whether the detector is to be enabled.
                  type: boolean
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                findingPublishingFrequency:
                  description: An enum value that specifies how frequently updated findings are exported.
                  type: string
                  enum:
                    - FIFTEEN_MINUTES
                    - ONE_HOUR
                    - SIX_HOURS
                tags:
                  description: The tags to be added to a new detector resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDetectors
      description: Lists detectorIds of all the existing Amazon GuardDuty detector resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDetectorsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/filter':
    post:
      operationId: CreateFilter
      description: Creates a filter using the specified finding criteria.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to create a filter for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - findingCriteria
              properties:
                name:
                  description: The name of the filter.
                  type: string
                  minLength: 3
                  maxLength: 64
                description:
                  description: The description of the filter.
                  type: string
                  minLength: 0
                  maxLength: 512
                action:
                  description: Specifies the action that is to be applied to the findings that match the filter.
                  type: string
                  enum:
                    - NOOP
                    - ARCHIVE
                  minLength: 1
                  maxLength: 300
                rank:
                  description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
                  type: integer
                  minimum: 1
                  maximum: 100
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      $ref: '#/components/schemas/Criterion'
                      description: Represents a map of finding properties that match specified conditions and values when querying findings.
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                tags:
                  description: The tags to be added to a new filter resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListFilters
      description: Returns a paginated list of the current filters.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFiltersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the filter is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/ipset':
    post:
      operationId: CreateIPSet
      description: 'Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with AWS infrastructure and applications. GuardDuty doesn''t generate findings for IP addresses that are included in IPSets. Only users from the master account can use this operation.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - format
                - location
                - activate
              properties:
                name:
                  description: '<p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumerics, spaces, hyphens (-), and underscores (_).</p>'
                  type: string
                  minLength: 1
                  maxLength: 300
                format:
                  description: The format of the file that contains the IPSet.
                  type: string
                  enum:
                    - TXT
                    - STIX
                    - OTX_CSV
                    - ALIEN_VAULT
                    - PROOF_POINT
                    - FIRE_EYE
                  minLength: 1
                  maxLength: 300
                location:
                  description: 'The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
                  type: boolean
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                tags:
                  description: The tags to be added to a new IP set resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListIPSets
      description: 'Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated master account.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIPSetsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the IPSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/member':
    post:
      operationId: CreateMembers
      description: Creates member accounts of the current AWS account by specifying a list of AWS account IDs. The current AWS account can then invite these members to manage GuardDuty in their accounts.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to associate member accounts with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountDetails
              properties:
                accountDetails:
                  description: A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountDetail'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListMembers
      description: Lists details about associated member accounts for the current GuardDuty master account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector the member is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: onlyAssociated
          in: query
          required: false
          description: Specifies what member accounts the response includes based on their relationship status with the master account. The default value is "true". If set to "false" the response includes all existing member accounts (including members who haven't been invited yet or have been disassociated).
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/publishingDestination':
    post:
      operationId: CreatePublishingDestination
      description: Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the GuardDuty detector associated with the publishing destination.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - destinationType
                - destinationProperties
              properties:
                destinationType:
                  description: The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.
                  type: string
                  enum:
                    - S3
                  minLength: 1
                  maxLength: 300
                destinationProperties:
                  description: 'Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.'
                  type: object
                  properties:
                    DestinationArn:
                      $ref: '#/components/schemas/String'
                      description: The ARN of the resource to publish to.
                    KmsKeyArn:
                      $ref: '#/components/schemas/String'
                      description: The ARN of the KMS key to use for encryption.
                clientToken:
                  description: The idempotency token for the request.
                  type: string
                  minLength: 0
                  maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListPublishingDestinations
      description: Returns a list of publishing destinations associated with the specified <code>dectectorId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPublishingDestinationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to retrieve publishing destinations for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in the response.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  '/detector/{detectorId}/findings/create':
    post:
      operationId: CreateSampleFindings
      description: 'Generates example findings of types specified by the list of finding types. If ''NULL'' is specified for <code>findingTypes</code>, the API generates example findings of all supported finding types.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSampleFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to create sample findings for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                findingTypes:
                  description: The types of sample findings to generate.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingType'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/threatintelset':
    post:
      operationId: CreateThreatIntelSet
      description: Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the master account can use this operation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - format
                - location
                - activate
              properties:
                name:
                  description: A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
                  type: string
                  minLength: 1
                  maxLength: 300
                format:
                  description: The format of the file that contains the ThreatIntelSet.
                  type: string
                  enum:
                    - TXT
                    - STIX
                    - OTX_CSV
                    - ALIEN_VAULT
                    - PROOF_POINT
                    - FIRE_EYE
                  minLength: 1
                  maxLength: 300
                location:
                  description: 'The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
                  type: boolean
                clientToken:
                  description: The idempotency token for the create request.
                  type: string
                  minLength: 0
                  maxLength: 64
                tags:
                  description: The tags to be added to a new threat list resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListThreatIntelSets
      description: 'Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the master account are returned.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListThreatIntelSetsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the threatIntelSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  /invitation/decline:
    post:
      operationId: DeclineInvitations
      description: Declines invitations sent to the current member account by AWS accounts specified by their account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeclineInvitationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}':
    delete:
      operationId: DeleteDetector
      description: Deletes an Amazon GuardDuty detector that is specified by the detector ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that you want to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDetector
      description: Retrieves an Amazon GuardDuty detector specified by the detectorId.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that you want to get.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    post:
      operationId: UpdateDetector
      description: Updates the Amazon GuardDuty detector specified by the detectorId.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDetectorResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enable:
                  description: Specifies whether the detector is enabled or not enabled.
                  type: boolean
                findingPublishingFrequency:
                  description: 'An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.'
                  type: string
                  enum:
                    - FIFTEEN_MINUTES
                    - ONE_HOUR
                    - SIX_HOURS
  '/detector/{detectorId}/filter/{filterName}':
    delete:
      operationId: DeleteFilter
      description: Deletes the filter specified by the filter name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the filter is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: filterName
          in: path
          required: true
          description: The name of the filter that you want to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetFilter
      description: Returns the details of the filter specified by the filter name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the filter is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: filterName
          in: path
          required: true
          description: The name of the filter you want to get.
          schema:
            type: string
    post:
      operationId: UpdateFilter
      description: Updates the filter specified by the filter name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFilterResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: filterName
          in: path
          required: true
          description: The name of the filter.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The description of the filter.
                  type: string
                  minLength: 0
                  maxLength: 512
                action:
                  description: Specifies the action that is to be applied to the findings that match the filter.
                  type: string
                  enum:
                    - NOOP
                    - ARCHIVE
                  minLength: 1
                  maxLength: 300
                rank:
                  description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
                  type: integer
                  minimum: 1
                  maximum: 100
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      $ref: '#/components/schemas/Criterion'
                      description: Represents a map of finding properties that match specified conditions and values when querying findings.
  '/detector/{detectorId}/ipset/{ipSetId}':
    delete:
      operationId: DeleteIPSet
      description: Deletes the IPSet specified by the <code>ipSetId</code>. IPSets are called trusted IP lists in the console user interface.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the IPSet.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: ipSetId
          in: path
          required: true
          description: The unique ID of the IPSet to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIPSet
      description: Retrieves the IPSet specified by the <code>ipSetId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the IPSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: ipSetId
          in: path
          required: true
          description: The unique ID of the IPSet to retrieve.
          schema:
            type: string
    post:
      operationId: UpdateIPSet
      description: Updates the IPSet specified by the IPSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIPSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The detectorID that specifies the GuardDuty service whose IPSet you want to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: ipSetId
          in: path
          required: true
          description: The unique ID that specifies the IPSet that you want to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The unique ID that specifies the IPSet that you want to update.
                  type: string
                  minLength: 1
                  maxLength: 300
                location:
                  description: 'The updated URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: The updated Boolean value that specifies whether the IPSet is active or not.
                  type: boolean
  /invitation/delete:
    post:
      operationId: DeleteInvitations
      description: Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteInvitationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/delete':
    post:
      operationId: DeleteMembers
      description: Deletes GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account whose members you want to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts that you want to delete.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/publishingDestination/{destinationId}':
    delete:
      operationId: DeletePublishingDestination
      description: Deletes the publishing definition with the specified <code>destinationId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the publishing destination to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: destinationId
          in: path
          required: true
          description: The ID of the publishing destination to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribePublishingDestination
      description: Returns information about the publishing destination specified by the provided <code>destinationId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the publishing destination to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: destinationId
          in: path
          required: true
          description: The ID of the publishing destination to retrieve.
          schema:
            type: string
    post:
      operationId: UpdatePublishingDestination
      description: Updates information about the publishing destination specified by the <code>destinationId</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePublishingDestinationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector associated with the publishing destinations to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: destinationId
          in: path
          required: true
          description: The ID of the publishing destination to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationProperties:
                  description: 'Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.'
                  type: object
                  properties:
                    DestinationArn:
                      $ref: '#/components/schemas/String'
                      description: The ARN of the resource to publish to.
                    KmsKeyArn:
                      $ref: '#/components/schemas/String'
                      description: The ARN of the KMS key to use for encryption.
  '/detector/{detectorId}/threatintelset/{threatIntelSetId}':
    delete:
      operationId: DeleteThreatIntelSet
      description: Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the threatIntelSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: threatIntelSetId
          in: path
          required: true
          description: The unique ID of the threatIntelSet that you want to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetThreatIntelSet
      description: Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector that the threatIntelSet is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: threatIntelSetId
          in: path
          required: true
          description: The unique ID of the threatIntelSet that you want to get.
          schema:
            type: string
    post:
      operationId: UpdateThreatIntelSet
      description: Updates the ThreatIntelSet specified by the ThreatIntelSet ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateThreatIntelSetResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: threatIntelSetId
          in: path
          required: true
          description: The unique ID that specifies the ThreatIntelSet that you want to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The unique ID that specifies the ThreatIntelSet that you want to update.
                  type: string
                  minLength: 1
                  maxLength: 300
                location:
                  description: 'The updated URI of the file that contains the ThreateIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
                  type: string
                  minLength: 1
                  maxLength: 300
                activate:
                  description: The updated Boolean value that specifies whether the ThreateIntelSet is active or not.
                  type: boolean
  '/detector/{detectorId}/admin':
    get:
      operationId: DescribeOrganizationConfiguration
      description: Returns information about the account selected as the delegated administrator for GuardDuty.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeOrganizationConfigurationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to retrieve information about the delegated administrator from.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateOrganizationConfiguration
      description: Updates the delegated administrator account with the values provided.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationConfigurationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector to update the delegated administrator for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - autoEnable
              properties:
                autoEnable:
                  description: Indicates whether to automatically enable member accounts in the organization.
                  type: boolean
  /admin/disable:
    post:
      operationId: DisableOrganizationAdminAccount
      description: Disables GuardDuty administrator permissions for an AWS account within the Organization.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableOrganizationAdminAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - adminAccountId
              properties:
                adminAccountId:
                  description: The AWS Account ID for the Organizations account to be disabled as a GuardDuty delegated administrator.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/master/disassociate':
    post:
      operationId: DisassociateFromMasterAccount
      description: Disassociates the current GuardDuty member account from its master account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateFromMasterAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty member account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/disassociate':
    post:
      operationId: DisassociateMembers
      description: Disassociates GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account whose members you want to disassociate from the master account.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts that you want to disassociate from the master account.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /admin/enable:
    post:
      operationId: EnableOrganizationAdminAccount
      description: Enables GuardDuty administrator permissions for an AWS account within the organization.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableOrganizationAdminAccountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - adminAccountId
              properties:
                adminAccountId:
                  description: The AWS Account ID for the Organizations account to be enabled as a GuardDuty delegated administrator.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/get':
    post:
      operationId: GetFindings
      description: Describes Amazon GuardDuty findings specified by finding IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
              properties:
                findingIds:
                  description: The IDs of the findings that you want to retrieve.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
                sortCriteria:
                  description: Contains information about the criteria used for sorting findings.
                  type: object
                  properties:
                    AttributeName:
                      $ref: '#/components/schemas/String'
                      description: 'Represents the finding attribute (for example, accountId) to sort findings by.'
                    OrderBy:
                      $ref: '#/components/schemas/OrderBy'
                      description: The order by which the sorted findings are to be displayed.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/statistics':
    post:
      operationId: GetFindingsStatistics
      description: Lists Amazon GuardDuty findings statistics for the specified detector ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFindingsStatisticsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingStatisticTypes
              properties:
                findingStatisticTypes:
                  description: The types of finding statistics to retrieve.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingStatisticType'
                  minItems: 0
                  maxItems: 10
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      $ref: '#/components/schemas/Criterion'
                      description: Represents a map of finding properties that match specified conditions and values when querying findings.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /invitation/count:
    get:
      operationId: GetInvitationsCount
      description: Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInvitationsCountResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters: []
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/get':
    post:
      operationId: GetMembers
      description: Retrieves GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account whose members you want to retrieve.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts that you want to describe.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/invite':
    post:
      operationId: InviteMembers
      description: 'Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty, and allow the current AWS account to view and manage these accounts'' GuardDuty findings on their behalf as the master account.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty account that you want to invite members with.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the accounts that you want to invite to GuardDuty as members.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
                disableEmailNotification:
                  description: A Boolean value that specifies whether you want to disable email notification to the accounts that you’re inviting to GuardDuty as members.
                  type: boolean
                message:
                  description: The invitation message that you want to send to the accounts that you’re inviting to GuardDuty as members.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings':
    post:
      operationId: ListFindings
      description: Lists Amazon GuardDuty findings for the specified detector ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector that specifies the GuardDuty service whose findings you want to list.
          schema:
            type: string
            minLength: 1
            maxLength: 300
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                findingCriteria:
                  description: Contains information about the criteria used for querying findings.
                  type: object
                  properties:
                    Criterion:
                      $ref: '#/components/schemas/Criterion'
                      description: Represents a map of finding properties that match specified conditions and values when querying findings.
                sortCriteria:
                  description: Contains information about the criteria used for sorting findings.
                  type: object
                  properties:
                    AttributeName:
                      $ref: '#/components/schemas/String'
                      description: 'Represents the finding attribute (for example, accountId) to sort findings by.'
                    OrderBy:
                      $ref: '#/components/schemas/OrderBy'
                      description: The order by which the sorted findings are to be displayed.
                maxResults:
                  description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
                  type: integer
                  minimum: 1
                  maximum: 50
                nextToken:
                  description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /invitation:
    get:
      operationId: ListInvitations
      description: Lists all GuardDuty membership invitations that were sent to the current AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvitationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /admin:
    get:
      operationId: ListOrganizationAdminAccounts
      description: Lists the accounts configured as AWS Organization delegated administrators.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationAdminAccountsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in the response.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.'
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: 'Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: 'The Amazon Resource Name (ARN) for the given GuardDuty resource. '
          schema:
            type: string
            pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Adds tags to a resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.
          schema:
            type: string
            pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: The tags to be added to a resource.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/detector/{detectorId}/member/start':
    post:
      operationId: StartMonitoringMembers
      description: Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the <code>StopMonitoringMembers</code> operation.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartMonitoringMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector of the GuardDuty master account associated with the member accounts to monitor.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs of the GuardDuty member accounts to start monitoring.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/member/stop':
    post:
      operationId: StopMonitoringMembers
      description: Stops GuardDuty monitoring for the specified member accounts. Use the <code>StartMonitoringMembers</code> operation to restart monitoring for those accounts.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopMonitoringMembersResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The unique ID of the detector associated with the GuardDuty master account that is monitoring member accounts.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accountIds
              properties:
                accountIds:
                  description: A list of account IDs for the member accounts to stop monitoring.
                  type: array
                  items:
                    $ref: '#/components/schemas/AccountId'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/unarchive':
    post:
      operationId: UnarchiveFindings
      description: Unarchives GuardDuty findings specified by the <code>findingIds</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnarchiveFindingsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector associated with the findings to unarchive.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
              properties:
                findingIds:
                  description: The IDs of the findings to unarchive.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Removes tags from a resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) for the resource to remove tags from.
          schema:
            type: string
            pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
        - name: tagKeys
          in: query
          required: true
          description: The tag keys to remove from the resource.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 1
            maxItems: 200
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/detector/{detectorId}/findings/feedback':
    post:
      operationId: UpdateFindingsFeedback
      description: Marks the specified GuardDuty findings as useful or not useful.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFindingsFeedbackResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
      parameters:
        - name: detectorId
          in: path
          required: true
          description: The ID of the detector associated with the findings to update feedback for.
          schema:
            type: string
            minLength: 1
            maxLength: 300
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - findingIds
                - feedback
              properties:
                findingIds:
                  description: The IDs of the findings that you want to mark as useful or not useful.
                  type: array
                  items:
                    $ref: '#/components/schemas/FindingId'
                  minItems: 0
                  maxItems: 50
                feedback:
                  description: The feedback for the finding.
                  type: string
                  enum:
                    - USEFUL
                    - NOT_USEFUL
                comments:
                  description: Additional feedback about the GuardDuty findings.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AcceptInvitationResponse:
      type: object
      properties: {}
    BadRequestException: {}
    InternalServerErrorException: {}
    ArchiveFindingsResponse:
      type: object
      properties: {}
    FindingId:
      type: string
      minLength: 1
      maxLength: 300
    CreateDetectorResponse:
      type: object
      properties:
        DetectorId:
          $ref: '#/components/schemas/DetectorId'
          description: The unique ID of the created detector.
    TagValue:
      type: string
      maxLength: 256
    CreateFilterResponse:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: '#/components/schemas/FilterName'
          description: The name of the successfully created filter.
    Criterion:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Condition'
    CreateIPSetResponse:
      type: object
      required:
        - IpSetId
      properties:
        IpSetId:
          $ref: '#/components/schemas/String'
          description: The ID of the IPSet resource.
    CreateMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: A list of objects that include the <code>accountIds</code> of the unprocessed accounts and a result string that explains why each was unprocessed.
    AccountDetail:
      type: object
      required:
        - AccountId
        - Email
      properties:
        AccountId:
          $ref: '#/components/schemas/AccountId'
          description: The member account ID.
        Email:
          $ref: '#/components/schemas/Email'
          description: The email address of the member account.
      description: Contains information about the account.
    CreatePublishingDestinationResponse:
      type: object
      required:
        - DestinationId
      properties:
        DestinationId:
          $ref: '#/components/schemas/String'
          description: The ID of the publishing destination that is created.
    String:
      type: string
    CreateSampleFindingsResponse:
      type: object
      properties: {}
    FindingType:
      type: string
      minLength: 1
      maxLength: 50
    CreateThreatIntelSetResponse:
      type: object
      required:
        - ThreatIntelSetId
      properties:
        ThreatIntelSetId:
          $ref: '#/components/schemas/String'
          description: The ID of the ThreatIntelSet resource.
    DeclineInvitationsResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    AccountId:
      type: string
      minLength: 12
      maxLength: 12
    DeleteDetectorResponse:
      type: object
      properties: {}
    DeleteFilterResponse:
      type: object
      properties: {}
    DeleteIPSetResponse:
      type: object
      properties: {}
    DeleteInvitationsResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    DeleteMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: The accounts that could not be processed.
    DeletePublishingDestinationResponse:
      type: object
      properties: {}
    DeleteThreatIntelSetResponse:
      type: object
      properties: {}
    DescribeOrganizationConfigurationResponse:
      type: object
      required:
        - AutoEnable
        - MemberAccountLimitReached
      properties:
        AutoEnable:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether GuardDuty is automatically enabled for accounts added to the organization.
        MemberAccountLimitReached:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator master account.
    DescribePublishingDestinationResponse:
      type: object
      required:
        - DestinationId
        - DestinationType
        - Status
        - PublishingFailureStartTimestamp
        - DestinationProperties
      properties:
        DestinationId:
          $ref: '#/components/schemas/String'
          description: The ID of the publishing destination.
        DestinationType:
          $ref: '#/components/schemas/DestinationType'
          description: 'The type of publishing destination. Currently, only Amazon S3 buckets are supported.'
        Status:
          $ref: '#/components/schemas/PublishingStatus'
          description: The status of the publishing destination.
        PublishingFailureStartTimestamp:
          $ref: '#/components/schemas/Long'
          description: 'The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.'
        DestinationProperties:
          $ref: '#/components/schemas/DestinationProperties'
          description: A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.
    DisableOrganizationAdminAccountResponse:
      type: object
      properties: {}
    DisassociateFromMasterAccountResponse:
      type: object
      properties: {}
    DisassociateMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    EnableOrganizationAdminAccountResponse:
      type: object
      properties: {}
    GetDetectorResponse:
      type: object
      required:
        - ServiceRole
        - Status
      properties:
        CreatedAt:
          $ref: '#/components/schemas/String'
          description: The timestamp of when the detector was created.
        FindingPublishingFrequency:
          $ref: '#/components/schemas/FindingPublishingFrequency'
          description: The publishing frequency of the finding.
        ServiceRole:
          $ref: '#/components/schemas/String'
          description: The GuardDuty service role.
        Status:
          $ref: '#/components/schemas/DetectorStatus'
          description: The detector status.
        UpdatedAt:
          $ref: '#/components/schemas/String'
          description: The last-updated timestamp for the detector.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags of the detector resource.
    GetFilterResponse:
      type: object
      required:
        - Name
        - Action
        - FindingCriteria
      properties:
        Name:
          $ref: '#/components/schemas/FilterName'
          description: The name of the filter.
        Description:
          $ref: '#/components/schemas/FilterDescription'
          description: The description of the filter.
        Action:
          $ref: '#/components/schemas/FilterAction'
          description: Specifies the action that is to be applied to the findings that match the filter.
        Rank:
          $ref: '#/components/schemas/FilterRank'
          description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        FindingCriteria:
          $ref: '#/components/schemas/FindingCriteria'
          description: Represents the criteria to be used in the filter for querying findings.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags of the filter resource.
    GetFindingsResponse:
      type: object
      required:
        - Findings
      properties:
        Findings:
          $ref: '#/components/schemas/Findings'
          description: A list of findings.
    OrderBy:
      type: string
      enum:
        - ASC
        - DESC
    GetFindingsStatisticsResponse:
      type: object
      required:
        - FindingStatistics
      properties:
        FindingStatistics:
          $ref: '#/components/schemas/FindingStatistics'
          description: The finding statistics object.
    FindingStatisticType:
      type: string
      enum:
        - COUNT_BY_SEVERITY
    GetIPSetResponse:
      type: object
      required:
        - Name
        - Format
        - Location
        - Status
      properties:
        Name:
          $ref: '#/components/schemas/Name'
          description: The user-friendly name for the IPSet.
        Format:
          $ref: '#/components/schemas/IpSetFormat'
          description: The format of the file that contains the IPSet.
        Location:
          $ref: '#/components/schemas/Location'
          description: 'The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Status:
          $ref: '#/components/schemas/IpSetStatus'
          description: The status of IPSet file that was uploaded.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags of the IPSet resource.
    GetInvitationsCountResponse:
      type: object
      properties:
        InvitationsCount:
          $ref: '#/components/schemas/Integer'
          description: The number of received invitations.
    GetMasterAccountResponse:
      type: object
      required:
        - Master
      properties:
        Master:
          $ref: '#/components/schemas/Master'
          description: The master account details.
    GetMembersResponse:
      type: object
      required:
        - Members
        - UnprocessedAccounts
      properties:
        Members:
          $ref: '#/components/schemas/Members'
          description: A list of members.
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    GetThreatIntelSetResponse:
      type: object
      required:
        - Name
        - Format
        - Location
        - Status
      properties:
        Name:
          $ref: '#/components/schemas/Name'
          description: A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
        Format:
          $ref: '#/components/schemas/ThreatIntelSetFormat'
          description: The format of the threatIntelSet.
        Location:
          $ref: '#/components/schemas/Location'
          description: 'The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Status:
          $ref: '#/components/schemas/ThreatIntelSetStatus'
          description: The status of threatIntelSet file uploaded.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags of the threat list resource.
    InviteMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    ListDetectorsResponse:
      type: object
      required:
        - DetectorIds
      properties:
        DetectorIds:
          $ref: '#/components/schemas/DetectorIds'
          description: A list of detector IDs.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListFiltersResponse:
      type: object
      required:
        - FilterNames
      properties:
        FilterNames:
          $ref: '#/components/schemas/FilterNames'
          description: A list of filter names.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListFindingsResponse:
      type: object
      required:
        - FindingIds
      properties:
        FindingIds:
          $ref: '#/components/schemas/FindingIds'
          description: The IDs of the findings that you're listing.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListIPSetsResponse:
      type: object
      required:
        - IpSetIds
      properties:
        IpSetIds:
          $ref: '#/components/schemas/IpSetIds'
          description: The IDs of the IPSet resources.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListInvitationsResponse:
      type: object
      properties:
        Invitations:
          $ref: '#/components/schemas/Invitations'
          description: A list of invitation descriptions.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListMembersResponse:
      type: object
      properties:
        Members:
          $ref: '#/components/schemas/Members'
          description: A list of members.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListOrganizationAdminAccountsResponse:
      type: object
      properties:
        AdminAccounts:
          $ref: '#/components/schemas/AdminAccounts'
          description: An AdminAccounts object that includes a list of accounts configured as GuardDuty delegated administrators.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    ListPublishingDestinationsResponse:
      type: object
      required:
        - Destinations
      properties:
        Destinations:
          $ref: '#/components/schemas/Destinations'
          description: A <code>Destinations</code> object that includes information about each publishing destination returned.
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.'
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags associated with the resource.
    ListThreatIntelSetsResponse:
      type: object
      required:
        - ThreatIntelSetIds
      properties:
        ThreatIntelSetIds:
          $ref: '#/components/schemas/ThreatIntelSetIds'
          description: The IDs of the ThreatIntelSet resources.
        NextToken:
          $ref: '#/components/schemas/String'
          description: The pagination parameter to be used on the next list operation to retrieve more items.
    StartMonitoringMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.
    StopMonitoringMembersResponse:
      type: object
      required:
        - UnprocessedAccounts
      properties:
        UnprocessedAccounts:
          $ref: '#/components/schemas/UnprocessedAccounts'
          description: 'A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. '
    TagResourceResponse:
      type: object
      properties: {}
    UnarchiveFindingsResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: '^(?!aws:)[a-zA-Z+-=._:/]+$'
      minLength: 1
      maxLength: 128
    UpdateDetectorResponse:
      type: object
      properties: {}
    UpdateFilterResponse:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: '#/components/schemas/FilterName'
          description: The name of the filter.
    UpdateFindingsFeedbackResponse:
      type: object
      properties: {}
    UpdateIPSetResponse:
      type: object
      properties: {}
    UpdateOrganizationConfigurationResponse:
      type: object
      properties: {}
    UpdatePublishingDestinationResponse:
      type: object
      properties: {}
    UpdateThreatIntelSetResponse:
      type: object
      properties: {}
    DetectorId:
      type: string
      minLength: 1
      maxLength: 300
    AcceptInvitationRequest:
      type: object
      required:
        - MasterId
        - InvitationId
      title: AcceptInvitationRequest
      properties:
        MasterId:
          $ref: '#/components/schemas/String'
          description: The account ID of the master GuardDuty account whose invitation you're accepting.
        InvitationId:
          $ref: '#/components/schemas/String'
          description: The value that is used to validate the master account to the member account.
    AccessKeyDetails:
      type: object
      properties:
        AccessKeyId:
          $ref: '#/components/schemas/String'
          description: The access key ID of the user.
        PrincipalId:
          $ref: '#/components/schemas/String'
          description: The principal ID of the user.
        UserName:
          $ref: '#/components/schemas/String'
          description: The name of the user.
        UserType:
          $ref: '#/components/schemas/String'
          description: The type of the user.
      description: Contains information about the access keys.
    Email:
      type: string
      minLength: 1
      maxLength: 64
    AccountDetails:
      type: array
      items:
        $ref: '#/components/schemas/AccountDetail'
      minItems: 1
      maxItems: 50
    AccountIds:
      type: array
      items:
        $ref: '#/components/schemas/AccountId'
      minItems: 1
      maxItems: 50
    AwsApiCallAction:
      type: object
      properties:
        Api:
          $ref: '#/components/schemas/String'
          description: The AWS API name.
        CallerType:
          $ref: '#/components/schemas/String'
          description: The AWS API caller type.
        DomainDetails:
          $ref: '#/components/schemas/DomainDetails'
          description: The domain information for the AWS API call.
        RemoteIpDetails:
          $ref: '#/components/schemas/RemoteIpDetails'
          description: The remote IP information of the connection.
        ServiceName:
          $ref: '#/components/schemas/String'
          description: The AWS service name whose API was invoked.
      description: Contains information about the API operation.
    DnsRequestAction:
      type: object
      properties:
        Domain:
          $ref: '#/components/schemas/String'
          description: The domain information for the API request.
      description: Contains information about the DNS_REQUEST action described in this finding.
    NetworkConnectionAction:
      type: object
      properties:
        Blocked:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether EC2 blocked the network connection to your instance.
        ConnectionDirection:
          $ref: '#/components/schemas/String'
          description: The network connection direction.
        LocalPortDetails:
          $ref: '#/components/schemas/LocalPortDetails'
          description: The local port information of the connection.
        Protocol:
          $ref: '#/components/schemas/String'
          description: The network connection protocol.
        LocalIpDetails:
          $ref: '#/components/schemas/LocalIpDetails'
          description: The local IP information of the connection.
        RemoteIpDetails:
          $ref: '#/components/schemas/RemoteIpDetails'
          description: The remote IP information of the connection.
        RemotePortDetails:
          $ref: '#/components/schemas/RemotePortDetails'
          description: The remote port information of the connection.
      description: Contains information about the NETWORK_CONNECTION action described in the finding.
    PortProbeAction:
      type: object
      properties:
        Blocked:
          $ref: '#/components/schemas/Boolean'
          description: 'Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.'
        PortProbeDetails:
          $ref: '#/components/schemas/PortProbeDetails'
          description: A list of objects related to port probe details.
      description: Contains information about the PORT_PROBE action described in the finding.
    Action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/String'
          description: The GuardDuty finding activity type.
        AwsApiCallAction:
          $ref: '#/components/schemas/AwsApiCallAction'
          description: Information about the AWS_API_CALL action described in this finding.
        DnsRequestAction:
          $ref: '#/components/schemas/DnsRequestAction'
          description: Information about the DNS_REQUEST action described in this finding.
        NetworkConnectionAction:
          $ref: '#/components/schemas/NetworkConnectionAction'
          description: Information about the NETWORK_CONNECTION action described in this finding.
        PortProbeAction:
          $ref: '#/components/schemas/PortProbeAction'
          description: Information about the PORT_PROBE action described in this finding.
      description: Contains information about actions.
    AdminStatus:
      type: string
      enum:
        - ENABLED
        - DISABLE_IN_PROGRESS
      minLength: 1
      maxLength: 300
    AdminAccount:
      type: object
      properties:
        AdminAccountId:
          $ref: '#/components/schemas/String'
          description: The AWS account ID for the account.
        AdminStatus:
          $ref: '#/components/schemas/AdminStatus'
          description: Indicates whether the account is enabled as the delegated administrator.
      description: The account within the organization specified as the GuardDuty delegated administrator.
    AdminAccounts:
      type: array
      items:
        $ref: '#/components/schemas/AdminAccount'
      minItems: 0
      maxItems: 1
    FindingIds:
      type: array
      items:
        $ref: '#/components/schemas/FindingId'
      minItems: 0
      maxItems: 50
    ArchiveFindingsRequest:
      type: object
      required:
        - FindingIds
      title: ArchiveFindingsRequest
      properties:
        FindingIds:
          $ref: '#/components/schemas/FindingIds'
          description: The IDs of the findings that you want to archive.
    DomainDetails:
      type: object
      properties:
        Domain:
          $ref: '#/components/schemas/String'
          description: The domain information for the AWS API call.
      description: Contains information about the domain.
    RemoteIpDetails:
      type: object
      properties:
        City:
          $ref: '#/components/schemas/City'
          description: The city information of the remote IP address.
        Country:
          $ref: '#/components/schemas/Country'
          description: The country code of the remote IP address.
        GeoLocation:
          $ref: '#/components/schemas/GeoLocation'
          description: The location information of the remote IP address.
        IpAddressV4:
          $ref: '#/components/schemas/String'
          description: The IPv4 remote address of the connection.
        Organization:
          $ref: '#/components/schemas/Organization'
          description: The ISP organization information of the remote IP address.
      description: Contains information about the remote IP address of the connection.
    Boolean:
      type: boolean
    City:
      type: object
      properties:
        CityName:
          $ref: '#/components/schemas/String'
          description: The city name of the remote IP address.
      description: Contains information about the city associated with the IP address.
    ClientToken:
      type: string
      minLength: 0
      maxLength: 64
    Eq:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Neq:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Integer:
      type: integer
    Equals:
      type: array
      items:
        $ref: '#/components/schemas/String'
    NotEquals:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Long:
      type: integer
    Condition:
      type: object
      properties:
        Eq:
          deprecated: true
          $ref: '#/components/schemas/Eq'
          description: Represents the <i>equal</i> condition to be applied to a single field when querying for findings.
        Neq:
          deprecated: true
          $ref: '#/components/schemas/Neq'
          description: Represents the <i>not equal</i> condition to be applied to a single field when querying for findings.
        Gt:
          deprecated: true
          $ref: '#/components/schemas/Integer'
          description: Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.
        Gte:
          deprecated: true
          $ref: '#/components/schemas/Integer'
          description: Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.
        Lt:
          deprecated: true
          $ref: '#/components/schemas/Integer'
          description: Represents a <i>less than</i> condition to be applied to a single field when querying for findings.
        Lte:
          deprecated: true
          $ref: '#/components/schemas/Integer'
          description: Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.
        Equals:
          $ref: '#/components/schemas/Equals'
          description: Represents an <i>equal</i> <b/> condition to be applied to a single field when querying for findings.
        NotEquals:
          $ref: '#/components/schemas/NotEquals'
          description: Represents a <i>not equal</i> <b/> condition to be applied to a single field when querying for findings.
        GreaterThan:
          $ref: '#/components/schemas/Long'
          description: Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.
        GreaterThanOrEqual:
          $ref: '#/components/schemas/Long'
          description: Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.
        LessThan:
          $ref: '#/components/schemas/Long'
          description: Represents a <i>less than</i> condition to be applied to a single field when querying for findings.
        LessThanOrEqual:
          $ref: '#/components/schemas/Long'
          description: Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.
      description: Contains information about the condition.
    CountBySeverity:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Integer'
    Country:
      type: object
      properties:
        CountryCode:
          $ref: '#/components/schemas/String'
          description: The country code of the remote IP address.
        CountryName:
          $ref: '#/components/schemas/String'
          description: The country name of the remote IP address.
      description: Contains information about the country where the remote IP address is located.
    FindingPublishingFrequency:
      type: string
      enum:
        - FIFTEEN_MINUTES
        - ONE_HOUR
        - SIX_HOURS
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 200
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    CreateDetectorRequest:
      type: object
      required:
        - Enable
      title: CreateDetectorRequest
      properties:
        Enable:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the detector is to be enabled.
        ClientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The idempotency token for the create request.
        FindingPublishingFrequency:
          $ref: '#/components/schemas/FindingPublishingFrequency'
          description: An enum value that specifies how frequently updated findings are exported.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags to be added to a new detector resource.
    FilterName:
      type: string
      minLength: 3
      maxLength: 64
    FilterDescription:
      type: string
      minLength: 0
      maxLength: 512
    FilterAction:
      type: string
      enum:
        - NOOP
        - ARCHIVE
      minLength: 1
      maxLength: 300
    FilterRank:
      type: integer
      minimum: 1
      maximum: 100
    FindingCriteria:
      type: object
      properties:
        Criterion:
          $ref: '#/components/schemas/Criterion'
          description: Represents a map of finding properties that match specified conditions and values when querying findings.
      description: Contains information about the criteria used for querying findings.
    CreateFilterRequest:
      type: object
      required:
        - Name
        - FindingCriteria
      title: CreateFilterRequest
      properties:
        Name:
          $ref: '#/components/schemas/FilterName'
          description: The name of the filter.
        Description:
          $ref: '#/components/schemas/FilterDescription'
          description: The description of the filter.
        Action:
          $ref: '#/components/schemas/FilterAction'
          description: Specifies the action that is to be applied to the findings that match the filter.
        Rank:
          $ref: '#/components/schemas/FilterRank'
          description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        FindingCriteria:
          $ref: '#/components/schemas/FindingCriteria'
          description: '<p>Represents the criteria to be used in the filter for querying findings.</p> <p>You can only use the following attributes to query findings:</p> <ul> <li> <p>accountId</p> </li> <li> <p>region</p> </li> <li> <p>confidence</p> </li> <li> <p>id</p> </li> <li> <p>resource.accessKeyDetails.accessKeyId</p> </li> <li> <p>resource.accessKeyDetails.principalId</p> </li> <li> <p>resource.accessKeyDetails.userName</p> </li> <li> <p>resource.accessKeyDetails.userType</p> </li> <li> <p>resource.instanceDetails.iamInstanceProfile.id</p> </li> <li> <p>resource.instanceDetails.imageId</p> </li> <li> <p>resource.instanceDetails.instanceId</p> </li> <li> <p>resource.instanceDetails.outpostArn</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicDnsName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicIp</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.subnetId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.vpcId</p> </li> <li> <p>resource.instanceDetails.tags.key</p> </li> <li> <p>resource.instanceDetails.tags.value</p> </li> <li> <p>resource.resourceType</p> </li> <li> <p>service.action.actionType</p> </li> <li> <p>service.action.awsApiCallAction.api</p> </li> <li> <p>service.action.awsApiCallAction.callerType</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.awsApiCallAction.serviceName</p> </li> <li> <p>service.action.dnsRequestAction.domain</p> </li> <li> <p>service.action.networkConnectionAction.blocked</p> </li> <li> <p>service.action.networkConnectionAction.connectionDirection</p> </li> <li> <p>service.action.networkConnectionAction.localPortDetails.port</p> </li> <li> <p>service.action.networkConnectionAction.protocol</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.networkConnectionAction.remotePortDetails.port</p> </li> <li> <p>service.additionalInfo.threatListName</p> </li> <li> <p>service.archived</p> <p>When this attribute is set to TRUE, only archived findings are listed. When it''s set to FALSE, only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p> </li> <li> <p>service.resourceRole</p> </li> <li> <p>severity</p> </li> <li> <p>type</p> </li> <li> <p>updatedAt</p> <p>Type: ISO 8601 string format: YYYY-MM-DDTHH:MM:SS.SSSZ or YYYY-MM-DDTHH:MM:SSZ depending on whether the value contains milliseconds.</p> </li> </ul>'
        ClientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The idempotency token for the create request.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags to be added to a new filter resource.
    Name:
      type: string
      minLength: 1
      maxLength: 300
    IpSetFormat:
      type: string
      enum:
        - TXT
        - STIX
        - OTX_CSV
        - ALIEN_VAULT
        - PROOF_POINT
        - FIRE_EYE
      minLength: 1
      maxLength: 300
    Location:
      type: string
      minLength: 1
      maxLength: 300
    CreateIPSetRequest:
      type: object
      required:
        - Name
        - Format
        - Location
        - Activate
      title: CreateIPSetRequest
      properties:
        Name:
          $ref: '#/components/schemas/Name'
          description: '<p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumerics, spaces, hyphens (-), and underscores (_).</p>'
        Format:
          $ref: '#/components/schemas/IpSetFormat'
          description: The format of the file that contains the IPSet.
        Location:
          $ref: '#/components/schemas/Location'
          description: 'The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Activate:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
        ClientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The idempotency token for the create request.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags to be added to a new IP set resource.
    CreateMembersRequest:
      type: object
      required:
        - AccountDetails
      title: CreateMembersRequest
      properties:
        AccountDetails:
          $ref: '#/components/schemas/AccountDetails'
          description: A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.
    UnprocessedAccounts:
      type: array
      items:
        $ref: '#/components/schemas/UnprocessedAccount'
      minItems: 0
      maxItems: 50
    DestinationType:
      type: string
      enum:
        - S3
      minLength: 1
      maxLength: 300
    DestinationProperties:
      type: object
      properties:
        DestinationArn:
          $ref: '#/components/schemas/String'
          description: The ARN of the resource to publish to.
        KmsKeyArn:
          $ref: '#/components/schemas/String'
          description: The ARN of the KMS key to use for encryption.
      description: 'Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.'
    CreatePublishingDestinationRequest:
      type: object
      required:
        - DestinationType
        - DestinationProperties
      title: CreatePublishingDestinationRequest
      properties:
        DestinationType:
          $ref: '#/components/schemas/DestinationType'
          description: The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.
        DestinationProperties:
          $ref: '#/components/schemas/DestinationProperties'
          description: 'The properties of the publishing destination, including the ARNs for the destination and the KMS key used for encryption.'
        ClientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The idempotency token for the request.
    FindingTypes:
      type: array
      items:
        $ref: '#/components/schemas/FindingType'
      minItems: 0
      maxItems: 50
    CreateSampleFindingsRequest:
      type: object
      title: CreateSampleFindingsRequest
      properties:
        FindingTypes:
          $ref: '#/components/schemas/FindingTypes'
          description: The types of sample findings to generate.
    ThreatIntelSetFormat:
      type: string
      enum:
        - TXT
        - STIX
        - OTX_CSV
        - ALIEN_VAULT
        - PROOF_POINT
        - FIRE_EYE
      minLength: 1
      maxLength: 300
    CreateThreatIntelSetRequest:
      type: object
      required:
        - Name
        - Format
        - Location
        - Activate
      title: CreateThreatIntelSetRequest
      properties:
        Name:
          $ref: '#/components/schemas/Name'
          description: A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
        Format:
          $ref: '#/components/schemas/ThreatIntelSetFormat'
          description: The format of the file that contains the ThreatIntelSet.
        Location:
          $ref: '#/components/schemas/Location'
          description: 'The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Activate:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
        ClientToken:
          $ref: '#/components/schemas/ClientToken'
          description: The idempotency token for the create request.
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags to be added to a new threat list resource.
    DeclineInvitationsRequest:
      type: object
      required:
        - AccountIds
      title: DeclineInvitationsRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
    DeleteDetectorRequest:
      type: object
      title: DeleteDetectorRequest
      properties: {}
    DeleteFilterRequest:
      type: object
      title: DeleteFilterRequest
      properties: {}
    DeleteIPSetRequest:
      type: object
      title: DeleteIPSetRequest
      properties: {}
    DeleteInvitationsRequest:
      type: object
      required:
        - AccountIds
      title: DeleteInvitationsRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
    DeleteMembersRequest:
      type: object
      required:
        - AccountIds
      title: DeleteMembersRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs of the GuardDuty member accounts that you want to delete.
    DeletePublishingDestinationRequest:
      type: object
      title: DeletePublishingDestinationRequest
      properties: {}
    DeleteThreatIntelSetRequest:
      type: object
      title: DeleteThreatIntelSetRequest
      properties: {}
    DescribeOrganizationConfigurationRequest:
      type: object
      title: DescribeOrganizationConfigurationRequest
      properties: {}
    DescribePublishingDestinationRequest:
      type: object
      title: DescribePublishingDestinationRequest
      properties: {}
    PublishingStatus:
      type: string
      enum:
        - PENDING_VERIFICATION
        - PUBLISHING
        - UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY
        - STOPPED
      minLength: 1
      maxLength: 300
    Destination:
      type: object
      required:
        - DestinationId
        - DestinationType
        - Status
      properties:
        DestinationId:
          $ref: '#/components/schemas/String'
          description: The unique ID of the publishing destination.
        DestinationType:
          $ref: '#/components/schemas/DestinationType'
          description: 'The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.'
        Status:
          $ref: '#/components/schemas/PublishingStatus'
          description: The status of the publishing destination.
      description: 'Contains information about the publishing destination, including the ID, type, and status.'
    Destinations:
      type: array
      items:
        $ref: '#/components/schemas/Destination'
    DetectorIds:
      type: array
      items:
        $ref: '#/components/schemas/DetectorId'
      minItems: 0
      maxItems: 50
    DetectorStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
      minLength: 1
      maxLength: 300
    DisableOrganizationAdminAccountRequest:
      type: object
      required:
        - AdminAccountId
      title: DisableOrganizationAdminAccountRequest
      properties:
        AdminAccountId:
          $ref: '#/components/schemas/String'
          description: The AWS Account ID for the Organizations account to be disabled as a GuardDuty delegated administrator.
    DisassociateFromMasterAccountRequest:
      type: object
      title: DisassociateFromMasterAccountRequest
      properties: {}
    DisassociateMembersRequest:
      type: object
      required:
        - AccountIds
      title: DisassociateMembersRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs of the GuardDuty member accounts that you want to disassociate from the master account.
    Double:
      type: number
      format: double
    EnableOrganizationAdminAccountRequest:
      type: object
      required:
        - AdminAccountId
      title: EnableOrganizationAdminAccountRequest
      properties:
        AdminAccountId:
          $ref: '#/components/schemas/String'
          description: The AWS Account ID for the Organizations account to be enabled as a GuardDuty delegated administrator.
    ThreatIntelligenceDetails:
      type: array
      items:
        $ref: '#/components/schemas/ThreatIntelligenceDetail'
    Evidence:
      type: object
      properties:
        ThreatIntelligenceDetails:
          $ref: '#/components/schemas/ThreatIntelligenceDetails'
          description: A list of threat intelligence details related to the evidence.
      description: Contains information about the reason that the finding was generated.
    Feedback:
      type: string
      enum:
        - USEFUL
        - NOT_USEFUL
    FilterNames:
      type: array
      items:
        $ref: '#/components/schemas/FilterName'
      minItems: 0
      maxItems: 50
    Resource:
      type: object
      properties:
        AccessKeyDetails:
          $ref: '#/components/schemas/AccessKeyDetails'
          description: The IAM access key details (IAM user information) of a user that engaged in the activity that prompted GuardDuty to generate a finding.
        InstanceDetails:
          $ref: '#/components/schemas/InstanceDetails'
          description: The information about the EC2 instance associated with the activity that prompted GuardDuty to generate a finding.
        ResourceType:
          $ref: '#/components/schemas/String'
          description: The type of AWS resource.
      description: Contains information about the AWS resource associated with the activity that prompted GuardDuty to generate a finding.
    Service:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/Action'
          description: Information about the activity that is described in a finding.
        Evidence:
          $ref: '#/components/schemas/Evidence'
          description: An evidence object associated with the service.
        Archived:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether this finding is archived.
        Count:
          $ref: '#/components/schemas/Integer'
          description: The total count of the occurrences of this finding type.
        DetectorId:
          $ref: '#/components/schemas/DetectorId'
          description: The detector ID for the GuardDuty service.
        EventFirstSeen:
          $ref: '#/components/schemas/String'
          description: The first-seen timestamp of the activity that prompted GuardDuty to generate this finding.
        EventLastSeen:
          $ref: '#/components/schemas/String'
          description: The last-seen timestamp of the activity that prompted GuardDuty to generate this finding.
        ResourceRole:
          $ref: '#/components/schemas/String'
          description: The resource role information for this finding.
        ServiceName:
          $ref: '#/components/schemas/String'
          description: The name of the AWS service (GuardDuty) that generated a finding.
        UserFeedback:
          $ref: '#/components/schemas/String'
          description: Feedback that was submitted about the finding.
      description: Contains additional information about the generated finding.
    Finding:
      type: object
      required:
        - AccountId
        - Arn
        - CreatedAt
        - Id
        - Region
        - Resource
        - SchemaVersion
        - Severity
        - Type
        - UpdatedAt
      properties:
        AccountId:
          $ref: '#/components/schemas/String'
          description: The ID of the account in which the finding was generated.
        Arn:
          $ref: '#/components/schemas/String'
          description: The ARN of the finding.
        Confidence:
          $ref: '#/components/schemas/Double'
          description: The confidence score for the finding.
        CreatedAt:
          $ref: '#/components/schemas/String'
          description: The time and date when the finding was created.
        Description:
          $ref: '#/components/schemas/String'
          description: The description of the finding.
        Id:
          $ref: '#/components/schemas/String'
          description: The ID of the finding.
        Partition:
          $ref: '#/components/schemas/String'
          description: The partition associated with the finding.
        Region:
          $ref: '#/components/schemas/String'
          description: The Region where the finding was generated.
        Resource:
          $ref: '#/components/schemas/Resource'
        SchemaVersion:
          $ref: '#/components/schemas/String'
          description: The version of the schema used for the finding.
        Service:
          $ref: '#/components/schemas/Service'
        Severity:
          $ref: '#/components/schemas/Double'
          description: The severity of the finding.
        Title:
          $ref: '#/components/schemas/String'
          description: The title of the finding.
        Type:
          $ref: '#/components/schemas/FindingType'
          description: The type of finding.
        UpdatedAt:
          $ref: '#/components/schemas/String'
          description: The time and date when the finding was last updated.
      description: 'Contains information about the finding, which is generated when abnormal or suspicious activity is detected.'
    FindingStatisticTypes:
      type: array
      items:
        $ref: '#/components/schemas/FindingStatisticType'
      minItems: 0
      maxItems: 10
    FindingStatistics:
      type: object
      properties:
        CountBySeverity:
          $ref: '#/components/schemas/CountBySeverity'
          description: Represents a map of severity to count statistics for a set of findings.
      description: Contains information about finding statistics.
    Findings:
      type: array
      items:
        $ref: '#/components/schemas/Finding'
      minItems: 0
      maxItems: 50
    GeoLocation:
      type: object
      properties:
        Lat:
          $ref: '#/components/schemas/Double'
          description: The latitude information of the remote IP address.
        Lon:
          $ref: '#/components/schemas/Double'
          description: The longitude information of the remote IP address.
      description: Contains information about the location of the remote IP address.
    GetDetectorRequest:
      type: object
      title: GetDetectorRequest
      properties: {}
    GetFilterRequest:
      type: object
      title: GetFilterRequest
      properties: {}
    SortCriteria:
      type: object
      properties:
        AttributeName:
          $ref: '#/components/schemas/String'
          description: 'Represents the finding attribute (for example, accountId) to sort findings by.'
        OrderBy:
          $ref: '#/components/schemas/OrderBy'
          description: The order by which the sorted findings are to be displayed.
      description: Contains information about the criteria used for sorting findings.
    GetFindingsRequest:
      type: object
      required:
        - FindingIds
      title: GetFindingsRequest
      properties:
        FindingIds:
          $ref: '#/components/schemas/FindingIds'
          description: The IDs of the findings that you want to retrieve.
        SortCriteria:
          $ref: '#/components/schemas/SortCriteria'
          description: Represents the criteria used for sorting findings.
    GetFindingsStatisticsRequest:
      type: object
      required:
        - FindingStatisticTypes
      title: GetFindingsStatisticsRequest
      properties:
        FindingStatisticTypes:
          $ref: '#/components/schemas/FindingStatisticTypes'
          description: The types of finding statistics to retrieve.
        FindingCriteria:
          $ref: '#/components/schemas/FindingCriteria'
          description: Represents the criteria that is used for querying findings.
    GetIPSetRequest:
      type: object
      title: GetIPSetRequest
      properties: {}
    IpSetStatus:
      type: string
      enum:
        - INACTIVE
        - ACTIVATING
        - ACTIVE
        - DEACTIVATING
        - ERROR
        - DELETE_PENDING
        - DELETED
      minLength: 1
      maxLength: 300
    GetInvitationsCountRequest:
      type: object
      title: GetInvitationsCountRequest
      properties: {}
    GetMasterAccountRequest:
      type: object
      title: GetMasterAccountRequest
      properties: {}
    Master:
      type: object
      properties:
        AccountId:
          $ref: '#/components/schemas/AccountId'
          description: The ID of the account used as the master account.
        InvitationId:
          $ref: '#/components/schemas/String'
          description: The value used to validate the master account to the member account.
        RelationshipStatus:
          $ref: '#/components/schemas/String'
          description: The status of the relationship between the master and member accounts.
        InvitedAt:
          $ref: '#/components/schemas/String'
          description: The timestamp when the invitation was sent.
      description: Contains information about the master account and invitation.
    GetMembersRequest:
      type: object
      required:
        - AccountIds
      title: GetMembersRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs of the GuardDuty member accounts that you want to describe.
    Members:
      type: array
      items:
        $ref: '#/components/schemas/Member'
      minItems: 0
      maxItems: 50
    GetThreatIntelSetRequest:
      type: object
      title: GetThreatIntelSetRequest
      properties: {}
    ThreatIntelSetStatus:
      type: string
      enum:
        - INACTIVE
        - ACTIVATING
        - ACTIVE
        - DEACTIVATING
        - ERROR
        - DELETE_PENDING
        - DELETED
      minLength: 1
      maxLength: 300
    GuardDutyArn:
      type: string
      pattern: '^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\d+:detector/[A-Za-z0-9_/.-]{32,264}$'
    IamInstanceProfile:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/String'
          description: The profile ARN of the EC2 instance.
        Id:
          $ref: '#/components/schemas/String'
          description: The profile ID of the EC2 instance.
      description: Contains information about the EC2 instance profile.
    NetworkInterfaces:
      type: array
      items:
        $ref: '#/components/schemas/NetworkInterface'
    ProductCodes:
      type: array
      items:
        $ref: '#/components/schemas/ProductCode'
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    InstanceDetails:
      type: object
      properties:
        AvailabilityZone:
          $ref: '#/components/schemas/String'
          description: The Availability Zone of the EC2 instance.
        IamInstanceProfile:
          $ref: '#/components/schemas/IamInstanceProfile'
          description: The profile information of the EC2 instance.
        ImageDescription:
          $ref: '#/components/schemas/String'
          description: The image description of the EC2 instance.
        ImageId:
          $ref: '#/components/schemas/String'
          description: The image ID of the EC2 instance.
        InstanceId:
          $ref: '#/components/schemas/String'
          description: The ID of the EC2 instance.
        InstanceState:
          $ref: '#/components/schemas/String'
          description: The state of the EC2 instance.
        InstanceType:
          $ref: '#/components/schemas/String'
          description: The type of the EC2 instance.
        OutpostArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the AWS Outpost. Only applicable to AWS Outposts instances.
        LaunchTime:
          $ref: '#/components/schemas/String'
          description: The launch time of the EC2 instance.
        NetworkInterfaces:
          $ref: '#/components/schemas/NetworkInterfaces'
          description: The elastic network interface information of the EC2 instance.
        Platform:
          $ref: '#/components/schemas/String'
          description: The platform of the EC2 instance.
        ProductCodes:
          $ref: '#/components/schemas/ProductCodes'
          description: The product code of the EC2 instance.
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The tags of the EC2 instance.
      description: Contains information about the details of an instance.
    Invitation:
      type: object
      properties:
        AccountId:
          $ref: '#/components/schemas/AccountId'
          description: The ID of the account that the invitation was sent from.
        InvitationId:
          $ref: '#/components/schemas/String'
          description: The ID of the invitation. This value is used to validate the inviter account to the member account.
        RelationshipStatus:
          $ref: '#/components/schemas/String'
          description: The status of the relationship between the inviter and invitee accounts.
        InvitedAt:
          $ref: '#/components/schemas/String'
          description: The timestamp when the invitation was sent.
      description: Contains information about the invitation to become a member account.
    Invitations:
      type: array
      items:
        $ref: '#/components/schemas/Invitation'
      minItems: 0
      maxItems: 50
    InviteMembersRequest:
      type: object
      required:
        - AccountIds
      title: InviteMembersRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs of the accounts that you want to invite to GuardDuty as members.
        DisableEmailNotification:
          $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether you want to disable email notification to the accounts that you’re inviting to GuardDuty as members.
        Message:
          $ref: '#/components/schemas/String'
          description: The invitation message that you want to send to the accounts that you’re inviting to GuardDuty as members.
    IpSetIds:
      type: array
      items:
        $ref: '#/components/schemas/String'
      minItems: 0
      maxItems: 50
    Ipv6Addresses:
      type: array
      items:
        $ref: '#/components/schemas/String'
    MaxResults:
      type: integer
      minimum: 1
      maximum: 50
    ListDetectorsRequest:
      type: object
      title: ListDetectorsRequest
      properties: {}
    ListFiltersRequest:
      type: object
      title: ListFiltersRequest
      properties: {}
    ListFindingsRequest:
      type: object
      title: ListFindingsRequest
      properties:
        FindingCriteria:
          $ref: '#/components/schemas/FindingCriteria'
          description: '<p>Represents the criteria used for querying findings. Valid values include:</p> <ul> <li> <p>JSON field name</p> </li> <li> <p>accountId</p> </li> <li> <p>region</p> </li> <li> <p>confidence</p> </li> <li> <p>id</p> </li> <li> <p>resource.accessKeyDetails.accessKeyId</p> </li> <li> <p>resource.accessKeyDetails.principalId</p> </li> <li> <p>resource.accessKeyDetails.userName</p> </li> <li> <p>resource.accessKeyDetails.userType</p> </li> <li> <p>resource.instanceDetails.iamInstanceProfile.id</p> </li> <li> <p>resource.instanceDetails.imageId</p> </li> <li> <p>resource.instanceDetails.instanceId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicDnsName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicIp</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.subnetId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.vpcId</p> </li> <li> <p>resource.instanceDetails.tags.key</p> </li> <li> <p>resource.instanceDetails.tags.value</p> </li> <li> <p>resource.resourceType</p> </li> <li> <p>service.action.actionType</p> </li> <li> <p>service.action.awsApiCallAction.api</p> </li> <li> <p>service.action.awsApiCallAction.callerType</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.awsApiCallAction.serviceName</p> </li> <li> <p>service.action.dnsRequestAction.domain</p> </li> <li> <p>service.action.networkConnectionAction.blocked</p> </li> <li> <p>service.action.networkConnectionAction.connectionDirection</p> </li> <li> <p>service.action.networkConnectionAction.localPortDetails.port</p> </li> <li> <p>service.action.networkConnectionAction.protocol</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.networkConnectionAction.remotePortDetails.port</p> </li> <li> <p>service.additionalInfo.threatListName</p> </li> <li> <p>service.archived</p> <p>When this attribute is set to ''true'', only archived findings are listed. When it''s set to ''false'', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p> </li> <li> <p>service.resourceRole</p> </li> <li> <p>severity</p> </li> <li> <p>type</p> </li> <li> <p>updatedAt</p> <p>Type: Timestamp in Unix Epoch millisecond format: 1486685375000</p> </li> </ul>'
        SortCriteria:
          $ref: '#/components/schemas/SortCriteria'
          description: Represents the criteria used for sorting findings.
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
        NextToken:
          $ref: '#/components/schemas/String'
          description: 'You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.'
    ListIPSetsRequest:
      type: object
      title: ListIPSetsRequest
      properties: {}
    ListInvitationsRequest:
      type: object
      title: ListInvitationsRequest
      properties: {}
    ListMembersRequest:
      type: object
      title: ListMembersRequest
      properties: {}
    ListOrganizationAdminAccountsRequest:
      type: object
      title: ListOrganizationAdminAccountsRequest
      properties: {}
    ListPublishingDestinationsRequest:
      type: object
      title: ListPublishingDestinationsRequest
      properties: {}
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    ListThreatIntelSetsRequest:
      type: object
      title: ListThreatIntelSetsRequest
      properties: {}
    ThreatIntelSetIds:
      type: array
      items:
        $ref: '#/components/schemas/String'
      minItems: 0
      maxItems: 50
    LocalIpDetails:
      type: object
      properties:
        IpAddressV4:
          $ref: '#/components/schemas/String'
          description: The IPv4 local address of the connection.
      description: Contains information about the local IP address of the connection.
    LocalPortDetails:
      type: object
      properties:
        Port:
          $ref: '#/components/schemas/Integer'
          description: The port number of the local connection.
        PortName:
          $ref: '#/components/schemas/String'
          description: The port name of the local connection.
      description: Contains information about the port for the local connection.
    Member:
      type: object
      required:
        - AccountId
        - MasterId
        - Email
        - RelationshipStatus
        - UpdatedAt
      properties:
        AccountId:
          $ref: '#/components/schemas/AccountId'
          description: The ID of the member account.
        DetectorId:
          $ref: '#/components/schemas/DetectorId'
          description: The detector ID of the member account.
        MasterId:
          $ref: '#/components/schemas/String'
          description: The master account ID.
        Email:
          $ref: '#/components/schemas/Email'
          description: The email address of the member account.
        RelationshipStatus:
          $ref: '#/components/schemas/String'
          description: The status of the relationship between the member and the master.
        InvitedAt:
          $ref: '#/components/schemas/String'
          description: The timestamp when the invitation was sent.
        UpdatedAt:
          $ref: '#/components/schemas/String'
          description: The last-updated timestamp of the member.
      description: 'Contains information about the member account. '
    RemotePortDetails:
      type: object
      properties:
        Port:
          $ref: '#/components/schemas/Integer'
          description: The port number of the remote connection.
        PortName:
          $ref: '#/components/schemas/String'
          description: The port name of the remote connection.
      description: Contains information about the remote port.
    PrivateIpAddresses:
      type: array
      items:
        $ref: '#/components/schemas/PrivateIpAddressDetails'
    SecurityGroups:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroup'
    NetworkInterface:
      type: object
      properties:
        Ipv6Addresses:
          $ref: '#/components/schemas/Ipv6Addresses'
          description: A list of IPv6 addresses for the EC2 instance.
        NetworkInterfaceId:
          $ref: '#/components/schemas/String'
          description: The ID of the network interface.
        PrivateDnsName:
          $ref: '#/components/schemas/String'
          description: The private DNS name of the EC2 instance.
        PrivateIpAddress:
          $ref: '#/components/schemas/String'
          description: The private IP address of the EC2 instance.
        PrivateIpAddresses:
          $ref: '#/components/schemas/PrivateIpAddresses'
          description: Other private IP address information of the EC2 instance.
        PublicDnsName:
          $ref: '#/components/schemas/String'
          description: The public DNS name of the EC2 instance.
        PublicIp:
          $ref: '#/components/schemas/String'
          description: The public IP address of the EC2 instance.
        SecurityGroups:
          $ref: '#/components/schemas/SecurityGroups'
          description: The security groups associated with the EC2 instance.
        SubnetId:
          $ref: '#/components/schemas/String'
          description: The subnet ID of the EC2 instance.
        VpcId:
          $ref: '#/components/schemas/String'
          description: The VPC ID of the EC2 instance.
      description: Contains information about the elastic network interface of the EC2 instance.
    Organization:
      type: object
      properties:
        Asn:
          $ref: '#/components/schemas/String'
          description: The Autonomous System Number (ASN) of the internet provider of the remote IP address.
        AsnOrg:
          $ref: '#/components/schemas/String'
          description: The organization that registered this ASN.
        Isp:
          $ref: '#/components/schemas/String'
          description: The ISP information for the internet provider.
        Org:
          $ref: '#/components/schemas/String'
          description: The name of the internet provider.
      description: Contains information about the ISP organization of the remote IP address.
    PortProbeDetails:
      type: array
      items:
        $ref: '#/components/schemas/PortProbeDetail'
    PortProbeDetail:
      type: object
      properties:
        LocalPortDetails:
          $ref: '#/components/schemas/LocalPortDetails'
          description: The local port information of the connection.
        LocalIpDetails:
          $ref: '#/components/schemas/LocalIpDetails'
          description: The local IP information of the connection.
        RemoteIpDetails:
          $ref: '#/components/schemas/RemoteIpDetails'
          description: The remote IP information of the connection.
      description: Contains information about the port probe details.
    PrivateIpAddressDetails:
      type: object
      properties:
        PrivateDnsName:
          $ref: '#/components/schemas/String'
          description: The private DNS name of the EC2 instance.
        PrivateIpAddress:
          $ref: '#/components/schemas/String'
          description: The private IP address of the EC2 instance.
      description: Contains other private IP address information of the EC2 instance.
    ProductCode:
      type: object
      properties:
        Code:
          $ref: '#/components/schemas/String'
          description: The product code information.
        ProductType:
          $ref: '#/components/schemas/String'
          description: The product code type.
      description: Contains information about the product code for the EC2 instance.
    SecurityGroup:
      type: object
      properties:
        GroupId:
          $ref: '#/components/schemas/String'
          description: The security group ID of the EC2 instance.
        GroupName:
          $ref: '#/components/schemas/String'
          description: The security group name of the EC2 instance.
      description: Contains information about the security groups associated with the EC2 instance.
    StartMonitoringMembersRequest:
      type: object
      required:
        - AccountIds
      title: StartMonitoringMembersRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs of the GuardDuty member accounts to start monitoring.
    StopMonitoringMembersRequest:
      type: object
      required:
        - AccountIds
      title: StopMonitoringMembersRequest
      properties:
        AccountIds:
          $ref: '#/components/schemas/AccountIds'
          description: A list of account IDs for the member accounts to stop monitoring.
    Tag:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/String'
          description: The EC2 instance tag key.
        Value:
          $ref: '#/components/schemas/String'
          description: The EC2 instance tag value.
      description: Contains information about a tag associated with the EC2 instance.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      maxItems: 200
    TagResourceRequest:
      type: object
      required:
        - Tags
      title: TagResourceRequest
      properties:
        Tags:
          $ref: '#/components/schemas/TagMap'
          description: The tags to be added to a resource.
    ThreatNames:
      type: array
      items:
        $ref: '#/components/schemas/String'
    ThreatIntelligenceDetail:
      type: object
      properties:
        ThreatListName:
          $ref: '#/components/schemas/String'
          description: The name of the threat intelligence list that triggered the finding.
        ThreatNames:
          $ref: '#/components/schemas/ThreatNames'
          description: A list of names of the threats in the threat intelligence list that triggered the finding.
      description: An instance of a threat intelligence detail that constitutes evidence for the finding.
    UnarchiveFindingsRequest:
      type: object
      required:
        - FindingIds
      title: UnarchiveFindingsRequest
      properties:
        FindingIds:
          $ref: '#/components/schemas/FindingIds'
          description: The IDs of the findings to unarchive.
    UnprocessedAccount:
      type: object
      required:
        - AccountId
        - Result
      properties:
        AccountId:
          $ref: '#/components/schemas/AccountId'
          description: The AWS account ID.
        Result:
          $ref: '#/components/schemas/String'
          description: A reason why the account hasn't been processed.
      description: Contains information about the accounts that weren't processed.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateDetectorRequest:
      type: object
      title: UpdateDetectorRequest
      properties:
        Enable:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether the detector is enabled or not enabled.
        FindingPublishingFrequency:
          $ref: '#/components/schemas/FindingPublishingFrequency'
          description: 'An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.'
    UpdateFilterRequest:
      type: object
      title: UpdateFilterRequest
      properties:
        Description:
          $ref: '#/components/schemas/FilterDescription'
          description: The description of the filter.
        Action:
          $ref: '#/components/schemas/FilterAction'
          description: Specifies the action that is to be applied to the findings that match the filter.
        Rank:
          $ref: '#/components/schemas/FilterRank'
          description: Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        FindingCriteria:
          $ref: '#/components/schemas/FindingCriteria'
          description: Represents the criteria to be used in the filter for querying findings.
    UpdateFindingsFeedbackRequest:
      type: object
      required:
        - FindingIds
        - Feedback
      title: UpdateFindingsFeedbackRequest
      properties:
        FindingIds:
          $ref: '#/components/schemas/FindingIds'
          description: The IDs of the findings that you want to mark as useful or not useful.
        Feedback:
          $ref: '#/components/schemas/Feedback'
          description: The feedback for the finding.
        Comments:
          $ref: '#/components/schemas/String'
          description: Additional feedback about the GuardDuty findings.
    UpdateIPSetRequest:
      type: object
      title: UpdateIPSetRequest
      properties:
        Name:
          $ref: '#/components/schemas/Name'
          description: The unique ID that specifies the IPSet that you want to update.
        Location:
          $ref: '#/components/schemas/Location'
          description: 'The updated URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Activate:
          $ref: '#/components/schemas/Boolean'
          description: The updated Boolean value that specifies whether the IPSet is active or not.
    UpdateOrganizationConfigurationRequest:
      type: object
      required:
        - AutoEnable
      title: UpdateOrganizationConfigurationRequest
      properties:
        AutoEnable:
          $ref: '#/components/schemas/Boolean'
          description: Indicates whether to automatically enable member accounts in the organization.
    UpdatePublishingDestinationRequest:
      type: object
      title: UpdatePublishingDestinationRequest
      properties:
        DestinationProperties:
          $ref: '#/components/schemas/DestinationProperties'
          description: A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.
    UpdateThreatIntelSetRequest:
      type: object
      title: UpdateThreatIntelSetRequest
      properties:
        Name:
          $ref: '#/components/schemas/Name'
          description: The unique ID that specifies the ThreatIntelSet that you want to update.
        Location:
          $ref: '#/components/schemas/Location'
          description: 'The updated URI of the file that contains the ThreateIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.'
        Activate:
          $ref: '#/components/schemas/Boolean'
          description: The updated Boolean value that specifies whether the ThreateIntelSet is active or not.
security:
  - hmac: []
