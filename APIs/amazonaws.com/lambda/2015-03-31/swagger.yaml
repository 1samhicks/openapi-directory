swagger: '2.0'
info:
  version: '2015-03-31'
  x-release: v4
  title: AWS Lambda
  description: '<fullname>AWS Lambda</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Lambda API Reference</i>. The AWS Lambda Developer Guide provides additional information. For the service overview, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is AWS Lambda</a>, and for information about how the service works, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS Lambda: How it Works</a> in the <b>AWS Lambda Developer Guide</b>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: lambda
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2015-03-31.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/lambda/'
host: lambda.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: header
    type: string
    required: true
  Version:
    name: Version
    in: header
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  '/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy':
    post:
      operationId: AddLayerVersionPermission
      description: '<p>Adds permissions to the resource-based policy of a version of a function layer. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all AWS accounts, or all accounts in an organization.</p> <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you specified when you added it.</p>'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/AddLayerVersionPermissionResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '485':
          description: PolicyLengthExceededException
          schema:
            $ref: '#/definitions/PolicyLengthExceededException'
        '486':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AddLayerVersionPermissionRequest'
        - name: LayerName
          type: string
          in: path
          required: true
        - name: VersionNumber
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetLayerVersionPolicy
      description: 'Returns the permission policy for a layer version. For more information, see <a>AddLayerVersionPermission</a>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetLayerVersionPolicyResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetLayerVersionPolicyRequest'
        - name: LayerName
          type: string
          in: path
          required: true
        - name: VersionNumber
          type: string
          in: path
          required: true
  '/2015-03-31/functions/{FunctionName}/policy':
    post:
      operationId: AddPermission
      description: '<p>Adds a permission to the resource policy associated with the specified AWS Lambda function. You use resource policies to grant permissions to event sources that use the <i>push</i> model. In a <i>push</i> model, event sources (such as Amazon S3 and custom applications) invoke your Lambda function. Each permission you add to the resource policy allows an event source permission to invoke the Lambda function. </p> <p>Permissions apply to the Amazon Resource Name (ARN) used to invoke the function, which can be unqualified (the unpublished version of the function), or include a version or alias. If a client uses a version or alias to invoke a function, use the <code>Qualifier</code> parameter to apply permissions to that ARN. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:AddPermission</code> action.</p>'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/AddPermissionResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '484':
          description: PolicyLengthExceededException
          schema:
            $ref: '#/definitions/PolicyLengthExceededException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '486':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AddPermissionRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetPolicy
      description: '<p>Returns the resource policy associated with the specified Lambda function.</p> <p>This action requires permission for the <code>lambda:GetPolicy action.</code> </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPolicyResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPolicyRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
  '/2015-03-31/functions/{FunctionName}/aliases':
    post:
      operationId: CreateAlias
      description: '<p>Creates an alias that points to the specified Lambda function version. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>.</p> <p>Alias names are unique for a given function. This requires permission for the lambda:CreateAlias action.</p>'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/AliasConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateAliasRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListAliases
      description: '<p>Returns list of aliases created for a Lambda function. For each alias, the response includes information such as the alias ARN, description, alias name, and the function version to which it points. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:ListAliases action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListAliasesResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListAliasesRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
  /2015-03-31/event-source-mappings/:
    post:
      operationId: CreateEventSourceMapping
      description: '<p>Creates a mapping between an event source and an AWS Lambda function. Lambda reads items from the event source and triggers the function.</p> <p>For details about each event source type, see the following topics.</p> <ul> <li> <p> <a href="http://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html">Using AWS Lambda with Amazon Kinesis</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html">Using AWS Lambda with Amazon SQS</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html">Using AWS Lambda with Amazon DynamoDB</a> </p> </li> </ul>'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '482':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateEventSourceMappingRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListEventSourceMappings
      description: Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a single event source.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListEventSourceMappingsResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListEventSourceMappingsRequest'
        - name: MaxItems
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: Marker
          type: string
          in: query
          description: Pagination token
          required: false
  /2015-03-31/functions:
    post:
      operationId: CreateFunction
      description: '<p>Creates a new Lambda function. The function configuration is created from the request parameters, and the code for the function is provided by a .zip file. The function name is case-sensitive.</p> <p>This operation requires permission for the <code>lambda:CreateFunction</code> action.</p>'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: CodeStorageExceededException
          schema:
            $ref: '#/definitions/CodeStorageExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateFunctionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2015-03-31/functions/{FunctionName}/aliases/{Name}':
    delete:
      operationId: DeleteAlias
      description: '<p>Deletes the specified Lambda function alias. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:DeleteAlias action.</p>'
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteAliasRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
        - name: Name
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAlias
      description: '<p>Returns the specified alias information such as the alias ARN, description, and function version it is pointing to. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the <code>lambda:GetAlias</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AliasConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetAliasRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
        - name: Name
          type: string
          in: path
          required: true
    put:
      operationId: UpdateAlias
      description: '<p>Using this API you can update the function version to which the alias points and the alias description. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Introduction to AWS Lambda Aliases</a>.</p> <p>This requires permission for the lambda:UpdateAlias action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AliasConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateAliasRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
        - name: Name
          type: string
          in: path
          required: true
  '/2015-03-31/event-source-mappings/{UUID}':
    delete:
      operationId: DeleteEventSourceMapping
      description: Deletes an event source mapping.
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteEventSourceMappingRequest'
        - name: UUID
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetEventSourceMapping
      description: Returns details about an event source mapping.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetEventSourceMappingRequest'
        - name: UUID
          type: string
          in: path
          required: true
    put:
      operationId: UpdateEventSourceMapping
      description: 'Updates an event source mapping. You can change the function that AWS Lambda invokes, or pause invocation and resume later from the same location.'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateEventSourceMappingRequest'
        - name: UUID
          type: string
          in: path
          required: true
  '/2015-03-31/functions/{FunctionName}':
    delete:
      operationId: DeleteFunction
      description: '<p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter. Otherwise, all versions and aliases are deleted. Event source mappings are not deleted.</p> <p>This operation requires permission for the <code>lambda:DeleteFunction</code> action.</p>'
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '484':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFunctionRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetFunction
      description: '<p>Returns the configuration information of the Lambda function and a presigned URL link to the .zip file you uploaded with <a>CreateFunction</a> so you can download the .zip file. Note that the URL is valid for up to 10 minutes. The configuration information is the same information you provided as parameters when uploading the function.</p> <p>Use the <code>Qualifier</code> parameter to retrieve a published version of the function. Otherwise, returns the unpublished version (<code>$LATEST</code>). For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.</p> <p>This operation requires permission for the <code>lambda:GetFunction</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFunctionResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFunctionRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
  '/2017-10-31/functions/{FunctionName}/concurrency':
    delete:
      operationId: DeleteFunctionConcurrency
      description: 'Removes concurrent execution limits from this function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.'
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFunctionConcurrencyRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      operationId: PutFunctionConcurrency
      description: 'Sets a limit on the number of concurrent executions available to this function. It is a subset of your account''s total concurrent execution limit per region. Note that Lambda automatically reserves a buffer of 100 concurrent executions for functions without any reserved concurrency limit. This means if your account limit is 1000, you have a total of 900 available to allocate to individual functions. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Concurrency'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PutFunctionConcurrencyRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
  '/2018-10-31/layers/{LayerName}/versions/{VersionNumber}':
    delete:
      operationId: DeleteLayerVersion
      description: 'Deletes a version of a function layer. Deleted versions can no longer be viewed or added to functions. However, a copy of the version remains in Lambda until no functions refer to it.'
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteLayerVersionRequest'
        - name: LayerName
          type: string
          in: path
          required: true
        - name: VersionNumber
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetLayerVersion
      description: 'Returns information about a version of a function layer, with a link to download the layer archive that''s valid for 10 minutes.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetLayerVersionResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetLayerVersionRequest'
        - name: LayerName
          type: string
          in: path
          required: true
        - name: VersionNumber
          type: string
          in: path
          required: true
  /2016-08-19/account-settings/:
    get:
      operationId: GetAccountSettings
      description: 'Retrieves details about your account''s <a href="http://docs.aws.amazon.com/lambda/latest/dg/limits.html">limits</a> and usage in a region.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetAccountSettingsResponse'
        '480':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '481':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetAccountSettingsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2015-03-31/functions/{FunctionName}/configuration':
    get:
      operationId: GetFunctionConfiguration
      description: '<p>Returns the configuration information of the Lambda function. This the same information you provided as parameters when uploading the function by using <a>CreateFunction</a>.</p> <p>If you are using the versioning feature, you can retrieve this information for a specific function version by using the optional <code>Qualifier</code> parameter and specifying the function version or alias that points to it. If you don''t provide it, the API returns information about the $LATEST version of the function. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>.</p> <p>This operation requires permission for the <code>lambda:GetFunctionConfiguration</code> operation.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFunctionConfigurationRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      operationId: UpdateFunctionConfiguration
      description: '<p>Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function''s code.</p> <p>If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: ResourceConflictException
          schema:
            $ref: '#/definitions/ResourceConflictException'
        '485':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateFunctionConfigurationRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
  '/2015-03-31/functions/{FunctionName}/invocations':
    post:
      operationId: Invoke
      description: '<p>Invokes a Lambda function. For an example, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/with-dynamodb-create-function.html#with-dbb-invoke-manually">Create the Lambda Function and Test It Manually</a>. </p> <p>Specify just a function name to invoke the latest version of the function. To invoke a published version, use the <code>Qualifier</code> parameter to specify a <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">version or alias</a>.</p> <p>If you use the <code>RequestResponse</code> (synchronous) invocation option, the function will be invoked only once. If you use the <code>Event</code> (asynchronous) invocation option, the function will be invoked at least once in response to an event and the function must be idempotent to handle this.</p> <p>For functions with a long timeout, your client may be disconnected during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings.</p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p> <p>The <code>TooManyRequestsException</code> noted below will return the following: <code>ConcurrentInvocationLimitExceeded</code> will be returned if you have no functions with reserved concurrency and have exceeded your account concurrent limit or if a function without reserved concurrency exceeds the account''s unreserved concurrency limit. <code>ReservedFunctionConcurrentInvocationLimitExceeded</code> will be returned when a function with reserved concurrency exceeds its configured concurrency limit. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/InvocationResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidRequestContentException
          schema:
            $ref: '#/definitions/InvalidRequestContentException'
        '483':
          description: RequestTooLargeException
          schema:
            $ref: '#/definitions/RequestTooLargeException'
        '484':
          description: UnsupportedMediaTypeException
          schema:
            $ref: '#/definitions/UnsupportedMediaTypeException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '486':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '487':
          description: EC2UnexpectedException
          schema:
            $ref: '#/definitions/EC2UnexpectedException'
        '488':
          description: SubnetIPAddressLimitReachedException
          schema:
            $ref: '#/definitions/SubnetIPAddressLimitReachedException'
        '489':
          description: ENILimitReachedException
          schema:
            $ref: '#/definitions/ENILimitReachedException'
        '490':
          description: EC2ThrottledException
          schema:
            $ref: '#/definitions/EC2ThrottledException'
        '491':
          description: EC2AccessDeniedException
          schema:
            $ref: '#/definitions/EC2AccessDeniedException'
        '492':
          description: InvalidSubnetIDException
          schema:
            $ref: '#/definitions/InvalidSubnetIDException'
        '493':
          description: InvalidSecurityGroupIDException
          schema:
            $ref: '#/definitions/InvalidSecurityGroupIDException'
        '494':
          description: InvalidZipFileException
          schema:
            $ref: '#/definitions/InvalidZipFileException'
        '495':
          description: KMSDisabledException
          schema:
            $ref: '#/definitions/KMSDisabledException'
        '496':
          description: KMSInvalidStateException
          schema:
            $ref: '#/definitions/KMSInvalidStateException'
        '497':
          description: KMSAccessDeniedException
          schema:
            $ref: '#/definitions/KMSAccessDeniedException'
        '498':
          description: KMSNotFoundException
          schema:
            $ref: '#/definitions/KMSNotFoundException'
        '499':
          description: InvalidRuntimeException
          schema:
            $ref: '#/definitions/InvalidRuntimeException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/InvocationRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2014-11-13/functions/{FunctionName}/invoke-async/':
    post:
      operationId: InvokeAsync
      description: '<important> <p>For asynchronous function invocation, use <a>Invoke</a>.</p> </important> <p>Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch Logs console.</p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p>'
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/InvokeAsyncResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidRequestContentException
          schema:
            $ref: '#/definitions/InvalidRequestContentException'
        '483':
          description: InvalidRuntimeException
          schema:
            $ref: '#/definitions/InvalidRuntimeException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/InvokeAsyncRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /2015-03-31/functions/:
    get:
      operationId: ListFunctions
      description: '<p>Returns a list of your Lambda functions. For each function, the response includes the function configuration information. You must use <a>GetFunction</a> to retrieve the code for your function.</p> <p>This operation requires permission for the <code>lambda:ListFunctions</code> action.</p> <p>If you are using the versioning feature, you can list all of your functions or only <code>$LATEST</code> versions. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListFunctionsResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListFunctionsRequest'
        - name: MaxItems
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: Marker
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2018-10-31/layers/{LayerName}/versions':
    get:
      operationId: ListLayerVersions
      description: 'Lists the versions of a function layer. Versions that have been deleted aren''t listed. Specify a <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only versions that indicate that they''re compatible with that runtime.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListLayerVersionsResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListLayerVersionsRequest'
        - name: LayerName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: PublishLayerVersion
      description: '<p>Creates a function layer from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same version name, a new version is created.</p> <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/PublishLayerVersionResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '484':
          description: CodeStorageExceededException
          schema:
            $ref: '#/definitions/CodeStorageExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PublishLayerVersionRequest'
        - name: LayerName
          type: string
          in: path
          required: true
  /2018-10-31/layers:
    get:
      operationId: ListLayers
      description: 'Lists function layers and shows information about the latest version of each. Specify a <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only layers that indicate that they''re compatible with that runtime.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListLayersResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListLayersRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2017-03-31/tags/{ARN}':
    get:
      operationId: ListTags
      description: 'Returns a list of tags assigned to a function when supplied the function ARN (Amazon Resource Name). For more information on Tagging, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/tagging.html">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListTagsRequest'
        - name: ARN
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: 'Creates a list of tags (key-value pairs) on the Lambda function. Requires the Lambda function ARN (Amazon Resource Name). If a key is specified without a value, Lambda creates a tag with the specified key and a value of null. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/tagging.html">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>. '
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TagResourceRequest'
        - name: ARN
          type: string
          in: path
          required: true
    delete:
      operationId: UntagResource
      description: 'Removes tags from a Lambda function. Requires the function ARN (Amazon Resource Name). For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/tagging.html">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>. '
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UntagResourceRequest'
        - name: ARN
          type: string
          in: path
          required: true
  '/2015-03-31/functions/{FunctionName}/versions':
    get:
      operationId: ListVersionsByFunction
      description: 'Lists all versions of a function. For information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVersionsByFunctionResponse'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListVersionsByFunctionRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: PublishVersion
      description: 'Publishes a version of your function from the current snapshot of $LATEST. That is, AWS Lambda takes a snapshot of the function code and configuration information from $LATEST and publishes a new version. The code and configuration cannot be modified after publication. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. '
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: CodeStorageExceededException
          schema:
            $ref: '#/definitions/CodeStorageExceededException'
        '485':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PublishVersionRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
  '/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}':
    delete:
      operationId: RemoveLayerVersionPermission
      description: 'Removes a statement from the permissions policy for a layer version. For more information, see <a>AddLayerVersionPermission</a>.'
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RemoveLayerVersionPermissionRequest'
        - name: LayerName
          type: string
          in: path
          required: true
        - name: VersionNumber
          type: string
          in: path
          required: true
        - name: StatementId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2015-03-31/functions/{FunctionName}/policy/{StatementId}':
    delete:
      operationId: RemovePermission
      description: '<p>Removes permissions from a function. You can remove individual permissions from an resource policy associated with a Lambda function by providing a statement ID that you provided when you added the permission. When you remove permissions, disable the event source mapping or trigger configuration first to avoid errors.</p> <p>Permissions apply to the Amazon Resource Name (ARN) used to invoke the function, which can be unqualified (the unpublished version of the function), or include a version or alias. If a client uses a version or alias to invoke a function, use the <code>Qualifier</code> parameter to apply permissions to that ARN. For more information about versioning, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>You need permission for the <code>lambda:RemovePermission</code> action.</p>'
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RemovePermissionRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
        - name: StatementId
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2015-03-31/functions/{FunctionName}/code':
    put:
      operationId: UpdateFunctionCode
      description: '<p>Updates the code for the specified Lambda function. This operation must only be used on an existing Lambda function and cannot be used to update the function configuration.</p> <p>If you are using the versioning feature, note this API will always update the $LATEST version of your Lambda function. For information about the versioning feature, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">AWS Lambda Function Versioning and Aliases</a>. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionCode</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FunctionConfiguration'
        '480':
          description: ServiceException
          schema:
            $ref: '#/definitions/ServiceException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          schema:
            $ref: '#/definitions/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: CodeStorageExceededException
          schema:
            $ref: '#/definitions/CodeStorageExceededException'
        '485':
          description: PreconditionFailedException
          schema:
            $ref: '#/definitions/PreconditionFailedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateFunctionCodeRequest'
        - name: FunctionName
          type: string
          in: path
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AddLayerVersionPermissionResponse:
    type: object
    properties:
      Statement:
        $ref: '#/definitions/[object Object]'
        description: The permission statement.
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: A unique identifier for the current revision of the policy.
  AddLayerVersionPermissionRequest:
    type: object
    required:
      - StatementId
      - Action
      - Principal
    properties:
      StatementId:
        $ref: '#/definitions/[object Object]'
        description: An identifier that distinguishes the policy from others on the same layer version.
      Action:
        $ref: '#/definitions/[object Object]'
        description: 'The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>.'
      Principal:
        $ref: '#/definitions/[object Object]'
        description: 'An account ID, or <code>*</code> to grant permission to all AWS accounts.'
      OrganizationId:
        $ref: '#/definitions/[object Object]'
        description: 'With the principal set to <code>*</code>, grant permission to all accounts in the specified organization.'
  ServiceException: {}
  ResourceNotFoundException: {}
  ResourceConflictException: {}
  TooManyRequestsException: {}
  InvalidParameterValueException: {}
  PolicyLengthExceededException: {}
  PreconditionFailedException: {}
  AddPermissionResponse:
    type: object
    example:
      Statement: ID-1
    properties:
      Statement:
        $ref: '#/definitions/[object Object]'
        description: The permission statement you specified in the request. The response returns the same as a string using a backslash ("\") as an escape character in the JSON.
  AddPermissionRequest:
    type: object
    required:
      - StatementId
      - Action
      - Principal
    example:
      Action: 'lambda:InvokeFunction'
      FunctionName: MyFunction
      Principal: s3.amazonaws.com
      SourceAccount: '123456789012'
      SourceArn: 'arn:aws:s3:::examplebucket/*'
      StatementId: ID-1
    properties:
      StatementId:
        $ref: '#/definitions/[object Object]'
        description: A unique statement identifier.
      Action:
        $ref: '#/definitions/[object Object]'
        description: 'The AWS Lambda action you want to allow in this statement. Each Lambda action is a string starting with <code>lambda:</code> followed by the API name . For example, <code>lambda:CreateFunction</code>. You can use wildcard (<code>lambda:*</code>) to grant permission for all AWS Lambda actions. '
      Principal:
        $ref: '#/definitions/[object Object]'
        description: 'The principal who is getting this permission. The principal can be an AWS service (e.g. <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>) for service triggers, or an account ID for cross-account access. If you specify a service as a principal, use the <code>SourceArn</code> parameter to limit who can invoke the function through that service.'
      SourceArn:
        $ref: '#/definitions/[object Object]'
        description: '<p>The Amazon Resource Name of the invoker. </p> <important> <p>If you add a permission to a service principal without providing the source ARN, any AWS account that creates a mapping to your function ARN can invoke your Lambda function.</p> </important>'
      SourceAccount:
        $ref: '#/definitions/[object Object]'
        description: 'This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner. For example, if the <code>SourceArn</code> identifies a bucket, then this is the bucket owner''s account ID. You can use this additional condition to ensure the bucket you specify is owned by a specific account (it is possible the bucket owner deleted the bucket and some other AWS account created the bucket). You can also use this condition to specify all sources (that is, you don''t specify the <code>SourceArn</code>) owned by a specific account. '
      EventSourceToken:
        $ref: '#/definitions/[object Object]'
        description: A unique token that must be supplied by the principal invoking the function. This is currently only used for Alexa Smart Home functions.
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: 'An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn''t match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a> '
  AliasConfiguration:
    type: object
    example:
      AliasArn: 'arn:aws:lambda:us-west-2:123456789012:function:functionAlias'
      Description: ''
      FunctionVersion: '1'
      Name: functionAlias
    properties:
      AliasArn:
        $ref: '#/definitions/[object Object]'
        description: 'Lambda function ARN that is qualified using the alias name as the suffix. For example, if you create an alias called <code>BETA</code> that points to a helloworld function version, the ARN is <code>arn:aws:lambda:aws-regions:acct-id:function:helloworld:BETA</code>.'
      Name:
        $ref: '#/definitions/[object Object]'
        description: Alias name.
      FunctionVersion:
        $ref: '#/definitions/[object Object]'
        description: Function version to which the alias points.
      Description:
        $ref: '#/definitions/[object Object]'
        description: Alias description.
      RoutingConfig:
        $ref: '#/definitions/[object Object]'
        description: 'Specifies an additional function versions the alias points to, allowing you to dictate what percentage of traffic will invoke each version.'
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: Represents the latest updated revision of the function or alias.
    description: Provides configuration information about a Lambda function version alias.
  CreateAliasRequest:
    type: object
    required:
      - Name
      - FunctionVersion
    properties:
      Name:
        $ref: '#/definitions/[object Object]'
        description: Name for the alias you are creating.
      FunctionVersion:
        $ref: '#/definitions/[object Object]'
        description: Lambda function version for which you are creating the alias.
      Description:
        $ref: '#/definitions/[object Object]'
        description: Description of the alias.
      RoutingConfig:
        $ref: '#/definitions/[object Object]'
        description: 'Specifies an additional version your alias can point to, allowing you to dictate what percentage of traffic will invoke each version. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">Traffic Shifting Using Aliases</a>.'
  EventSourceMappingConfiguration:
    type: object
    example:
      BatchSize: 123
      EventSourceArn: 'arn:aws:s3:::examplebucket/*'
      FunctionArn: 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'
      LastModified: '2016-11-21T19:49:20.006+0000'
      LastProcessingResult: ''
      State: ''
      StateTransitionReason: ''
      UUID: 1234xCy789012
    properties:
      UUID:
        $ref: '#/definitions/[object Object]'
        description: The identifier of the event source mapping.
      BatchSize:
        $ref: '#/definitions/[object Object]'
        description: The maximum number of items to retrieve in a single batch.
      EventSourceArn:
        $ref: '#/definitions/[object Object]'
        description: The Amazon Resource Name (ARN) of the event source.
      FunctionArn:
        $ref: '#/definitions/[object Object]'
        description: The ARN of the Lambda function.
      LastModified:
        $ref: '#/definitions/[object Object]'
        description: 'The date that the event source mapping was last updated, in Unix time seconds.'
      LastProcessingResult:
        $ref: '#/definitions/[object Object]'
        description: The result of the last AWS Lambda invocation of your Lambda function.
      State:
        $ref: '#/definitions/[object Object]'
        description: 'The state of the event source mapping. It can be one of the following: <code>Creating</code>, <code>Enabling</code>, <code>Enabled</code>, <code>Disabling</code>, <code>Disabled</code>, <code>Updating</code>, or <code>Deleting</code>.'
      StateTransitionReason:
        $ref: '#/definitions/[object Object]'
        description: 'The cause of the last state change, either <code>User initiated</code> or <code>Lambda initiated</code>.'
    description: A mapping between an AWS resource and an AWS Lambda function. See <a>CreateEventSourceMapping</a> for details.
  CreateEventSourceMappingRequest:
    type: object
    required:
      - EventSourceArn
      - FunctionName
    properties:
      EventSourceArn:
        $ref: '#/definitions/[object Object]'
        description: <p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> </ul>
      FunctionName:
        $ref: '#/definitions/[object Object]'
        description: '<p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it''s limited to 64 characters in length.</p>'
      Enabled:
        $ref: '#/definitions/[object Object]'
        description: Disables the event source mapping to pause polling and invocation.
      BatchSize:
        $ref: '#/definitions/[object Object]'
        description: '<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> </ul>'
      StartingPosition:
        $ref: '#/definitions/[object Object]'
        description: The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams.
      StartingPositionTimestamp:
        $ref: '#/definitions/[object Object]'
        description: 'With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the Unix time in seconds from which to start reading.'
  FunctionConfiguration:
    type: object
    example:
      CodeSha256: LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=
      CodeSize: 123
      Description: ''
      FunctionArn: 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'
      FunctionName: myFunction
      Handler: index.handler
      LastModified: '2016-11-21T19:49:20.006+0000'
      MemorySize: 128
      Role: 'arn:aws:iam::123456789012:role/lambda_basic_execution'
      Runtime: python2.7
      Timeout: 123
      Version: '1'
      VpcConfig: {}
    properties:
      FunctionName:
        $ref: '#/definitions/[object Object]'
        description: The name of the function.
      FunctionArn:
        $ref: '#/definitions/[object Object]'
        description: The function's Amazon Resource Name.
      Runtime:
        $ref: '#/definitions/[object Object]'
        description: The runtime environment for the Lambda function.
      Role:
        $ref: '#/definitions/[object Object]'
        description: The function's execution role.
      Handler:
        $ref: '#/definitions/[object Object]'
        description: The function Lambda calls to begin executing your function.
      CodeSize:
        $ref: '#/definitions/[object Object]'
        description: The size of the function's deployment package in bytes.
      Description:
        $ref: '#/definitions/[object Object]'
        description: The function's description.
      Timeout:
        $ref: '#/definitions/[object Object]'
        description: The amount of time that Lambda allows a function to run before terminating it.
      MemorySize:
        $ref: '#/definitions/[object Object]'
        description: The memory allocated to the function
      LastModified:
        $ref: '#/definitions/[object Object]'
        description: 'The date and time that the function was last updated, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).'
      CodeSha256:
        $ref: '#/definitions/[object Object]'
        description: The SHA256 hash of the function's deployment package.
      Version:
        $ref: '#/definitions/[object Object]'
        description: The version of the Lambda function.
      VpcConfig:
        $ref: '#/definitions/[object Object]'
        description: The function's networking configuration.
      DeadLetterConfig:
        $ref: '#/definitions/[object Object]'
        description: The function's dead letter queue.
      Environment:
        $ref: '#/definitions/[object Object]'
        description: The function's environment variables.
      KMSKeyArn:
        $ref: '#/definitions/[object Object]'
        description: The KMS key used to encrypt the function's environment variables. Only returned if you've configured a customer managed CMK.
      TracingConfig:
        $ref: '#/definitions/[object Object]'
        description: The function's AWS X-Ray tracing configuration.
      MasterArn:
        $ref: '#/definitions/[object Object]'
        description: The ARN of the master function.
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: Represents the latest updated revision of the function or alias.
      Layers:
        $ref: '#/definitions/[object Object]'
        description: 'A list of <a href="http://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a>.'
    description: A Lambda function's configuration settings.
  CreateFunctionRequest:
    type: object
    required:
      - FunctionName
      - Runtime
      - Role
      - Handler
      - Code
    example:
      Code: {}
      Description: ''
      FunctionName: MyFunction
      Handler: souce_file.handler_name
      MemorySize: 128
      Publish: true
      Role: 'arn:aws:iam::123456789012:role/service-role/role-name'
      Runtime: nodejs4.3
      Timeout: 15
      VpcConfig: {}
    properties:
      FunctionName:
        $ref: '#/definitions/[object Object]'
        description: '<p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>'
      Runtime:
        $ref: '#/definitions/[object Object]'
        description: The runtime version for the function.
      Role:
        $ref: '#/definitions/[object Object]'
        description: 'The Amazon Resource Name (ARN) of the function''s <a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role">execution role</a>.'
      Handler:
        $ref: '#/definitions/[object Object]'
        description: 'The name of the method within your code that Lambda calls to execute your function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming Model</a>.'
      Code:
        $ref: '#/definitions/[object Object]'
        description: The code for the function.
      Description:
        $ref: '#/definitions/[object Object]'
        description: A description of the function.
      Timeout:
        $ref: '#/definitions/[object Object]'
        description: The amount of time that Lambda allows a function to run before terminating it. The default is 3 seconds. The maximum allowed value is 900 seconds.
      MemorySize:
        $ref: '#/definitions/[object Object]'
        description: The amount of memory that your function has access to. Increasing the function's memory also increases it's CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
      Publish:
        $ref: '#/definitions/[object Object]'
        description: Set to true to publish the first version of the function during creation.
      VpcConfig:
        $ref: '#/definitions/[object Object]'
        description: 'If your Lambda function accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID.'
      DeadLetterConfig:
        $ref: '#/definitions/[object Object]'
        description: 'A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/dlq.html">Dead Letter Queues</a>. '
      Environment:
        $ref: '#/definitions/[object Object]'
        description: Environment variables that are accessible from function code during execution.
      KMSKeyArn:
        $ref: '#/definitions/[object Object]'
        description: 'The ARN of the KMS key used to encrypt your function''s environment variables. If not provided, AWS Lambda will use a default service key.'
      TracingConfig:
        $ref: '#/definitions/[object Object]'
        description: Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with AWS X-Ray.
      Tags:
        $ref: '#/definitions/[object Object]'
        description: 'The list of tags (key-value pairs) assigned to the new function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/tagging.html">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>.'
      Layers:
        $ref: '#/definitions/[object Object]'
        description: 'A list of <a href="http://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a> to add to the function''s execution environment.'
  CodeStorageExceededException: {}
  DeleteAliasRequest:
    type: object
    example:
      FunctionName: myFunction
      Name: alias
    properties: {}
  DeleteEventSourceMappingRequest:
    type: object
    example:
      UUID: 12345kxodurf3443
    properties: {}
  ResourceInUseException: {}
  DeleteFunctionRequest:
    type: object
    example:
      FunctionName: myFunction
      Qualifier: '1'
    properties: {}
  DeleteFunctionConcurrencyRequest:
    type: object
    properties: {}
  DeleteLayerVersionRequest:
    type: object
    properties: {}
  GetAccountSettingsResponse:
    type: object
    example:
      AccountLimit: {}
      AccountUsage: {}
    properties:
      AccountLimit:
        $ref: '#/definitions/[object Object]'
        description: Limits related to concurrency and code storage.
      AccountUsage:
        $ref: '#/definitions/[object Object]'
        description: The number of functions and amount of storage in use.
  GetAccountSettingsRequest:
    type: object
    example: {}
    properties: {}
  GetAliasRequest:
    type: object
    example:
      FunctionName: myFunction
      Name: myFunctionAlias
    properties: {}
  GetEventSourceMappingRequest:
    type: object
    example:
      UUID: 123489-xxxxx-kdla8d89d7
    properties: {}
  GetFunctionResponse:
    type: object
    example:
      Code:
        Location: somelocation
        RepositoryType: S3
      Configuration:
        CodeSha256: LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=
        CodeSize: 262
        Description: A starter AWS Lambda function.
        Environment:
          Variables:
            S3_BUCKET: test
        FunctionArn: 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'
        FunctionName: myFunction
        Handler: index.handler
        LastModified: '2016-11-21T19:49:20.006+0000'
        MemorySize: 128
        Role: 'arn:aws:iam::123456789012:role/lambda_basic_execution'
        Runtime: nodejs4.3
        Timeout: 3
        Version: $LATEST
        VpcConfig:
          SecurityGroupIds: []
          SubnetIds: []
    properties:
      Configuration:
        $ref: '#/definitions/[object Object]'
        description: The function's configuration.
      Code:
        $ref: '#/definitions/[object Object]'
        description: The function's code.
      Tags:
        $ref: '#/definitions/[object Object]'
        description: 'Returns the list of tags associated with the function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/tagging.html">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>.'
      Concurrency:
        $ref: '#/definitions/[object Object]'
        description: 'The concurrent execution limit set for this function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.'
    description: This response contains the object for the Lambda function location (see <a>FunctionCodeLocation</a>.
  GetFunctionRequest:
    type: object
    example:
      FunctionName: myFunction
      Qualifier: '1'
    properties: {}
  GetFunctionConfigurationRequest:
    type: object
    example:
      FunctionName: myFunction
      Qualifier: '1'
    properties: {}
  GetLayerVersionResponse:
    type: object
    properties:
      Content:
        $ref: '#/definitions/[object Object]'
        description: Details about the layer version.
      LayerArn:
        $ref: '#/definitions/[object Object]'
        description: The Amazon Resource Name (ARN) of the function layer.
      LayerVersionArn:
        $ref: '#/definitions/[object Object]'
        description: The ARN of the layer version.
      Description:
        $ref: '#/definitions/[object Object]'
        description: The description of the version.
      CreatedDate:
        $ref: '#/definitions/[object Object]'
        description: 'The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).'
      Version:
        $ref: '#/definitions/[object Object]'
        description: The version number.
      CompatibleRuntimes:
        $ref: '#/definitions/[object Object]'
        description: The layer's compatible runtimes.
      LicenseInfo:
        $ref: '#/definitions/[object Object]'
        description: The layer's software license.
  GetLayerVersionRequest:
    type: object
    properties: {}
  GetLayerVersionPolicyResponse:
    type: object
    properties:
      Policy:
        $ref: '#/definitions/[object Object]'
        description: The policy document.
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: A unique identifier for the current revision of the policy.
  GetLayerVersionPolicyRequest:
    type: object
    properties: {}
  GetPolicyResponse:
    type: object
    example:
      Policy: ''
    properties:
      Policy:
        $ref: '#/definitions/[object Object]'
        description: The resource policy associated with the specified function. The response returns the same as a string using a backslash ("\") as an escape character in the JSON.
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: Represents the latest updated revision of the function or alias.
  GetPolicyRequest:
    type: object
    example:
      FunctionName: myFunction
      Qualifier: '1'
    properties: {}
  InvocationResponse:
    type: object
    example:
      FunctionError: ''
      LogResult: ''
      Payload: '?'
      StatusCode: 123
    properties:
      StatusCode:
        $ref: '#/definitions/[object Object]'
        description: 'The HTTP status code will be in the 200 range for successful request. For the <code>RequestResponse</code> invocation type this status code will be 200. For the <code>Event</code> invocation type this status code will be 202. For the <code>DryRun</code> invocation type the status code will be 204. '
      Payload:
        $ref: '#/definitions/[object Object]'
        description: <p> It is the JSON representation of the object returned by the Lambda function. This is present only if the invocation type is <code>RequestResponse</code>. </p> <p>In the event of a function error this field contains a message describing the error. For the <code>Handled</code> errors the Lambda function will report this message. For <code>Unhandled</code> errors AWS Lambda reports the message. </p>
    description: 'Upon success, returns an empty response. Otherwise, throws an exception.'
  InvocationRequest:
    type: object
    example:
      ClientContext: MyApp
      FunctionName: MyFunction
      InvocationType: Event
      LogType: Tail
      Payload: 'fileb://file-path/input.json'
      Qualifier: '1'
    properties:
      Payload:
        $ref: '#/definitions/[object Object]'
        description: JSON that you want to provide to your Lambda function as input.
  InvalidRequestContentException: {}
  RequestTooLargeException: {}
  UnsupportedMediaTypeException: {}
  EC2UnexpectedException: {}
  SubnetIPAddressLimitReachedException: {}
  ENILimitReachedException: {}
  EC2ThrottledException: {}
  EC2AccessDeniedException: {}
  InvalidSubnetIDException: {}
  InvalidSecurityGroupIDException: {}
  InvalidZipFileException: {}
  KMSDisabledException: {}
  KMSInvalidStateException: {}
  KMSAccessDeniedException: {}
  KMSNotFoundException: {}
  InvalidRuntimeException: {}
  InvokeAsyncResponse:
    type: object
    example:
      Status: 123
    properties:
      Status:
        $ref: '#/definitions/[object Object]'
        description: It will be 202 upon success.
    description: 'Upon success, it returns empty response. Otherwise, throws an exception.'
  InvokeAsyncRequest:
    type: object
    required:
      - InvokeArgs
    example:
      FunctionName: myFunction
      InvokeArgs: 'fileb://file-path/input.json'
    properties:
      InvokeArgs:
        $ref: '#/definitions/[object Object]'
        description: JSON that you want to provide to your Lambda function as input.
  ListAliasesResponse:
    type: object
    example:
      Aliases: []
      NextMarker: ''
    properties:
      NextMarker:
        $ref: '#/definitions/[object Object]'
        description: 'A string, present if there are more aliases.'
      Aliases:
        $ref: '#/definitions/[object Object]'
        description: A list of aliases.
  ListAliasesRequest:
    type: object
    example:
      FunctionName: myFunction
      FunctionVersion: '1'
      Marker: ''
      MaxItems: 123
    properties: {}
  ListEventSourceMappingsResponse:
    type: object
    properties:
      NextMarker:
        $ref: '#/definitions/[object Object]'
        description: A pagination token that's returned when the response doesn't contain all event source mappings.
      EventSourceMappings:
        $ref: '#/definitions/[object Object]'
        description: A list of event source mappings.
  ListEventSourceMappingsRequest:
    type: object
    properties: {}
  ListFunctionsResponse:
    type: object
    example:
      Functions: []
      NextMarker: ''
    properties:
      NextMarker:
        $ref: '#/definitions/[object Object]'
        description: 'A string, present if there are more functions.'
      Functions:
        $ref: '#/definitions/[object Object]'
        description: A list of Lambda functions.
    description: A list of Lambda functions.
  ListFunctionsRequest:
    type: object
    example:
      Marker: ''
      MaxItems: 123
    properties: {}
  ListLayerVersionsResponse:
    type: object
    properties:
      NextMarker:
        $ref: '#/definitions/[object Object]'
        description: A pagination token returned when the response doesn't contain all versions.
      LayerVersions:
        $ref: '#/definitions/[object Object]'
        description: A list of versions.
  ListLayerVersionsRequest:
    type: object
    properties: {}
  ListLayersResponse:
    type: object
    properties:
      NextMarker:
        $ref: '#/definitions/[object Object]'
        description: A pagination token returned when the response doesn't contain all layers.
      Layers:
        $ref: '#/definitions/[object Object]'
        description: A list of function layers.
  ListLayersRequest:
    type: object
    properties: {}
  ListTagsResponse:
    type: object
    properties:
      Tags:
        $ref: '#/definitions/[object Object]'
        description: 'The list of tags assigned to the function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/tagging.html">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>.'
  ListTagsRequest:
    type: object
    properties: {}
  ListVersionsByFunctionResponse:
    type: object
    example:
      NextMarker: ''
      Versions: []
    properties:
      NextMarker:
        $ref: '#/definitions/[object Object]'
        description: 'A string, present if there are more function versions.'
      Versions:
        $ref: '#/definitions/[object Object]'
        description: A list of Lambda function versions.
  ListVersionsByFunctionRequest:
    type: object
    example:
      FunctionName: myFunction
      Marker: ''
      MaxItems: 123
    properties: {}
  PublishLayerVersionResponse:
    type: object
    properties:
      Content:
        $ref: '#/definitions/[object Object]'
        description: Details about the layer version.
      LayerArn:
        $ref: '#/definitions/[object Object]'
        description: The Amazon Resource Name (ARN) of the function layer.
      LayerVersionArn:
        $ref: '#/definitions/[object Object]'
        description: The ARN of the layer version.
      Description:
        $ref: '#/definitions/[object Object]'
        description: The description of the version.
      CreatedDate:
        $ref: '#/definitions/[object Object]'
        description: 'The date that the layer version was created, in <a href="https://www.w3.org/TR/NOTE-datetime">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD).'
      Version:
        $ref: '#/definitions/[object Object]'
        description: The version number.
      CompatibleRuntimes:
        $ref: '#/definitions/[object Object]'
        description: The layer's compatible runtimes.
      LicenseInfo:
        $ref: '#/definitions/[object Object]'
        description: The layer's software license.
  PublishLayerVersionRequest:
    type: object
    required:
      - Content
    properties:
      Description:
        $ref: '#/definitions/[object Object]'
        description: The description of the version.
      Content:
        $ref: '#/definitions/[object Object]'
        description: The function layer archive.
      CompatibleRuntimes:
        $ref: '#/definitions/[object Object]'
        description: 'A list of compatible <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>.'
      LicenseInfo:
        $ref: '#/definitions/[object Object]'
        description: '<p>The layer''s software license. It can be any of the following:</p> <ul> <li> <p>An <a href="https://spdx.org/licenses/">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>'
  PublishVersionRequest:
    type: object
    example:
      CodeSha256: ''
      Description: ''
      FunctionName: myFunction
    properties:
      CodeSha256:
        $ref: '#/definitions/[object Object]'
        description: 'The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter, the value must match the SHA256 of the $LATEST version for the publication to succeed. You can use the <b>DryRun</b> parameter of <a>UpdateFunctionCode</a> to verify the hash value that will be returned before publishing your new version.'
      Description:
        $ref: '#/definitions/[object Object]'
        description: 'The description for the version you are publishing. If not provided, AWS Lambda copies the description from the $LATEST version.'
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: 'An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn''t match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a>.'
  Concurrency:
    type: object
    properties:
      ReservedConcurrentExecutions:
        $ref: '#/definitions/[object Object]'
        description: 'The number of concurrent executions reserved for this function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.'
  PutFunctionConcurrencyRequest:
    type: object
    required:
      - ReservedConcurrentExecutions
    properties:
      ReservedConcurrentExecutions:
        $ref: '#/definitions/[object Object]'
        description: The concurrent execution limit reserved for this function.
  RemoveLayerVersionPermissionRequest:
    type: object
    properties: {}
  RemovePermissionRequest:
    type: object
    example:
      FunctionName: myFunction
      Qualifier: '1'
      StatementId: role-statement-id
    properties: {}
  TagResourceRequest:
    type: object
    required:
      - Tags
    properties:
      Tags:
        $ref: '#/definitions/[object Object]'
        description: 'The list of tags (key-value pairs) you are assigning to the Lambda function. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/tagging.html">Tagging Lambda Functions</a> in the <b>AWS Lambda Developer Guide</b>.'
  UntagResourceRequest:
    type: object
    properties: {}
  UpdateAliasRequest:
    type: object
    example:
      Description: ''
      FunctionName: myFunction
      FunctionVersion: '1'
      Name: functionAlias
    properties:
      FunctionVersion:
        $ref: '#/definitions/[object Object]'
        description: Using this parameter you can change the Lambda function version to which the alias points.
      Description:
        $ref: '#/definitions/[object Object]'
        description: You can change the description of the alias using this parameter.
      RoutingConfig:
        $ref: '#/definitions/[object Object]'
        description: 'Specifies an additional version your alias can point to, allowing you to dictate what percentage of traffic will invoke each version. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">Traffic Shifting Using Aliases</a>.'
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: 'An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn''t match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a>.'
  UpdateEventSourceMappingRequest:
    type: object
    example:
      BatchSize: 123
      Enabled: true
      FunctionName: myFunction
      UUID: 1234xCy789012
    properties:
      FunctionName:
        $ref: '#/definitions/[object Object]'
        description: '<p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it''s limited to 64 characters in length.</p>'
      Enabled:
        $ref: '#/definitions/[object Object]'
        description: Disables the event source mapping to pause polling and invocation.
      BatchSize:
        $ref: '#/definitions/[object Object]'
        description: '<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> </ul>'
  UpdateFunctionCodeRequest:
    type: object
    example:
      FunctionName: myFunction
      Publish: true
      S3Bucket: myBucket
      S3Key: myKey
      S3ObjectVersion: '1'
      ZipFile: 'fileb://file-path/file.zip'
    properties:
      ZipFile:
        $ref: '#/definitions/[object Object]'
        description: 'The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role.html">Execution Permissions</a>. '
      S3Bucket:
        $ref: '#/definitions/[object Object]'
        description: Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS Region where you are creating the Lambda function.
      S3Key:
        $ref: '#/definitions/[object Object]'
        description: The Amazon S3 object (the deployment package) key name you want to upload.
      S3ObjectVersion:
        $ref: '#/definitions/[object Object]'
        description: The Amazon S3 object (the deployment package) version you want to upload.
      Publish:
        $ref: '#/definitions/[object Object]'
        description: This boolean parameter can be used to request AWS Lambda to update the Lambda function and publish a version as an atomic operation.
      DryRun:
        $ref: '#/definitions/[object Object]'
        description: 'This boolean parameter can be used to test your request to AWS Lambda to update the Lambda function and publish a version as an atomic operation. It will do all necessary computation and validation of your code but will not upload it or a publish a version. Each time this operation is invoked, the <code>CodeSha256</code> hash value of the provided code will also be computed and returned in the response.'
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: 'An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn''t match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias <code>RevisionID</code> using either using using either <a>GetFunction</a> or <a>GetAlias</a>.'
  UpdateFunctionConfigurationRequest:
    type: object
    example:
      Description: ''
      FunctionName: myFunction
      Handler: index.handler
      MemorySize: 128
      Role: 'arn:aws:iam::123456789012:role/lambda_basic_execution'
      Runtime: python2.7
      Timeout: 123
      VpcConfig: {}
    properties:
      Role:
        $ref: '#/definitions/[object Object]'
        description: The Amazon Resource Name (ARN) of the IAM role that Lambda will assume when it executes your function.
      Handler:
        $ref: '#/definitions/[object Object]'
        description: 'The function that Lambda calls to begin executing your function. For Node.js, it is the <code>module-name.export</code> value in your function. '
      Description:
        $ref: '#/definitions/[object Object]'
        description: A short user-defined function description. AWS Lambda does not use this value. Assign a meaningful description as you see fit.
      Timeout:
        $ref: '#/definitions/[object Object]'
        description: The amount of time that Lambda allows a function to run before terminating it. The default is 3 seconds. The maximum allowed value is 900 seconds.
      MemorySize:
        $ref: '#/definitions/[object Object]'
        description: 'The amount of memory, in MB, your Lambda function is given. AWS Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.'
      VpcConfig:
        $ref: '#/definitions/[object Object]'
        description: Specify security groups and subnets in a VPC to which your Lambda function needs access.
      Environment:
        $ref: '#/definitions/[object Object]'
        description: The parent object that contains your environment's configuration settings.
      Runtime:
        $ref: '#/definitions/[object Object]'
        description: The runtime version for the function.
      DeadLetterConfig:
        $ref: '#/definitions/[object Object]'
        description: 'A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/dlq.html">Dead Letter Queues</a>.'
      KMSKeyArn:
        $ref: '#/definitions/[object Object]'
        description: 'The Amazon Resource Name (ARN) of the KMS key used to encrypt your function''s environment variables. If you elect to use the AWS Lambda default service key, pass in an empty string ("") for this parameter.'
      TracingConfig:
        $ref: '#/definitions/[object Object]'
        description: Set <code>Mode</code> to <code>Active</code> to sample and trace a subset of incoming requests with AWS X-Ray.
      RevisionId:
        $ref: '#/definitions/[object Object]'
        description: 'An optional value you can use to ensure you are updating the latest update of the function version or alias. If the <code>RevisionID</code> you pass doesn''t match the latest <code>RevisionId</code> of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias <code>RevisionID</code> using either <a>GetFunction</a> or <a>GetAlias</a>.'
      Layers:
        $ref: '#/definitions/[object Object]'
        description: 'A list of <a href="http://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a> to add to the function''s execution environment.'
  '[object Object]': {}
  AccountLimit:
    type: object
    properties:
      TotalCodeSize:
        $ref: '#/definitions/[object Object]'
        description: 'Maximum size, in bytes, of a code package you can upload per region. The default size is 75 GB. '
      CodeSizeUnzipped:
        $ref: '#/definitions/[object Object]'
        description: 'Size, in bytes, of code/dependencies that you can zip into a deployment package (uncompressed zip/jar size) for uploading. The default limit is 250 MB.'
      CodeSizeZipped:
        $ref: '#/definitions/[object Object]'
        description: 'Size, in bytes, of a single zipped code/dependencies package you can upload for your Lambda function(.zip/.jar file). Try using Amazon S3 for uploading larger files. Default limit is 50 MB.'
      ConcurrentExecutions:
        $ref: '#/definitions/[object Object]'
        description: Number of simultaneous executions of your function per region. The default limit is 1000.
      UnreservedConcurrentExecutions:
        $ref: '#/definitions/[object Object]'
        description: 'The number of concurrent executions available to functions that do not have concurrency limits set. For more information, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.'
    description: 'Provides limits of code size and concurrency associated with the current account and region. For more information or to request a limit increase for concurrent executions, see <a href="http://docs.aws.amazon.com/lambda/latest/dg/limits.html">Lambda Limits</a>. '
  AccountUsage:
    type: object
    properties:
      TotalCodeSize:
        $ref: '#/definitions/[object Object]'
        description: 'Total size, in bytes, of the account''s deployment packages per region.'
      FunctionCount:
        $ref: '#/definitions/[object Object]'
        description: The number of your account's existing functions per region.
    description: Provides code size usage and function count associated with the current account and region.
  Action:
    type: string
    pattern: '(lambda:[*]|lambda:[a-zA-Z]+|[*])'
  AdditionalVersion:
    type: string
    pattern: '[0-9]+'
    minLength: 1
    maxLength: 1024
  Weight:
    type: number
    format: double
    minimum: 0
    maximum: 1
  AdditionalVersionWeights:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/AdditionalVersion'
        value:
          $ref: '#/definitions/Weight'
  Alias:
    type: string
    pattern: '(?!^[0-9]+$)([a-zA-Z0-9-_]+)'
    minLength: 1
    maxLength: 128
  AliasList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  AliasRoutingConfiguration:
    type: object
    properties:
      AdditionalVersionWeights:
        $ref: '#/definitions/[object Object]'
        description: 'The name of the second alias, and the percentage of traffic that is routed to it.'
    description: 'The alias''s <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic shifting</a> configuration.'
  Arn:
    type: string
    pattern: 'arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)'
  BatchSize:
    type: integer
    minimum: 1
    maximum: 10000
  Blob:
    type: string
    format: password
  BlobStream:
    type: string
  Boolean:
    type: boolean
  CompatibleRuntimes:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
    maxItems: 5
  Date:
    type: string
    format: date-time
  DeadLetterConfig:
    type: object
    properties:
      TargetArn:
        $ref: '#/definitions/[object Object]'
        description: The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
    description: 'The <a href="http://docs.aws.amazon.com/lambda/latest/dg/dlq.html">dead letter queue</a> for failed asynchronous invocations.'
  Description:
    type: string
    minLength: 0
    maxLength: 256
  Enabled:
    type: boolean
  Environment:
    type: object
    properties:
      Variables:
        $ref: '#/definitions/[object Object]'
        description: Environment variable key-value pairs.
    description: A function's environment variable settings.
  EnvironmentError:
    type: object
    properties:
      ErrorCode:
        $ref: '#/definitions/[object Object]'
        description: The error code.
      Message:
        $ref: '#/definitions/[object Object]'
        description: The error message.
    description: Error messages for environment variables that could not be applied.
  EnvironmentResponse:
    type: object
    properties:
      Variables:
        $ref: '#/definitions/[object Object]'
        description: Environment variable key-value pairs.
      Error:
        $ref: '#/definitions/[object Object]'
        description: Error messages for environment variables that could not be applied.
    description: The results of a configuration update that applied environment variables.
  EnvironmentVariableName:
    type: string
    pattern: '[a-zA-Z]([a-zA-Z0-9_])+'
    format: password
  EnvironmentVariableValue:
    type: string
    format: password
  EnvironmentVariables:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/EnvironmentVariableName'
        value:
          $ref: '#/definitions/EnvironmentVariableValue'
  EventSourceMappingsList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  EventSourcePosition:
    type: string
    enum:
      - TRIM_HORIZON
      - LATEST
      - AT_TIMESTAMP
  EventSourceToken:
    type: string
    pattern: '[a-zA-Z0-9._\-]+'
    minLength: 0
    maxLength: 256
  FunctionArn:
    type: string
    pattern: 'arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?'
  FunctionCode:
    type: object
    properties:
      ZipFile:
        $ref: '#/definitions/[object Object]'
        description: The base64-encoded contents of your zip file containing your deployment package. AWS SDK and AWS CLI clients handle the encoding for you.
      S3Bucket:
        $ref: '#/definitions/[object Object]'
        description: An Amazon S3 bucket in the same region as your function.
      S3Key:
        $ref: '#/definitions/[object Object]'
        description: The Amazon S3 key of the deployment package.
      S3ObjectVersion:
        $ref: '#/definitions/[object Object]'
        description: 'For versioned objects, the version of the deployment package object to use.'
    description: 'The code for the Lambda function. You can specify either an S3 location, or upload a deployment package directly.'
  FunctionCodeLocation:
    type: object
    properties:
      RepositoryType:
        $ref: '#/definitions/[object Object]'
        description: The repository from which you can download the function.
      Location:
        $ref: '#/definitions/[object Object]'
        description: The presigned URL you can use to download the function's .zip file that you previously uploaded. The URL is valid for up to 10 minutes.
    description: The object for the Lambda function location.
  FunctionList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  FunctionName:
    type: string
    pattern: '(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?'
    minLength: 1
    maxLength: 140
  FunctionVersion:
    type: string
    enum:
      - ALL
  Handler:
    type: string
    pattern: '[^\s]+'
    maxLength: 128
  HttpStatus:
    type: integer
  Integer:
    type: integer
  InvocationType:
    type: string
    enum:
      - Event
      - RequestResponse
      - DryRun
  KMSKeyArn:
    type: string
    pattern: '(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()'
  Layer:
    type: object
    properties:
      Arn:
        $ref: '#/definitions/[object Object]'
        description: The Amazon Resource Name (ARN) of the function layer.
      CodeSize:
        $ref: '#/definitions/[object Object]'
        description: The size of the layer archive in bytes.
    description: A function layer.
  LayerArn:
    type: string
    pattern: 'arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+'
    minLength: 1
    maxLength: 140
  LayerList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  LayerName:
    type: string
    pattern: '(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+'
    minLength: 1
    maxLength: 140
  LayerPermissionAllowedAction:
    type: string
    pattern: 'lambda:GetLayerVersion'
  LayerPermissionAllowedPrincipal:
    type: string
    pattern: '\d{12}|\*|arn:(aws[a-zA-Z-]*):iam::\d{12}:root'
  LayerVersionArn:
    type: string
    pattern: 'arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+'
    minLength: 1
    maxLength: 140
  LayerVersionContentInput:
    type: object
    properties:
      S3Bucket:
        $ref: '#/definitions/[object Object]'
        description: The Amazon S3 bucket of the layer archive.
      S3Key:
        $ref: '#/definitions/[object Object]'
        description: The Amazon S3 key of the layer archive.
      S3ObjectVersion:
        $ref: '#/definitions/[object Object]'
        description: 'For versioned objects, the version of the layer archive object to use.'
      ZipFile:
        $ref: '#/definitions/[object Object]'
        description: The base64-encoded contents of the layer archive. AWS SDK and AWS CLI clients handle the encoding for you.
    description: 'A ZIP archive that contains the contents of the function layer. You can specify either an Amazon S3 location, or upload a layer archive directly.'
  LayerVersionContentOutput:
    type: object
    properties:
      Location:
        $ref: '#/definitions/[object Object]'
        description: A link to the layer archive in Amazon S3 that is valid for 10 minutes.
      CodeSha256:
        $ref: '#/definitions/[object Object]'
        description: The SHA-256 hash of the layer archive.
      CodeSize:
        $ref: '#/definitions/[object Object]'
        description: The size of the layer archive in bytes.
    description: Details about a layer version.
  LayerVersionNumber:
    type: integer
  LayerVersionsList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  LayerVersionsListItem:
    type: object
    properties:
      LayerVersionArn:
        $ref: '#/definitions/[object Object]'
        description: The ARN of the layer version.
      Version:
        $ref: '#/definitions/[object Object]'
        description: The version number.
      Description:
        $ref: '#/definitions/[object Object]'
        description: The description of the version.
      CreatedDate:
        $ref: '#/definitions/[object Object]'
        description: 'The date that the version was created, in ISO 8601 format. For example, <code>2018-11-27T15:10:45.123+0000</code>.'
      CompatibleRuntimes:
        $ref: '#/definitions/[object Object]'
        description: The layer's compatible runtimes.
      LicenseInfo:
        $ref: '#/definitions/[object Object]'
        description: The layer's open-source license.
    description: Details about a layer version.
  LayersList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  LayersListItem:
    type: object
    properties:
      LayerName:
        $ref: '#/definitions/[object Object]'
        description: The name of the layer.
      LayerArn:
        $ref: '#/definitions/[object Object]'
        description: The Amazon Resource Name (ARN) of the function layer.
      LatestMatchingVersion:
        $ref: '#/definitions/[object Object]'
        description: The newest version of the layer.
    description: Details about a function layer.
  LayersReferenceList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  LicenseInfo:
    type: string
    maxLength: 512
  LogType:
    type: string
    enum:
      - None
      - Tail
  Long:
    type: integer
  MasterRegion:
    type: string
    pattern: 'ALL|[a-z]{2}(-gov)?-[a-z]+-\d{1}'
  MaxLayerListItems:
    type: integer
    minimum: 1
    maximum: 50
  MaxListItems:
    type: integer
    minimum: 1
    maximum: 10000
  MemorySize:
    type: integer
    minimum: 128
    maximum: 3008
  NameSpacedFunctionArn:
    type: string
    pattern: 'arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?'
  NamespacedFunctionName:
    type: string
    pattern: '(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?'
    minLength: 1
    maxLength: 170
  NamespacedStatementId:
    type: string
    pattern: '([a-zA-Z0-9-_.]+)'
    minLength: 1
    maxLength: 100
  OrganizationId:
    type: string
    pattern: 'o-[a-z0-9]{10,32}'
  Principal:
    type: string
    pattern: .*
  Qualifier:
    type: string
    pattern: '(|[a-zA-Z0-9$_-]+)'
    minLength: 1
    maxLength: 128
  ReservedConcurrentExecutions:
    type: integer
    minimum: 0
  ResourceArn:
    type: string
    pattern: '(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()'
  RoleArn:
    type: string
    pattern: 'arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
  Runtime:
    type: string
    enum:
      - nodejs
      - nodejs4.3
      - nodejs6.10
      - nodejs8.10
      - java8
      - python2.7
      - python3.6
      - python3.7
      - dotnetcore1.0
      - dotnetcore2.0
      - dotnetcore2.1
      - nodejs4.3-edge
      - go1.x
      - ruby2.5
      - provided
  S3Bucket:
    type: string
    pattern: '^[0-9A-Za-z\.\-_]*(?<!\.)$'
    minLength: 3
    maxLength: 63
  S3Key:
    type: string
    minLength: 1
    maxLength: 1024
  S3ObjectVersion:
    type: string
    minLength: 1
    maxLength: 1024
  SecurityGroupId:
    type: string
  SecurityGroupIds:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
    maxItems: 5
  SensitiveString:
    type: string
    format: password
  SourceOwner:
    type: string
    pattern: '\d{12}'
  StatementId:
    type: string
    pattern: '([a-zA-Z0-9-_]+)'
    minLength: 1
    maxLength: 100
  String:
    type: string
  SubnetId:
    type: string
  SubnetIds:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
    maxItems: 16
  TagKey:
    type: string
  TagKeyList:
    type: array
    items:
      $ref: '#/definitions/[object Object]'
  TagValue:
    type: string
  Tags:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/TagKey'
        value:
          $ref: '#/definitions/TagValue'
  Timeout:
    type: integer
    minimum: 1
  Timestamp:
    type: string
  TracingConfig:
    type: object
    properties:
      Mode:
        $ref: '#/definitions/[object Object]'
        description: The tracing mode.
    description: The function's AWS X-Ray tracing configuration.
  TracingConfigResponse:
    type: object
    properties:
      Mode:
        $ref: '#/definitions/[object Object]'
        description: The tracing mode.
    description: The function's AWS X-Ray tracing configuration.
  TracingMode:
    type: string
    enum:
      - Active
      - PassThrough
  UnreservedConcurrentExecutions:
    type: integer
    minimum: 0
  Version:
    type: string
    pattern: '(\$LATEST|[0-9]+)'
    minLength: 1
    maxLength: 1024
  VpcConfig:
    type: object
    properties:
      SubnetIds:
        $ref: '#/definitions/[object Object]'
        description: A list of VPC subnet IDs.
      SecurityGroupIds:
        $ref: '#/definitions/[object Object]'
        description: A list of VPC security groups IDs.
    description: The VPC security groups and subnets attached to a Lambda function.
  VpcConfigResponse:
    type: object
    properties:
      SubnetIds:
        $ref: '#/definitions/[object Object]'
        description: A list of VPC subnet IDs.
      SecurityGroupIds:
        $ref: '#/definitions/[object Object]'
        description: A list of VPC security groups IDs.
      VpcId:
        $ref: '#/definitions/[object Object]'
        description: The ID of the VPC.
    description: The VPC security groups and subnets attached to a Lambda function.
  VpcId:
    type: string
