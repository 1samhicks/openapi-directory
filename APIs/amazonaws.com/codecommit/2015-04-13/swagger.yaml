swagger: '2.0'
schemes:
  - https
  - http
host: codecommit.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: '<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for AWS CodeCommit API along with usage examples.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <p>Repositories, by calling the following:</p> <ul> <li> <p> <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p> </li> <li> <p> <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which returns information about a specified repository.</p> </li> <li> <p> <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p> </li> <li> <p> <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p> </li> <li> <p> <a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other users of that repository will be able to access it until you send them the new HTTPS or SSH URL to use.</p> </li> </ul> <p>Branches, by calling the following:</p> <ul> <li> <p> <a>CreateBranch</a>, which creates a new branch in a specified repository.</p> </li> <li> <p> <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p> </li> <li> <p> <a>GetBranch</a>, which returns information about a specified branch.</p> </li> <li> <p> <a>ListBranches</a>, which lists all branches for a specified repository.</p> </li> <li> <p> <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p> </li> </ul> <p>Files, by calling the following:</p> <ul> <li> <p> <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p> </li> <li> <p> <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git blob object within a repository.</p> </li> <li> <p> <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p> </li> <li> <p> <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p> </li> </ul> <p>Commits, by calling the following:</p> <ul> <li> <p> <a>BatchGetCommits</a>, which returns information about one or more commits in a repository</p> </li> <li> <p> <a>CreateCommit</a>, which creates a commit for changes to a repository.</p> </li> <li> <p> <a>GetCommit</a>, which returns information about a commit, including commit messages and author and committer information.</p> </li> <li> <p> <a>GetDifferences</a>, which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID or other fully qualified reference).</p> </li> </ul> <p>Merges, by calling the following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p> </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.</p> </li> <li> <p> <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns information about merge conflicts between the source and destination branch in a pull request.</p> </li> <li> <p> <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p> </li> <li> <p> <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p> </li> <li> <p> <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p> </li> </ul> <p>Pull requests, by calling the following:</p> <ul> <li> <p> <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p> </li> <li> <p> <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p> </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p> </li> <li> <p> <a>GetPullRequest</a>, which returns information about a specified pull request.</p> </li> <li> <p> <a>ListPullRequests</a>, which lists all pull requests for a repository.</p> </li> <li> <p> <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.</p> </li> <li> <p> <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.</p> </li> <li> <p> <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.</p> </li> <li> <p> <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p> </li> <li> <p> <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p> </li> </ul> <p>Comments in a repository, by calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p> </li> <li> <p> <a>GetComment</a>, which returns information about a comment on a commit.</p> </li> <li> <p> <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a reply to a comment.</p> </li> <li> <p> <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p> </li> </ul> <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p> <ul> <li> <p> <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p> </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p> </li> </ul> <p>Triggers, by calling the following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>, which returns information about triggers configured for a repository.</p> </li> <li> <p> <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can be used to create or delete triggers.</p> </li> <li> <p> <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger by sending data to the trigger target.</p> </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit User Guide</a>.</p>'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS CodeCommit
  version: '2015-04-13'
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codecommit-2015-04-13.normal.json'
      x-apisguru-direct: true
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: codecommit
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/codecommit/'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
parameters:
  X-Amz-Algorithm:
    in: header
    name: X-Amz-Algorithm
    required: false
    type: string
  X-Amz-Content-Sha256:
    in: header
    name: X-Amz-Content-Sha256
    required: false
    type: string
  X-Amz-Credential:
    in: header
    name: X-Amz-Credential
    required: false
    type: string
  X-Amz-Date:
    in: header
    name: X-Amz-Date
    required: false
    type: string
  X-Amz-Security-Token:
    in: header
    name: X-Amz-Security-Token
    required: false
    type: string
  X-Amz-Signature:
    in: header
    name: X-Amz-Signature
    required: false
    type: string
  X-Amz-SignedHeaders:
    in: header
    name: X-Amz-SignedHeaders
    required: false
    type: string
paths:
  '/#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
      operationId: BatchDescribeMergeConflicts
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BatchDescribeMergeConflictsInput'
        - enum:
            - CodeCommit_20150413.BatchDescribeMergeConflicts
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchDescribeMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '490':
          description: InvalidMaxConflictFilesException
          schema:
            $ref: '#/definitions/InvalidMaxConflictFilesException'
        '491':
          description: InvalidMaxMergeHunksException
          schema:
            $ref: '#/definitions/InvalidMaxMergeHunksException'
        '492':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '493':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '494':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '495':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.BatchGetCommits':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns information about the contents of one or more commits in a repository.
      operationId: BatchGetCommits
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BatchGetCommitsInput'
        - enum:
            - CodeCommit_20150413.BatchGetCommits
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetCommitsOutput'
        '480':
          description: CommitIdsListRequiredException
          schema:
            $ref: '#/definitions/CommitIdsListRequiredException'
        '481':
          description: CommitIdsLimitExceededException
          schema:
            $ref: '#/definitions/CommitIdsLimitExceededException'
        '482':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '483':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '484':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Returns information about one or more repositories.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
      operationId: BatchGetRepositories
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/BatchGetRepositoriesInput'
        - enum:
            - CodeCommit_20150413.BatchGetRepositories
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetRepositoriesOutput'
        '480':
          description: RepositoryNamesRequiredException
          schema:
            $ref: '#/definitions/RepositoryNamesRequiredException'
        '481':
          description: MaximumRepositoryNamesExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryNamesExceededException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.CreateBranch':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Creates a new branch in a repository and points the branch to a commit.</p> <note> <p>Calling the create branch operation does not set a repository''s default branch. To do this, call the update default branch operation.</p> </note>'
      operationId: CreateBranch
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateBranchInput'
        - enum:
            - CodeCommit_20150413.CreateBranch
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: BranchNameExistsException
          schema:
            $ref: '#/definitions/BranchNameExistsException'
        '485':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '486':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '489':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '490':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '491':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '492':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '493':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.CreateCommit':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a commit for a repository on the tip of a specified branch.
      operationId: CreateCommit
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateCommitInput'
        - enum:
            - CodeCommit_20150413.CreateCommit
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          schema:
            $ref: '#/definitions/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          schema:
            $ref: '#/definitions/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          schema:
            $ref: '#/definitions/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          schema:
            $ref: '#/definitions/ParentCommitIdOutdatedException'
        '487':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: FileEntryRequiredException
          schema:
            $ref: '#/definitions/FileEntryRequiredException'
        '492':
          description: MaximumFileEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumFileEntriesExceededException'
        '493':
          description: PutFileEntryConflictException
          schema:
            $ref: '#/definitions/PutFileEntryConflictException'
        '494':
          description: SourceFileOrContentRequiredException
          schema:
            $ref: '#/definitions/SourceFileOrContentRequiredException'
        '495':
          description: FileContentAndSourceFileSpecifiedException
          schema:
            $ref: '#/definitions/FileContentAndSourceFileSpecifiedException'
        '496':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '497':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '498':
          description: SamePathRequestException
          schema:
            $ref: '#/definitions/SamePathRequestException'
        '499':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '500':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '501':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '502':
          description: InvalidDeletionParameterException
          schema:
            $ref: '#/definitions/InvalidDeletionParameterException'
        '503':
          description: RestrictedSourceFileException
          schema:
            $ref: '#/definitions/RestrictedSourceFileException'
        '504':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '505':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '506':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '507':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '508':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '509':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '510':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '511':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '512':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '513':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '514':
          description: NoChangeException
          schema:
            $ref: '#/definitions/NoChangeException'
        '515':
          description: FileNameConflictsWithDirectoryNameException
          schema:
            $ref: '#/definitions/FileNameConflictsWithDirectoryNameException'
        '516':
          description: DirectoryNameConflictsWithFileNameException
          schema:
            $ref: '#/definitions/DirectoryNameConflictsWithFileNameException'
        '517':
          description: FilePathConflictsWithSubmodulePathException
          schema:
            $ref: '#/definitions/FilePathConflictsWithSubmodulePathException'
  '/#X-Amz-Target=CodeCommit_20150413.CreatePullRequest':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a pull request in the specified repository.
      operationId: CreatePullRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreatePullRequestInput'
        - enum:
            - CodeCommit_20150413.CreatePullRequest
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreatePullRequestOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '488':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '489':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '490':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '491':
          description: ReferenceNameRequiredException
          schema:
            $ref: '#/definitions/ReferenceNameRequiredException'
        '492':
          description: InvalidReferenceNameException
          schema:
            $ref: '#/definitions/InvalidReferenceNameException'
        '493':
          description: ReferenceDoesNotExistException
          schema:
            $ref: '#/definitions/ReferenceDoesNotExistException'
        '494':
          description: ReferenceTypeNotSupportedException
          schema:
            $ref: '#/definitions/ReferenceTypeNotSupportedException'
        '495':
          description: TitleRequiredException
          schema:
            $ref: '#/definitions/TitleRequiredException'
        '496':
          description: InvalidTitleException
          schema:
            $ref: '#/definitions/InvalidTitleException'
        '497':
          description: InvalidDescriptionException
          schema:
            $ref: '#/definitions/InvalidDescriptionException'
        '498':
          description: TargetsRequiredException
          schema:
            $ref: '#/definitions/TargetsRequiredException'
        '499':
          description: InvalidTargetsException
          schema:
            $ref: '#/definitions/InvalidTargetsException'
        '500':
          description: TargetRequiredException
          schema:
            $ref: '#/definitions/TargetRequiredException'
        '501':
          description: InvalidTargetException
          schema:
            $ref: '#/definitions/InvalidTargetException'
        '502':
          description: MultipleRepositoriesInPullRequestException
          schema:
            $ref: '#/definitions/MultipleRepositoriesInPullRequestException'
        '503':
          description: MaximumOpenPullRequestsExceededException
          schema:
            $ref: '#/definitions/MaximumOpenPullRequestsExceededException'
        '504':
          description: SourceAndDestinationAreSameException
          schema:
            $ref: '#/definitions/SourceAndDestinationAreSameException'
  '/#X-Amz-Target=CodeCommit_20150413.CreateRepository':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Creates a new, empty repository.'
      operationId: CreateRepository
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateRepositoryInput'
        - enum:
            - CodeCommit_20150413.CreateRepository
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateRepositoryOutput'
        '480':
          description: RepositoryNameExistsException
          schema:
            $ref: '#/definitions/RepositoryNameExistsException'
        '481':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: InvalidRepositoryDescriptionException
          schema:
            $ref: '#/definitions/InvalidRepositoryDescriptionException'
        '484':
          description: RepositoryLimitExceededException
          schema:
            $ref: '#/definitions/RepositoryLimitExceededException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '490':
          description: InvalidTagsMapException
          schema:
            $ref: '#/definitions/InvalidTagsMapException'
        '491':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
        '492':
          description: InvalidSystemTagUsageException
          schema:
            $ref: '#/definitions/InvalidSystemTagUsageException'
        '493':
          description: TagPolicyException
          schema:
            $ref: '#/definitions/TagPolicyException'
  '/#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy, as that strategy does not create a merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p> </note>'
      operationId: CreateUnreferencedMergeCommit
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateUnreferencedMergeCommitInput'
        - enum:
            - CodeCommit_20150413.CreateUnreferencedMergeCommit
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUnreferencedMergeCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '488':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '489':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '490':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '491':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '494':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '495':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '496':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '497':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '498':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '499':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '500':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '501':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '502':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '503':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '504':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '505':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '506':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '507':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '508':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '509':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '510':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '511':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '512':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '513':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '514':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '515':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteBranch':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Deletes a branch from a repository, unless that branch is the default branch for the repository. '
      operationId: DeleteBranch
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteBranchInput'
        - enum:
            - CodeCommit_20150413.DeleteBranch
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteBranchOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '485':
          description: DefaultBranchCannotBeDeletedException
          schema:
            $ref: '#/definitions/DefaultBranchCannotBeDeletedException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Deletes the content of a comment made on a change, file, or commit in a repository.'
      operationId: DeleteCommentContent
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCommentContentInput'
        - enum:
            - CodeCommit_20150413.DeleteCommentContent
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteCommentContentOutput'
        '480':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '481':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '482':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
        '483':
          description: CommentDeletedException
          schema:
            $ref: '#/definitions/CommentDeletedException'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteFile':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file will still exist in the commits prior to the commit that contains the deletion.
      operationId: DeleteFile
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFileInput'
        - enum:
            - CodeCommit_20150413.DeleteFile
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteFileOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          schema:
            $ref: '#/definitions/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          schema:
            $ref: '#/definitions/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          schema:
            $ref: '#/definitions/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          schema:
            $ref: '#/definitions/ParentCommitIdOutdatedException'
        '487':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '488':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '489':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '490':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '491':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '492':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '493':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '494':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '495':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '496':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '497':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '498':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '499':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '500':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '501':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteRepository':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p> <important> <p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</p> </important>'
      operationId: DeleteRepository
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteRepositoryInput'
        - enum:
            - CodeCommit_20150413.DeleteRepository
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '483':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '484':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '485':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '486':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception will be thrown.'
      operationId: DescribeMergeConflicts
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeMergeConflictsInput'
        - description: Pagination limit
          in: query
          name: maxMergeHunks
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.DescribeMergeConflicts
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '490':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '491':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '492':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '493':
          description: InvalidMaxMergeHunksException
          schema:
            $ref: '#/definitions/InvalidMaxMergeHunksException'
        '494':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '495':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '496':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '497':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '498':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '499':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '500':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '501':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '502':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns information about one or more pull request events.
      operationId: DescribePullRequestEvents
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribePullRequestEventsInput'
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.DescribePullRequestEvents
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribePullRequestEventsOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestEventTypeException
          schema:
            $ref: '#/definitions/InvalidPullRequestEventTypeException'
        '484':
          description: InvalidActorArnException
          schema:
            $ref: '#/definitions/InvalidActorArnException'
        '485':
          description: ActorDoesNotExistException
          schema:
            $ref: '#/definitions/ActorDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetBlob':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns the base-64 encoded content of an individual blob within a repository.
      operationId: GetBlob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetBlobInput'
        - enum:
            - CodeCommit_20150413.GetBlob
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetBlobOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: BlobIdRequiredException
          schema:
            $ref: '#/definitions/BlobIdRequiredException'
        '484':
          description: InvalidBlobIdException
          schema:
            $ref: '#/definitions/InvalidBlobIdException'
        '485':
          description: BlobIdDoesNotExistException
          schema:
            $ref: '#/definitions/BlobIdDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '491':
          description: FileTooLargeException
          schema:
            $ref: '#/definitions/FileTooLargeException'
  '/#X-Amz-Target=CodeCommit_20150413.GetBranch':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Returns information about a repository branch, including its name and the last commit ID.'
      operationId: GetBranch
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetBranchInput'
        - enum:
            - CodeCommit_20150413.GetBranch
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetBranchOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '485':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetComment':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Returns the content of a comment made on a change, file, or commit in a repository.'
      operationId: GetComment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCommentInput'
        - enum:
            - CodeCommit_20150413.GetComment
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommentOutput'
        '480':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '481':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '482':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
        '483':
          description: CommentDeletedException
          schema:
            $ref: '#/definitions/CommentDeletedException'
  '/#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns information about comments made on the comparison between two commits.
      operationId: GetCommentsForComparedCommit
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCommentsForComparedCommitInput'
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.GetCommentsForComparedCommit
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommentsForComparedCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns comments made on a pull request.
      operationId: GetCommentsForPullRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCommentsForPullRequestInput'
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.GetCommentsForPullRequest
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommentsForPullRequestOutput'
        '480':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '481':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '482':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '483':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '484':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '485':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '486':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '487':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '488':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '489':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '490':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '491':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '492':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '493':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '494':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '495':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '496':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetCommit':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Returns information about a commit, including commit message and committer information.'
      operationId: GetCommit
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCommitInput'
        - enum:
            - CodeCommit_20150413.GetCommit
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: CommitIdDoesNotExistException
          schema:
            $ref: '#/definitions/CommitIdDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetDifferences':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID or other fully qualified reference). Results can be limited to a specified path.'
      operationId: GetDifferences
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetDifferencesInput'
        - description: Pagination limit
          in: query
          name: MaxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: NextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.GetDifferences
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDifferencesOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '484':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '485':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '488':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '489':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '490':
          description: PathDoesNotExistException
          schema:
            $ref: '#/definitions/PathDoesNotExistException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetFile':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns the base-64 encoded contents of a specified file and its metadata.
      operationId: GetFile
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetFileInput'
        - enum:
            - CodeCommit_20150413.GetFile
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFileOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '484':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '485':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '486':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '487':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '493':
          description: FileTooLargeException
          schema:
            $ref: '#/definitions/FileTooLargeException'
  '/#X-Amz-Target=CodeCommit_20150413.GetFolder':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns the contents of a specified folder in a repository.
      operationId: GetFolder
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetFolderInput'
        - enum:
            - CodeCommit_20150413.GetFolder
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFolderOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '484':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '485':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '486':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '487':
          description: FolderDoesNotExistException
          schema:
            $ref: '#/definitions/FolderDoesNotExistException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetMergeCommit':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns information about a specified merge commit.
      operationId: GetMergeCommit
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetMergeCommitInput'
        - enum:
            - CodeCommit_20150413.GetMergeCommit
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMergeCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '484':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '485':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '486':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '487':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
      operationId: GetMergeConflicts
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetMergeConflictsInput'
        - description: Pagination limit
          in: query
          name: maxConflictFiles
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.GetMergeConflicts
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '490':
          description: InvalidMaxConflictFilesException
          schema:
            $ref: '#/definitions/InvalidMaxConflictFilesException'
        '491':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '492':
          description: InvalidDestinationCommitSpecifierException
          schema:
            $ref: '#/definitions/InvalidDestinationCommitSpecifierException'
        '493':
          description: InvalidSourceCommitSpecifierException
          schema:
            $ref: '#/definitions/InvalidSourceCommitSpecifierException'
        '494':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '495':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '496':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '497':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '498':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '499':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '500':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '501':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetMergeOptions':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Returns information about the merge options available for merging two specified branches. For details about why a particular merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.'
      operationId: GetMergeOptions
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetMergeOptionsInput'
        - enum:
            - CodeCommit_20150413.GetMergeOptions
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMergeOptionsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '484':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '487':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '488':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '489':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '490':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetPullRequest':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Gets information about a pull request in a specified repository.
      operationId: GetPullRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetPullRequestInput'
        - enum:
            - CodeCommit_20150413.GetPullRequest
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPullRequestOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetRepository':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Returns information about a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
      operationId: GetRepository
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetRepositoryInput'
        - enum:
            - CodeCommit_20150413.GetRepository
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Gets information about triggers configured for a repository.
      operationId: GetRepositoryTriggers
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetRepositoryTriggersInput'
        - enum:
            - CodeCommit_20150413.GetRepositoryTriggers
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRepositoryTriggersOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.ListBranches':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Gets information about one or more branches in a repository.
      operationId: ListBranches
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListBranchesInput'
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.ListBranches
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListBranchesOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '488':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
  '/#X-Amz-Target=CodeCommit_20150413.ListPullRequests':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
      operationId: ListPullRequests
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListPullRequestsInput'
        - description: Pagination limit
          in: query
          name: maxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.ListPullRequests
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListPullRequestsOutput'
        '480':
          description: InvalidPullRequestStatusException
          schema:
            $ref: '#/definitions/InvalidPullRequestStatusException'
        '481':
          description: InvalidAuthorArnException
          schema:
            $ref: '#/definitions/InvalidAuthorArnException'
        '482':
          description: AuthorDoesNotExistException
          schema:
            $ref: '#/definitions/AuthorDoesNotExistException'
        '483':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '484':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '485':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.ListRepositories':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Gets information about one or more repositories.
      operationId: ListRepositories
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListRepositoriesInput'
        - description: Pagination token
          in: query
          name: nextToken
          required: false
          type: string
        - enum:
            - CodeCommit_20150413.ListRepositories
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRepositoriesOutput'
        '480':
          description: InvalidSortByException
          schema:
            $ref: '#/definitions/InvalidSortByException'
        '481':
          description: InvalidOrderException
          schema:
            $ref: '#/definitions/InvalidOrderException'
        '482':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
  '/#X-Amz-Target=CodeCommit_20150413.ListTagsForResource':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the AWS CodeCommit User Guide.'
      operationId: ListTagsForResource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListTagsForResourceInput'
        - enum:
            - CodeCommit_20150413.ListTagsForResource
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceOutput'
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          schema:
            $ref: '#/definitions/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          schema:
            $ref: '#/definitions/InvalidResourceArnException'
  '/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Merges two branches using the fast-forward merge strategy.
      operationId: MergeBranchesByFastForward
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MergeBranchesByFastForwardInput'
        - enum:
            - CodeCommit_20150413.MergeBranchesByFastForward
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergeBranchesByFastForwardOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          schema:
            $ref: '#/definitions/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '494':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '495':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '496':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '497':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '498':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Merges two branches using the squash merge strategy.
      operationId: MergeBranchesBySquash
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MergeBranchesBySquashInput'
        - enum:
            - CodeCommit_20150413.MergeBranchesBySquash
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergeBranchesBySquashOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          schema:
            $ref: '#/definitions/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '494':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '495':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '496':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '497':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '498':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '499':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '500':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '501':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '502':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '503':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '504':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '505':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '506':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '507':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '508':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '509':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '510':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '511':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '512':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '513':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '514':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '515':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '516':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '517':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '518':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Merges two specified branches using the three-way merge strategy.
      operationId: MergeBranchesByThreeWay
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MergeBranchesByThreeWayInput'
        - enum:
            - CodeCommit_20150413.MergeBranchesByThreeWay
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergeBranchesByThreeWayOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          schema:
            $ref: '#/definitions/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '494':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '495':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '496':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '497':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '498':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '499':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '500':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '501':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '502':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '503':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '504':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '505':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '506':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '507':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '508':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '509':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '510':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '511':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '512':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '513':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '514':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '515':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '516':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '517':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '518':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.'
      operationId: MergePullRequestByFastForward
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MergePullRequestByFastForwardInput'
        - enum:
            - CodeCommit_20150413.MergePullRequestByFastForward
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergePullRequestByFastForwardOutput'
        '480':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '481':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '482':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '483':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '484':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '485':
          description: TipOfSourceReferenceIsDifferentException
          schema:
            $ref: '#/definitions/TipOfSourceReferenceIsDifferentException'
        '486':
          description: ReferenceDoesNotExistException
          schema:
            $ref: '#/definitions/ReferenceDoesNotExistException'
        '487':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '488':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '489':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '490':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '491':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '492':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '493':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '494':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '495':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '496':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '497':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.'
      operationId: MergePullRequestBySquash
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MergePullRequestBySquashInput'
        - enum:
            - CodeCommit_20150413.MergePullRequestBySquash
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergePullRequestBySquashOutput'
        '480':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '481':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '486':
          description: TipOfSourceReferenceIsDifferentException
          schema:
            $ref: '#/definitions/TipOfSourceReferenceIsDifferentException'
        '487':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '488':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '489':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '490':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '491':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '492':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '493':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '494':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '495':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '496':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '497':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '498':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '499':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '500':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '501':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '502':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '503':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '504':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '505':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '506':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '507':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '508':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '509':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '510':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '511':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '512':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '513':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '514':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '515':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '516':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.'
      operationId: MergePullRequestByThreeWay
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/MergePullRequestByThreeWayInput'
        - enum:
            - CodeCommit_20150413.MergePullRequestByThreeWay
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergePullRequestByThreeWayOutput'
        '480':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '481':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '486':
          description: TipOfSourceReferenceIsDifferentException
          schema:
            $ref: '#/definitions/TipOfSourceReferenceIsDifferentException'
        '487':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '488':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '489':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '490':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '491':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '492':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '493':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '494':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '495':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '496':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '497':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '498':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '499':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '500':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '501':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '502':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '503':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '504':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '505':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '506':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '507':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '508':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '509':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '510':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '511':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '512':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '513':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '514':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '515':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '516':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Posts a comment on the comparison between two commits.
      operationId: PostCommentForComparedCommit
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostCommentForComparedCommitInput'
        - enum:
            - CodeCommit_20150413.PostCommentForComparedCommit
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PostCommentForComparedCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '484':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '485':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '486':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '487':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '488':
          description: InvalidFileLocationException
          schema:
            $ref: '#/definitions/InvalidFileLocationException'
        '489':
          description: InvalidRelativeFileVersionEnumException
          schema:
            $ref: '#/definitions/InvalidRelativeFileVersionEnumException'
        '490':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '491':
          description: InvalidFilePositionException
          schema:
            $ref: '#/definitions/InvalidFilePositionException'
        '492':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '493':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '494':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '495':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '496':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '497':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '498':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '499':
          description: BeforeCommitIdAndAfterCommitIdAreSameException
          schema:
            $ref: '#/definitions/BeforeCommitIdAndAfterCommitIdAreSameException'
        '500':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '501':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '502':
          description: PathDoesNotExistException
          schema:
            $ref: '#/definitions/PathDoesNotExistException'
  '/#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Posts a comment on a pull request.
      operationId: PostCommentForPullRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostCommentForPullRequestInput'
        - enum:
            - CodeCommit_20150413.PostCommentForPullRequest
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PostCommentForPullRequestOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '484':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '485':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '486':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '487':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '488':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '489':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '490':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '491':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '492':
          description: InvalidFileLocationException
          schema:
            $ref: '#/definitions/InvalidFileLocationException'
        '493':
          description: InvalidRelativeFileVersionEnumException
          schema:
            $ref: '#/definitions/InvalidRelativeFileVersionEnumException'
        '494':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '495':
          description: InvalidFilePositionException
          schema:
            $ref: '#/definitions/InvalidFilePositionException'
        '496':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '497':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '498':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '499':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '500':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '501':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '502':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '503':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '504':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '505':
          description: PathDoesNotExistException
          schema:
            $ref: '#/definitions/PathDoesNotExistException'
        '506':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '507':
          description: BeforeCommitIdAndAfterCommitIdAreSameException
          schema:
            $ref: '#/definitions/BeforeCommitIdAndAfterCommitIdAreSameException'
  '/#X-Amz-Target=CodeCommit_20150413.PostCommentReply':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
      operationId: PostCommentReply
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostCommentReplyInput'
        - enum:
            - CodeCommit_20150413.PostCommentReply
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PostCommentReplyOutput'
        '480':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '481':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '482':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '483':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '484':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '485':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '486':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '487':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
  '/#X-Amz-Target=CodeCommit_20150413.PutFile':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.'
      operationId: PutFile
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PutFileInput'
        - enum:
            - CodeCommit_20150413.PutFile
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutFileOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          schema:
            $ref: '#/definitions/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          schema:
            $ref: '#/definitions/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          schema:
            $ref: '#/definitions/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          schema:
            $ref: '#/definitions/ParentCommitIdOutdatedException'
        '487':
          description: FileContentRequiredException
          schema:
            $ref: '#/definitions/FileContentRequiredException'
        '488':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '489':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '490':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '491':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '492':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '493':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '494':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '495':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '496':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '497':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '498':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '499':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '500':
          description: InvalidDeletionParameterException
          schema:
            $ref: '#/definitions/InvalidDeletionParameterException'
        '501':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '502':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '503':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '504':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '505':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '506':
          description: SameFileContentException
          schema:
            $ref: '#/definitions/SameFileContentException'
        '507':
          description: FileNameConflictsWithDirectoryNameException
          schema:
            $ref: '#/definitions/FileNameConflictsWithDirectoryNameException'
        '508':
          description: DirectoryNameConflictsWithFileNameException
          schema:
            $ref: '#/definitions/DirectoryNameConflictsWithFileNameException'
        '509':
          description: FilePathConflictsWithSubmodulePathException
          schema:
            $ref: '#/definitions/FilePathConflictsWithSubmodulePathException'
  '/#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Replaces all triggers for a repository. This can be used to create or delete triggers.
      operationId: PutRepositoryTriggers
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PutRepositoryTriggersInput'
        - enum:
            - CodeCommit_20150413.PutRepositoryTriggers
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutRepositoryTriggersOutput'
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: RepositoryTriggersListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggersListRequiredException'
        '484':
          description: MaximumRepositoryTriggersExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryTriggersExceededException'
        '485':
          description: InvalidRepositoryTriggerNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerNameException'
        '486':
          description: InvalidRepositoryTriggerDestinationArnException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerDestinationArnException'
        '487':
          description: InvalidRepositoryTriggerRegionException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerRegionException'
        '488':
          description: InvalidRepositoryTriggerCustomDataException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerCustomDataException'
        '489':
          description: MaximumBranchesExceededException
          schema:
            $ref: '#/definitions/MaximumBranchesExceededException'
        '490':
          description: InvalidRepositoryTriggerBranchNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerBranchNameException'
        '491':
          description: InvalidRepositoryTriggerEventsException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerEventsException'
        '492':
          description: RepositoryTriggerNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerNameRequiredException'
        '493':
          description: RepositoryTriggerDestinationArnRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerDestinationArnRequiredException'
        '494':
          description: RepositoryTriggerBranchNameListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerBranchNameListRequiredException'
        '495':
          description: RepositoryTriggerEventsListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerEventsListRequiredException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.TagResource':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the AWS CodeCommit User Guide.'
      operationId: TagResource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TagResourceInput'
        - enum:
            - CodeCommit_20150413.TagResource
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          schema:
            $ref: '#/definitions/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          schema:
            $ref: '#/definitions/InvalidResourceArnException'
        '484':
          description: TagsMapRequiredException
          schema:
            $ref: '#/definitions/TagsMapRequiredException'
        '485':
          description: InvalidTagsMapException
          schema:
            $ref: '#/definitions/InvalidTagsMapException'
        '486':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
        '487':
          description: InvalidSystemTagUsageException
          schema:
            $ref: '#/definitions/InvalidSystemTagUsageException'
        '488':
          description: TagPolicyException
          schema:
            $ref: '#/definitions/TagPolicyException'
  '/#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test will send data from the last commit. If no data is available, sample data will be generated.'
      operationId: TestRepositoryTriggers
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TestRepositoryTriggersInput'
        - enum:
            - CodeCommit_20150413.TestRepositoryTriggers
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TestRepositoryTriggersOutput'
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: RepositoryTriggersListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggersListRequiredException'
        '484':
          description: MaximumRepositoryTriggersExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryTriggersExceededException'
        '485':
          description: InvalidRepositoryTriggerNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerNameException'
        '486':
          description: InvalidRepositoryTriggerDestinationArnException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerDestinationArnException'
        '487':
          description: InvalidRepositoryTriggerRegionException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerRegionException'
        '488':
          description: InvalidRepositoryTriggerCustomDataException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerCustomDataException'
        '489':
          description: MaximumBranchesExceededException
          schema:
            $ref: '#/definitions/MaximumBranchesExceededException'
        '490':
          description: InvalidRepositoryTriggerBranchNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerBranchNameException'
        '491':
          description: InvalidRepositoryTriggerEventsException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerEventsException'
        '492':
          description: RepositoryTriggerNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerNameRequiredException'
        '493':
          description: RepositoryTriggerDestinationArnRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerDestinationArnRequiredException'
        '494':
          description: RepositoryTriggerBranchNameListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerBranchNameListRequiredException'
        '495':
          description: RepositoryTriggerEventsListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerEventsListRequiredException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.UntagResource':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the AWS CodeCommit User Guide.'
      operationId: UntagResource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UntagResourceInput'
        - enum:
            - CodeCommit_20150413.UntagResource
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          schema:
            $ref: '#/definitions/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          schema:
            $ref: '#/definitions/InvalidResourceArnException'
        '484':
          description: TagKeysListRequiredException
          schema:
            $ref: '#/definitions/TagKeysListRequiredException'
        '485':
          description: InvalidTagKeysListException
          schema:
            $ref: '#/definitions/InvalidTagKeysListException'
        '486':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
        '487':
          description: InvalidSystemTagUsageException
          schema:
            $ref: '#/definitions/InvalidSystemTagUsageException'
        '488':
          description: TagPolicyException
          schema:
            $ref: '#/definitions/TagPolicyException'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateComment':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Replaces the contents of a comment.
      operationId: UpdateComment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentInput'
        - enum:
            - CodeCommit_20150413.UpdateComment
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateCommentOutput'
        '480':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '481':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '482':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '483':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '484':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
        '485':
          description: CommentNotCreatedByCallerException
          schema:
            $ref: '#/definitions/CommentNotCreatedByCallerException'
        '486':
          description: CommentDeletedException
          schema:
            $ref: '#/definitions/CommentDeletedException'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Sets or changes the default branch name for the specified repository.</p> <note> <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p> </note>'
      operationId: UpdateDefaultBranch
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDefaultBranchInput'
        - enum:
            - CodeCommit_20150413.UpdateDefaultBranch
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '485':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Replaces the contents of the description of a pull request.
      operationId: UpdatePullRequestDescription
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestDescriptionInput'
        - enum:
            - CodeCommit_20150413.UpdatePullRequestDescription
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePullRequestDescriptionOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidDescriptionException
          schema:
            $ref: '#/definitions/InvalidDescriptionException'
        '484':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Updates the status of a pull request. '
      operationId: UpdatePullRequestStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestStatusInput'
        - enum:
            - CodeCommit_20150413.UpdatePullRequestStatus
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePullRequestStatusOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestStatusUpdateException
          schema:
            $ref: '#/definitions/InvalidPullRequestStatusUpdateException'
        '484':
          description: InvalidPullRequestStatusException
          schema:
            $ref: '#/definitions/InvalidPullRequestStatusException'
        '485':
          description: PullRequestStatusRequiredException
          schema:
            $ref: '#/definitions/PullRequestStatusRequiredException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Replaces the title of a pull request.
      operationId: UpdatePullRequestTitle
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestTitleInput'
        - enum:
            - CodeCommit_20150413.UpdatePullRequestTitle
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePullRequestTitleOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: TitleRequiredException
          schema:
            $ref: '#/definitions/TitleRequiredException'
        '484':
          description: InvalidTitleException
          schema:
            $ref: '#/definitions/InvalidTitleException'
        '485':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: <p>Sets or changes the comment or description for a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
      operationId: UpdateRepositoryDescription
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRepositoryDescriptionInput'
        - enum:
            - CodeCommit_20150413.UpdateRepositoryDescription
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: InvalidRepositoryDescriptionException
          schema:
            $ref: '#/definitions/InvalidRepositoryDescriptionException'
        '484':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '485':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '486':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '487':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '488':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Renames a repository. The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix ".git" is prohibited. For a full description of the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit User Guide.'
      operationId: UpdateRepositoryName
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRepositoryNameInput'
        - enum:
            - CodeCommit_20150413.UpdateRepositoryName
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameExistsException
          schema:
            $ref: '#/definitions/RepositoryNameExistsException'
        '482':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '483':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
definitions:
  AccountId:
    type: string
  ActorDoesNotExistException: {}
  AdditionalData:
    type: string
  Arn:
    type: string
  AuthorDoesNotExistException: {}
  BatchDescribeMergeConflictsError:
    description: Information about errors in a BatchDescribeMergeConflicts operation.
    properties:
      exceptionName:
        $ref: '#/definitions/ExceptionName'
        description: The name of the exception.
      filePath:
        $ref: '#/definitions/Path'
        description: The path to the file.
      message:
        $ref: '#/definitions/Message'
        description: The message provided by the exception.
    required:
      - filePath
      - exceptionName
      - message
    type: object
  BatchDescribeMergeConflictsErrors:
    items:
      $ref: '#/definitions/BatchDescribeMergeConflictsError'
    type: array
  BatchDescribeMergeConflictsInput:
    properties:
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      filePaths:
        $ref: '#/definitions/FilePaths'
        description: 'The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.'
      maxConflictFiles:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of files to include in the output.
      maxMergeHunks:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of merge hunks to include in the output.
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge option or strategy you want to use to merge the code.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the merge conflicts you want to review.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
    required:
      - repositoryName
      - destinationCommitSpecifier
      - sourceCommitSpecifier
      - mergeOption
    type: object
  BatchDescribeMergeConflictsOutput:
    properties:
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
      conflicts:
        $ref: '#/definitions/Conflicts'
        description: 'A list of conflicts for each file, including the conflict metadata and the hunks of the differences between the files.'
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      errors:
        $ref: '#/definitions/BatchDescribeMergeConflictsErrors'
        description: A list of any errors returned while describing the merge conflicts for each file.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
    required:
      - conflicts
      - destinationCommitId
      - sourceCommitId
    type: object
  BatchGetCommitsError:
    description: Returns information about errors in a BatchGetCommits operation.
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: A commit ID that either could not be found or was not in a valid format.
      errorCode:
        $ref: '#/definitions/ErrorCode'
        description: An error code that specifies whether the commit ID was not valid or not found.
      errorMessage:
        $ref: '#/definitions/ErrorMessage'
        description: An error message that provides detail about why the commit ID either was not found or was not valid.
    type: object
  BatchGetCommitsErrorsList:
    items:
      $ref: '#/definitions/BatchGetCommitsError'
    type: array
  BatchGetCommitsInput:
    properties:
      commitIds:
        $ref: '#/definitions/CommitIdsInputList'
        description: <p>The full commit IDs of the commits to get information about.</p> <note> <p>You must supply the full SHAs of each commit. You cannot use shortened SHAs.</p> </note>
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the commits.
    required:
      - commitIds
      - repositoryName
    type: object
  BatchGetCommitsOutput:
    properties:
      commits:
        $ref: '#/definitions/CommitObjectsList'
        description: 'An array of commit data type objects, each of which contains information about a specified commit.'
      errors:
        $ref: '#/definitions/BatchGetCommitsErrorsList'
        description: 'Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA or that commit was not found in the specified repository, the ID will return an error object with additional information.'
    type: object
  BatchGetRepositoriesInput:
    description: Represents the input of a batch get repositories operation.
    properties:
      repositoryNames:
        $ref: '#/definitions/RepositoryNameList'
        description: The names of the repositories to get information about.
    required:
      - repositoryNames
    type: object
  BatchGetRepositoriesOutput:
    description: Represents the output of a batch get repositories operation.
    properties:
      repositories:
        $ref: '#/definitions/RepositoryMetadataList'
        description: A list of repositories returned by the batch get repositories operation.
      repositoriesNotFound:
        $ref: '#/definitions/RepositoryNotFoundList'
        description: Returns a list of repository names for which information could not be found.
    type: object
  BeforeCommitIdAndAfterCommitIdAreSameException: {}
  BlobIdDoesNotExistException: {}
  BlobIdRequiredException: {}
  BlobMetadata:
    description: Returns information about a specific Git blob object.
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The full ID of the blob.
      mode:
        $ref: '#/definitions/Mode'
        description: '<p>The file mode permissions of the blob. File mode permission codes include:</p> <ul> <li> <p> <code>100644</code> indicates read/write</p> </li> <li> <p> <code>100755</code> indicates read/write/execute</p> </li> <li> <p> <code>160000</code> indicates a submodule</p> </li> <li> <p> <code>120000</code> indicates a symlink</p> </li> </ul>'
      path:
        $ref: '#/definitions/Path'
        description: 'The path to the blob and any associated file name, if any.'
    type: object
  BranchDoesNotExistException: {}
  BranchInfo:
    description: Returns information about a branch.
    properties:
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch.
      commitId:
        $ref: '#/definitions/CommitId'
        description: The ID of the last commit made to the branch.
    type: object
  BranchName:
    maxLength: 256
    minLength: 1
    type: string
  BranchNameExistsException: {}
  BranchNameIsTagNameException: {}
  BranchNameList:
    items:
      $ref: '#/definitions/BranchName'
    type: array
  BranchNameRequiredException: {}
  CapitalBoolean:
    type: boolean
  ChangeTypeEnum:
    enum:
      - A
      - M
      - D
    type: string
  ClientRequestToken:
    type: string
  ClientRequestTokenRequiredException: {}
  CloneUrlHttp:
    type: string
  CloneUrlSsh:
    type: string
  Comment:
    description: Returns information about a specific comment.
    properties:
      authorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the person who posted the comment.
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.'
      commentId:
        $ref: '#/definitions/CommentId'
        description: The system-generated comment ID.
      content:
        $ref: '#/definitions/Content'
        description: The content of the comment.
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date and time the comment was created, in timestamp format.'
      deleted:
        $ref: '#/definitions/IsCommentDeleted'
        description: A Boolean value indicating whether the comment has been deleted.
      inReplyTo:
        $ref: '#/definitions/CommentId'
        description: 'The ID of the comment for which this comment is a reply, if any.'
      lastModifiedDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The date and time the comment was most recently modified, in timestamp format.'
    type: object
  CommentContentRequiredException: {}
  CommentContentSizeLimitExceededException: {}
  CommentDeletedException: {}
  CommentDoesNotExistException: {}
  CommentId:
    type: string
  CommentIdRequiredException: {}
  CommentNotCreatedByCallerException: {}
  Comments:
    items:
      $ref: '#/definitions/Comment'
    type: array
  CommentsForComparedCommit:
    description: Returns information about comments on the comparison between two commits.
    properties:
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the commit used to establish the 'after' of the comparison.
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit used to establish the 'after' of the comparison.
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the commit used to establish the 'before' of the comparison.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit used to establish the 'before' of the comparison.
      comments:
        $ref: '#/definitions/Comments'
        description: An array of comment objects. Each comment object contains information about a comment on the comparison between commits.
      location:
        $ref: '#/definitions/Location'
        description: 'Location information about the comment on the comparison, including the file name, line number, and whether the version of the file where the comment was made is ''BEFORE'' or ''AFTER''.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the compared commits.
    type: object
  CommentsForComparedCommitData:
    items:
      $ref: '#/definitions/CommentsForComparedCommit'
    type: array
  CommentsForPullRequest:
    description: Returns information about comments on a pull request.
    properties:
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the file on which you want to comment on the source commit.
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'he full commit ID of the commit that was the tip of the source branch at the time the comment was made. '
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the file on which you want to comment on the destination commit.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit that was the tip of the destination branch when the pull request was created. This commit will be superceded by the after commit in the source branch when and if you merge the source branch into the destination branch.
      comments:
        $ref: '#/definitions/Comments'
        description: An array of comment objects. Each comment object contains information about a comment on the pull request.
      location:
        $ref: '#/definitions/Location'
        description: 'Location information about the comment on the pull request, including the file name, line number, and whether the version of the file where the comment was made is ''BEFORE'' (destination branch) or ''AFTER'' (source branch).'
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request.
    type: object
  CommentsForPullRequestData:
    items:
      $ref: '#/definitions/CommentsForPullRequest'
    type: array
  Commit:
    description: Returns information about a specific commit.
    properties:
      additionalData:
        $ref: '#/definitions/AdditionalData'
        description: Any additional data associated with the specified commit.
      author:
        $ref: '#/definitions/UserInfo'
        description: 'Information about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.'
      commitId:
        $ref: '#/definitions/ObjectId'
        description: 'The full SHA of the specified commit. '
      committer:
        $ref: '#/definitions/UserInfo'
        description: '<p>Information about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git.</p> <p>For more information about the difference between an author and a committer in Git, see <a href="http://git-scm.com/book/ch2-3.html">Viewing the Commit History</a> in Pro Git by Scott Chacon and Ben Straub.</p>'
      message:
        $ref: '#/definitions/Message'
        description: The commit message associated with the specified commit.
      parents:
        $ref: '#/definitions/ParentList'
        description: A list of parent commits for the specified commit. Each parent commit ID is the full commit ID.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: Tree information for the specified commit.
    type: object
  CommitDoesNotExistException: {}
  CommitId:
    type: string
  CommitIdDoesNotExistException: {}
  CommitIdRequiredException: {}
  CommitIdsInputList:
    items:
      $ref: '#/definitions/ObjectId'
    type: array
  CommitIdsLimitExceededException: {}
  CommitIdsListRequiredException: {}
  CommitMessageLengthExceededException: {}
  CommitName:
    type: string
  CommitObjectsList:
    items:
      $ref: '#/definitions/Commit'
    type: array
  CommitRequiredException: {}
  ConcurrentReferenceUpdateException: {}
  Conflict:
    description: Information about conflicts in a merge operation.
    properties:
      conflictMetadata:
        $ref: '#/definitions/ConflictMetadata'
        description: Metadata about a conflict in a merge operation.
      mergeHunks:
        $ref: '#/definitions/MergeHunks'
        description: A list of hunks that contain the differences between files or lines causing the conflict.
    type: object
  ConflictDetailLevelTypeEnum:
    enum:
      - FILE_LEVEL
      - LINE_LEVEL
    type: string
  ConflictMetadata:
    description: Information about the metadata for a conflict in a merge operation.
    properties:
      contentConflict:
        $ref: '#/definitions/IsContentConflict'
        description: A boolean value indicating whether there are conflicts in the content of a file.
      fileModeConflict:
        $ref: '#/definitions/IsFileModeConflict'
        description: A boolean value indicating whether there are conflicts in the file mode of a file.
      fileModes:
        $ref: '#/definitions/FileModes'
        description: 'The file modes of the file in the source, destination, and base of the merge.'
      filePath:
        $ref: '#/definitions/Path'
        description: The path of the file that contains conflicts.
      fileSizes:
        $ref: '#/definitions/FileSizes'
        description: 'The file sizes of the file in the source, destination, and base of the merge.'
      isBinaryFile:
        $ref: '#/definitions/IsBinaryFile'
        description: 'A boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.'
      mergeOperations:
        $ref: '#/definitions/MergeOperations'
        description: 'Whether an add, modify, or delete operation caused the conflict between the source and destination of the merge.'
      numberOfConflicts:
        $ref: '#/definitions/NumberOfConflicts'
        description: 'The number of conflicts, including both hunk conflicts and metadata conflicts.'
      objectTypeConflict:
        $ref: '#/definitions/IsObjectTypeConflict'
        description: 'A boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.'
      objectTypes:
        $ref: '#/definitions/ObjectTypes'
        description: Information about any object type conflicts in a merge operation.
    type: object
  ConflictMetadataList:
    items:
      $ref: '#/definitions/ConflictMetadata'
    type: array
  ConflictResolution:
    description: A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
    properties:
      deleteFiles:
        $ref: '#/definitions/DeleteFileEntries'
        description: Files that will be deleted as part of the merge conflict resolution.
      replaceContents:
        $ref: '#/definitions/ReplaceContentEntries'
        description: Files that will have content replaced as part of the merge conflict resolution.
      setFileModes:
        $ref: '#/definitions/SetFileModeEntries'
        description: File modes that will be set as part of the merge conflict resolution.
    type: object
  ConflictResolutionStrategyTypeEnum:
    enum:
      - NONE
      - ACCEPT_SOURCE
      - ACCEPT_DESTINATION
      - AUTOMERGE
    type: string
  Conflicts:
    items:
      $ref: '#/definitions/Conflict'
    type: array
  Content:
    type: string
  CreateBranchInput:
    description: Represents the input of a create branch operation.
    properties:
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the new branch to create.
      commitId:
        $ref: '#/definitions/CommitId'
        description: The ID of the commit to point the new branch to.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository in which you want to create the new branch.
    required:
      - repositoryName
      - branchName
      - commitId
    type: object
  CreateCommitInput:
    properties:
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information will be used as both the author and committer for the commit.
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch where you will create the commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: 'The commit message you want to include as part of creating the commit. Commit messages are limited to 256 KB. If no message is specified, a default message will be used.'
      deleteFiles:
        $ref: '#/definitions/DeleteFileEntries'
        description: The files to delete in this commit. These files will still exist in prior commits.
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person who created the commit.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.'
      parentCommitId:
        $ref: '#/definitions/CommitId'
        description: 'The ID of the commit that is the parent of the commit you will create. If this is an empty repository, this is not required.'
      putFiles:
        $ref: '#/definitions/PutFileEntries'
        description: The files to add or update in this commit.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you will create the commit.
      setFileModes:
        $ref: '#/definitions/SetFileModeEntries'
        description: The file modes to update for files in this commit.
    required:
      - repositoryName
      - branchName
    type: object
  CreateCommitOutput:
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains your committed file changes.
      filesAdded:
        $ref: '#/definitions/FilesMetadata'
        description: The files added as part of the committed file changes.
      filesDeleted:
        $ref: '#/definitions/FilesMetadata'
        description: The files deleted as part of the committed file changes.
      filesUpdated:
        $ref: '#/definitions/FilesMetadata'
        description: The files updated as part of the commited file changes.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the commited file changes.
    type: object
  CreatePullRequestInput:
    properties:
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: '<p>A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.</p> <note> <p>The AWS SDKs prepopulate client request tokens. If using an AWS SDK, you do not have to generate an idempotency token, as this will be done for you.</p> </note>'
      description:
        $ref: '#/definitions/Description'
        description: A description of the pull request.
      targets:
        $ref: '#/definitions/TargetList'
        description: 'The targets for the pull request, including the source of the code to be reviewed (the source branch), and the destination where the creator of the pull request intends the code to be merged after the pull request is closed (the destination branch).'
      title:
        $ref: '#/definitions/Title'
        description: The title of the pull request. This title will be used to identify the pull request to other users in the repository.
    required:
      - title
      - targets
    type: object
  CreatePullRequestOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the newly created pull request.
    required:
      - pullRequest
    type: object
  CreateRepositoryInput:
    description: Represents the input of a create repository operation.
    properties:
      repositoryDescription:
        $ref: '#/definitions/RepositoryDescription'
        description: <p>A comment or description about the new repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p> </note>
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: '<p>The name of the new repository to be created.</p> <note> <p>The repository name must be unique across the calling AWS account. In addition, repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For a full description of the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit User Guide. The suffix ".git" is prohibited.</p> </note>'
      tags:
        $ref: '#/definitions/TagsMap'
        description: One or more tag key-value pairs to use when tagging this repository.
    required:
      - repositoryName
    type: object
  CreateRepositoryOutput:
    description: Represents the output of a create repository operation.
    properties:
      repositoryMetadata:
        $ref: '#/definitions/RepositoryMetadata'
        description: Information about the newly created repository.
    type: object
  CreateUnreferencedMergeCommitInput:
    properties:
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the unreferenced commit. This information will be used as both the author and committer for the commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message for the unreferenced commit.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      email:
        $ref: '#/definitions/Email'
        description: The email address for the person who created the unreferenced commit.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.'
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge option or strategy you want to use to merge the code.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to create the unreferenced merge commit.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
      - mergeOption
    type: object
  CreateUnreferencedMergeCommitOutput:
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains your merge results.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the merge results.
    type: object
  CreationDate:
    format: date-time
    type: string
  Date:
    type: string
  DefaultBranchCannotBeDeletedException: {}
  DeleteBranchInput:
    description: Represents the input of a delete branch operation.
    properties:
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch to delete.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the branch to be deleted.
    required:
      - repositoryName
      - branchName
    type: object
  DeleteBranchOutput:
    description: Represents the output of a delete branch operation.
    properties:
      deletedBranch:
        $ref: '#/definitions/BranchInfo'
        description: 'Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.'
    type: object
  DeleteCommentContentInput:
    properties:
      commentId:
        $ref: '#/definitions/CommentId'
        description: 'The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
    required:
      - commentId
    type: object
  DeleteCommentContentOutput:
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: Information about the comment you just deleted.
    type: object
  DeleteFileEntries:
    items:
      $ref: '#/definitions/DeleteFileEntry'
    type: array
  DeleteFileEntry:
    description: A file that will be deleted as part of a commit.
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path of the file that will be deleted, including the name of the file.'
    required:
      - filePath
    type: object
  DeleteFileInput:
    properties:
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch where the commit will be made deleting the file.
      commitMessage:
        $ref: '#/definitions/Message'
        description: 'The commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message will be used.'
      email:
        $ref: '#/definitions/Email'
        description: 'The email address for the commit that deletes the file. If no email address is specified, the email address will be left blank.'
      filePath:
        $ref: '#/definitions/Path'
        description: 'The fully-qualified path to the file that will be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.'
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'Specifies whether to delete the folder or directory that contains the file you want to delete if that file is the only object in the folder or directory. By default, empty folders will be deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 will also delete the empty folders dir4, dir3, and dir2.'
      name:
        $ref: '#/definitions/Name'
        description: 'The name of the author of the commit that deletes the file. If no name is specified, the user''s ARN will be used as the author name and committer name.'
      parentCommitId:
        $ref: '#/definitions/CommitId'
        description: The ID of the commit that is the tip of the branch where you want to create the commit that will delete the file. This must be the HEAD commit for the branch. The commit that deletes the file will be created from this commit ID.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the file to delete.
    required:
      - repositoryName
      - branchName
      - filePath
      - parentCommitId
    type: object
  DeleteFileOutput:
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID removed from the tree as part of deleting the file.
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains the change that deletes the file.
      filePath:
        $ref: '#/definitions/Path'
        description: 'The fully-qualified path to the file that will be deleted, including the full name and extension of that file.'
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the delete file change.
    required:
      - commitId
      - blobId
      - treeId
      - filePath
    type: object
  DeleteRepositoryInput:
    description: Represents the input of a delete repository operation.
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to delete.
    required:
      - repositoryName
    type: object
  DeleteRepositoryOutput:
    description: Represents the output of a delete repository operation.
    properties:
      repositoryId:
        $ref: '#/definitions/RepositoryId'
        description: The ID of the repository that was deleted.
    type: object
  DescribeMergeConflictsInput:
    properties:
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      filePath:
        $ref: '#/definitions/Path'
        description: 'The path of the target files used to describe the conflicts. '
      maxMergeHunks:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of merge hunks to include in the output.
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge option or strategy you want to use to merge the code.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to get information about a merge conflict.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
    required:
      - repositoryName
      - destinationCommitSpecifier
      - sourceCommitSpecifier
      - mergeOption
      - filePath
    type: object
  DescribeMergeConflictsOutput:
    properties:
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
      conflictMetadata:
        $ref: '#/definitions/ConflictMetadata'
        description: Contains metadata about the conflicts found in the merge.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      mergeHunks:
        $ref: '#/definitions/MergeHunks'
        description: A list of merge hunks of the differences between the files or lines.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
    required:
      - conflictMetadata
      - mergeHunks
      - destinationCommitId
      - sourceCommitId
    type: object
  DescribePullRequestEventsInput:
    properties:
      actorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with additional commits or changing the status of a pull request.
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-negative integer used to limit the number of returned results. The default is 100 events, which is also the maximum number of events that can be returned in a result.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      pullRequestEventType:
        $ref: '#/definitions/PullRequestEventType'
        description: Optional. The pull request event type about which you want to return information.
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
    required:
      - pullRequestId
    type: object
  DescribePullRequestEventsOutput:
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
      pullRequestEvents:
        $ref: '#/definitions/PullRequestEventList'
        description: Information about the pull request events.
    required:
      - pullRequestEvents
    type: object
  Description:
    maxLength: 10240
    type: string
  Difference:
    description: Returns information about a set of differences for a commit specifier.
    properties:
      afterBlob:
        $ref: '#/definitions/BlobMetadata'
        description: 'Information about an <code>afterBlob</code> data type object, including the ID, the file mode permission code, and the path.'
      beforeBlob:
        $ref: '#/definitions/BlobMetadata'
        description: 'Information about a <code>beforeBlob</code> data type object, including the ID, the file mode permission code, and the path.'
      changeType:
        $ref: '#/definitions/ChangeTypeEnum'
        description: 'Whether the change type of the difference is an addition (A), deletion (D), or modification (M).'
    type: object
  DifferenceList:
    items:
      $ref: '#/definitions/Difference'
    type: array
  DirectoryNameConflictsWithFileNameException: {}
  Email:
    type: string
  EncryptionIntegrityChecksFailedException: {}
  EncryptionKeyAccessDeniedException: {}
  EncryptionKeyDisabledException: {}
  EncryptionKeyNotFoundException: {}
  EncryptionKeyUnavailableException: {}
  ErrorCode:
    type: string
  ErrorMessage:
    type: string
  EventDate:
    format: date-time
    type: string
  ExceptionName:
    type: string
  File:
    description: Returns information about a file in a repository.
    properties:
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully-qualified path to the file in the repository.
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID that contains the file information.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the file from the folder where the query originated.
    type: object
  FileContent:
    maxLength: 6291456
    type: string
  FileContentAndSourceFileSpecifiedException: {}
  FileContentRequiredException: {}
  FileContentSizeLimitExceededException: {}
  FileDoesNotExistException: {}
  FileEntryRequiredException: {}
  FileList:
    items:
      $ref: '#/definitions/File'
    type: array
  FileMetadata:
    description: 'A file that will be added, updated, or deleted as part of a commit.'
    properties:
      absolutePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file that will be added or updated, including the name of the file.'
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID that contains the file information.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
    type: object
  FileModeRequiredException: {}
  FileModeTypeEnum:
    enum:
      - EXECUTABLE
      - NORMAL
      - SYMLINK
    type: string
  FileModes:
    description: Information about file modes in a merge or pull request.
    properties:
      base:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode of a file in the base of a merge or pull request.
      destination:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode of a file in the destination of a merge or pull request.
      source:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode of a file in the source of a merge or pull request.
    type: object
  FileNameConflictsWithDirectoryNameException: {}
  FilePathConflictsWithSubmodulePathException: {}
  FilePaths:
    items:
      $ref: '#/definitions/Path'
    type: array
  FileSize:
    type: integer
  FileSizes:
    description: Information about the size of files in a merge or pull request.
    properties:
      base:
        $ref: '#/definitions/FileSize'
        description: The size of a file in the base of a merge or pull request.
      destination:
        $ref: '#/definitions/FileSize'
        description: The size of a file in the destination of a merge or pull request.
      source:
        $ref: '#/definitions/FileSize'
        description: The size of a file in the source of a merge or pull request.
    type: object
  FileTooLargeException: {}
  FilesMetadata:
    items:
      $ref: '#/definitions/FileMetadata'
    type: array
  Folder:
    description: Returns information about a folder in a repository.
    properties:
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully-qualified path of the folder in the repository.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the specified folder from the folder where the query originated.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the folder.
    type: object
  FolderContentSizeLimitExceededException: {}
  FolderDoesNotExistException: {}
  FolderList:
    items:
      $ref: '#/definitions/Folder'
    type: array
  GetBlobInput:
    description: Represents the input of a get blob operation.
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: 'The ID of the blob, which is its SHA-1 pointer.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the blob.
    required:
      - repositoryName
      - blobId
    type: object
  GetBlobOutput:
    description: Represents the output of a get blob operation.
    properties:
      content:
        $ref: '#/definitions/blob'
        description: 'The content of the blob, usually a file.'
    required:
      - content
    type: object
  GetBranchInput:
    description: Represents the input of a get branch operation.
    properties:
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch for which you want to retrieve information.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the branch for which you want to retrieve information.
    type: object
  GetBranchOutput:
    description: Represents the output of a get branch operation.
    properties:
      branch:
        $ref: '#/definitions/BranchInfo'
        description: The name of the branch.
    type: object
  GetCommentInput:
    properties:
      commentId:
        $ref: '#/definitions/CommentId'
        description: 'The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
    required:
      - commentId
    type: object
  GetCommentOutput:
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: The contents of the comment.
    type: object
  GetCommentsForComparedCommitInput:
    properties:
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'To establish the directionality of the comparison, the full commit ID of the ''after'' commit.'
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'To establish the directionality of the comparison, the full commit ID of the ''before'' commit.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-negative integer used to limit the number of returned results. The default is 100 comments, and is configurable up to 500.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results. '
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to compare commits.
    required:
      - repositoryName
      - afterCommitId
    type: object
  GetCommentsForComparedCommitOutput:
    properties:
      commentsForComparedCommitData:
        $ref: '#/definitions/CommentsForComparedCommitData'
        description: A list of comment objects on the compared commit.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
    type: object
  GetCommentsForPullRequestInput:
    properties:
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: A non-negative integer used to limit the number of returned results. The default is 100 comments. You can return up to 500 comments with a single request.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request.
    required:
      - pullRequestId
    type: object
  GetCommentsForPullRequestOutput:
    properties:
      commentsForPullRequestData:
        $ref: '#/definitions/CommentsForPullRequestData'
        description: An array of comment objects on the pull request.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
    type: object
  GetCommitInput:
    description: Represents the input of a get commit operation.
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID. Commit IDs are the full SHA of the commit.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to which the commit was made.
    required:
      - repositoryName
      - commitId
    type: object
  GetCommitOutput:
    description: Represents the output of a get commit operation.
    properties:
      commit:
        $ref: '#/definitions/Commit'
        description: A commit data type object that contains information about the specified commit.
    required:
      - commit
    type: object
  GetDifferencesInput:
    properties:
      MaxResults:
        $ref: '#/definitions/Limit'
        description: A non-negative integer used to limit the number of returned results.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      afterCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit.'
      afterPath:
        $ref: '#/definitions/Path'
        description: 'The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences will be shown for all paths.'
      beforeCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, the full commit ID. Optional. If not specified, all changes prior to the <code>afterCommitSpecifier</code> value will be shown. If you do not use <code>beforeCommitSpecifier</code> in your request, consider limiting the results with <code>maxResults</code>.'
      beforePath:
        $ref: '#/definitions/Path'
        description: 'The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code> are not specified, differences will be shown for all paths.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to get differences.
    required:
      - repositoryName
      - afterCommitSpecifier
    type: object
  GetDifferencesOutput:
    properties:
      NextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
      differences:
        $ref: '#/definitions/DifferenceList'
        description: 'A differences data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M).'
    type: object
  GetFileInput:
    properties:
      commitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The fully-quaified reference that identifies the commit that contains the file. For example, you could specify a full commit ID, a tag, a branch name, or a reference such as refs/heads/master. If none is provided, then the head commit will be used.'
      filePath:
        $ref: '#/definitions/Path'
        description: 'The fully-qualified path to the file, including the full name and extension of the file. For example, /examples/file.md is the fully-qualified path to a file named file.md in a folder named examples.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the file.
    required:
      - repositoryName
      - filePath
    type: object
  GetFileOutput:
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID of the object that represents the file content.
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains the content returned by GetFile.
      fileContent:
        $ref: '#/definitions/FileContent'
        description: The base-64 encoded binary data object that represents the content of the file.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: '<p>The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.</p> <note> <p>The file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather extrapolated values. See below for a full list of supported return values.</p> </note>'
      filePath:
        $ref: '#/definitions/Path'
        description: The fully qualified path to the specified file. This returns the name and extension of the file.
      fileSize:
        $ref: '#/definitions/ObjectSize'
        description: 'The size of the contents of the file, in bytes.'
    required:
      - commitId
      - blobId
      - filePath
      - fileMode
      - fileSize
      - fileContent
    type: object
  GetFolderInput:
    properties:
      commitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'A fully-qualified reference used to identify a commit that contains the version of the folder''s content to return. A fully-qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided, the folder content will be returned as it exists in the HEAD commit.'
      folderPath:
        $ref: '#/definitions/Path'
        description: 'The fully-qualified path to the folder whose contents will be returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository. '
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository.
    required:
      - repositoryName
      - folderPath
    type: object
  GetFolderOutput:
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID used as a reference for which version of the folder content is returned.
      files:
        $ref: '#/definitions/FileList'
        description: 'The list of files that exist in the specified folder, if any.'
      folderPath:
        $ref: '#/definitions/Path'
        description: The fully-qualified path of the folder whose contents are returned.
      subFolders:
        $ref: '#/definitions/FolderList'
        description: 'The list of folders that exist beneath the specified folder, if any.'
      subModules:
        $ref: '#/definitions/SubModuleList'
        description: 'The list of submodules that exist in the specified folder, if any.'
      symbolicLinks:
        $ref: '#/definitions/SymbolicLinkList'
        description: 'The list of symbolic links to other files and folders that exist in the specified folder, if any.'
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the folder.
    required:
      - commitId
      - folderPath
    type: object
  GetMergeCommitInput:
    properties:
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the merge commit about which you want to get information.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    type: object
  GetMergeCommitOutput:
    properties:
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      mergedCommitId:
        $ref: '#/definitions/ObjectId'
        description: 'The commit ID for the merge commit created when the source branch was merged into the destination branch. If the fast-forward merge strategy was used, no merge commit exists.'
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
    type: object
  GetMergeConflictsInput:
    properties:
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      maxConflictFiles:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of files to include in the output.
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: 'The merge option or strategy you want to use to merge the code. '
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
    required:
      - repositoryName
      - destinationCommitSpecifier
      - sourceCommitSpecifier
      - mergeOption
    type: object
  GetMergeConflictsOutput:
    properties:
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
      conflictMetadataList:
        $ref: '#/definitions/ConflictMetadataList'
        description: 'A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list will always be empty.'
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      mergeable:
        $ref: '#/definitions/IsMergeable'
        description: A Boolean value that indicates whether the code is mergeable by the specified merge option.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
    required:
      - mergeable
      - destinationCommitId
      - sourceCommitId
      - conflictMetadataList
    type: object
  GetMergeOptionsInput:
    properties:
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the commits about which you want to get merge options.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    type: object
  GetMergeOptionsOutput:
    properties:
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      mergeOptions:
        $ref: '#/definitions/MergeOptions'
        description: The merge option or strategy used to merge the code.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
    required:
      - mergeOptions
      - sourceCommitId
      - destinationCommitId
      - baseCommitId
    type: object
  GetPullRequestInput:
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
    required:
      - pullRequestId
    type: object
  GetPullRequestOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the specified pull request.
    required:
      - pullRequest
    type: object
  GetRepositoryInput:
    description: Represents the input of a get repository operation.
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to get information about.
    required:
      - repositoryName
    type: object
  GetRepositoryOutput:
    description: Represents the output of a get repository operation.
    properties:
      repositoryMetadata:
        $ref: '#/definitions/RepositoryMetadata'
        description: Information about the repository.
    type: object
  GetRepositoryTriggersInput:
    description: Represents the input of a get repository triggers operation.
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository for which the trigger is configured.
    required:
      - repositoryName
    type: object
  GetRepositoryTriggersOutput:
    description: Represents the output of a get repository triggers operation.
    properties:
      configurationId:
        $ref: '#/definitions/RepositoryTriggersConfigurationId'
        description: The system-generated unique ID for the trigger.
      triggers:
        $ref: '#/definitions/RepositoryTriggersList'
        description: The JSON block of configuration information for each trigger.
    type: object
  HunkContent:
    type: string
  IdempotencyParameterMismatchException: {}
  InvalidActorArnException: {}
  InvalidAuthorArnException: {}
  InvalidBlobIdException: {}
  InvalidBranchNameException: {}
  InvalidClientRequestTokenException: {}
  InvalidCommentIdException: {}
  InvalidCommitException: {}
  InvalidCommitIdException: {}
  InvalidConflictDetailLevelException: {}
  InvalidConflictResolutionException: {}
  InvalidConflictResolutionStrategyException: {}
  InvalidContinuationTokenException: {}
  InvalidDeletionParameterException: {}
  InvalidDescriptionException: {}
  InvalidDestinationCommitSpecifierException: {}
  InvalidEmailException: {}
  InvalidFileLocationException: {}
  InvalidFileModeException: {}
  InvalidFilePositionException: {}
  InvalidMaxConflictFilesException: {}
  InvalidMaxMergeHunksException: {}
  InvalidMaxResultsException: {}
  InvalidMergeOptionException: {}
  InvalidOrderException: {}
  InvalidParentCommitIdException: {}
  InvalidPathException: {}
  InvalidPullRequestEventTypeException: {}
  InvalidPullRequestIdException: {}
  InvalidPullRequestStatusException: {}
  InvalidPullRequestStatusUpdateException: {}
  InvalidReferenceNameException: {}
  InvalidRelativeFileVersionEnumException: {}
  InvalidReplacementContentException: {}
  InvalidReplacementTypeException: {}
  InvalidRepositoryDescriptionException: {}
  InvalidRepositoryNameException: {}
  InvalidRepositoryTriggerBranchNameException: {}
  InvalidRepositoryTriggerCustomDataException: {}
  InvalidRepositoryTriggerDestinationArnException: {}
  InvalidRepositoryTriggerEventsException: {}
  InvalidRepositoryTriggerNameException: {}
  InvalidRepositoryTriggerRegionException: {}
  InvalidResourceArnException: {}
  InvalidSortByException: {}
  InvalidSourceCommitSpecifierException: {}
  InvalidSystemTagUsageException: {}
  InvalidTagKeysListException: {}
  InvalidTagsMapException: {}
  InvalidTargetBranchException: {}
  InvalidTargetException: {}
  InvalidTargetsException: {}
  InvalidTitleException: {}
  IsBinaryFile:
    description: Information about whether a file is binary or textual in a merge or pull request operation.
    properties:
      base:
        $ref: '#/definitions/CapitalBoolean'
        description: The binary or non-binary status of a file in the base of a merge or pull request.
      destination:
        $ref: '#/definitions/CapitalBoolean'
        description: The binary or non-binary status of a file in the destination of a merge or pull request.
      source:
        $ref: '#/definitions/CapitalBoolean'
        description: The binary or non-binary status of file in the source of a merge or pull request.
    type: object
  IsCommentDeleted:
    type: boolean
  IsContentConflict:
    type: boolean
  IsFileModeConflict:
    type: boolean
  IsHunkConflict:
    type: boolean
  IsMergeable:
    type: boolean
  IsMerged:
    type: boolean
  IsMove:
    type: boolean
  IsObjectTypeConflict:
    type: boolean
  KeepEmptyFolders:
    type: boolean
  LastModifiedDate:
    format: date-time
    type: string
  Limit:
    type: integer
  LineNumber:
    type: integer
  ListBranchesInput:
    description: Represents the input of a list branches operation.
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the results.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the branches.
    required:
      - repositoryName
    type: object
  ListBranchesOutput:
    description: Represents the output of a list branches operation.
    properties:
      branches:
        $ref: '#/definitions/BranchNameList'
        description: The list of branch names.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that returns the batch of the results.
    type: object
  ListPullRequestsInput:
    properties:
      authorArn:
        $ref: '#/definitions/Arn'
        description: 'Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results to pull requests created by that user.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: A non-negative integer used to limit the number of returned results.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: 'Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository for which you want to list pull requests.
    required:
      - repositoryName
    type: object
  ListPullRequestsOutput:
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      pullRequestIds:
        $ref: '#/definitions/PullRequestIdList'
        description: The system-generated IDs of the pull requests.
    required:
      - pullRequestIds
    type: object
  ListRepositoriesInput:
    description: Represents the input of a list repositories operation.
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.'
      order:
        $ref: '#/definitions/OrderEnum'
        description: The order in which to sort the results of a list repositories operation.
      sortBy:
        $ref: '#/definitions/SortByEnum'
        description: The criteria used to sort the results of a list repositories operation.
    type: object
  ListRepositoriesOutput:
    description: Represents the output of a list repositories operation.
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.'
      repositories:
        $ref: '#/definitions/RepositoryNameIdPairList'
        description: Lists the repositories called by the list repositories operation.
    type: object
  ListTagsForResourceInput:
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results.'
      resourceArn:
        $ref: '#/definitions/ResourceArn'
        description: 'The Amazon Resource Name (ARN) of the resource for which you want to get information about tags, if any.'
    required:
      - resourceArn
    type: object
  ListTagsForResourceOutput:
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the next results of the operation.
      tags:
        $ref: '#/definitions/TagsMap'
        description: A list of tag key and value pairs associated with the specified resource.
    type: object
  Location:
    description: Returns information about the location of a change or comment in the comparison between two commits or a pull request.
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The name of the file being compared, including its extension and subdirectory, if any.'
      filePosition:
        $ref: '#/definitions/Position'
        description: 'The position of a change within a compared file, in line number format.'
      relativeFileVersion:
        $ref: '#/definitions/RelativeFileVersionEnum'
        description: 'In a comparison of commits or a pull request, whether the change is in the ''before'' or ''after'' of that comparison.'
    type: object
  ManualMergeRequiredException: {}
  MaxResults:
    type: integer
  MaximumBranchesExceededException: {}
  MaximumConflictResolutionEntriesExceededException: {}
  MaximumFileContentToLoadExceededException: {}
  MaximumFileEntriesExceededException: {}
  MaximumItemsToCompareExceededException: {}
  MaximumOpenPullRequestsExceededException: {}
  MaximumRepositoryNamesExceededException: {}
  MaximumRepositoryTriggersExceededException: {}
  MergeBranchesByFastForwardInput:
    properties:
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to merge two branches.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      targetBranch:
        $ref: '#/definitions/BranchName'
        description: The branch where the merge will be applied.
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    type: object
  MergeBranchesByFastForwardOutput:
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge in the destination or target branch.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The tree ID of the merge in the destination or target branch.
    type: object
  MergeBranchesBySquashInput:
    properties:
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information will be used as both the author and committer for the commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message for the merge.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information will be used in the commit information for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to merge two branches.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      targetBranch:
        $ref: '#/definitions/BranchName'
        description: 'The branch where the merge will be applied. '
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    type: object
  MergeBranchesBySquashOutput:
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge in the destination or target branch.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The tree ID of the merge in the destination or target branch.
    type: object
  MergeBranchesByThreeWayInput:
    properties:
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information will be used as both the author and committer for the commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message to include in the commit information for the merge.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information will be used in the commit information for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to merge two branches.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit. For example, a branch name or a full commit ID.'
      targetBranch:
        $ref: '#/definitions/BranchName'
        description: 'The branch where the merge will be applied. '
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    type: object
  MergeBranchesByThreeWayOutput:
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge in the destination or target branch.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The tree ID of the merge in the destination or target branch.
    type: object
  MergeHunk:
    description: Information about merge hunks in a merge or pull request operation.
    properties:
      base:
        $ref: '#/definitions/MergeHunkDetail'
        description: Information about the merge hunk in the base of a merge or pull request.
      destination:
        $ref: '#/definitions/MergeHunkDetail'
        description: Information about the merge hunk in the destination of a merge or pull request.
      isConflict:
        $ref: '#/definitions/IsHunkConflict'
        description: 'A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. This will be true when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge will not set this to be true.'
      source:
        $ref: '#/definitions/MergeHunkDetail'
        description: Information about the merge hunk in the source of a merge or pull request.
    type: object
  MergeHunkDetail:
    description: Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.
    properties:
      endLine:
        $ref: '#/definitions/LineNumber'
        description: The end position of the hunk in the merge result.
      hunkContent:
        $ref: '#/definitions/HunkContent'
        description: The base-64 encoded content of the hunk merged region that might or might not contain a conflict.
      startLine:
        $ref: '#/definitions/LineNumber'
        description: The start position of the hunk in the merge result.
    type: object
  MergeHunks:
    items:
      $ref: '#/definitions/MergeHunk'
    type: array
  MergeMetadata:
    description: Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.
    properties:
      isMerged:
        $ref: '#/definitions/IsMerged'
        description: A Boolean value indicating whether the merge has been made.
      mergeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'The commit ID for the merge commit, if any.'
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge strategy used in the merge.
      mergedBy:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user who merged the branches.
    type: object
  MergeOperations:
    description: Information about the file operation conflicts in a merge operation.
    properties:
      destination:
        $ref: '#/definitions/ChangeTypeEnum'
        description: The operation on a file in the destination of a merge or pull request.
      source:
        $ref: '#/definitions/ChangeTypeEnum'
        description: 'The operation on a file (add, modify, or delete) of a file in the source of a merge or pull request.'
    type: object
  MergeOptionRequiredException: {}
  MergeOptionTypeEnum:
    enum:
      - FAST_FORWARD_MERGE
      - SQUASH_MERGE
      - THREE_WAY_MERGE
    type: string
  MergeOptions:
    items:
      $ref: '#/definitions/MergeOptionTypeEnum'
    type: array
  MergePullRequestByFastForwardInput:
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
    required:
      - pullRequestId
      - repositoryName
    type: object
  MergePullRequestByFastForwardOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: 'Information about the specified pull request, including information about the merge.'
    type: object
  MergePullRequestBySquashInput:
    properties:
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information will be used as both the author and committer for the commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message to include in the commit information for the merge.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information will be used in the commit information for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.'
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
    required:
      - pullRequestId
      - repositoryName
    type: object
  MergePullRequestBySquashOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
    type: object
  MergePullRequestByThreeWayInput:
    properties:
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information will be used as both the author and committer for the commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message to include in the commit information for the merge.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which will return a not mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict will be considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: A list of inputs to use when resolving conflicts during a merge if AUTOMERGE is chosen as the conflict resolution strategy.
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation will be successful.'
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information will be used in the commit information for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file will be created for empty folders. The default is false.'
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
    required:
      - pullRequestId
      - repositoryName
    type: object
  MergePullRequestByThreeWayOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
    type: object
  Message:
    type: string
  Mode:
    type: string
  MultipleConflictResolutionEntriesException: {}
  MultipleRepositoriesInPullRequestException: {}
  Name:
    type: string
  NameLengthExceededException: {}
  NextToken:
    type: string
  NoChangeException: {}
  NumberOfConflicts:
    type: integer
  ObjectId:
    type: string
  ObjectSize:
    type: integer
  ObjectTypeEnum:
    enum:
      - FILE
      - DIRECTORY
      - GIT_LINK
      - SYMBOLIC_LINK
    type: string
  ObjectTypes:
    description: Information about the type of an object in a merge operation.
    properties:
      base:
        $ref: '#/definitions/ObjectTypeEnum'
        description: The type of the object in the base commit of the merge.
      destination:
        $ref: '#/definitions/ObjectTypeEnum'
        description: The type of the object in the destination branch.
      source:
        $ref: '#/definitions/ObjectTypeEnum'
        description: The type of the object in the source branch.
    type: object
  OrderEnum:
    enum:
      - ascending
      - descending
    type: string
  ParentCommitDoesNotExistException: {}
  ParentCommitIdOutdatedException: {}
  ParentCommitIdRequiredException: {}
  ParentList:
    items:
      $ref: '#/definitions/ObjectId'
    type: array
  Path:
    type: string
  PathDoesNotExistException: {}
  PathRequiredException: {}
  Position:
    type: integer
  PostCommentForComparedCommitInput:
    properties:
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'To establish the directionality of the comparison, the full commit ID of the ''after'' commit.'
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: '<p>To establish the directionality of the comparison, the full commit ID of the ''before'' commit.</p> <note> <p>This is required for commenting on any commit unless that commit is the initial commit.</p> </note>'
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.'
      content:
        $ref: '#/definitions/Content'
        description: The content of the comment you want to make.
      location:
        $ref: '#/definitions/Location'
        description: The location of the comparison where you want to comment.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to post a comment on the comparison between commits.
    required:
      - repositoryName
      - afterCommitId
      - content
    type: object
  PostCommentForComparedCommitOutput:
    properties:
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality you established, the blob ID of the ''after'' blob.'
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'In the directionality you established, the full commit ID of the ''after'' commit.'
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality you established, the blob ID of the ''before'' blob.'
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'In the directionality you established, the full commit ID of the ''before'' commit.'
      comment:
        $ref: '#/definitions/Comment'
        description: The content of the comment you posted.
      location:
        $ref: '#/definitions/Location'
        description: The location of the comment in the comparison between the two commits.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you posted a comment on the comparison between commits.
    type: object
  PostCommentForPullRequestInput:
    properties:
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.'
      content:
        $ref: '#/definitions/Content'
        description: The content of your comment on the change.
      location:
        $ref: '#/definitions/Location'
        description: 'The location of the change where you want to post your comment. If no location is provided, the comment will be posted as a general comment on the pull request difference between the before commit ID and the after commit ID.'
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to post a comment on a pull request.
    required:
      - pullRequestId
      - repositoryName
      - beforeCommitId
      - afterCommitId
      - content
    type: object
  PostCommentForPullRequestOutput:
    properties:
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality of the pull request, the blob ID of the ''after'' blob.'
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch where the pull request will be merged.
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality of the pull request, the blob ID of the ''before'' blob.'
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.'
      comment:
        $ref: '#/definitions/Comment'
        description: The content of the comment you posted.
      location:
        $ref: '#/definitions/Location'
        description: The location of the change where you posted your comment.
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. '
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you posted a comment on a pull request.
    type: object
  PostCommentReplyInput:
    properties:
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.'
      content:
        $ref: '#/definitions/Content'
        description: The contents of your reply to a comment.
      inReplyTo:
        $ref: '#/definitions/CommentId'
        description: 'The system-generated ID of the comment to which you want to reply. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
    required:
      - inReplyTo
      - content
    type: object
  PostCommentReplyOutput:
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: Information about the reply to a comment.
    type: object
  PullRequest:
    description: Returns information about a pull request.
    properties:
      authorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user who created the pull request.
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request will return information about the initial request that used that token.'
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date and time the pull request was originally created, in timestamp format.'
      description:
        $ref: '#/definitions/Description'
        description: The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.
      lastActivityDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The day and time of the last user or system activity on the pull request, in timestamp format.'
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. '
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.
      pullRequestTargets:
        $ref: '#/definitions/PullRequestTargetList'
        description: 'The targets of the pull request, including the source branch and destination branch for the pull request.'
      title:
        $ref: '#/definitions/Title'
        description: The user-defined title of the pull request. This title is displayed in the list of pull requests to other users of the repository.
    type: object
  PullRequestAlreadyClosedException: {}
  PullRequestCreatedEventMetadata:
    description: Metadata about the pull request that is used when comparing the pull request source with its destination.
    properties:
      destinationCommitId:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the tip of the branch specified as the destination branch when the pull request was created.
      mergeBase:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/CommitId'
        description: The commit ID on the source branch used when the pull request was created.
    type: object
  PullRequestDoesNotExistException: {}
  PullRequestEvent:
    description: Returns information about a pull request event.
    properties:
      actorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with additional commits or changing the status of a pull request.
      eventDate:
        $ref: '#/definitions/EventDate'
        description: 'The day and time of the pull request event, in timestamp format.'
      pullRequestCreatedEventMetadata:
        $ref: '#/definitions/PullRequestCreatedEventMetadata'
        description: Information about the source and destination branches for the pull request.
      pullRequestEventType:
        $ref: '#/definitions/PullRequestEventType'
        description: 'The type of the pull request event, for example a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED).'
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request.
      pullRequestMergedStateChangedEventMetadata:
        $ref: '#/definitions/PullRequestMergedStateChangedEventMetadata'
        description: Information about the change in mergability state for the pull request event.
      pullRequestSourceReferenceUpdatedEventMetadata:
        $ref: '#/definitions/PullRequestSourceReferenceUpdatedEventMetadata'
        description: 'Information about the updated source branch for the pull request event. '
      pullRequestStatusChangedEventMetadata:
        $ref: '#/definitions/PullRequestStatusChangedEventMetadata'
        description: Information about the change in status for the pull request event.
    type: object
  PullRequestEventList:
    items:
      $ref: '#/definitions/PullRequestEvent'
    type: array
  PullRequestEventType:
    enum:
      - PULL_REQUEST_CREATED
      - PULL_REQUEST_STATUS_CHANGED
      - PULL_REQUEST_SOURCE_REFERENCE_UPDATED
      - PULL_REQUEST_MERGE_STATE_CHANGED
    type: string
  PullRequestId:
    type: string
  PullRequestIdList:
    items:
      $ref: '#/definitions/PullRequestId'
    type: array
  PullRequestIdRequiredException: {}
  PullRequestMergedStateChangedEventMetadata:
    description: 'Returns information about the change in the merge state for a pull request event. '
    properties:
      destinationReference:
        $ref: '#/definitions/ReferenceName'
        description: The name of the branch that the pull request will be merged into.
      mergeMetadata:
        $ref: '#/definitions/MergeMetadata'
        description: Information about the merge state change event.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
    type: object
  PullRequestSourceReferenceUpdatedEventMetadata:
    description: Information about an update to the source branch of a pull request.
    properties:
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.
      mergeBase:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was updated.
    type: object
  PullRequestStatusChangedEventMetadata:
    description: Information about a change to the status of a pull request.
    properties:
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: The changed status of the pull request.
    type: object
  PullRequestStatusEnum:
    enum:
      - OPEN
      - CLOSED
    type: string
  PullRequestStatusRequiredException: {}
  PullRequestTarget:
    description: Returns information about a pull request target.
    properties:
      destinationCommit:
        $ref: '#/definitions/CommitId'
        description: The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.
      destinationReference:
        $ref: '#/definitions/ReferenceName'
        description: 'The branch of the repository where the pull request changes will be merged into. Also known as the destination branch. '
      mergeBase:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
      mergeMetadata:
        $ref: '#/definitions/MergeMetadata'
        description: 'Returns metadata about the state of the merge, including whether the merge has been made.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request source and destination branches.
      sourceCommit:
        $ref: '#/definitions/CommitId'
        description: 'The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID will change to reflect the new tip of the branch.'
      sourceReference:
        $ref: '#/definitions/ReferenceName'
        description: The branch of the repository that contains the changes for the pull request. Also known as the source branch.
    type: object
  PullRequestTargetList:
    items:
      $ref: '#/definitions/PullRequestTarget'
    type: array
  PutFileEntries:
    items:
      $ref: '#/definitions/PutFileEntry'
    type: array
  PutFileEntry:
    description: Information about a file that will be added or updated as part of a commit.
    properties:
      fileContent:
        $ref: '#/definitions/FileContent'
        description: 'The content of the file, if a source file is not specified.'
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file in the repository, including the name of the file.'
      sourceFile:
        $ref: '#/definitions/SourceFileSpecifier'
        description: 'The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.'
    required:
      - filePath
    type: object
  PutFileEntryConflictException: {}
  PutFileInput:
    properties:
      branchName:
        $ref: '#/definitions/BranchName'
        description: 'The name of the branch where you want to add or update the file. If this is an empty repository, this branch will be created.'
      commitMessage:
        $ref: '#/definitions/Message'
        description: 'A message about why this file was added or updated. While optional, adding a message is strongly encouraged in order to provide a more useful commit history for your repository.'
      email:
        $ref: '#/definitions/Email'
        description: An email address for the person adding or updating the file.
      fileContent:
        $ref: '#/definitions/FileContent'
        description: 'The content of the file, in binary object format. '
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode permissions of the blob. Valid file mode permissions are listed below.
      filePath:
        $ref: '#/definitions/Path'
        description: '<p>The name of the file you want to add or update, including the relative path to the file in the repository.</p> <note> <p>If the path does not currently exist in the repository, the path will be created as part of adding the file.</p> </note>'
      name:
        $ref: '#/definitions/Name'
        description: 'The name of the person adding or updating the file. While optional, adding a name is strongly encouraged in order to provide a more useful commit history for your repository.'
      parentCommitId:
        $ref: '#/definitions/CommitId'
        description: '<p>The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, no commit ID is required. If this is not an empty repository, a commit ID is required. </p> <p>The commit ID must match the ID of the head commit at the time of the operation, or an error will occur, and the file will not be added or updated.</p>'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to add or update the file.
    required:
      - repositoryName
      - branchName
      - fileContent
      - filePath
    type: object
  PutFileOutput:
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: 'The ID of the blob, which is its SHA-1 pointer.'
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA of the commit that contains this file change.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains this file change.
    required:
      - commitId
      - blobId
      - treeId
    type: object
  PutRepositoryTriggersInput:
    description: Represents the input ofa put repository triggers operation.
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to create or update the trigger.
      triggers:
        $ref: '#/definitions/RepositoryTriggersList'
        description: The JSON block of configuration information for each trigger.
    required:
      - repositoryName
      - triggers
    type: object
  PutRepositoryTriggersOutput:
    description: Represents the output of a put repository triggers operation.
    properties:
      configurationId:
        $ref: '#/definitions/RepositoryTriggersConfigurationId'
        description: The system-generated unique ID for the create or update operation.
    type: object
  ReferenceDoesNotExistException: {}
  ReferenceName:
    type: string
  ReferenceNameRequiredException: {}
  ReferenceTypeNotSupportedException: {}
  RelativeFileVersionEnum:
    enum:
      - BEFORE
      - AFTER
    type: string
  ReplaceContentEntries:
    items:
      $ref: '#/definitions/ReplaceContentEntry'
    type: array
  ReplaceContentEntry:
    description: Information about a replacement content entry in the conflict of a merge or pull request operation.
    properties:
      content:
        $ref: '#/definitions/FileContent'
        description: The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode to apply during conflict resoltion.
      filePath:
        $ref: '#/definitions/Path'
        description: The path of the conflicting file.
      replacementType:
        $ref: '#/definitions/ReplacementTypeEnum'
        description: The replacement type to use when determining how to resolve the conflict.
    required:
      - filePath
      - replacementType
    type: object
  ReplacementContentRequiredException: {}
  ReplacementTypeEnum:
    enum:
      - KEEP_BASE
      - KEEP_SOURCE
      - KEEP_DESTINATION
      - USE_NEW_CONTENT
    type: string
  ReplacementTypeRequiredException: {}
  RepositoryDescription:
    maxLength: 1000
    type: string
  RepositoryDoesNotExistException: {}
  RepositoryId:
    type: string
  RepositoryLimitExceededException: {}
  RepositoryMetadata:
    description: Information about a repository.
    properties:
      Arn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the repository.
      accountId:
        $ref: '#/definitions/AccountId'
        description: The ID of the AWS account associated with the repository.
      cloneUrlHttp:
        $ref: '#/definitions/CloneUrlHttp'
        description: The URL to use for cloning the repository over HTTPS.
      cloneUrlSsh:
        $ref: '#/definitions/CloneUrlSsh'
        description: The URL to use for cloning the repository over SSH.
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date and time the repository was created, in timestamp format.'
      defaultBranch:
        $ref: '#/definitions/BranchName'
        description: The repository's default branch name.
      lastModifiedDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The date and time the repository was last modified, in timestamp format.'
      repositoryDescription:
        $ref: '#/definitions/RepositoryDescription'
        description: A comment or description about the repository.
      repositoryId:
        $ref: '#/definitions/RepositoryId'
        description: The ID of the repository.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The repository's name.
    type: object
  RepositoryMetadataList:
    items:
      $ref: '#/definitions/RepositoryMetadata'
    type: array
  RepositoryName:
    maxLength: 100
    minLength: 1
    pattern: '[\w\.-]+'
    type: string
  RepositoryNameExistsException: {}
  RepositoryNameIdPair:
    description: Information about a repository name and ID.
    properties:
      repositoryId:
        $ref: '#/definitions/RepositoryId'
        description: The ID associated with the repository.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name associated with the repository.
    type: object
  RepositoryNameIdPairList:
    items:
      $ref: '#/definitions/RepositoryNameIdPair'
    type: array
  RepositoryNameList:
    items:
      $ref: '#/definitions/RepositoryName'
    type: array
  RepositoryNameRequiredException: {}
  RepositoryNamesRequiredException: {}
  RepositoryNotAssociatedWithPullRequestException: {}
  RepositoryNotFoundList:
    items:
      $ref: '#/definitions/RepositoryName'
    type: array
  RepositoryTrigger:
    description: Information about a trigger for a repository.
    properties:
      branches:
        $ref: '#/definitions/BranchNameList'
        description: '<p>The branches that will be included in the trigger configuration. If you specify an empty array, the trigger will apply to all branches.</p> <note> <p>Although no content is required in the array, you must include the array itself.</p> </note>'
      customData:
        $ref: '#/definitions/RepositoryTriggerCustomData'
        description: Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
      destinationArn:
        $ref: '#/definitions/Arn'
        description: 'The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon SNS.'
      events:
        $ref: '#/definitions/RepositoryTriggerEventList'
        description: '<p>The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note> <p>The valid value "all" cannot be used with any other values.</p> </note>'
      name:
        $ref: '#/definitions/RepositoryTriggerName'
        description: The name of the trigger.
    required:
      - name
      - destinationArn
      - events
    type: object
  RepositoryTriggerBranchNameListRequiredException: {}
  RepositoryTriggerCustomData:
    type: string
  RepositoryTriggerDestinationArnRequiredException: {}
  RepositoryTriggerEventEnum:
    enum:
      - all
      - updateReference
      - createReference
      - deleteReference
    type: string
  RepositoryTriggerEventList:
    items:
      $ref: '#/definitions/RepositoryTriggerEventEnum'
    type: array
  RepositoryTriggerEventsListRequiredException: {}
  RepositoryTriggerExecutionFailure:
    description: A trigger failed to run.
    properties:
      failureMessage:
        $ref: '#/definitions/RepositoryTriggerExecutionFailureMessage'
        description: Additional message information about the trigger that did not run.
      trigger:
        $ref: '#/definitions/RepositoryTriggerName'
        description: The name of the trigger that did not run.
    type: object
  RepositoryTriggerExecutionFailureList:
    items:
      $ref: '#/definitions/RepositoryTriggerExecutionFailure'
    type: array
  RepositoryTriggerExecutionFailureMessage:
    type: string
  RepositoryTriggerName:
    type: string
  RepositoryTriggerNameList:
    items:
      $ref: '#/definitions/RepositoryTriggerName'
    type: array
  RepositoryTriggerNameRequiredException: {}
  RepositoryTriggersConfigurationId:
    type: string
  RepositoryTriggersList:
    items:
      $ref: '#/definitions/RepositoryTrigger'
    type: array
  RepositoryTriggersListRequiredException: {}
  ResourceArn:
    type: string
  ResourceArnRequiredException: {}
  RestrictedSourceFileException: {}
  SameFileContentException: {}
  SamePathRequestException: {}
  SetFileModeEntries:
    items:
      $ref: '#/definitions/SetFileModeEntry'
    type: array
  SetFileModeEntry:
    description: Information about the file mode changes.
    properties:
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode for the file.
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file, including the name of the file.'
    required:
      - filePath
      - fileMode
    type: object
  SortByEnum:
    enum:
      - repositoryName
      - lastModifiedDate
    type: string
  SourceAndDestinationAreSameException: {}
  SourceFileOrContentRequiredException: {}
  SourceFileSpecifier:
    description: Information about a source file that is part of changes made in a commit.
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file, including the name of the file.'
      isMove:
        $ref: '#/definitions/IsMove'
        description: Whether to remove the source file from the parent commit.
    required:
      - filePath
    type: object
  SubModule:
    description: Returns information about a submodule reference in a repository folder.
    properties:
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully qualified path to the folder that contains the reference to the submodule.
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID that contains the reference to the submodule.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the submodule from the folder where the query originated.
    type: object
  SubModuleList:
    items:
      $ref: '#/definitions/SubModule'
    type: array
  SymbolicLink:
    description: Returns information about a symbolic link in a repository folder.
    properties:
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully-qualified path to the folder that contains the symbolic link.
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID that contains the information about the symbolic link.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode permissions of the blob that cotains information about the symbolic link.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the symbolic link from the folder where the query originated.
    type: object
  SymbolicLinkList:
    items:
      $ref: '#/definitions/SymbolicLink'
    type: array
  TagKey:
    maxLength: 128
    minLength: 1
    type: string
  TagKeysList:
    items:
      $ref: '#/definitions/TagKey'
    type: array
  TagKeysListRequiredException: {}
  TagPolicyException: {}
  TagResourceInput:
    properties:
      resourceArn:
        $ref: '#/definitions/ResourceArn'
        description: The Amazon Resource Name (ARN) of the resource to which you want to add or update tags.
      tags:
        $ref: '#/definitions/TagsMap'
        description: The key-value pair to use when tagging this repository.
    required:
      - resourceArn
      - tags
    type: object
  TagValue:
    maxLength: 256
    minLength: 0
    type: string
  TagsMap:
    additionalProperties:
      $ref: '#/definitions/TagValue'
    type: object
  TagsMapRequiredException: {}
  Target:
    description: Returns information about a target for a pull request.
    properties:
      destinationReference:
        $ref: '#/definitions/ReferenceName'
        description: The branch of the repository where the pull request changes will be merged into. Also known as the destination branch.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request.
      sourceReference:
        $ref: '#/definitions/ReferenceName'
        description: The branch of the repository that contains the changes for the pull request. Also known as the source branch.
    required:
      - repositoryName
      - sourceReference
    type: object
  TargetList:
    items:
      $ref: '#/definitions/Target'
    type: array
  TargetRequiredException: {}
  TargetsRequiredException: {}
  TestRepositoryTriggersInput:
    description: Represents the input of a test repository triggers operation.
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository in which to test the triggers.
      triggers:
        $ref: '#/definitions/RepositoryTriggersList'
        description: The list of triggers to test.
    required:
      - repositoryName
      - triggers
    type: object
  TestRepositoryTriggersOutput:
    description: Represents the output of a test repository triggers operation.
    properties:
      failedExecutions:
        $ref: '#/definitions/RepositoryTriggerExecutionFailureList'
        description: 'The list of triggers that were not able to be tested. This list provides the names of the triggers that could not be tested, separated by commas.'
      successfulExecutions:
        $ref: '#/definitions/RepositoryTriggerNameList'
        description: 'The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.'
    type: object
  TipOfSourceReferenceIsDifferentException: {}
  TipsDivergenceExceededException: {}
  Title:
    maxLength: 150
    type: string
  TitleRequiredException: {}
  TooManyTagsException: {}
  UntagResourceInput:
    properties:
      resourceArn:
        $ref: '#/definitions/ResourceArn'
        description: The Amazon Resource Name (ARN) of the resource to which you want to remove tags.
      tagKeys:
        $ref: '#/definitions/TagKeysList'
        description: The tag key for each tag that you want to remove from the resource.
    required:
      - resourceArn
      - tagKeys
    type: object
  UpdateCommentInput:
    properties:
      commentId:
        $ref: '#/definitions/CommentId'
        description: 'The system-generated ID of the comment you want to update. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
      content:
        $ref: '#/definitions/Content'
        description: The updated content with which you want to replace the existing content of the comment.
    required:
      - commentId
      - content
    type: object
  UpdateCommentOutput:
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: Information about the updated comment.
    type: object
  UpdateDefaultBranchInput:
    description: Represents the input of an update default branch operation.
    properties:
      defaultBranchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch to set as the default.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to set or change the default branch for.
    required:
      - repositoryName
      - defaultBranchName
    type: object
  UpdatePullRequestDescriptionInput:
    properties:
      description:
        $ref: '#/definitions/Description'
        description: The updated content of the description for the pull request. This content will replace the existing description.
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
    required:
      - pullRequestId
      - description
    type: object
  UpdatePullRequestDescriptionOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the updated pull request.
    required:
      - pullRequest
    type: object
  UpdatePullRequestStatusInput:
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: 'The status of the pull request. The only valid operations are to update the status from <code>OPEN</code> to <code>OPEN</code>, <code>OPEN</code> to <code>CLOSED</code> or from from <code>CLOSED</code> to <code>CLOSED</code>.'
    required:
      - pullRequestId
      - pullRequestStatus
    type: object
  UpdatePullRequestStatusOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the pull request.
    required:
      - pullRequest
    type: object
  UpdatePullRequestTitleInput:
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      title:
        $ref: '#/definitions/Title'
        description: The updated title of the pull request. This will replace the existing title.
    required:
      - pullRequestId
      - title
    type: object
  UpdatePullRequestTitleOutput:
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the updated pull request.
    required:
      - pullRequest
    type: object
  UpdateRepositoryDescriptionInput:
    description: Represents the input of an update repository description operation.
    properties:
      repositoryDescription:
        $ref: '#/definitions/RepositoryDescription'
        description: 'The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to set or change the comment or description for.
    required:
      - repositoryName
    type: object
  UpdateRepositoryNameInput:
    description: Represents the input of an update repository description operation.
    properties:
      newName:
        $ref: '#/definitions/RepositoryName'
        description: The new name for the repository.
      oldName:
        $ref: '#/definitions/RepositoryName'
        description: The existing name of the repository.
    required:
      - oldName
      - newName
    type: object
  UserInfo:
    description: Information about the user who made a specified commit.
    properties:
      date:
        $ref: '#/definitions/Date'
        description: 'The date when the specified commit was commited, in timestamp format with GMT offset.'
      email:
        $ref: '#/definitions/Email'
        description: 'The email address associated with the user who made the commit, if any.'
      name:
        $ref: '#/definitions/Name'
        description: The name of the user who made the specified commit.
    type: object
  blob:
    type: string
x-servers:
  - description: The CodeCommit multi-region endpoint
    url: 'http://codecommit.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The CodeCommit multi-region endpoint
    url: 'https://codecommit.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
    url: 'http://codecommit.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
  - description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
    url: 'https://codecommit.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
