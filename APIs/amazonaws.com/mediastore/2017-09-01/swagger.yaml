swagger: '2.0'
schemes:
  - https
  - http
host: mediastore.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: 'An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. '
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS Elemental MediaStore
  version: '2017-09-01'
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-2017-09-01.normal.json'
      x-apisguru-direct: true
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: mediastore
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/mediastore/'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
parameters:
  X-Amz-Algorithm:
    in: header
    name: X-Amz-Algorithm
    required: false
    type: string
  X-Amz-Content-Sha256:
    in: header
    name: X-Amz-Content-Sha256
    required: false
    type: string
  X-Amz-Credential:
    in: header
    name: X-Amz-Credential
    required: false
    type: string
  X-Amz-Date:
    in: header
    name: X-Amz-Date
    required: false
    type: string
  X-Amz-Security-Token:
    in: header
    name: X-Amz-Security-Token
    required: false
    type: string
  X-Amz-Signature:
    in: header
    name: X-Amz-Signature
    required: false
    type: string
  X-Amz-SignedHeaders:
    in: header
    name: X-Amz-SignedHeaders
    required: false
    type: string
paths:
  '/#X-Amz-Target=MediaStore_20170901.CreateContainer':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.
      operationId: CreateContainer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateContainerInput'
        - enum:
            - MediaStore_20170901.CreateContainer
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateContainerOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.DeleteContainer':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Deletes the specified container. Before you make a <code>DeleteContainer</code> request, delete any objects in the container or in any folders in the container. You can delete only empty containers. '
      operationId: DeleteContainer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteContainerInput'
        - enum:
            - MediaStore_20170901.DeleteContainer
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteContainerOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.DeleteContainerPolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Deletes the access policy that is associated with the specified container.
      operationId: DeleteContainerPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteContainerPolicyInput'
        - enum:
            - MediaStore_20170901.DeleteContainerPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteContainerPolicyOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          schema:
            $ref: '#/definitions/PolicyNotFoundException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.DeleteCorsPolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Deletes the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has this permission by default and can grant this permission to others.</p>'
      operationId: DeleteCorsPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCorsPolicyInput'
        - enum:
            - MediaStore_20170901.DeleteCorsPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteCorsPolicyOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: CorsPolicyNotFoundException
          schema:
            $ref: '#/definitions/CorsPolicyNotFoundException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.DeleteLifecyclePolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.
      operationId: DeleteLifecyclePolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DeleteLifecyclePolicyInput'
        - enum:
            - MediaStore_20170901.DeleteLifecyclePolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteLifecyclePolicyOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          schema:
            $ref: '#/definitions/PolicyNotFoundException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.DescribeContainer':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container''s endpoint does not change after it has been assigned. The <code>DescribeContainer</code> request returns a single <code>Container</code> object based on <code>ContainerName</code>. To return all <code>Container</code> objects that are associated with a specified AWS account, use <a>ListContainers</a>.'
      operationId: DescribeContainer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DescribeContainerInput'
        - enum:
            - MediaStore_20170901.DescribeContainer
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeContainerOutput'
        '480':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.GetContainerPolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access Management User Guide</a>.'
      operationId: GetContainerPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetContainerPolicyInput'
        - enum:
            - MediaStore_20170901.GetContainerPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetContainerPolicyOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          schema:
            $ref: '#/definitions/PolicyNotFoundException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.GetCorsPolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Returns the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this permission and can grant it to others.</p>'
      operationId: GetCorsPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetCorsPolicyInput'
        - enum:
            - MediaStore_20170901.GetCorsPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCorsPolicyOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: CorsPolicyNotFoundException
          schema:
            $ref: '#/definitions/CorsPolicyNotFoundException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.GetLifecyclePolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Retrieves the object lifecycle policy that is assigned to a container.
      operationId: GetLifecyclePolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/GetLifecyclePolicyInput'
        - enum:
            - MediaStore_20170901.GetLifecyclePolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetLifecyclePolicyOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: PolicyNotFoundException
          schema:
            $ref: '#/definitions/PolicyNotFoundException'
        '483':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.ListContainers':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Lists the properties of all containers in AWS Elemental MediaStore. </p> <p>You can query to receive all the containers in one response. Or you can include the <code>MaxResults</code> parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the <code>NextToken</code> parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive. </p> <p>See also <a>DescribeContainer</a>, which gets the properties of one container. </p>'
      operationId: ListContainers
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListContainersInput'
        - description: Pagination limit
          in: query
          name: MaxResults
          required: false
          type: string
        - description: Pagination token
          in: query
          name: NextToken
          required: false
          type: string
        - enum:
            - MediaStore_20170901.ListContainers
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListContainersOutput'
        '480':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.ListTagsForResource':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Returns a list of the tags assigned to the specified container. '
      operationId: ListTagsForResource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ListTagsForResourceInput'
        - enum:
            - MediaStore_20170901.ListTagsForResource
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.PutContainerPolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the <a href="https://aws.amazon.com/documentation/iam/">AWS Identity and Access Management User Guide</a>.</p> <p>For this release of the REST API, you can create only one policy for a container. If you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing policy. </p>'
      operationId: PutContainerPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PutContainerPolicyInput'
        - enum:
            - MediaStore_20170901.PutContainerPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutContainerPolicyOutput'
        '480':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '481':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.PutCorsPolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser''s XMLHttpRequest capability.</p> <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p> <p>To learn more about CORS, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>'
      operationId: PutCorsPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PutCorsPolicyInput'
        - enum:
            - MediaStore_20170901.PutCorsPolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutCorsPolicyOutput'
        '480':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '481':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.PutLifecyclePolicy':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: '<p>Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.</p> <p>For information about how to construct an object lifecycle policy, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html">Components of an Object Lifecycle Policy</a>.</p>'
      operationId: PutLifecyclePolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PutLifecyclePolicyInput'
        - enum:
            - MediaStore_20170901.PutLifecyclePolicy
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutLifecyclePolicyOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.StartAccessLogging':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.'
      operationId: StartAccessLogging
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/StartAccessLoggingInput'
        - enum:
            - MediaStore_20170901.StartAccessLogging
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartAccessLoggingOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.StopAccessLogging':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.'
      operationId: StopAccessLogging
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/StopAccessLoggingInput'
        - enum:
            - MediaStore_20170901.StopAccessLogging
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StopAccessLoggingOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.TagResource':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be "customer" and the tag value might be "companyA." You can specify one or more tags to add to each container. You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://aws.amazon.com/documentation/mediastore/tagging">Tagging Resources in MediaStore</a>.'
      operationId: TagResource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TagResourceInput'
        - enum:
            - MediaStore_20170901.TagResource
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
  '/#X-Amz-Target=MediaStore_20170901.UntagResource':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: 'Removes tags from the specified container. You can specify one or more tags to remove. '
      operationId: UntagResource
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UntagResourceInput'
        - enum:
            - MediaStore_20170901.UntagResource
          in: header
          name: X-Amz-Target
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UntagResourceOutput'
        '480':
          description: ContainerInUseException
          schema:
            $ref: '#/definitions/ContainerInUseException'
        '481':
          description: ContainerNotFoundException
          schema:
            $ref: '#/definitions/ContainerNotFoundException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
definitions:
  AllowedHeaders:
    items:
      $ref: '#/definitions/Header'
    maxItems: 100
    minItems: 0
    type: array
  AllowedMethods:
    items:
      $ref: '#/definitions/MethodName'
    maxItems: 4
    minItems: 1
    type: array
  AllowedOrigins:
    items:
      $ref: '#/definitions/Origin'
    maxItems: 100
    minItems: 1
    type: array
  Container:
    description: This section describes operations that you can perform on an AWS Elemental MediaStore container.
    properties:
      ARN:
        $ref: '#/definitions/ContainerARN'
        description: '<p>The Amazon Resource Name (ARN) of the container. The ARN has the following format:</p> <p>arn:aws:&lt;region&gt;:&lt;account that owns this container&gt;:container/&lt;name of container&gt; </p> <p>For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p>'
      AccessLoggingEnabled:
        $ref: '#/definitions/ContainerAccessLoggingEnabled'
        description: 'The state of access logging on the container. This value is <code>false</code> by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to <code>true</code>, indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.'
      CreationTime:
        $ref: '#/definitions/TimeStamp'
        description: Unix timestamp.
      Endpoint:
        $ref: '#/definitions/Endpoint'
        description: 'The DNS endpoint of the container. Use the endpoint to identify the specific container when sending requests to the data plane. The service assigns this value when the container is created. Once the value has been assigned, it does not change.'
      Name:
        $ref: '#/definitions/ContainerName'
        description: The name of the container.
      Status:
        $ref: '#/definitions/ContainerStatus'
        description: 'The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When the endpoint is available, the status changes to <code>ACTIVE</code>.'
    type: object
  ContainerARN:
    maxLength: 1024
    minLength: 1
    pattern: 'arn:aws:mediastore:[a-z]+-[a-z]+-\d:\d{12}:container/[\w-]{1,255}'
    type: string
  ContainerAccessLoggingEnabled:
    type: boolean
  ContainerInUseException: {}
  ContainerList:
    items:
      $ref: '#/definitions/Container'
    type: array
  ContainerListLimit:
    maximum: 100
    minimum: 1
    type: integer
  ContainerName:
    maxLength: 255
    minLength: 1
    pattern: '[\w-]+'
    type: string
  ContainerNotFoundException: {}
  ContainerPolicy:
    maxLength: 8192
    minLength: 1
    pattern: '[\x00-\x7F]+'
    type: string
  ContainerStatus:
    enum:
      - ACTIVE
      - CREATING
      - DELETING
    maxLength: 16
    minLength: 1
    type: string
  CorsPolicy:
    description: 'The CORS policy of the container. '
    items:
      $ref: '#/definitions/CorsRule'
    maxItems: 100
    minItems: 1
    type: array
  CorsPolicyNotFoundException: {}
  CorsRule:
    description: 'A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.'
    properties:
      AllowedHeaders:
        $ref: '#/definitions/AllowedHeaders'
        description: <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p> <p>This element can contain only one wildcard character (*).</p>
      AllowedMethods:
        $ref: '#/definitions/AllowedMethods'
        description: <p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p> <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>
      AllowedOrigins:
        $ref: '#/definitions/AllowedOrigins'
        description: '<p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>'
      ExposeHeaders:
        $ref: '#/definitions/ExposeHeaders'
        description: '<p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>This element is optional for each rule.</p>'
      MaxAgeSeconds:
        $ref: '#/definitions/MaxAgeSeconds'
        description: <p>The time in seconds that your browser caches the preflight response for the specified resource.</p> <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>
    required:
      - AllowedOrigins
      - AllowedHeaders
    type: object
  CreateContainerInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: 'The name for the container. The name must be from 1 to 255 characters. Container names must be unique to your AWS account within a specific region. As an example, you could create a container named <code>movies</code> in every region, as long as you don’t have an existing container with that name.'
      Tags:
        $ref: '#/definitions/TagList'
        description: 'An array of key:value pairs that you define. These values can be anything that you want. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://aws.amazon.com/documentation/mediastore/tagging">Tagging Resources in MediaStore</a>.'
    required:
      - ContainerName
    type: object
  CreateContainerOutput:
    properties:
      Container:
        $ref: '#/definitions/Container'
        description: '<p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:&lt;region&gt;:&lt;account that owns this container&gt;:container/&lt;name of container&gt;. For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p> <p>ContainerName: The container name as specified in the request.</p> <p>CreationTime: Unix time stamp.</p> <p>Status: The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When an endpoint is available, the status changes to <code>ACTIVE</code>.</p> <p>The return value does not include the container''s endpoint. To make downstream requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>'
    required:
      - Container
    type: object
  DeleteContainerInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: 'The name of the container to delete. '
    required:
      - ContainerName
    type: object
  DeleteContainerOutput:
    properties: {}
    type: object
  DeleteContainerPolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that holds the policy.
    required:
      - ContainerName
    type: object
  DeleteContainerPolicyOutput:
    properties: {}
    type: object
  DeleteCorsPolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container to remove the policy from.
    required:
      - ContainerName
    type: object
  DeleteCorsPolicyOutput:
    properties: {}
    type: object
  DeleteLifecyclePolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that holds the object lifecycle policy.
    required:
      - ContainerName
    type: object
  DeleteLifecyclePolicyOutput:
    properties: {}
    type: object
  DescribeContainerInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container to query.
    type: object
  DescribeContainerOutput:
    properties:
      Container:
        $ref: '#/definitions/Container'
        description: The name of the queried container.
    type: object
  Endpoint:
    maxLength: 255
    minLength: 1
    type: string
  ExposeHeaders:
    items:
      $ref: '#/definitions/Header'
    maxItems: 100
    minItems: 0
    type: array
  GetContainerPolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: 'The name of the container. '
    required:
      - ContainerName
    type: object
  GetContainerPolicyOutput:
    properties:
      Policy:
        $ref: '#/definitions/ContainerPolicy'
        description: The contents of the access policy.
    required:
      - Policy
    type: object
  GetCorsPolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that the policy is assigned to.
    required:
      - ContainerName
    type: object
  GetCorsPolicyOutput:
    properties:
      CorsPolicy:
        $ref: '#/definitions/CorsPolicy'
        description: The CORS policy assigned to the container.
    required:
      - CorsPolicy
    type: object
  GetLifecyclePolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that the object lifecycle policy is assigned to.
    required:
      - ContainerName
    type: object
  GetLifecyclePolicyOutput:
    properties:
      LifecyclePolicy:
        $ref: '#/definitions/LifecyclePolicy'
        description: The object lifecycle policy that is assigned to the container.
    required:
      - LifecyclePolicy
    type: object
  Header:
    maxLength: 8192
    minLength: 1
    pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
    type: string
  InternalServerError: {}
  LifecyclePolicy:
    maxLength: 8192
    minLength: 0
    pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
    type: string
  LimitExceededException: {}
  ListContainersInput:
    properties:
      MaxResults:
        $ref: '#/definitions/ContainerListLimit'
        description: 'Enter the maximum number of containers in the response. Use from 1 to 255 characters. '
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'Only if you used <code>MaxResults</code> in the first command, enter the token (which was included in the previous response) to obtain the next set of containers. This token is included in a response only if there actually are more containers to list.'
    type: object
  ListContainersOutput:
    properties:
      Containers:
        $ref: '#/definitions/ContainerList'
        description: The names of the containers.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: ' <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>. This token is returned only if you included the <code>MaxResults</code> tag in the original command, and only if there are still containers to return. '
    required:
      - Containers
    type: object
  ListTagsForResourceInput:
    properties:
      Resource:
        $ref: '#/definitions/ContainerARN'
        description: The Amazon Resource Name (ARN) for the container.
    required:
      - Resource
    type: object
  ListTagsForResourceOutput:
    properties:
      Tags:
        $ref: '#/definitions/TagList'
        description: 'An array of key:value pairs that are assigned to the container.'
    type: object
  MaxAgeSeconds:
    maximum: 2147483647
    minimum: 0
    type: integer
  MethodName:
    enum:
      - PUT
      - GET
      - DELETE
      - HEAD
    type: string
  Origin:
    maxLength: 2048
    minLength: 1
    pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
    type: string
  PaginationToken:
    maxLength: 1024
    minLength: 1
    pattern: '[0-9A-Za-z=/+]+'
    type: string
  PolicyNotFoundException: {}
  PutContainerPolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container.
      Policy:
        $ref: '#/definitions/ContainerPolicy'
        description: '<p>The contents of the policy, which includes the following: </p> <ul> <li> <p>One <code>Version</code> tag</p> </li> <li> <p>One <code>Statement</code> tag that contains the standard tags for the policy.</p> </li> </ul>'
    required:
      - ContainerName
      - Policy
    type: object
  PutContainerPolicyOutput:
    properties: {}
    type: object
  PutCorsPolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that you want to assign the CORS policy to.
      CorsPolicy:
        $ref: '#/definitions/CorsPolicy'
        description: 'The CORS policy to apply to the container. '
    required:
      - ContainerName
      - CorsPolicy
    type: object
  PutCorsPolicyOutput:
    properties: {}
    type: object
  PutLifecyclePolicyInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that you want to assign the object lifecycle policy to.
      LifecyclePolicy:
        $ref: '#/definitions/LifecyclePolicy'
        description: The object lifecycle policy to apply to the container.
    required:
      - ContainerName
      - LifecyclePolicy
    type: object
  PutLifecyclePolicyOutput:
    properties: {}
    type: object
  StartAccessLoggingInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that you want to start access logging on.
    required:
      - ContainerName
    type: object
  StartAccessLoggingOutput:
    properties: {}
    type: object
  StopAccessLoggingInput:
    properties:
      ContainerName:
        $ref: '#/definitions/ContainerName'
        description: The name of the container that you want to stop access logging on.
    required:
      - ContainerName
    type: object
  StopAccessLoggingOutput:
    properties: {}
    type: object
  Tag:
    description: 'A collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://aws.amazon.com/documentation/mediastore/tagging">Tagging Resources in MediaStore</a>.'
    properties:
      Key:
        $ref: '#/definitions/TagKey'
        description: 'Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.'
      Value:
        $ref: '#/definitions/TagValue'
        description: 'Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.'
    type: object
  TagKey:
    maxLength: 128
    minLength: 1
    type: string
  TagKeyList:
    items:
      $ref: '#/definitions/TagKey'
    type: array
  TagList:
    items:
      $ref: '#/definitions/Tag'
    type: array
  TagResourceInput:
    properties:
      Resource:
        $ref: '#/definitions/ContainerARN'
        description: 'The Amazon Resource Name (ARN) for the container. '
      Tags:
        $ref: '#/definitions/TagList'
        description: 'An array of key:value pairs that you want to add to the container. You need to specify only the tags that you want to add or update. For example, suppose a container already has two tags (customer:CompanyA and priority:High). You want to change the priority tag and also add a third tag (type:Contract). For TagResource, you specify the following tags: priority:Medium, type:Contract. The result is that your container has three tags: customer:CompanyA, priority:Medium, and type:Contract.'
    required:
      - Resource
      - Tags
    type: object
  TagResourceOutput:
    properties: {}
    type: object
  TagValue:
    maxLength: 256
    minLength: 0
    type: string
  TimeStamp:
    format: date-time
    type: string
  UntagResourceInput:
    properties:
      Resource:
        $ref: '#/definitions/ContainerARN'
        description: The Amazon Resource Name (ARN) for the container.
      TagKeys:
        $ref: '#/definitions/TagKeyList'
        description: 'A comma-separated list of keys for tags that you want to remove from the container. For example, if your container has two tags (customer:CompanyA and priority:High) and you want to remove one of the tags (priority:High), you specify the key for the tag that you want to remove (priority).'
    required:
      - Resource
      - TagKeys
    type: object
  UntagResourceOutput:
    properties: {}
    type: object
x-servers:
  - description: The MediaStore multi-region endpoint
    url: 'http://mediastore.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The MediaStore multi-region endpoint
    url: 'https://mediastore.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
    url: 'http://mediastore.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
  - description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
    url: 'https://mediastore.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
