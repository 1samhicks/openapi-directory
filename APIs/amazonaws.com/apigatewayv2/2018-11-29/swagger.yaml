swagger: '2.0'
schemes:
  - https
  - http
host: apigateway.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: Amazon API Gateway V2
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AmazonApiGatewayV2
  version: '2018-11-29'
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json'
      x-apisguru-direct: true
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: apigatewayv2
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/apigateway/'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
parameters:
  X-Amz-Algorithm:
    in: header
    name: X-Amz-Algorithm
    required: false
    type: string
  X-Amz-Content-Sha256:
    in: header
    name: X-Amz-Content-Sha256
    required: false
    type: string
  X-Amz-Credential:
    in: header
    name: X-Amz-Credential
    required: false
    type: string
  X-Amz-Date:
    in: header
    name: X-Amz-Date
    required: false
    type: string
  X-Amz-Security-Token:
    in: header
    name: X-Amz-Security-Token
    required: false
    type: string
  X-Amz-Signature:
    in: header
    name: X-Amz-Signature
    required: false
    type: string
  X-Amz-SignedHeaders:
    in: header
    name: X-Amz-SignedHeaders
    required: false
    type: string
paths:
  /v2/apis:
    get:
      description: Gets a collection of Api resources.
      operationId: GetApis
      parameters:
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApisResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates an Api resource.
      operationId: CreateApi
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiKeySelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              disableSchemaValidation:
                description: Avoid validating models when creating a deployment.
                type: boolean
              name:
                description: 'A string with a length between [1-128].'
                type: string
              protocolType:
                description: ''
                enum:
                  - WEBSOCKET
                type: string
              routeSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              tags:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
                description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
                type: object
              version:
                description: 'A string with a length between [1-64].'
                type: string
            required:
              - name
              - protocolType
              - routeSelectionExpression
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}':
    delete:
      description: Deletes an Api resource.
      operationId: DeleteApi
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets an Api resource.
      operationId: GetApi
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates an Api resource.
      operationId: UpdateApi
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiKeySelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              disableSchemaValidation:
                description: Avoid validating models when creating a deployment.
                type: boolean
              name:
                description: 'A string with a length between [1-128].'
                type: string
              routeSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              version:
                description: 'A string with a length between [1-64].'
                type: string
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/authorizers':
    get:
      description: Gets the Authorizers for an API.
      operationId: GetAuthorizers
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetAuthorizersResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates an Authorizer for an API.
      operationId: CreateAuthorizer
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              authorizerCredentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              authorizerResultTtlInSeconds:
                description: 'An integer with a value between [0-3600].'
                maximum: 2147483647
                minimum: -2147483648
                type: integer
              authorizerType:
                description: |-
                  The authorizer type. Currently the only valid value is REQUEST, for a
                   Lambda function using incoming request parameters.
                enum:
                  - REQUEST
                type: string
              authorizerUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              identitySource:
                description: |-
                  The identity source for which authorization is requested. For the REQUEST
                   authorizer, this is required when authorization caching is enabled. The value is a
                   comma-separated string of one or more mapping expressions of the specified request
                   parameters. For example, if an Auth header, a Name query string parameter are defined
                   as identity sources, this value is $method.request.header.Auth,
                   $method.request.querystring.Name. These parameters will be used to derive
                   the authorization caching key and to perform runtime validation of the REQUEST
                   authorizer by verifying all of the identity-related request parameters are present,
                   not null and non-empty. Only when this is true does the authorizer invoke the
                   authorizer Lambda function, otherwise, it returns a 401 Unauthorized
                   response without calling the Lambda function. The valid value is a string of
                   comma-separated mapping expressions of the specified request parameters. When the
                   authorization caching is not enabled, this property is optional.
                items:
                  $ref: '#/definitions/__string'
                type: array
              identityValidationExpression:
                description: 'A string with a length between [0-1024].'
                type: string
              name:
                description: 'A string with a length between [1-128].'
                type: string
              providerArns:
                description: 'For REQUEST authorizer, this is not defined.'
                items:
                  $ref: '#/definitions/Arn'
                type: array
            required:
              - authorizerType
              - authorizerUri
              - identitySource
              - name
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/authorizers/{authorizerId}':
    delete:
      description: Deletes an Authorizer.
      operationId: DeleteAuthorizer
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The authorizer identifier.
          in: path
          name: authorizerId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets an Authorizer.
      operationId: GetAuthorizer
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The authorizer identifier.
          in: path
          name: authorizerId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates an Authorizer.
      operationId: UpdateAuthorizer
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The authorizer identifier.
          in: path
          name: authorizerId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              authorizerCredentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              authorizerResultTtlInSeconds:
                description: 'An integer with a value between [0-3600].'
                maximum: 2147483647
                minimum: -2147483648
                type: integer
              authorizerType:
                description: |-
                  The authorizer type. Currently the only valid value is REQUEST, for a
                   Lambda function using incoming request parameters.
                enum:
                  - REQUEST
                type: string
              authorizerUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              identitySource:
                description: |-
                  The identity source for which authorization is requested. For the REQUEST
                   authorizer, this is required when authorization caching is enabled. The value is a
                   comma-separated string of one or more mapping expressions of the specified request
                   parameters. For example, if an Auth header, a Name query string parameter are defined
                   as identity sources, this value is $method.request.header.Auth,
                   $method.request.querystring.Name. These parameters will be used to derive
                   the authorization caching key and to perform runtime validation of the REQUEST
                   authorizer by verifying all of the identity-related request parameters are present,
                   not null and non-empty. Only when this is true does the authorizer invoke the
                   authorizer Lambda function, otherwise, it returns a 401 Unauthorized
                   response without calling the Lambda function. The valid value is a string of
                   comma-separated mapping expressions of the specified request parameters. When the
                   authorization caching is not enabled, this property is optional.
                items:
                  $ref: '#/definitions/__string'
                type: array
              identityValidationExpression:
                description: 'A string with a length between [0-1024].'
                type: string
              name:
                description: 'A string with a length between [1-128].'
                type: string
              providerArns:
                description: 'For REQUEST authorizer, this is not defined.'
                items:
                  $ref: '#/definitions/Arn'
                type: array
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/deployments':
    get:
      description: Gets the Deployments for an API.
      operationId: GetDeployments
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDeploymentsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a Deployment for an API.
      operationId: CreateDeployment
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              stageName:
                description: 'A string with a length between [1-128].'
                type: string
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/deployments/{deploymentId}':
    delete:
      description: Deletes a Deployment.
      operationId: DeleteDeployment
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The deployment ID.
          in: path
          name: deploymentId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets a Deployment.
      operationId: GetDeployment
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The deployment ID.
          in: path
          name: deploymentId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates a Deployment.
      operationId: UpdateDeployment
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The deployment ID.
          in: path
          name: deploymentId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              description:
                description: 'A string with a length between [0-1024].'
                type: string
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/integrations':
    get:
      description: Gets the Integrations for an API.
      operationId: GetIntegrations
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates an Integration.
      operationId: CreateIntegration
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              connectionId:
                description: 'A string with a length between [1-1024].'
                type: string
              connectionType:
                description: Represents a connection type.
                enum:
                  - INTERNET
                  - VPC_LINK
                type: string
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions.
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
                type: string
              credentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              integrationMethod:
                description: 'A string with a length between [1-64].'
                type: string
              integrationType:
                description: Represents an API method integration type.
                enum:
                  - AWS
                  - HTTP
                  - MOCK
                  - HTTP_PROXY
                  - AWS_PROXY
                type: string
              integrationUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              passthroughBehavior:
                description: Represents passthrough behavior for an integration response.
                enum:
                  - WHEN_NO_MATCH
                  - NEVER
                  - WHEN_NO_TEMPLATES
                type: string
              requestParameters:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
                description: |-
                  A key-value map specifying response parameters that are passed to the method
                   response from the backend. The key is a method response header parameter name and the
                   mapped value is an integration response header value, a static value enclosed within
                   a pair of single quotes, or a JSON expression from the integration response body. The
                   mapping key must match the pattern of method.response.header.{name}, where name is a
                   valid and unique header name. The mapped non-static value must match the pattern of
                   integration.response.header.{name} or integration.response.body.{JSON-expression},
                   where name is a valid and unique response header name and JSON-expression is a valid
                   JSON expression without the $ prefix.
                type: object
              requestTemplates:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
                description: |-
                  A mapping of identifier keys to templates. The value is an actual template script.
                   The key is typically a SelectionKey which is chosen based on evaluating
                   a selection expression.
                type: object
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              timeoutInMillis:
                description: 'An integer with a value between [50-29000].'
                maximum: 2147483647
                minimum: -2147483648
                type: integer
            required:
              - integrationType
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateIntegrationResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/integrations/{integrationId}':
    delete:
      description: Deletes an Integration.
      operationId: DeleteIntegration
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets an Integration.
      operationId: GetIntegration
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates an Integration.
      operationId: UpdateIntegration
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              connectionId:
                description: 'A string with a length between [1-1024].'
                type: string
              connectionType:
                description: Represents a connection type.
                enum:
                  - INTERNET
                  - VPC_LINK
                type: string
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions.
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
                type: string
              credentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              integrationMethod:
                description: 'A string with a length between [1-64].'
                type: string
              integrationType:
                description: Represents an API method integration type.
                enum:
                  - AWS
                  - HTTP
                  - MOCK
                  - HTTP_PROXY
                  - AWS_PROXY
                type: string
              integrationUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              passthroughBehavior:
                description: Represents passthrough behavior for an integration response.
                enum:
                  - WHEN_NO_MATCH
                  - NEVER
                  - WHEN_NO_TEMPLATES
                type: string
              requestParameters:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
                description: |-
                  A key-value map specifying response parameters that are passed to the method
                   response from the backend. The key is a method response header parameter name and the
                   mapped value is an integration response header value, a static value enclosed within
                   a pair of single quotes, or a JSON expression from the integration response body. The
                   mapping key must match the pattern of method.response.header.{name}, where name is a
                   valid and unique header name. The mapped non-static value must match the pattern of
                   integration.response.header.{name} or integration.response.body.{JSON-expression},
                   where name is a valid and unique response header name and JSON-expression is a valid
                   JSON expression without the $ prefix.
                type: object
              requestTemplates:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
                description: |-
                  A mapping of identifier keys to templates. The value is an actual template script.
                   The key is typically a SelectionKey which is chosen based on evaluating
                   a selection expression.
                type: object
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              timeoutInMillis:
                description: 'An integer with a value between [50-29000].'
                maximum: 2147483647
                minimum: -2147483648
                type: integer
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateIntegrationResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses':
    get:
      description: Gets the IntegrationResponses for an Integration.
      operationId: GetIntegrationResponses
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResponsesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates an IntegrationResponses.
      operationId: CreateIntegrationResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions.
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
                type: string
              integrationResponseKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
              responseParameters:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
                description: |-
                  A key-value map specifying response parameters that are passed to the method
                   response from the backend. The key is a method response header parameter name and the
                   mapped value is an integration response header value, a static value enclosed within
                   a pair of single quotes, or a JSON expression from the integration response body. The
                   mapping key must match the pattern of method.response.header.{name}, where name is a
                   valid and unique header name. The mapped non-static value must match the pattern of
                   integration.response.header.{name} or integration.response.body.{JSON-expression},
                   where name is a valid and unique response header name and JSON-expression is a valid
                   JSON expression without the $ prefix.
                type: object
              responseTemplates:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
                description: |-
                  A mapping of identifier keys to templates. The value is an actual template script.
                   The key is typically a SelectionKey which is chosen based on evaluating
                   a selection expression.
                type: object
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
            required:
              - integrationResponseKey
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}':
    delete:
      description: Deletes an IntegrationResponses.
      operationId: DeleteIntegrationResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
        - description: The integration response ID.
          in: path
          name: integrationResponseId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets an IntegrationResponses.
      operationId: GetIntegrationResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
        - description: The integration response ID.
          in: path
          name: integrationResponseId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates an IntegrationResponses.
      operationId: UpdateIntegrationResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The integration ID.
          in: path
          name: integrationId
          required: true
          type: string
        - description: The integration response ID.
          in: path
          name: integrationResponseId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions.
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
                type: string
              integrationResponseKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
              responseParameters:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
                description: |-
                  A key-value map specifying response parameters that are passed to the method
                   response from the backend. The key is a method response header parameter name and the
                   mapped value is an integration response header value, a static value enclosed within
                   a pair of single quotes, or a JSON expression from the integration response body. The
                   mapping key must match the pattern of method.response.header.{name}, where name is a
                   valid and unique header name. The mapped non-static value must match the pattern of
                   integration.response.header.{name} or integration.response.body.{JSON-expression},
                   where name is a valid and unique response header name and JSON-expression is a valid
                   JSON expression without the $ prefix.
                type: object
              responseTemplates:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
                description: |-
                  A mapping of identifier keys to templates. The value is an actual template script.
                   The key is typically a SelectionKey which is chosen based on evaluating
                   a selection expression.
                type: object
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/models':
    get:
      description: Gets the Models for an API.
      operationId: GetModels
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a Model for an API.
      operationId: CreateModel
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              contentType:
                description: 'A string with a length between [1-256].'
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              name:
                description: 'A string with a length between [1-128].'
                type: string
              schema:
                description: 'A string with a length between [0-32768].'
                type: string
            required:
              - name
              - schema
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/models/{modelId}':
    delete:
      description: Deletes a Model.
      operationId: DeleteModel
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The model ID.
          in: path
          name: modelId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets a Model.
      operationId: GetModel
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The model ID.
          in: path
          name: modelId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates a Model.
      operationId: UpdateModel
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The model ID.
          in: path
          name: modelId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              contentType:
                description: 'A string with a length between [1-256].'
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              name:
                description: 'A string with a length between [1-128].'
                type: string
              schema:
                description: 'A string with a length between [0-32768].'
                type: string
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/models/{modelId}/template':
    get:
      description: Gets a model template.
      operationId: GetModelTemplate
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The model ID.
          in: path
          name: modelId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelTemplateResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/routes':
    get:
      description: Gets the Routes for an API.
      operationId: GetRoutes
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRoutesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a Route for an API.
      operationId: CreateRoute
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiKeyRequired:
                description: Specifies whether an API key is required for the route.
                type: boolean
              authorizationScopes:
                description: |-
                  A list of authorization scopes configured on a route. The scopes are used with a
                   COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
                   works by matching the route scopes against the scopes parsed from the access token in
                   the incoming request. The method invocation is authorized if any route scope matches
                   a claimed scope in the access token. Otherwise, the invocation is not authorized.
                   When the route scope is configured, the client must provide an access token instead
                   of an identity token for authorization purposes.
                items:
                  $ref: '#/definitions/StringWithLengthBetween1And64'
                type: array
              authorizationType:
                description: |-
                  The authorization type. Valid values are NONE for open access,
                   AWS_IAM for using AWS IAM permissions, and CUSTOM for
                   using a Lambda authorizer.
                enum:
                  - NONE
                  - AWS_IAM
                  - CUSTOM
                type: string
              authorizerId:
                description: The identifier.
                type: string
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              operationName:
                description: 'A string with a length between [1-64].'
                type: string
              requestModels:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
                description: The route models.
                type: object
              requestParameters:
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
                description: The route parameters.
                type: object
              routeKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
              routeResponseSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              target:
                description: 'A string with a length between [1-128].'
                type: string
            required:
              - routeKey
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/routes/{routeId}':
    delete:
      description: Deletes a Route.
      operationId: DeleteRoute
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets a Route.
      operationId: GetRoute
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates a Route.
      operationId: UpdateRoute
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiKeyRequired:
                description: Specifies whether an API key is required for the route.
                type: boolean
              authorizationScopes:
                description: |-
                  A list of authorization scopes configured on a route. The scopes are used with a
                   COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
                   works by matching the route scopes against the scopes parsed from the access token in
                   the incoming request. The method invocation is authorized if any route scope matches
                   a claimed scope in the access token. Otherwise, the invocation is not authorized.
                   When the route scope is configured, the client must provide an access token instead
                   of an identity token for authorization purposes.
                items:
                  $ref: '#/definitions/StringWithLengthBetween1And64'
                type: array
              authorizationType:
                description: |-
                  The authorization type. Valid values are NONE for open access,
                   AWS_IAM for using AWS IAM permissions, and CUSTOM for
                   using a Lambda authorizer.
                enum:
                  - NONE
                  - AWS_IAM
                  - CUSTOM
                type: string
              authorizerId:
                description: The identifier.
                type: string
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              operationName:
                description: 'A string with a length between [1-64].'
                type: string
              requestModels:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
                description: The route models.
                type: object
              requestParameters:
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
                description: The route parameters.
                type: object
              routeKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
              routeResponseSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              target:
                description: 'A string with a length between [1-128].'
                type: string
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses':
    get:
      description: Gets the RouteResponses for a Route.
      operationId: GetRouteResponses
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResponsesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a RouteResponse for a Route.
      operationId: CreateRouteResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              responseModels:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
                description: The route models.
                type: object
              responseParameters:
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
                description: The route parameters.
                type: object
              routeResponseKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
            required:
              - routeResponseKey
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}':
    delete:
      description: Deletes a RouteResponse.
      operationId: DeleteRouteResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
        - description: The route response ID.
          in: path
          name: routeResponseId
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets a RouteResponse.
      operationId: GetRouteResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
        - description: The route response ID.
          in: path
          name: routeResponseId
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates a RouteResponse.
      operationId: UpdateRouteResponse
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The route ID.
          in: path
          name: routeId
          required: true
          type: string
        - description: The route response ID.
          in: path
          name: routeResponseId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              responseModels:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
                description: The route models.
                type: object
              responseParameters:
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
                description: The route parameters.
                type: object
              routeResponseKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/stages':
    get:
      description: Gets the Stages for an API.
      operationId: GetStages
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStagesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a Stage for an API.
      operationId: CreateStage
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              accessLogSettings:
                description: Settings for logging access in a stage.
                properties:
                  DestinationArn:
                    $ref: '#/definitions/Arn'
                    description: The ARN of the CloudWatch Logs log group to receive access logs.
                  Format:
                    $ref: '#/definitions/StringWithLengthBetween1And1024'
                    description: |-
                      A single line format of the access logs of data, as specified by selected $context
                       variables. The format must include at least $context.requestId.
                type: object
              clientCertificateId:
                description: The identifier.
                type: string
              defaultRouteSettings:
                description: Represents a collection of route settings.
                properties:
                  DataTraceEnabled:
                    $ref: '#/definitions/__boolean'
                    description: |-
                      Specifies whether (true) or not (false) data trace
                       logging is enabled for this route. This property affects the log entries pushed to
                       Amazon CloudWatch Logs.
                  DetailedMetricsEnabled:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether detailed metrics are enabled.
                  LoggingLevel:
                    $ref: '#/definitions/LoggingLevel'
                    description: |-
                      Specifies the logging level for this route: DEBUG, INFO,
                       or WARN. This property affects the log entries pushed to Amazon
                       CloudWatch Logs.
                  ThrottlingBurstLimit:
                    $ref: '#/definitions/__integer'
                    description: Specifies the throttling burst limit.
                  ThrottlingRateLimit:
                    $ref: '#/definitions/__double'
                    description: Specifies the throttling rate limit.
                type: object
              deploymentId:
                description: The identifier.
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              routeSettings:
                additionalProperties:
                  $ref: '#/definitions/RouteSettings'
                description: The route settings map.
                type: object
              stageName:
                description: 'A string with a length between [1-128].'
                type: string
              stageVariables:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And2048'
                description: The stage variable map.
                type: object
              tags:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
                description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
                type: object
            required:
              - stageName
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/apis/{apiId}/stages/{stageName}':
    delete:
      description: Deletes a Stage.
      operationId: DeleteStage
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The stage name.
          in: path
          name: stageName
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets a Stage.
      operationId: GetStage
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The stage name.
          in: path
          name: stageName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates a Stage.
      operationId: UpdateStage
      parameters:
        - description: The API identifier.
          in: path
          name: apiId
          required: true
          type: string
        - description: The stage name.
          in: path
          name: stageName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              accessLogSettings:
                description: Settings for logging access in a stage.
                properties:
                  DestinationArn:
                    $ref: '#/definitions/Arn'
                    description: The ARN of the CloudWatch Logs log group to receive access logs.
                  Format:
                    $ref: '#/definitions/StringWithLengthBetween1And1024'
                    description: |-
                      A single line format of the access logs of data, as specified by selected $context
                       variables. The format must include at least $context.requestId.
                type: object
              clientCertificateId:
                description: The identifier.
                type: string
              defaultRouteSettings:
                description: Represents a collection of route settings.
                properties:
                  DataTraceEnabled:
                    $ref: '#/definitions/__boolean'
                    description: |-
                      Specifies whether (true) or not (false) data trace
                       logging is enabled for this route. This property affects the log entries pushed to
                       Amazon CloudWatch Logs.
                  DetailedMetricsEnabled:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether detailed metrics are enabled.
                  LoggingLevel:
                    $ref: '#/definitions/LoggingLevel'
                    description: |-
                      Specifies the logging level for this route: DEBUG, INFO,
                       or WARN. This property affects the log entries pushed to Amazon
                       CloudWatch Logs.
                  ThrottlingBurstLimit:
                    $ref: '#/definitions/__integer'
                    description: Specifies the throttling burst limit.
                  ThrottlingRateLimit:
                    $ref: '#/definitions/__double'
                    description: Specifies the throttling rate limit.
                type: object
              deploymentId:
                description: The identifier.
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              routeSettings:
                additionalProperties:
                  $ref: '#/definitions/RouteSettings'
                description: The route settings map.
                type: object
              stageVariables:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And2048'
                description: The stage variable map.
                type: object
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  /v2/domainnames:
    get:
      description: Gets the domain names for an AWS account.
      operationId: GetDomainNames
      parameters:
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDomainNamesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a domain name.
      operationId: CreateDomainName
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              domainName:
                description: 'A string with a length between [1-512].'
                type: string
              domainNameConfigurations:
                description: The domain name configurations.
                items:
                  $ref: '#/definitions/DomainNameConfiguration'
                type: array
              tags:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
                description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
                type: object
            required:
              - domainName
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/domainnames/{domainName}':
    delete:
      description: Deletes a domain name.
      operationId: DeleteDomainName
      parameters:
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Gets a domain name.
      operationId: GetDomainName
      parameters:
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: Updates a domain name.
      operationId: UpdateDomainName
      parameters:
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              domainNameConfigurations:
                description: The domain name configurations.
                items:
                  $ref: '#/definitions/DomainNameConfiguration'
                type: array
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/domainnames/{domainName}/apimappings':
    get:
      description: The API mappings.
      operationId: GetApiMappings
      parameters:
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
        - description: The maximum number of elements to be returned for this resource.
          in: query
          name: maxResults
          required: false
          type: string
        - description: |-
            The next page of elements from this collection. Not valid for the last element of
             the collection.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiMappingsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates an API mapping.
      operationId: CreateApiMapping
      parameters:
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiId:
                description: The identifier.
                type: string
              apiMappingKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
              stage:
                description: 'A string with a length between [1-128].'
                type: string
            required:
              - apiId
              - stage
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/domainnames/{domainName}/apimappings/{apiMappingId}':
    delete:
      description: Deletes an API mapping.
      operationId: DeleteApiMapping
      parameters:
        - description: The API mapping identifier.
          in: path
          name: apiMappingId
          required: true
          type: string
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    get:
      description: The API mapping.
      operationId: GetApiMapping
      parameters:
        - description: The API mapping identifier.
          in: path
          name: apiMappingId
          required: true
          type: string
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      description: The API mapping.
      operationId: UpdateApiMapping
      parameters:
        - description: The API mapping identifier.
          in: path
          name: apiMappingId
          required: true
          type: string
        - description: The domain name.
          in: path
          name: domainName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              apiId:
                description: The identifier.
                type: string
              apiMappingKey:
                description: |-
                  After evaulating a selection expression, the result is compared against one or
                   more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
                   associated selection key type.
                type: string
              stage:
                description: 'A string with a length between [1-128].'
                type: string
            required:
              - apiId
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/tags/{resource-arn}':
    get:
      description: Gets the Tags for an API.
      operationId: GetTags
      parameters:
        - description: ''
          in: path
          name: resource-arn
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTagsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Tag an APIGW resource
      operationId: TagResource
      parameters:
        - description: 'AWS resource arn '
          in: path
          name: resource-arn
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              tags:
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
                description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
                type: object
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
  '/v2/tags/{resource-arn}#tagKeys':
    delete:
      description: Untag an APIGW resource
      operationId: UntagResource
      parameters:
        - description: 'AWS resource arn '
          in: path
          name: resource-arn
          required: true
          type: string
        - description: The Tag keys to delete
          in: query
          items:
            type: string
          name: tagKeys
          required: true
          type: array
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AccessLogSettings:
    description: Settings for logging access in a stage.
    properties:
      DestinationArn:
        $ref: '#/definitions/Arn'
        description: The ARN of the CloudWatch Logs log group to receive access logs.
      Format:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: |-
          A single line format of the access logs of data, as specified by selected $context
           variables. The format must include at least $context.requestId.
    type: object
  Api:
    description: Represents an API.
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: |-
          The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The
           stage name is typically appended to this URI to form a complete path to a deployed
           API stage.
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: Currently only WEBSOCKET is supported.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: |-
          The warning messages reported when failonwarnings is turned on during
           API import.
    required:
      - RouteSelectionExpression
      - ProtocolType
      - Name
    type: object
  ApiMapping:
    description: Represents an API mapping.
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    required:
      - Stage
      - ApiId
    type: object
  Arn:
    description: Represents an Amazon Resource Name (ARN).
    type: string
  AuthorizationScopes:
    description: |-
      A list of authorization scopes configured on a route. The scopes are used with a
       COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
       works by matching the route scopes against the scopes parsed from the access token in
       the incoming request. The method invocation is authorized if any route scope matches
       a claimed scope in the access token. Otherwise, the invocation is not authorized.
       When the route scope is configured, the client must provide an access token instead
       of an identity token for authorization purposes.
    items:
      $ref: '#/definitions/StringWithLengthBetween1And64'
    type: array
  AuthorizationType:
    description: |-
      The authorization type. Valid values are NONE for open access,
       AWS_IAM for using AWS IAM permissions, and CUSTOM for
       using a Lambda authorizer.
    enum:
      - NONE
      - AWS_IAM
      - CUSTOM
    type: string
  Authorizer:
    description: Represents an authorizer.
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the required credentials as an IAM role for API Gateway to invoke the
           authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon
           Resource Name (ARN). To use resource-based permissions on the Lambda function,
           specify null.
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: |-
          The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,
           authorization caching is disabled. If it is greater than 0, API Gateway will cache
           authorizer responses. If this field is not set, the default value is 300. The maximum
           value is 3600, or 1 hour.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: |-
          The authorizer type. Currently the only valid value is REQUEST, for a
           Lambda function using incoming request parameters.
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI).
           ForREQUEST authorizers, this must be a
           well-formed Lambda function URI, for example,
           arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
           In general, the URI has this form:
           arn:aws:apigateway:{region}:lambda:path/{service_api}
           , where {region} is the same as the region hosting the Lambda
           function, path indicates that the remaining substring in the URI should be treated as
           the path to the resource, including the initial /. For Lambda functions,
           this is usually of the form
           /2015-03-31/functions/[FunctionARN]/invocations.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: |-
          <p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization
           caching is enabled. The value is a comma-separated string of one or more mapping
           expressions of the specified request parameters. For example, if an Auth
           header and a Name query string parameters are defined as identity
           sources, this value is method.request.header.Auth,
           method.request.querystring.Name. These parameters will be used to
           derive the authorization caching key and to perform runtime validation of the
           REQUEST authorizer by verifying all of the identity-related request
           parameters are present, not null, and non-empty. Only when this is true does the
           authorizer invoke the authorizer Lambda function, otherwise, it returns a 401
           Unauthorized response without calling the Lambda function. The valid value
           is a string of comma-separated mapping expressions of the specified request
           parameters. When the authorization caching is not enabled, this property is
           optional.</p>
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: |-
          The
           validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: |-
          For
           REQUEST authorizer, this is not
           defined.
    required:
      - Name
    type: object
  AuthorizerType:
    description: |-
      The authorizer type. Currently the only valid value is REQUEST, for a
       Lambda function using incoming request parameters.
    enum:
      - REQUEST
    type: string
  BadRequestException: {}
  ConflictException: {}
  ConnectionType:
    description: Represents a connection type.
    enum:
      - INTERNET
      - VPC_LINK
    type: string
  ContentHandlingStrategy:
    description: Specifies how to handle response payload content type conversions.
    enum:
      - CONVERT_TO_BINARY
      - CONVERT_TO_TEXT
    type: string
  CreateApiMappingRequest:
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: ''
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    required:
      - Stage
      - ApiId
    type: object
  CreateApiMappingResponse:
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    type: object
  CreateApiRequest:
    properties:
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: Currently only WEBSOCKET is supported.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
    required:
      - RouteSelectionExpression
      - ProtocolType
      - Name
    type: object
  CreateApiResponse:
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: |-
          The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The
           stage name is typically appended to this URI to form a complete path to a deployed
           API stage.
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: Currently only WEBSOCKET is supported.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: |-
          The warning messages reported when failonwarnings is turned on during
           API import.
    type: object
  CreateAuthorizerRequest:
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the required credentials as an IAM role for API Gateway to invoke the
           authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon
           Resource Name (ARN). To use resource-based permissions on the Lambda function,
           specify null.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: |-
          The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,
           authorization caching is disabled. If it is greater than 0, API Gateway will cache
           authorizer responses. If this field is not set, the default value is 300. The maximum
           value is 3600, or 1 hour.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: |-
          The authorizer type. Currently the only valid value is REQUEST, for a
           Lambda function using incoming request parameters.
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). For
           REQUEST authorizers, this must be a
           well-formed Lambda function URI, for example,
           arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
           In general, the URI has this form:
           arn:aws:apigateway:{region}:lambda:path/{service_api}
           , where {region} is the same as the region hosting the Lambda
           function, path indicates that the remaining substring in the URI should be treated as
           the path to the resource, including the initial /. For Lambda functions,
           this is usually of the form
           /2015-03-31/functions/[FunctionARN]/invocations.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: |-
          <p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization
           caching is enabled. The value is a comma-separated string of one or more mapping
           expressions of the specified request parameters. For example, if an Auth
           header and a Name query string parameters are defined as identity
           sources, this value is method.request.header.Auth,
           method.request.querystring.Name. These parameters will be used to
           derive the authorization caching key and to perform runtime validation of the
           REQUEST authorizer by verifying all of the identity-related request
           parameters are present, not null, and non-empty. Only when this is true does the
           authorizer invoke the authorizer Lambda function, otherwise, it returns a 401
           Unauthorized response without calling the Lambda function. The valid value
           is a string of comma-separated mapping expressions of the specified request
           parameters. When the authorization caching is not enabled, this property is
           optional.</p>
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: |-
          The
           validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: |-
          For
           REQUEST authorizer, this is not
           defined.
    required:
      - AuthorizerUri
      - AuthorizerType
      - IdentitySource
      - Name
    type: object
  CreateAuthorizerResponse:
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the required credentials as an IAM role for API Gateway to invoke the
           authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon
           Resource Name (ARN). To use resource-based permissions on the Lambda function,
           specify null.
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: |-
          The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,
           authorization caching is disabled. If it is greater than 0, API Gateway will cache
           authorizer responses. If this field is not set, the default value is 300. The maximum
           value is 3600, or 1 hour.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: |-
          The authorizer type. Currently the only valid value is REQUEST, for a
           Lambda function using incoming request parameters.
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI).
           ForREQUEST authorizers, this must be a
           well-formed Lambda function URI, for example,
           arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
           In general, the URI has this form:
           arn:aws:apigateway:{region}:lambda:path/{service_api}
           , where {region} is the same as the region hosting the Lambda
           function, path indicates that the remaining substring in the URI should be treated as
           the path to the resource, including the initial /. For Lambda functions,
           this is usually of the form
           /2015-03-31/functions/[FunctionARN]/invocations.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: |-
          <p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization
           caching is enabled. The value is a comma-separated string of one or more mapping
           expressions of the specified request parameters. For example, if an Auth
           header and a Name query string parameters are defined as identity
           sources, this value is method.request.header.Auth,
           method.request.querystring.Name. These parameters will be used to
           derive the authorization caching key and to perform runtime validation of the
           REQUEST authorizer by verifying all of the identity-related request
           parameters are present, not null, and non-empty. Only when this is true does the
           authorizer invoke the authorizer Lambda function, otherwise, it returns a 401
           Unauthorized response without calling the Lambda function. The valid value
           is a string of comma-separated mapping expressions of the specified request
           parameters. When the authorization caching is not enabled, this property is
           optional.</p>
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: |-
          The
           validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: |-
          For
           REQUEST authorizer, this is not
           defined.
    type: object
  CreateDeploymentRequest:
    properties:
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment resource.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: |-
          The name of the Stage resource for the Deployment
           resource to create.
    type: object
  CreateDeploymentResponse:
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: |-
          The status of the deployment: PENDING, FAILED, or
           SUCCEEDED.
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
    type: object
  CreateDomainNameRequest:
    properties:
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The domain name.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    required:
      - DomainName
    type: object
  CreateDomainNameResponse:
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    type: object
  CreateIntegrationRequest:
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: |-
          The type of the network connection to the integration endpoint. Currently the only
           valid value is INTERNET, for connections through the public routable
           internet.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the credentials required for the integration, if any. For AWS
           integrations, three options are available. To specify an IAM Role for API Gateway to
           assume, use the role's Amazon Resource Name (ARN). To require that the caller's
           identity be passed through from the request, specify the string
           arn:aws:iam::*:user/*. To use resource-based permissions on supported
           AWS services, specify null.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: |-
          <p>The integration type of an integration. One of the following:</p><p>
           AWS: for integrating the route or method request with an AWS service
           action, including the Lambda function-invoking action. With the Lambda
           function-invoking action, this is referred to as the Lambda custom integration. With
           any other AWS service action, this is known as AWS integration.</p><p>
           AWS_PROXY: for integrating the route or method request with the Lambda
           function-invoking action with the client request passed through as-is. This
           integration is also referred to as Lambda proxy integration.</p><p>
           HTTP: for integrating the route or method request with an HTTP
           endpoint. This
           integration is also referred to as HTTP custom integration.</p><p>
           HTTP_PROXY: for integrating route or method request with an HTTP
           endpoint, with the client
           request passed through as-is. This is also referred to as HTTP proxy
           integration.</p><p>
           MOCK: for integrating the route or method request with API Gateway as a
           "loopback" endpoint without invoking any backend.</p>
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: |-
          <p>Specifies the pass-through behavior for incoming requests based on the
           Content-Type header in the request, and the available mapping
           templates specified as the requestTemplates property on the
           Integration resource. There are three valid values:
           WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and
           NEVER.</p><p>
           WHEN_NO_MATCH passes the request body for unmapped content types through
           to the integration backend without transformation.</p><p>
           NEVER rejects unmapped content types with an HTTP 415 Unsupported
           Media Type response.</p><p>
           WHEN_NO_TEMPLATES allows pass-through when the integration has no
           content types mapped to templates. However, if there is at least one content type
           defined, unmapped content types will be rejected with the same HTTP 415
           Unsupported Media Type response.</p>
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method
           request to the backend. The key is an integration request parameter name and the
           associated value is a method request parameter value or static value that must be
           enclosed within single quotes and pre-encoded as required by the backend. The method
           request parameter value must match the pattern of
           method.request.{location}.{name}
           , where 
           {location}
            is querystring, path, or header; and 
           {name}
            must be a valid and unique method request parameter name.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          Represents a map of Velocity templates that are applied on the request payload
           based on the value of the Content-Type header sent by the client. The content type
           value is the key in this map, and the template (as a String) is the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: |-
          Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
           milliseconds or 29 seconds.
    required:
      - IntegrationType
    type: object
  CreateIntegrationResponse:
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: |-
          The type of the network connection to the integration endpoint. Currently the only
           valid value is INTERNET, for connections through the public routable
           internet.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the credentials required for the integration, if any. For AWS
           integrations, three options are available. To specify an IAM Role for API Gateway to
           assume, use the role's Amazon Resource Name (ARN). To require that the caller's
           identity be passed through from the request, specify the string
           arn:aws:iam::*:user/*. To use resource-based permissions on supported
           AWS services, specify null.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: |-
          <p>The integration type of an integration. One of the following:</p><p>
           AWS: for integrating the route or method request with an AWS service
           action, including the Lambda function-invoking action. With the Lambda
           function-invoking action, this is referred to as the Lambda custom integration. With
           any other AWS service action, this is known as AWS integration.</p><p>
           AWS_PROXY: for integrating the route or method request with the Lambda
           function-invoking action with the client request passed through as-is. This
           integration is also referred to as Lambda proxy integration.</p><p>
           HTTP: for integrating the route or method request with an HTTP
           endpoint. This
           integration is also referred to as the HTTP custom integration.</p><p>
           HTTP_PROXY: for integrating route or method request with an HTTP
           endpoint, with the client
           request passed through as-is. This is also referred to as HTTP proxy
           integration.</p><p>
           MOCK: for integrating the route or method request with API Gateway as a
           "loopback" endpoint without invoking any backend.</p>
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: |-
          <p>Specifies the pass-through behavior for incoming requests based on the
           Content-Type header in the request, and the available mapping
           templates specified as the requestTemplates property on the
           Integration resource. There are three valid values:
           WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and
           NEVER.</p><p>
           WHEN_NO_MATCH passes the request body for unmapped content types through
           to the integration backend without transformation.</p><p>
           NEVER rejects unmapped content types with an HTTP 415 Unsupported
           Media Type response.</p><p>
           WHEN_NO_TEMPLATES allows pass-through when the integration has no
           content types mapped to templates. However, if there is at least one content type
           defined, unmapped content types will be rejected with the same HTTP 415
           Unsupported Media Type response.</p>
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method
           request to the backend. The key is an integration request parameter name and the
           associated value is a method request parameter value or static value that must be
           enclosed within single quotes and pre-encoded as required by the backend. The method
           request parameter value must match the pattern of
           method.request.{location}.{name}
           , where 
           {location}
            is querystring, path, or header; and 
           {name}
            must be a valid and unique method request parameter name.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          Represents a map of Velocity templates that are applied on the request payload
           based on the value of the Content-Type header sent by the client. The content type
           value is the key in this map, and the template (as a String) is the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: |-
          Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
           milliseconds or 29 seconds.
    type: object
  CreateIntegrationResponseRequest:
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying response parameters that are passed to the method
           response from the backend. The key is a method response header parameter name and the
           mapped value is an integration response header value, a static value enclosed within
           a pair of single quotes, or a JSON expression from the integration response body. The
           mapping key must match the pattern of method.response.header.{name},
           where {name} is a valid and unique header name. The mapped non-static
           value must match the pattern of integration.response.header.{name} or
           integration.response.body.{JSON-expression}, where
           {name} is a valid and unique response header name and
           {JSON-expression} is a valid JSON expression without the $
           prefix.
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          The collection of response templates for the integration response as a
           string-to-string map of key-value pairs. Response templates are represented as a
           key/value map, with a content-type as the key and a template as the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration response.
    required:
      - IntegrationResponseKey
    type: object
  CreateIntegrationResponseResponse:
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying response parameters that are passed to the method
           response from the backend. The key is a method response header parameter name and the
           mapped value is an integration response header value, a static value enclosed within
           a pair of single quotes, or a JSON expression from the integration response body. The
           mapping key must match the pattern of method.response.header.{name}, where name is a
           valid and unique header name. The mapped non-static value must match the pattern of
           integration.response.header.{name} or integration.response.body.{JSON-expression},
           where name is a valid and unique response header name and JSON-expression is a valid
           JSON expression without the $ prefix.
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          The collection of response templates for the integration response as a
           string-to-string map of key-value pairs. Response templates are represented as a
           key/value map, with a content-type as the key and a template as the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
    type: object
  CreateModelRequest:
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: |-
          The schema for the model. For application/json models, this should be JSON schema
           draft 4 model.
    required:
      - Schema
      - Name
    type: object
  CreateModelResponse:
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: |-
          The schema for the model. For application/json models, this should be JSON schema
           draft 4 model.
    type: object
  CreateRouteRequest:
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for the route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: |-
          The authorization scopes supported by this
           route.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: |-
          The authorization type for the route. Valid values are NONE for open
           access, AWS_IAM for using AWS IAM permissions, and CUSTOM
           for using a Lambda
           authorizer.
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Authorizer resource to be associated with this
           route, if the authorizationType is CUSTOM
           . The authorizer identifier is generated by API Gateway
           when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    required:
      - RouteKey
    type: object
  CreateRouteResponse:
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: |-
          A list of authorization scopes configured on a route. The scopes are used with a
           COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
           works by matching the route scopes against the scopes parsed from the access token in
           the incoming request. The method invocation is authorized if any route scope matches
           a claimed scope in the access token. Otherwise, the invocation is not authorized.
           When the route scope is configured, the client must provide an access token instead
           of an identity token for authorization purposes.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: |-
          The authorization type for the route. Valid values are NONE for open
           access, AWS_IAM for using AWS IAM permissions, and CUSTOM
           for using a Lambda
           authorizer
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Authorizer resource to be associated with this
           route, if the authorizationType is CUSTOM
           . The authorizer identifier is generated by API Gateway
           when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    type: object
  CreateRouteResponseRequest:
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: The response models for the route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: The route response parameters.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The route response key.
    required:
      - RouteResponseKey
    type: object
  CreateRouteResponseResponse:
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
    type: object
  CreateStageRequest:
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: The default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The deployment identifier of the API stage.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the API stage.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: |-
          A map that defines the stage variables for a Stage. Variable names
           can have alphanumeric and underscore characters, and the values must match
           [A-Za-z0-9-._~:/?#&=,]+.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    required:
      - StageName
    type: object
  CreateStageResponse:
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Deployment that the Stage is
           associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: |-
          A map that defines the stage variables for a stage resource. Variable names can
           have alphanumeric and underscore characters, and the values must match
           [A-Za-z0-9-._~:/?#&=,]+.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    type: object
  DeleteApiMappingRequest:
    properties: {}
    type: object
  DeleteApiRequest:
    properties: {}
    type: object
  DeleteAuthorizerRequest:
    properties: {}
    type: object
  DeleteDeploymentRequest:
    properties: {}
    type: object
  DeleteDomainNameRequest:
    properties: {}
    type: object
  DeleteIntegrationRequest:
    properties: {}
    type: object
  DeleteIntegrationResponseRequest:
    properties: {}
    type: object
  DeleteModelRequest:
    properties: {}
    type: object
  DeleteRouteRequest:
    properties: {}
    type: object
  DeleteRouteResponseRequest:
    properties: {}
    type: object
  DeleteStageRequest:
    properties: {}
    type: object
  Deployment:
    description: |-
      An immutable representation of an API that can be called by users. A
       Deployment must be associated with a Stage for it to be
       callable over the internet.
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: |-
          The status of the deployment: PENDING, FAILED, or
           SUCCEEDED.
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
    type: object
  DeploymentStatus:
    description: Represents a deployment status.
    enum:
      - PENDING
      - FAILED
      - DEPLOYED
    type: string
  DomainName:
    description: Represents a domain name.
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    required:
      - DomainName
    type: object
  DomainNameConfiguration:
    description: The domain name configuration.
    properties:
      ApiGatewayDomainName:
        $ref: '#/definitions/__string'
        description: A domain name for the WebSocket API.
      CertificateArn:
        $ref: '#/definitions/Arn'
        description: |-
          An AWS-managed certificate that will be used by the edge-optimized endpoint for
           this domain name. AWS Certificate Manager is the only supported source.
      CertificateName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: |-
          The user-friendly name of the certificate that will be used by the edge-optimized
           endpoint for this domain name.
      CertificateUploadDate:
        $ref: '#/definitions/__timestampIso8601'
        description: |-
          The timestamp when the certificate that was used by edge-optimized endpoint for
           this domain name was uploaded.
      DomainNameStatus:
        $ref: '#/definitions/DomainNameStatus'
        description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
      DomainNameStatusMessage:
        $ref: '#/definitions/__string'
        description: An optional text message containing detailed information about status of the domain name migration.
      EndpointType:
        $ref: '#/definitions/EndpointType'
        description: The endpoint type.
      HostedZoneId:
        $ref: '#/definitions/__string'
        description: The Amazon Route 53 Hosted Zone ID of the endpoint.
      SecurityPolicy:
        $ref: '#/definitions/SecurityPolicy'
        description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
    type: object
  DomainNameConfigurations:
    description: The domain name configurations.
    items:
      $ref: '#/definitions/DomainNameConfiguration'
    type: array
  DomainNameStatus:
    description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
    enum:
      - AVAILABLE
      - UPDATING
    type: string
  EndpointType:
    description: Represents an endpoint type.
    enum:
      - REGIONAL
      - EDGE
    type: string
  GetApiMappingRequest:
    properties: {}
    type: object
  GetApiMappingResponse:
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    type: object
  GetApiMappingsRequest:
    properties: {}
    type: object
  GetApiMappingsResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfApiMapping'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetApiRequest:
    properties: {}
    type: object
  GetApiResponse:
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: |-
          The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The
           stage name is typically appended to this URI to form a complete path to a deployed
           API stage.
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: Currently only WEBSOCKET is supported.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: |-
          The warning messages reported when failonwarnings is turned on during
           API import.
    type: object
  GetApisRequest:
    properties: {}
    type: object
  GetApisResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfApi'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetAuthorizerRequest:
    properties: {}
    type: object
  GetAuthorizerResponse:
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the required credentials as an IAM role for API Gateway to invoke the
           authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon
           Resource Name (ARN). To use resource-based permissions on the Lambda function,
           specify null.
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: |-
          The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,
           authorization caching is disabled. If it is greater than 0, API Gateway will cache
           authorizer responses. If this field is not set, the default value is 300. The maximum
           value is 3600, or 1 hour.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: |-
          The authorizer type. Currently the only valid value is REQUEST, for a
           Lambda function using incoming request parameters.
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI).
           ForREQUEST authorizers, this must be a
           well-formed Lambda function URI, for example,
           arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
           In general, the URI has this form:
           arn:aws:apigateway:{region}:lambda:path/{service_api}
           , where {region} is the same as the region hosting the Lambda
           function, path indicates that the remaining substring in the URI should be treated as
           the path to the resource, including the initial /. For Lambda functions,
           this is usually of the form
           /2015-03-31/functions/[FunctionARN]/invocations.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: |-
          <p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization
           caching is enabled. The value is a comma-separated string of one or more mapping
           expressions of the specified request parameters. For example, if an Auth
           header and a Name query string parameters are defined as identity
           sources, this value is method.request.header.Auth,
           method.request.querystring.Name. These parameters will be used to
           derive the authorization caching key and to perform runtime validation of the
           REQUEST authorizer by verifying all of the identity-related request
           parameters are present, not null, and non-empty. Only when this is true does the
           authorizer invoke the authorizer Lambda function, otherwise, it returns a 401
           Unauthorized response without calling the Lambda function. The valid value
           is a string of comma-separated mapping expressions of the specified request
           parameters. When the authorization caching is not enabled, this property is
           optional.</p>
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: |-
          The
           validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: |-
          For
           REQUEST authorizer, this is not
           defined.
    type: object
  GetAuthorizersRequest:
    properties: {}
    type: object
  GetAuthorizersResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfAuthorizer'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetDeploymentRequest:
    properties: {}
    type: object
  GetDeploymentResponse:
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: |-
          The status of the deployment: PENDING, FAILED, or
           SUCCEEDED.
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
    type: object
  GetDeploymentsRequest:
    properties: {}
    type: object
  GetDeploymentsResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfDeployment'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetDomainNameRequest:
    properties: {}
    type: object
  GetDomainNameResponse:
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    type: object
  GetDomainNamesRequest:
    properties: {}
    type: object
  GetDomainNamesResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfDomainName'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetIntegrationRequest:
    properties: {}
    type: object
  GetIntegrationResponse:
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: |-
          The type of the network connection to the integration endpoint. Currently the only
           valid value is INTERNET, for connections through the public routable
           internet.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the credentials required for the integration, if any. For AWS
           integrations, three options are available. To specify an IAM Role for API Gateway to
           assume, use the role's Amazon Resource Name (ARN). To require that the caller's
           identity be passed through from the request, specify the string
           arn:aws:iam::*:user/*. To use resource-based permissions on supported
           AWS services, specify null.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: |-
          <p>The integration type of an integration. One of the following:</p><p>
           AWS: for integrating the route or method request with an AWS service
           action, including the Lambda function-invoking action. With the Lambda
           function-invoking action, this is referred to as the Lambda custom integration. With
           any other AWS service action, this is known as AWS integration.</p><p>
           AWS_PROXY: for integrating the route or method request with the Lambda
           function-invoking action with the client request passed through as-is. This
           integration is also referred to as Lambda proxy integration.</p><p>
           HTTP: for integrating the route or method request with an HTTP
           endpoint. This
           integration is also referred to as the HTTP custom integration.</p><p>
           HTTP_PROXY: for integrating route or method request with an HTTP
           endpoint, with the client
           request passed through as-is. This is also referred to as HTTP proxy
           integration.</p><p>
           MOCK: for integrating the route or method request with API Gateway as a
           "loopback" endpoint without invoking any backend.</p>
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: |-
          <p>Specifies the pass-through behavior for incoming requests based on the
           Content-Type header in the request, and the available mapping
           templates specified as the requestTemplates property on the
           Integration resource. There are three valid values:
           WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and
           NEVER.</p><p>
           WHEN_NO_MATCH passes the request body for unmapped content types through
           to the integration backend without transformation.</p><p>
           NEVER rejects unmapped content types with an HTTP 415 Unsupported
           Media Type response.</p><p>
           WHEN_NO_TEMPLATES allows pass-through when the integration has no
           content types mapped to templates. However, if there is at least one content type
           defined, unmapped content types will be rejected with the same HTTP 415
           Unsupported Media Type response.</p>
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method
           request to the backend. The key is an integration request parameter name and the
           associated value is a method request parameter value or static value that must be
           enclosed within single quotes and pre-encoded as required by the backend. The method
           request parameter value must match the pattern of
           method.request.{location}.{name}
           , where 
           {location}
            is querystring, path, or header; and 
           {name}
            must be a valid and unique method request parameter name.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          Represents a map of Velocity templates that are applied on the request payload
           based on the value of the Content-Type header sent by the client. The content type
           value is the key in this map, and the template (as a String) is the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: |-
          Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
           milliseconds or 29 seconds.
    type: object
  GetIntegrationResponseRequest:
    properties: {}
    type: object
  GetIntegrationResponseResponse:
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying response parameters that are passed to the method
           response from the backend. The key is a method response header parameter name and the
           mapped value is an integration response header value, a static value enclosed within
           a pair of single quotes, or a JSON expression from the integration response body. The
           mapping key must match the pattern of method.response.header.{name}, where name is a
           valid and unique header name. The mapped non-static value must match the pattern of
           integration.response.header.{name} or integration.response.body.{JSON-expression},
           where name is a valid and unique response header name and JSON-expression is a valid
           JSON expression without the $ prefix.
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          The collection of response templates for the integration response as a
           string-to-string map of key-value pairs. Response templates are represented as a
           key/value map, with a content-type as the key and a template as the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
    type: object
  GetIntegrationResponsesRequest:
    properties: {}
    type: object
  GetIntegrationResponsesResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfIntegrationResponse'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetIntegrationsRequest:
    properties: {}
    type: object
  GetIntegrationsResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfIntegration'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetModelRequest:
    properties: {}
    type: object
  GetModelResponse:
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: |-
          The schema for the model. For application/json models, this should be JSON schema
           draft 4 model.
    type: object
  GetModelTemplateRequest:
    properties: {}
    type: object
  GetModelTemplateResponse:
    properties:
      Value:
        $ref: '#/definitions/__string'
        description: The template value.
    type: object
  GetModelsRequest:
    properties: {}
    type: object
  GetModelsResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfModel'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetRouteRequest:
    properties: {}
    type: object
  GetRouteResponse:
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: |-
          A list of authorization scopes configured on a route. The scopes are used with a
           COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
           works by matching the route scopes against the scopes parsed from the access token in
           the incoming request. The method invocation is authorized if any route scope matches
           a claimed scope in the access token. Otherwise, the invocation is not authorized.
           When the route scope is configured, the client must provide an access token instead
           of an identity token for authorization purposes.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: |-
          The authorization type for the route. Valid values are NONE for open
           access, AWS_IAM for using AWS IAM permissions, and CUSTOM
           for using a Lambda
           authorizer
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Authorizer resource to be associated with this
           route, if the authorizationType is CUSTOM
           . The authorizer identifier is generated by API Gateway
           when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    type: object
  GetRouteResponseRequest:
    properties: {}
    type: object
  GetRouteResponseResponse:
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
    type: object
  GetRouteResponsesRequest:
    properties: {}
    type: object
  GetRouteResponsesResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfRouteResponse'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetRoutesRequest:
    properties: {}
    type: object
  GetRoutesResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfRoute'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetStageRequest:
    properties: {}
    type: object
  GetStageResponse:
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Deployment that the Stage is
           associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: |-
          A map that defines the stage variables for a stage resource. Variable names can
           have alphanumeric and underscore characters, and the values must match
           [A-Za-z0-9-._~:/?#&=,]+.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    type: object
  GetStagesRequest:
    properties: {}
    type: object
  GetStagesResponse:
    properties:
      Items:
        $ref: '#/definitions/__listOfStage'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: |-
          The next page of elements from this collection. Not valid for the last element of
           the collection.
    type: object
  GetTagsRequest:
    properties: {}
    type: object
  GetTagsResponse:
    properties:
      Tags:
        $ref: '#/definitions/__mapOf__string'
    type: object
  Id:
    description: The identifier.
    type: string
  IdentitySourceList:
    description: |-
      The identity source for which authorization is requested. For the REQUEST
       authorizer, this is required when authorization caching is enabled. The value is a
       comma-separated string of one or more mapping expressions of the specified request
       parameters. For example, if an Auth header, a Name query string parameter are defined
       as identity sources, this value is $method.request.header.Auth,
       $method.request.querystring.Name. These parameters will be used to derive
       the authorization caching key and to perform runtime validation of the REQUEST
       authorizer by verifying all of the identity-related request parameters are present,
       not null and non-empty. Only when this is true does the authorizer invoke the
       authorizer Lambda function, otherwise, it returns a 401 Unauthorized
       response without calling the Lambda function. The valid value is a string of
       comma-separated mapping expressions of the specified request parameters. When the
       authorization caching is not enabled, this property is optional.
    items:
      $ref: '#/definitions/__string'
    type: array
  IntegerWithLengthBetween0And3600:
    description: 'An integer with a value between [0-3600].'
    maximum: 2147483647
    minimum: -2147483648
    type: integer
  IntegerWithLengthBetween50And29000:
    description: 'An integer with a value between [50-29000].'
    maximum: 2147483647
    minimum: -2147483648
    type: integer
  Integration:
    description: Represents an integration.
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: |-
          The type of the network connection to the integration endpoint. Currently the only
           valid value is INTERNET, for connections through the public routable
           internet.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the credentials required for the integration, if any. For AWS
           integrations, three options are available. To specify an IAM Role for API Gateway to
           assume, use the role's Amazon Resource Name (ARN). To require that the caller's
           identity be passed through from the request, specify the string
           arn:aws:iam::*:user/*. To use resource-based permissions on supported
           AWS services, specify null.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: |-
          <p>The integration type of an integration. One of the following:</p><p>
           AWS: for integrating the route or method request with an AWS service
           action, including the Lambda function-invoking action. With the Lambda
           function-invoking action, this is referred to as the Lambda custom integration. With
           any other AWS service action, this is known as AWS integration.</p><p>
           AWS_PROXY: for integrating the route or method request with the Lambda
           function-invoking action with the client request passed through as-is. This
           integration is also referred to as Lambda proxy integration.</p><p>
           HTTP: for integrating the route or method request with an HTTP
           endpoint. This
           integration is also referred to as the HTTP custom integration.</p><p>
           HTTP_PROXY: for integrating route or method request with an HTTP
           endpoint, with the client
           request passed through as-is. This is also referred to as HTTP proxy
           integration.</p><p>
           MOCK: for integrating the route or method request with API Gateway as a
           "loopback" endpoint without invoking any backend.</p>
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: |-
          <p>Specifies the pass-through behavior for incoming requests based on the
           Content-Type header in the request, and the available mapping
           templates specified as the requestTemplates property on the
           Integration resource. There are three valid values:
           WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and
           NEVER.</p><p>
           WHEN_NO_MATCH passes the request body for unmapped content types through
           to the integration backend without transformation.</p><p>
           NEVER rejects unmapped content types with an HTTP 415 Unsupported
           Media Type response.</p><p>
           WHEN_NO_TEMPLATES allows pass-through when the integration has no
           content types mapped to templates. However, if there is at least one content type
           defined, unmapped content types will be rejected with the same HTTP 415
           Unsupported Media Type response.</p>
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method
           request to the backend. The key is an integration request parameter name and the
           associated value is a method request parameter value or static value that must be
           enclosed within single quotes and pre-encoded as required by the backend. The method
           request parameter value must match the pattern of
           method.request.{location}.{name}
           , where 
           {location}
            is querystring, path, or header; and 
           {name}
            must be a valid and unique method request parameter name.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          Represents a map of Velocity templates that are applied on the request payload
           based on the value of the Content-Type header sent by the client. The content type
           value is the key in this map, and the template (as a String) is the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: |-
          Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
           milliseconds or 29 seconds.
    type: object
  IntegrationParameters:
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween1And512'
    description: |-
      A key-value map specifying response parameters that are passed to the method
       response from the backend. The key is a method response header parameter name and the
       mapped value is an integration response header value, a static value enclosed within
       a pair of single quotes, or a JSON expression from the integration response body. The
       mapping key must match the pattern of method.response.header.{name}, where name is a
       valid and unique header name. The mapped non-static value must match the pattern of
       integration.response.header.{name} or integration.response.body.{JSON-expression},
       where name is a valid and unique response header name and JSON-expression is a valid
       JSON expression without the $ prefix.
    type: object
  IntegrationResponse:
    description: Represents an integration response.
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying response parameters that are passed to the method
           response from the backend. The key is a method response header parameter name and the
           mapped value is an integration response header value, a static value enclosed within
           a pair of single quotes, or a JSON expression from the integration response body. The
           mapping key must match the pattern of method.response.header.{name}, where name is a
           valid and unique header name. The mapped non-static value must match the pattern of
           integration.response.header.{name} or integration.response.body.{JSON-expression},
           where name is a valid and unique response header name and JSON-expression is a valid
           JSON expression without the $ prefix.
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          The collection of response templates for the integration response as a
           string-to-string map of key-value pairs. Response templates are represented as a
           key/value map, with a content-type as the key and a template as the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
    required:
      - IntegrationResponseKey
    type: object
  IntegrationType:
    description: Represents an API method integration type.
    enum:
      - AWS
      - HTTP
      - MOCK
      - HTTP_PROXY
      - AWS_PROXY
    type: string
  LoggingLevel:
    description: The logging level.
    enum:
      - ERROR
      - INFO
      - 'false'
    type: string
  Model:
    description: |-
      Represents a data model for an API. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create Models and Mapping Templates for Request and Response
       Mappings</a>.
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: |-
          The schema for the model. For application/json models, this should be JSON schema
           draft 4 model.
    required:
      - Name
    type: object
  NextToken:
    description: |-
      The next page of elements from this collection. Not valid for the last element of
       the collection.
    type: string
  NotFoundException: {}
  ParameterConstraints:
    description: |-
      Validation constraints imposed on parameters of a request (path, query string,
       headers).
    properties:
      Required:
        $ref: '#/definitions/__boolean'
        description: Whether or not the parameter is required.
    type: object
  PassthroughBehavior:
    description: Represents passthrough behavior for an integration response.
    enum:
      - WHEN_NO_MATCH
      - NEVER
      - WHEN_NO_TEMPLATES
    type: string
  ProtocolType:
    description: ''
    enum:
      - WEBSOCKET
    type: string
  ProviderArnList:
    description: 'For REQUEST authorizer, this is not defined.'
    items:
      $ref: '#/definitions/Arn'
    type: array
  Route:
    description: Represents a route.
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: |-
          A list of authorization scopes configured on a route. The scopes are used with a
           COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
           works by matching the route scopes against the scopes parsed from the access token in
           the incoming request. The method invocation is authorized if any route scope matches
           a claimed scope in the access token. Otherwise, the invocation is not authorized.
           When the route scope is configured, the client must provide an access token instead
           of an identity token for authorization purposes.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: |-
          The authorization type for the route. Valid values are NONE for open
           access, AWS_IAM for using AWS IAM permissions, and CUSTOM
           for using a Lambda
           authorizer
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Authorizer resource to be associated with this
           route, if the authorizationType is CUSTOM
           . The authorizer identifier is generated by API Gateway
           when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    required:
      - RouteKey
    type: object
  RouteModels:
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween1And128'
    description: The route models.
    type: object
  RouteParameters:
    additionalProperties:
      $ref: '#/definitions/ParameterConstraints'
    description: The route parameters.
    type: object
  RouteResponse:
    description: Represents a route response.
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
    required:
      - RouteResponseKey
    type: object
  RouteSettings:
    description: Represents a collection of route settings.
    properties:
      DataTraceEnabled:
        $ref: '#/definitions/__boolean'
        description: |-
          Specifies whether (true) or not (false) data trace
           logging is enabled for this route. This property affects the log entries pushed to
           Amazon CloudWatch Logs.
      DetailedMetricsEnabled:
        $ref: '#/definitions/__boolean'
        description: Specifies whether detailed metrics are enabled.
      LoggingLevel:
        $ref: '#/definitions/LoggingLevel'
        description: |-
          Specifies the logging level for this route: DEBUG, INFO,
           or WARN. This property affects the log entries pushed to Amazon
           CloudWatch Logs.
      ThrottlingBurstLimit:
        $ref: '#/definitions/__integer'
        description: Specifies the throttling burst limit.
      ThrottlingRateLimit:
        $ref: '#/definitions/__double'
        description: Specifies the throttling rate limit.
    type: object
  RouteSettingsMap:
    additionalProperties:
      $ref: '#/definitions/RouteSettings'
    description: The route settings map.
    type: object
  SecurityPolicy:
    description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
    enum:
      - TLS_1_0
      - TLS_1_2
    type: string
  SelectionExpression:
    description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
    type: string
  SelectionKey:
    description: |-
      After evaulating a selection expression, the result is compared against one or
       more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's
       associated selection key type.
    type: string
  Stage:
    description: Represents an API stage.
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Deployment that the Stage is
           associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: |-
          A map that defines the stage variables for a stage resource. Variable names can
           have alphanumeric and underscore characters, and the values must match
           [A-Za-z0-9-._~:/?#&=,]+.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    required:
      - StageName
    type: object
  StageVariablesMap:
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween0And2048'
    description: The stage variable map.
    type: object
  StringWithLengthBetween0And1024:
    description: 'A string with a length between [0-1024].'
    type: string
  StringWithLengthBetween0And2048:
    description: 'A string with a length between [0-2048].'
    type: string
  StringWithLengthBetween0And32K:
    description: 'A string with a length between [0-32768].'
    type: string
  StringWithLengthBetween1And1024:
    description: 'A string with a length between [1-1024].'
    type: string
  StringWithLengthBetween1And128:
    description: 'A string with a length between [1-128].'
    type: string
  StringWithLengthBetween1And1600:
    description: 'A string with a length between [1-1600].'
    type: string
  StringWithLengthBetween1And256:
    description: 'A string with a length between [1-256].'
    type: string
  StringWithLengthBetween1And512:
    description: 'A string with a length between [1-512].'
    type: string
  StringWithLengthBetween1And64:
    description: 'A string with a length between [1-64].'
    type: string
  TagResourceRequest:
    properties:
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    type: object
  TagResourceResponse:
    properties: {}
    type: object
  Tags:
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween1And1600'
    type: object
  TemplateMap:
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween0And32K'
    description: |-
      A mapping of identifier keys to templates. The value is an actual template script.
       The key is typically a SelectionKey which is chosen based on evaluating
       a selection expression.
    type: object
  TooManyRequestsException: {}
  UntagResourceRequest:
    properties: {}
    type: object
  UpdateApiMappingRequest:
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    required:
      - ApiId
    type: object
  UpdateApiMappingResponse:
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    type: object
  UpdateApiRequest:
    properties:
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
    type: object
  UpdateApiResponse:
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: |-
          The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The
           stage name is typically appended to this URI to form a complete path to a deployed
           API stage.
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: 'The API protocol: Currently only WEBSOCKET is supported.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route selection expression for the API.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: |-
          The warning messages reported when failonwarnings is turned on during
           API import.
    type: object
  UpdateAuthorizerRequest:
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the required credentials as an IAM role for API Gateway to invoke the
           authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon
           Resource Name (ARN). To use resource-based permissions on the Lambda function,
           specify null.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: |-
          The time to live (TTL), in seconds, of cached authorizer results. If it is zero,
           authorization caching is disabled. If it is greater than zero, API Gateway will cache
           authorizer responses. If this field is not set, the default value is 300. The maximum
           value is 3600, or 1 hour.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: |-
          The authorizer type. Currently the only valid value is REQUEST, for a
           Lambda function using incoming request parameters.
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). For
           REQUEST authorizers, this must be a
           well-formed Lambda function URI, for example,
           arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
           In general, the URI has this form:
           arn:aws:apigateway:{region}:lambda:path/{service_api}
           , where {region} is the same as the region hosting the Lambda
           function, path indicates that the remaining substring in the URI should be treated as
           the path to the resource, including the initial /. For Lambda functions,
           this is usually of the form
           /2015-03-31/functions/[FunctionARN]/invocations.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: |-
          <p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization
           caching is enabled. The value is a comma-separated string of one or more mapping
           expressions of the specified request parameters. For example, if an Auth header, a
           Name query string parameter are defined as identity sources, this value is
           $method.request.header.Auth, $method.request.querystring.Name. These
           parameters will be used to derive the authorization caching key and to perform
           runtime validation of the REQUEST authorizer by verifying all of the
           identity-related request parameters are present, not null and non-empty. Only when
           this is true does the authorizer invoke the authorizer Lambda function, otherwise, it
           returns a 401 Unauthorized response without calling the Lambda function.
           The valid value is a string of comma-separated mapping expressions of the specified
           request parameters. When the authorization caching is not enabled, this property is
           optional.</p>
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: |-
          The
           validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: |-
          For
           REQUEST authorizer, this is not
           defined.
    type: object
  UpdateAuthorizerResponse:
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the required credentials as an IAM role for API Gateway to invoke the
           authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon
           Resource Name (ARN). To use resource-based permissions on the Lambda function,
           specify null.
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: |-
          The time to live (TTL), in seconds, of cached authorizer results. If it equals 0,
           authorization caching is disabled. If it is greater than 0, API Gateway will cache
           authorizer responses. If this field is not set, the default value is 300. The maximum
           value is 3600, or 1 hour.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: |-
          The authorizer type. Currently the only valid value is REQUEST, for a
           Lambda function using incoming request parameters.
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI).
           ForREQUEST authorizers, this must be a
           well-formed Lambda function URI, for example,
           arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
           In general, the URI has this form:
           arn:aws:apigateway:{region}:lambda:path/{service_api}
           , where {region} is the same as the region hosting the Lambda
           function, path indicates that the remaining substring in the URI should be treated as
           the path to the resource, including the initial /. For Lambda functions,
           this is usually of the form
           /2015-03-31/functions/[FunctionARN]/invocations.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: |-
          <p>The identity source for which authorization is requested.</p><p>For the REQUEST authorizer, this is required when authorization
           caching is enabled. The value is a comma-separated string of one or more mapping
           expressions of the specified request parameters. For example, if an Auth
           header and a Name query string parameters are defined as identity
           sources, this value is method.request.header.Auth,
           method.request.querystring.Name. These parameters will be used to
           derive the authorization caching key and to perform runtime validation of the
           REQUEST authorizer by verifying all of the identity-related request
           parameters are present, not null, and non-empty. Only when this is true does the
           authorizer invoke the authorizer Lambda function, otherwise, it returns a 401
           Unauthorized response without calling the Lambda function. The valid value
           is a string of comma-separated mapping expressions of the specified request
           parameters. When the authorization caching is not enabled, this property is
           optional.</p>
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: |-
          The
           validation expression does not apply to the REQUEST authorizer.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
      ProviderArns:
        $ref: '#/definitions/ProviderArnList'
        description: |-
          For
           REQUEST authorizer, this is not
           defined.
    type: object
  UpdateDeploymentRequest:
    properties:
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment resource.
    type: object
  UpdateDeploymentResponse:
    properties:
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: |-
          The status of the deployment: PENDING, FAILED, or
           SUCCEEDED.
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
    type: object
  UpdateDomainNameRequest:
    properties:
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
    type: object
  UpdateDomainNameResponse:
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    type: object
  UpdateIntegrationRequest:
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: |-
          The type of the network connection to the integration endpoint. Currently the only
           valid value is INTERNET, for connections through the public routable
           internet.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the credentials required for the integration, if any. For AWS
           integrations, three options are available. To specify an IAM Role for API Gateway to
           assume, use the role's Amazon Resource Name (ARN). To require that the caller's
           identity be passed through from the request, specify the string
           arn:aws:iam::*:user/*. To use resource-based permissions on supported
           AWS services, specify null.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the integration
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: |-
          <p>The integration type of an integration. One of the following:</p><p>
           AWS: for integrating the route or method request with an AWS service
           action, including the Lambda function-invoking action. With the Lambda
           function-invoking action, this is referred to as the Lambda custom integration. With
           any other AWS service action, this is known as AWS integration.</p><p>
           AWS_PROXY: for integrating the route or method request with the Lambda
           function-invoking action with the client request passed through as-is. This
           integration is also referred to as Lambda proxy integration.</p><p>
           HTTP: for integrating the route or method request with an HTTP
           endpoint. This
           integration is also referred to as the HTTP custom integration.</p><p>
           HTTP_PROXY: for integrating route or method request with an HTTP
           endpoint, with the client
           request passed through as-is. This is also referred to as HTTP proxy
           integration.</p><p>
           MOCK: for integrating the route or method request with API Gateway as a
           "loopback" endpoint without invoking any backend.</p>
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: |-
          <p>Specifies the pass-through behavior for incoming requests based on the
           Content-Type header in the request, and the available mapping
           templates specified as the requestTemplates property on the
           Integration resource. There are three valid values:
           WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and
           NEVER.</p><p>
           WHEN_NO_MATCH passes the request body for unmapped content types through
           to the integration backend without transformation.</p><p>
           NEVER rejects unmapped content types with an HTTP 415 Unsupported
           Media Type response.</p><p>
           WHEN_NO_TEMPLATES allows pass-through when the integration has no
           content types mapped to templates. However, if there is at least one content type
           defined, unmapped content types will be rejected with the same HTTP 415
           Unsupported Media Type response.</p>
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method
           request to the backend. The key is an integration request parameter name and the
           associated value is a method request parameter value or static value that must be
           enclosed within single quotes and pre-encoded as required by the backend. The method
           request parameter value must match the pattern of
           method.request.{location}.{name}
           , where 
           {location}
            is querystring, path, or header; and 
           {name}
            must be a valid and unique method request parameter name.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          Represents a map of Velocity templates that are applied on the request payload
           based on the value of the Content-Type header sent by the client. The content type
           value is the key in this map, and the template (as a String) is the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: |-
          Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
           milliseconds or 29 seconds.
    type: object
  UpdateIntegrationResponse:
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: |-
          The type of the network connection to the integration endpoint. Currently the only
           valid value is INTERNET, for connections through the public routable
           internet.
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: |-
          Specifies the credentials required for the integration, if any. For AWS
           integrations, three options are available. To specify an IAM Role for API Gateway to
           assume, use the role's Amazon Resource Name (ARN). To require that the caller's
           identity be passed through from the request, specify the string
           arn:aws:iam::*:user/*. To use resource-based permissions on supported
           AWS services, specify null.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: |-
          <p>The integration type of an integration. One of the following:</p><p>
           AWS: for integrating the route or method request with an AWS service
           action, including the Lambda function-invoking action. With the Lambda
           function-invoking action, this is referred to as the Lambda custom integration. With
           any other AWS service action, this is known as AWS integration.</p><p>
           AWS_PROXY: for integrating the route or method request with the Lambda
           function-invoking action with the client request passed through as-is. This
           integration is also referred to as Lambda proxy integration.</p><p>
           HTTP: for integrating the route or method request with an HTTP
           endpoint. This
           integration is also referred to as the HTTP custom integration.</p><p>
           HTTP_PROXY: for integrating route or method request with an HTTP
           endpoint, with the client
           request passed through as-is. This is also referred to as HTTP proxy
           integration.</p><p>
           MOCK: for integrating the route or method request with API Gateway as a
           "loopback" endpoint without invoking any backend.</p>
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: |-
          <p>Specifies the pass-through behavior for incoming requests based on the
           Content-Type header in the request, and the available mapping
           templates specified as the requestTemplates property on the
           Integration resource. There are three valid values:
           WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and
           NEVER.</p><p>
           WHEN_NO_MATCH passes the request body for unmapped content types through
           to the integration backend without transformation.</p><p>
           NEVER rejects unmapped content types with an HTTP 415 Unsupported
           Media Type response.</p><p>
           WHEN_NO_TEMPLATES allows pass-through when the integration has no
           content types mapped to templates. However, if there is at least one content type
           defined, unmapped content types will be rejected with the same HTTP 415
           Unsupported Media Type response.</p>
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method
           request to the backend. The key is an integration request parameter name and the
           associated value is a method request parameter value or static value that must be
           enclosed within single quotes and pre-encoded as required by the backend. The method
           request parameter value must match the pattern of
           method.request.{location}.{name}
           , where 
           {location}
            is querystring, path, or header; and 
           {name}
            must be a valid and unique method request parameter name.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          Represents a map of Velocity templates that are applied on the request payload
           based on the value of the Content-Type header sent by the client. The content type
           value is the key in this map, and the template (as a String) is the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: |-
          Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
           milliseconds or 29 seconds.
    type: object
  UpdateIntegrationResponseRequest:
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying response parameters that are passed to the method
           response from the backend. The key is a method response header parameter name and the
           mapped value is an integration response header value, a static value enclosed within
           a pair of single quotes, or a JSON expression from the integration response body. The
           mapping key must match the pattern of
           method.response.header.{name}
           , where name is a valid and unique header name. The mapped non-static value
           must match the pattern of
           integration.response.header.{name}
            or
           integration.response.body.{JSON-expression}
           , where 
           {name}
            is a valid and unique response header name and 
           {JSON-expression}
            is a valid JSON expression without the $ prefix.
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          The collection of response templates for the integration response as a
           string-to-string map of key-value pairs. Response templates are represented as a
           key/value map, with a content-type as the key and a template as the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration response.
    type: object
  UpdateIntegrationResponseResponse:
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: |-
          <p>Specifies how to handle response payload content type conversions. Supported
           values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the
           following behaviors:</p><p>
           CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
           string to the corresponding binary blob.</p><p>
           CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
           Base64-encoded string.</p><p>If this property is not defined, the response payload will be passed through from
           the integration response to the route response or method response without
           modification.</p>
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying response parameters that are passed to the method
           response from the backend. The key is a method response header parameter name and the
           mapped value is an integration response header value, a static value enclosed within
           a pair of single quotes, or a JSON expression from the integration response body. The
           mapping key must match the pattern of method.response.header.{name}, where name is a
           valid and unique header name. The mapped non-static value must match the pattern of
           integration.response.header.{name} or integration.response.body.{JSON-expression},
           where name is a valid and unique response header name and JSON-expression is a valid
           JSON expression without the $ prefix.
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: |-
          The collection of response templates for the integration response as a
           string-to-string map of key-value pairs. Response templates are represented as a
           key/value map, with a content-type as the key and a template as the value.
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
    type: object
  UpdateModelRequest:
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: |-
          The schema for the model. For application/json models, this should be JSON schema
           draft 4 model.
    type: object
  UpdateModelResponse:
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: |-
          The schema for the model. For application/json models, this should be JSON schema
           draft 4 model.
    type: object
  UpdateRouteRequest:
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for the route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: |-
          The authorization scopes supported by this
           route.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: |-
          The authorization type for the route. Valid values are NONE for open
           access, AWS_IAM for using AWS IAM permissions, and CUSTOM
           for using a Lambda
           authorizer.
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Authorizer resource to be associated with this
           route, if the authorizationType is CUSTOM
           . The authorizer identifier is generated by API Gateway
           when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    type: object
  UpdateRouteResponse:
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: |-
          A list of authorization scopes configured on a route. The scopes are used with a
           COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization
           works by matching the route scopes against the scopes parsed from the access token in
           the incoming request. The method invocation is authorized if any route scope matches
           a claimed scope in the access token. Otherwise, the invocation is not authorized.
           When the route scope is configured, the client must provide an access token instead
           of an identity token for authorization purposes.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: |-
          The authorization type for the route. Valid values are NONE for open
           access, AWS_IAM for using AWS IAM permissions, and CUSTOM
           for using a Lambda
           authorizer
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Authorizer resource to be associated with this
           route, if the authorizationType is CUSTOM
           . The authorizer identifier is generated by API Gateway
           when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    type: object
  UpdateRouteResponseRequest:
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: The response models for the route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: The route response parameters.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The route response key.
    type: object
  UpdateRouteResponseResponse:
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
    type: object
  UpdateStageRequest:
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: The default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The deployment identifier for the API stage.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the API stage.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: |-
          A map that defines the stage variables for a Stage. Variable names
           can have alphanumeric and underscore characters, and the values must match
           [A-Za-z0-9-._~:/?#&=,]+.
    type: object
  UpdateStageResponse:
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: |-
          The identifier of the Deployment that the Stage is
           associated with.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: |-
          A map that defines the stage variables for a stage resource. Variable names can
           have alphanumeric and underscore characters, and the values must match
           [A-Za-z0-9-._~:/?#&=,]+.
      Tags:
        $ref: '#/definitions/Tags'
        description: 'The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with aws:. The tag value can be up to 256 characters..'
    type: object
  UriWithLengthBetween1And2048:
    description: 'A string representation of a URI with a length between [1-2048].'
    type: string
  __boolean:
    type: boolean
  __double:
    format: double
    type: number
  __integer:
    type: integer
  __listOfApi:
    items:
      $ref: '#/definitions/Api'
    type: array
  __listOfApiMapping:
    items:
      $ref: '#/definitions/ApiMapping'
    type: array
  __listOfAuthorizer:
    items:
      $ref: '#/definitions/Authorizer'
    type: array
  __listOfDeployment:
    items:
      $ref: '#/definitions/Deployment'
    type: array
  __listOfDomainName:
    items:
      $ref: '#/definitions/DomainName'
    type: array
  __listOfIntegration:
    items:
      $ref: '#/definitions/Integration'
    type: array
  __listOfIntegrationResponse:
    items:
      $ref: '#/definitions/IntegrationResponse'
    type: array
  __listOfModel:
    items:
      $ref: '#/definitions/Model'
    type: array
  __listOfRoute:
    items:
      $ref: '#/definitions/Route'
    type: array
  __listOfRouteResponse:
    items:
      $ref: '#/definitions/RouteResponse'
    type: array
  __listOfStage:
    items:
      $ref: '#/definitions/Stage'
    type: array
  __listOf__string:
    items:
      $ref: '#/definitions/__string'
    type: array
  __mapOf__string:
    additionalProperties:
      $ref: '#/definitions/__string'
    type: object
  __string:
    type: string
  __timestampIso8601:
    format: date-time
    type: string
x-servers:
  - description: The AmazonApiGatewayV2 multi-region endpoint
    url: 'http://apigateway.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The AmazonApiGatewayV2 multi-region endpoint
    url: 'https://apigateway.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
    url: 'http://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
  - description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
    url: 'https://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
