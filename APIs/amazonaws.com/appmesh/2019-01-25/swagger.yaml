swagger: '2.0'
info:
  version: '2019-01-25'
  x-release: v4
  title: AWS App Mesh
  description: |-
    <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and
             control containerized microservices. App Mesh standardizes how your microservices
             communicate, giving you end-to-end visibility and helping to ensure high-availability for
             your applications.</p>
             <p>App Mesh gives you consistent visibility and network traffic controls for every
             microservice in an application. You can use App Mesh with Amazon ECS
             (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>
             <note>
                <p>App Mesh supports containerized microservice applications that use service discovery
                naming for their components. To use App Mesh, you must have a containerized application
                running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For
                more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                   <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and
                   <code>coredns</code> are supported. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                   for Services and Pods</a> in the Kubernetes documentation.</p>
             </note>
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: appmesh
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/appmesh/'
host: appmesh.amazonaws.com
basePath: /
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: query
    type: string
    required: true
  Version:
    name: Version
    in: query
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /v20190125/meshes:
    put:
      operationId: CreateMesh
      description: |-
        <p>Creates a new service mesh. A service mesh is a logical boundary for network traffic
                 between the services that reside within it.</p>
                 <p>After you create your service mesh, you can create virtual services, virtual nodes,
                 virtual routers, and routes to distribute traffic between the applications in your
                 mesh.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - meshName
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              meshName:
                description: The name to use for the service mesh.
                type: string
                minLength: 1
                maxLength: 255
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListMeshes
      description: Returns a list of existing service meshes.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListMeshesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListMeshes</code> in paginated output.
                     When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code>
                     results in a single page along with a <code>nextToken</code> response element. You can see the
                     remaining results of the initial request by sending another
                        <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This
                     value can be between 1 and 100. If you don't use this parameter,
                     <code>ListMeshes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          type: integer
          minimum: 1
          maximum: 100
        - name: nextToken
          in: query
          required: false
          description: |-
            <p>The <code>nextToken</code> value returned from a previous paginated
                     <code>ListMeshes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.</p>
                     <note>
                        <p>This token should be treated as an opaque identifier that is only used to
                            retrieve the next items in a list and not for other programmatic purposes.</p>
                    </note>
          type: string
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes':
    put:
      operationId: CreateRoute
      description: |-
        <p>Creates a new route that is associated with a virtual router.</p>
                 <p>You can use the <code>prefix</code> parameter in your route specification for path-based
                 routing of requests. For example, if your virtual router service name is
                    <code>my-service.local</code>, and you want the route to match requests to
                    <code>my-service.local/metrics</code>, then your prefix should be
                 <code>/metrics</code>.</p>
                 <p>If your route matches a request, you can distribute traffic to one or more target
                 virtual nodes with relative weighting.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to create the route.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router in which to create the route.
          type: string
          minLength: 1
          maxLength: 255
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - routeName
              - spec
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              routeName:
                description: The name to use for the route.
                type: string
                minLength: 1
                maxLength: 255
              spec:
                description: An object representing the specification of a route.
                type: object
                properties:
                  httpRoute:
                    $ref: '#/definitions/HttpRoute'
                    description: The HTTP routing information for the route.
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListRoutes
      description: Returns a list of existing routes in a service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRoutesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListRoutes</code> in paginated output.
                     When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code>
                     results in a single page along with a <code>nextToken</code> response element. You can see the
                     remaining results of the initial request by sending another
                        <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This
                     value can be between 1 and 100. If you don't use this parameter,
                     <code>ListRoutes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          type: integer
          minimum: 1
          maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to list routes.
          type: string
          minLength: 1
          maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListRoutes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          type: string
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to list routes in.
          type: string
          minLength: 1
          maxLength: 255
  '/v20190125/meshes/{meshName}/virtualNodes':
    put:
      operationId: CreateVirtualNode
      description: |-
        <p>Creates a new virtual node within a service mesh.</p>
                 <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS
                 service or a Kubernetes deployment. When you create a virtual node, you must specify the
                 DNS service discovery hostname for your task group.</p>
                 <p>Any inbound traffic that your virtual node expects should be specified as a
                    <code>listener</code>. Any outbound traffic that your virtual node expects to reach
                 should be specified as a <code>backend</code>.</p>
                 <p>The response metadata for your new virtual node contains the <code>arn</code> that is
                 associated with the virtual node. Set this value (either the full ARN or the truncated
                 resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the
                    <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
                 proxy container in your task definition or pod spec. This is then mapped to the
                    <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                 <note>
                    <p>If you require your Envoy stats or tracing to use a different name, you can override
                    the <code>node.cluster</code> value that is set by
                       <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                       <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                 </note>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to create the virtual node.
          type: string
          minLength: 1
          maxLength: 255
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - spec
              - virtualNodeName
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual node.
                type: object
                properties:
                  backends:
                    $ref: '#/definitions/Backends'
                    description: The backends that the virtual node is expected to send outbound traffic to.
                  listeners:
                    $ref: '#/definitions/Listeners'
                    description: The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.
                  serviceDiscovery:
                    $ref: '#/definitions/ServiceDiscovery'
                    description: The service discovery information for the virtual node.
              virtualNodeName:
                description: The name to use for the virtual node.
                type: string
                minLength: 1
                maxLength: 255
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualNodes
      description: Returns a list of existing virtual nodes.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualNodesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListVirtualNodes</code> in paginated
                     output. When you use this parameter, <code>ListVirtualNodes</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this parameter,
                     <code>ListVirtualNodes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          type: integer
          minimum: 1
          maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual nodes in.
          type: string
          minLength: 1
          maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListVirtualNodes</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          type: string
  '/v20190125/meshes/{meshName}/virtualRouters':
    put:
      operationId: CreateVirtualRouter
      description: |-
        <p>Creates a new virtual router within a service mesh.</p>
                 <p>Any inbound traffic that your virtual router expects should be specified as a
                    <code>listener</code>. </p>
                 <p>Virtual routers handle traffic for one or more service names within your mesh. After you
                 create your virtual router, create and associate routes for your virtual router that direct
                 incoming requests to different virtual nodes.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual router in.
          type: string
          minLength: 1
          maxLength: 255
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - spec
              - virtualRouterName
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual router.
                type: object
                properties:
                  listeners:
                    $ref: '#/definitions/VirtualRouterListeners'
                    description: The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.
              virtualRouterName:
                description: The name to use for the virtual router.
                type: string
                minLength: 1
                maxLength: 255
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualRouters
      description: Returns a list of existing virtual routers in a service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualRoutersOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListVirtualRouters</code> in paginated
                     output. When you use this parameter, <code>ListVirtualRouters</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request  by sending another
                        <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this parameter, 
                     <code>ListVirtualRouters</code> returns up to 100 results and
                     a <code>nextToken</code> value if applicable.
          type: integer
          minimum: 1
          maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual routers in.
          type: string
          minLength: 1
          maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                     <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          type: string
  '/v20190125/meshes/{meshName}/virtualServices':
    put:
      operationId: CreateVirtualService
      description: |-
        <p>Creates a virtual service within a service mesh.</p>
                 <p>A virtual service is an abstraction of a real service that is either provided by a
                 virtual node directly, or indirectly by means of a virtual router. Dependent services call
                 your virtual service by its <code>virtualServiceName</code>, and those requests are routed
                 to the virtual node or virtual router that is specified as the provider for the virtual
                 service.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh in which to create the virtual service.
          type: string
          minLength: 1
          maxLength: 255
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - spec
              - virtualServiceName
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual service.
                type: object
                properties:
                  provider:
                    $ref: '#/definitions/VirtualServiceProvider'
                    description: |-
                      The App Mesh object that is acting as the provider for a virtual service. You can specify
                               a single virtual node or virtual router.
              virtualServiceName:
                description: The name to use for the virtual service.
                type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualServices
      description: Returns a list of existing virtual services in a service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualServicesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListVirtualServices</code> in paginated
                     output. When you use this parameter, <code>ListVirtualServices</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this parameter,
                     <code>ListVirtualServices</code> returns up to 100 results and
                     a <code>nextToken</code> value if applicable.
          type: integer
          minimum: 1
          maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual services in.
          type: string
          minLength: 1
          maxLength: 255
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListVirtualServices</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          type: string
  '/v20190125/meshes/{meshName}':
    delete:
      operationId: DeleteMesh
      description: |-
        <p>Deletes an existing service mesh.</p>
                 <p>You must delete all resources (virtual services, routes, virtual routers, virtual nodes)
                 in the service mesh before you can delete the mesh itself.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete.
          type: string
          minLength: 1
          maxLength: 255
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeMesh
      description: Describes an existing service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to describe.
          type: string
          minLength: 1
          maxLength: 255
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}':
    delete:
      operationId: DeleteRoute
      description: Deletes an existing route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the route in.
          type: string
          minLength: 1
          maxLength: 255
        - name: routeName
          in: path
          required: true
          description: The name of the route to delete.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to delete the route in.
          type: string
          minLength: 1
          maxLength: 255
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeRoute
      description: Describes an existing route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the route resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: routeName
          in: path
          required: true
          description: The name of the route to describe.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router that the route is associated with.
          type: string
          minLength: 1
          maxLength: 255
    put:
      operationId: UpdateRoute
      description: Updates an existing route for a specified service mesh and virtual router.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the route resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: routeName
          in: path
          required: true
          description: The name of the route to update.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router that the route is associated with.
          type: string
          minLength: 1
          maxLength: 255
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - spec
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a route.
                type: object
                properties:
                  httpRoute:
                    $ref: '#/definitions/HttpRoute'
                    description: The HTTP routing information for the route.
  '/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}':
    delete:
      operationId: DeleteVirtualNode
      description: |-
        <p>Deletes an existing virtual node.</p>
                 <p>You must delete any virtual services that list a virtual node as a service provider
                 before you can delete the virtual node itself.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual node in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to delete.
          type: string
          minLength: 1
          maxLength: 255
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualNode
      description: Describes an existing virtual node.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual node resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to describe.
          type: string
          minLength: 1
          maxLength: 255
    put:
      operationId: UpdateVirtualNode
      description: Updates an existing virtual node in a specified service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual node resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to update.
          type: string
          minLength: 1
          maxLength: 255
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - spec
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual node.
                type: object
                properties:
                  backends:
                    $ref: '#/definitions/Backends'
                    description: The backends that the virtual node is expected to send outbound traffic to.
                  listeners:
                    $ref: '#/definitions/Listeners'
                    description: The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.
                  serviceDiscovery:
                    $ref: '#/definitions/ServiceDiscovery'
                    description: The service discovery information for the virtual node.
  '/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}':
    delete:
      operationId: DeleteVirtualRouter
      description: |-
        <p>Deletes an existing virtual router.</p>
                 <p>You must delete any routes associated with the virtual router before you can delete the
                 router itself.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual router in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to delete.
          type: string
          minLength: 1
          maxLength: 255
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualRouter
      description: Describes an existing virtual router.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual router resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to describe.
          type: string
          minLength: 1
          maxLength: 255
    put:
      operationId: UpdateVirtualRouter
      description: Updates an existing virtual router in a specified service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual router resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to update.
          type: string
          minLength: 1
          maxLength: 255
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - spec
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual router.
                type: object
                properties:
                  listeners:
                    $ref: '#/definitions/VirtualRouterListeners'
                    description: The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.
  '/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}':
    delete:
      operationId: DeleteVirtualService
      description: Deletes an existing virtual service.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual service in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to delete.
          type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualService
      description: Describes an existing virtual service.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual service resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to describe.
          type: string
    put:
      operationId: UpdateVirtualService
      description: Updates an existing virtual service in a specified service mesh.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual service resides in.
          type: string
          minLength: 1
          maxLength: 255
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to update.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - spec
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual service.
                type: object
                properties:
                  provider:
                    $ref: '#/definitions/VirtualServiceProvider'
                    description: |-
                      The App Mesh object that is acting as the provider for a virtual service. You can specify
                               a single virtual node or virtual router.
definitions:
  CreateMeshOutput:
    type: object
    required:
      - mesh
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The full description of your service mesh following the create call.
    description: ''
  BadRequestException: {}
  ConflictException: {}
  ForbiddenException: {}
  InternalServerErrorException: {}
  LimitExceededException: {}
  NotFoundException: {}
  ServiceUnavailableException: {}
  TooManyRequestsException: {}
  CreateRouteOutput:
    type: object
    required:
      - route
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The full description of your mesh following the create call.
    description: ''
  HttpRoute:
    type: object
    required:
      - action
      - match
    properties:
      action:
        $ref: '#/definitions/HttpRouteAction'
        description: The action to take if a match is determined.
      match:
        $ref: '#/definitions/HttpRouteMatch'
        description: The criteria for determining an HTTP request match.
    description: An object representing the HTTP routing specification for a route.
  CreateVirtualNodeOutput:
    type: object
    required:
      - virtualNode
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The full description of your virtual node following the create call.
    description: ''
  Backends:
    type: array
    items:
      $ref: '#/definitions/Backend'
  Listeners:
    type: array
    items:
      $ref: '#/definitions/Listener'
  ServiceDiscovery:
    type: object
    properties:
      dns:
        $ref: '#/definitions/DnsServiceDiscovery'
        description: Specifies the DNS information for the virtual node.
    description: An object representing the service discovery information for a virtual node.
  CreateVirtualRouterOutput:
    type: object
    required:
      - virtualRouter
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The full description of your virtual router following the create call.
    description: ''
  VirtualRouterListeners:
    type: array
    items:
      $ref: '#/definitions/VirtualRouterListener'
  CreateVirtualServiceOutput:
    type: object
    required:
      - virtualService
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: The full description of your virtual service following the create call.
    description: ''
  VirtualServiceProvider:
    type: object
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeServiceProvider'
        description: The virtual node associated with a virtual service.
      virtualRouter:
        $ref: '#/definitions/VirtualRouterServiceProvider'
        description: The virtual router associated with a virtual service.
    description: An object representing the provider for a virtual service.
  DeleteMeshOutput:
    type: object
    required:
      - mesh
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The service mesh that was deleted.
    description: ''
  ResourceInUseException: {}
  DeleteRouteOutput:
    type: object
    required:
      - route
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The route that was deleted.
    description: ''
  DeleteVirtualNodeOutput:
    type: object
    required:
      - virtualNode
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The virtual node that was deleted.
    description: ''
  DeleteVirtualRouterOutput:
    type: object
    required:
      - virtualRouter
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The virtual router that was deleted.
    description: ''
  DeleteVirtualServiceOutput:
    type: object
    required:
      - virtualService
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: The virtual service that was deleted.
    description: ''
  DescribeMeshOutput:
    type: object
    required:
      - mesh
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The full description of your service mesh.
    description: ''
  DescribeRouteOutput:
    type: object
    required:
      - route
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The full description of your route.
    description: ''
  DescribeVirtualNodeOutput:
    type: object
    required:
      - virtualNode
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The full description of your virtual node.
    description: ''
  DescribeVirtualRouterOutput:
    type: object
    required:
      - virtualRouter
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The full description of your virtual router.
    description: ''
  DescribeVirtualServiceOutput:
    type: object
    required:
      - virtualService
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: The full description of your virtual service.
    description: ''
  ListMeshesOutput:
    type: object
    required:
      - meshes
    properties:
      meshes:
        $ref: '#/definitions/MeshList'
        description: The list of existing service meshes.
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListMeshes</code>
                   request. When the results of a <code>ListMeshes</code> request exceed
                   <code>limit</code>, you can use this value to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
    description: ''
  ListRoutesOutput:
    type: object
    required:
      - routes
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListRoutes</code>
                   request. When the results of a <code>ListRoutes</code> request exceed
                   <code>limit</code>, you can use this value to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
      routes:
        $ref: '#/definitions/RouteList'
        description: The list of existing routes for the specified service mesh and virtual router.
    description: ''
  ListVirtualNodesOutput:
    type: object
    required:
      - virtualNodes
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>
                   request. When the results of a <code>ListVirtualNodes</code> request exceed
                   <code>limit</code>, you can use this value to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
      virtualNodes:
        $ref: '#/definitions/VirtualNodeList'
        description: The list of existing virtual nodes for the specified service mesh.
    description: ''
  ListVirtualRoutersOutput:
    type: object
    required:
      - virtualRouters
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>
                   request. When the results of a <code>ListVirtualRouters</code> request exceed
                   <code>limit</code>, you can use this value to retrieve the next page of
                   results. This value is <code>null</code> when there are no more results to
                   return.
      virtualRouters:
        $ref: '#/definitions/VirtualRouterList'
        description: The list of existing virtual routers for the specified service mesh.
    description: ''
  ListVirtualServicesOutput:
    type: object
    required:
      - virtualServices
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code>
                   request. When the results of a <code>ListVirtualServices</code> request exceed
                      <code>limit</code>, you can use this value to retrieve the next page of results. This
                   value is <code>null</code> when there are no more results to return.
      virtualServices:
        $ref: '#/definitions/VirtualServiceList'
        description: The list of existing virtual services for the specified service mesh.
    description: ''
  UpdateRouteOutput:
    type: object
    required:
      - route
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: A full description of the route that was updated.
    description: ''
  UpdateVirtualNodeOutput:
    type: object
    required:
      - virtualNode
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: A full description of the virtual node that was updated.
    description: ''
  UpdateVirtualRouterOutput:
    type: object
    required:
      - virtualRouter
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: A full description of the virtual router that was updated.
    description: ''
  UpdateVirtualServiceOutput:
    type: object
    required:
      - virtualService
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: A full description of the virtual service that was updated.
    description: ''
  PortMapping:
    type: object
    required:
      - port
      - protocol
    properties:
      port:
        $ref: '#/definitions/PortNumber'
        description: The port used for the port mapping.
      protocol:
        $ref: '#/definitions/PortProtocol'
        description: The protocol used for the port mapping.
    description: An object representing a virtual node or virtual router listener port mapping.
  VirtualRouterListener:
    type: object
    required:
      - portMapping
    properties:
      portMapping:
        $ref: '#/definitions/PortMapping'
    description: An object representing a virtual router listener.
  String:
    type: string
  ResourceName:
    type: string
    minLength: 1
    maxLength: 255
  VirtualNodeSpec:
    type: object
    properties:
      backends:
        $ref: '#/definitions/Backends'
        description: The backends that the virtual node is expected to send outbound traffic to.
      listeners:
        $ref: '#/definitions/Listeners'
        description: The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.
      serviceDiscovery:
        $ref: '#/definitions/ServiceDiscovery'
        description: The service discovery information for the virtual node.
    description: An object representing the specification of a virtual node.
  UpdateVirtualNodeInput:
    type: object
    required:
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The new virtual node specification to apply. This overwrites the existing data.
    description: ''
  DeleteMeshInput:
    type: object
    properties: {}
    description: ''
  VirtualServiceSpec:
    type: object
    properties:
      provider:
        $ref: '#/definitions/VirtualServiceProvider'
        description: |-
          The App Mesh object that is acting as the provider for a virtual service. You can specify
                   a single virtual node or virtual router.
    description: An object representing the specification of a virtual service.
  ServiceName:
    type: string
  CreateVirtualServiceInput:
    type: object
    required:
      - spec
      - virtualServiceName
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualServiceSpec'
        description: The virtual service specification to apply.
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name to use for the virtual service.
    description: ''
  VirtualRouterStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  VirtualRouterSpec:
    type: object
    required:
      - listeners
    properties:
      listeners:
        $ref: '#/definitions/VirtualRouterListeners'
        description: The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.
    description: An object representing the specification of a virtual router.
  UpdateVirtualRouterInput:
    type: object
    required:
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The new virtual router specification to apply. This overwrites the existing data.
    description: ''
  VirtualNodeData:
    type: object
    required:
      - meshName
      - metadata
      - spec
      - status
      - virtualNodeName
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual node resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the virtual node.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The specifications of the virtual node.
      status:
        $ref: '#/definitions/VirtualNodeStatus'
        description: The current status for the virtual node.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node.
    description: An object representing a virtual node returned by a describe operation.
  Long:
    type: integer
  VirtualRouterData:
    type: object
    required:
      - meshName
      - metadata
      - spec
      - status
      - virtualRouterName
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual router resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the virtual router.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The specifications of the virtual router.
      status:
        $ref: '#/definitions/VirtualRouterStatus'
        description: The current status of the virtual router.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router.
    description: An object representing a virtual router returned by a describe operation.
  MeshData:
    type: object
    required:
      - meshName
      - metadata
      - status
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the service mesh.
      status:
        $ref: '#/definitions/MeshStatus'
        description: The status of the service mesh.
    description: An object representing a service mesh returned by a describe operation.
  DeleteVirtualRouterInput:
    type: object
    properties: {}
    description: ''
  VirtualRouterList:
    type: array
    items:
      $ref: '#/definitions/VirtualRouterRef'
  DescribeRouteInput:
    type: object
    properties: {}
    description: ''
  RouteData:
    type: object
    required:
      - meshName
      - metadata
      - routeName
      - spec
      - status
      - virtualRouterName
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the route resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the route.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the route.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The specifications of the route.
      status:
        $ref: '#/definitions/RouteStatus'
        description: The status of the route.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The virtual router that the route is associated with.
    description: An object representing a route returned by a describe operation.
  Arn:
    type: string
  Timestamp:
    type: string
    format: date-time
  ResourceMetadata:
    type: object
    required:
      - arn
      - createdAt
      - lastUpdatedAt
      - uid
      - version
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: |-
          <p>The full Amazon Resource Name (ARN) for the resource.</p>
                   <note>
                      <p>After you create a virtual node, set this value (either the full ARN or the
                      truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,
                      as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's
                      Envoy proxy container in your task definition or pod spec. This is then mapped to the
                         <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                      <p>If you require your Envoy stats or tracing to use a different name, you can override
                      the <code>node.cluster</code> value that is set by
                         <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                         <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                   </note>
      createdAt:
        $ref: '#/definitions/Timestamp'
        description: The Unix epoch timestamp in seconds for when the resource was created.
      lastUpdatedAt:
        $ref: '#/definitions/Timestamp'
        description: The Unix epoch timestamp in seconds for when the resource was last updated.
      uid:
        $ref: '#/definitions/String'
        description: The unique identifier for the resource.
      version:
        $ref: '#/definitions/Long'
        description: |-
          The version of the resource. Resources are created at version 1, and this version is
                   incremented each time that they're updated.
    description: An object representing metadata for a resource.
  Listener:
    type: object
    required:
      - portMapping
    properties:
      healthCheck:
        $ref: '#/definitions/HealthCheckPolicy'
        description: The health check information for the listener.
      portMapping:
        $ref: '#/definitions/PortMapping'
        description: The port mapping information for the listener.
    description: An object representing a listener for a virtual node.
  Backend:
    type: object
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceBackend'
        description: 'Specifies a virtual service to use as a backend for a virtual node. '
    description: |-
      An object representing the backends that a virtual node is expected to send outbound
               traffic to. 
  PortProtocol:
    type: string
    enum:
      - http
      - tcp
  RouteList:
    type: array
    items:
      $ref: '#/definitions/RouteRef'
  VirtualServiceBackend:
    type: object
    required:
      - virtualServiceName
    properties:
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name of the virtual service that is acting as a virtual node backend.
    description: An object representing a virtual service backend for a virtual node.
  VirtualNodeStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  UpdateVirtualServiceInput:
    type: object
    required:
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualServiceSpec'
        description: |-
          The new virtual service specification to apply. This overwrites the existing
                   data.
    description: ''
  HealthCheckThreshold:
    type: integer
    minimum: 2
    maximum: 10
  PercentInt:
    type: integer
    minimum: 0
    maximum: 100
  WeightedTargets:
    type: array
    items:
      $ref: '#/definitions/WeightedTarget'
  HttpRouteAction:
    type: object
    required:
      - weightedTargets
    properties:
      weightedTargets:
        $ref: '#/definitions/WeightedTargets'
        description: |-
          The targets that traffic is routed to when a request matches the route. You can specify
                   one or more targets and their relative weights to distribute traffic with.
    description: |-
      An object representing the traffic distribution requirements for matched HTTP
               requests.
  ListRoutesLimit:
    type: integer
    minimum: 1
    maximum: 100
  ListRoutesInput:
    type: object
    properties: {}
    description: ''
  HealthCheckIntervalMillis:
    type: integer
    minimum: 5000
    maximum: 300000
  PortNumber:
    type: integer
    minimum: 1
    maximum: 65535
  HealthCheckTimeoutMillis:
    type: integer
    minimum: 2000
    maximum: 60000
  HealthCheckPolicy:
    type: object
    required:
      - healthyThreshold
      - intervalMillis
      - protocol
      - timeoutMillis
      - unhealthyThreshold
    properties:
      healthyThreshold:
        $ref: '#/definitions/HealthCheckThreshold'
        description: |-
          The number of consecutive successful health checks that must occur before declaring
                   listener healthy.
      intervalMillis:
        $ref: '#/definitions/HealthCheckIntervalMillis'
        description: The time period in milliseconds between each health check execution.
      path:
        $ref: '#/definitions/String'
        description: |-
          The destination path for the health check request. This is required only if the
                   specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.
      port:
        $ref: '#/definitions/PortNumber'
        description: |-
          The destination port for the health check request. This port must match the port defined
                   in the <a>PortMapping</a> for the listener.
      protocol:
        $ref: '#/definitions/PortProtocol'
        description: The protocol for the health check request.
      timeoutMillis:
        $ref: '#/definitions/HealthCheckTimeoutMillis'
        description: |-
          The amount of time to wait when receiving a response from the health check, in
                   milliseconds.
      unhealthyThreshold:
        $ref: '#/definitions/HealthCheckThreshold'
        description: |-
          The number of consecutive failed health checks that must occur before declaring a
                   virtual node unhealthy. 
    description: An object representing the health check policy for a virtual node's listener.
  VirtualServiceRef:
    type: object
    required:
      - arn
      - meshName
      - virtualServiceName
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual service.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual service resides in.
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name of the virtual service.
    description: An object representing a virtual service returned by a list operation.
  VirtualServiceList:
    type: array
    items:
      $ref: '#/definitions/VirtualServiceRef'
  VirtualNodeStatus:
    type: object
    required:
      - status
    properties:
      status:
        $ref: '#/definitions/VirtualNodeStatusCode'
        description: The current status of the virtual node.
    description: An object representing the current status of the virtual node.
  VirtualRouterRef:
    type: object
    required:
      - arn
      - meshName
      - virtualRouterName
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual router.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual router resides in.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router.
    description: An object representing a virtual router returned by a list operation.
  VirtualServiceStatus:
    type: object
    required:
      - status
    properties:
      status:
        $ref: '#/definitions/VirtualServiceStatusCode'
        description: The current status of the virtual service.
    description: An object representing the status of a virtual service.
  VirtualServiceData:
    type: object
    required:
      - meshName
      - metadata
      - spec
      - status
      - virtualServiceName
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual service resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
      spec:
        $ref: '#/definitions/VirtualServiceSpec'
        description: The specifications of the virtual service.
      status:
        $ref: '#/definitions/VirtualServiceStatus'
        description: The current status of the virtual service.
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name of the virtual service.
    description: An object representing a virtual service returned by a describe operation.
  VirtualNodeRef:
    type: object
    required:
      - arn
      - meshName
      - virtualNodeName
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual node.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual node resides in.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node.
    description: An object representing a virtual node returned by a list operation.
  CreateMeshInput:
    type: object
    required:
      - meshName
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the service mesh.
    description: ''
  Hostname:
    type: string
  DnsServiceDiscovery:
    type: object
    required:
      - hostname
    properties:
      hostname:
        $ref: '#/definitions/Hostname'
        description: 'Specifies the DNS service discovery hostname for the virtual node. '
    description: |-
      An object representing the DNS service discovery information for your virtual
               node.
  DescribeVirtualServiceInput:
    type: object
    properties: {}
    description: ''
  ListVirtualServicesLimit:
    type: integer
    minimum: 1
    maximum: 100
  DeleteRouteInput:
    type: object
    properties: {}
    description: ''
  ListVirtualRoutersLimit:
    type: integer
    minimum: 1
    maximum: 100
  ListMeshesLimit:
    type: integer
    minimum: 1
    maximum: 100
  ListMeshesInput:
    type: object
    properties: {}
    description: ''
  VirtualNodeList:
    type: array
    items:
      $ref: '#/definitions/VirtualNodeRef'
  ListVirtualRoutersInput:
    type: object
    properties: {}
    description: ''
  VirtualRouterStatus:
    type: object
    required:
      - status
    properties:
      status:
        $ref: '#/definitions/VirtualRouterStatusCode'
        description: The current status of the virtual router.
    description: 'An object representing the status of a virtual router. '
  ListVirtualServicesInput:
    type: object
    properties: {}
    description: ''
  CreateVirtualRouterInput:
    type: object
    required:
      - spec
      - virtualRouterName
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The virtual router specification to apply.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the virtual router.
    description: ''
  ListVirtualNodesLimit:
    type: integer
    minimum: 1
    maximum: 100
  ListVirtualNodesInput:
    type: object
    properties: {}
    description: ''
  VirtualServiceStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  MeshList:
    type: array
    items:
      $ref: '#/definitions/MeshRef'
  HttpRouteMatch:
    type: object
    required:
      - prefix
    properties:
      prefix:
        $ref: '#/definitions/String'
        description: |-
          Specifies the path to match requests with. This parameter must always start with
                      <code>/</code>, which by itself matches all requests to the virtual router service name.
                   You can also match for path-based routing of requests. For example, if your virtual router
                   service name is <code>my-service.local</code> and you want the route to match requests to
                      <code>my-service.local/metrics</code>, your prefix should be
                   <code>/metrics</code>.
    description: |-
      An object representing the requirements for a route to match HTTP requests for a virtual
               router.
  MeshRef:
    type: object
    required:
      - arn
      - meshName
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) of the service mesh.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh.
    description: An object representing a service mesh returned by a list operation.
  MeshStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  MeshStatus:
    type: object
    properties:
      status:
        $ref: '#/definitions/MeshStatusCode'
        description: The current mesh status.
    description: An object representing the status of a service mesh.
  WeightedTarget:
    type: object
    required:
      - virtualNode
      - weight
    properties:
      virtualNode:
        $ref: '#/definitions/ResourceName'
        description: The virtual node to associate with the weighted target.
      weight:
        $ref: '#/definitions/PercentInt'
        description: The relative weight of the weighted target.
    description: |-
      An object representing a target and its relative weight. Traffic is distributed across
               targets according to their relative weight. For example, a weighted target with a relative
               weight of 50 receives five times as much traffic as one with a relative weight of
               10.
  DescribeVirtualNodeInput:
    type: object
    properties: {}
    description: ''
  RouteStatusCode:
    type: string
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
  RouteStatus:
    type: object
    required:
      - status
    properties:
      status:
        $ref: '#/definitions/RouteStatusCode'
        description: The current status for the route.
    description: An object representing the current status of a route.
  RouteRef:
    type: object
    required:
      - arn
      - meshName
      - routeName
      - virtualRouterName
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the route.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the route resides in.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the route.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The virtual router that the route is associated with.
    description: An object representing a route returned by a list operation.
  DeleteVirtualNodeInput:
    type: object
    properties: {}
    description: ''
  RouteSpec:
    type: object
    properties:
      httpRoute:
        $ref: '#/definitions/HttpRoute'
        description: The HTTP routing information for the route.
    description: An object representing the specification of a route.
  VirtualNodeServiceProvider:
    type: object
    required:
      - virtualNodeName
    properties:
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node that is acting as a service provider.
    description: An object representing a virtual node service provider.
  DescribeVirtualRouterInput:
    type: object
    properties: {}
    description: ''
  CreateRouteInput:
    type: object
    required:
      - routeName
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the route.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The route specification to apply.
    description: ''
  VirtualRouterServiceProvider:
    type: object
    required:
      - virtualRouterName
    properties:
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router that is acting as a service provider.
    description: An object representing a virtual node service provider.
  UpdateRouteInput:
    type: object
    required:
      - spec
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The new route specification to apply. This overwrites the existing data.
    description: ''
  CreateVirtualNodeInput:
    type: object
    required:
      - spec
      - virtualNodeName
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The virtual node specification to apply.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the virtual node.
    description: ''
  DescribeMeshInput:
    type: object
    properties: {}
    description: ''
  DeleteVirtualServiceInput:
    type: object
    properties: {}
    description: ''
