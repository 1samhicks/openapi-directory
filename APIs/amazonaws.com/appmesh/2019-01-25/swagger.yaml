swagger: '2.0'
schemes:
  - https
  - http
host: appmesh.amazonaws.com
basePath: /
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: |-
    <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and
             control microservices. App Mesh standardizes how your microservices communicate, giving you
             end-to-end visibility and helping to ensure high availability for your applications.</p>
             <p>App Mesh gives you consistent visibility and network traffic controls for every
             microservice in an application. You can use App Mesh with AWS Fargate, Amazon ECS, Amazon EKS,
             Kubernetes on AWS, and Amazon EC2.</p>
             <note>
                <p>App Mesh supports microservice applications that use service discovery naming for their
                components. For more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                   <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and
                   <code>coredns</code> are supported. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                   for Services and Pods</a> in the Kubernetes documentation.</p>
             </note>
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS App Mesh
  version: '2019-01-25'
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json'
      x-apisguru-direct: true
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: appmesh
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/appmesh/'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
parameters:
  X-Amz-Algorithm:
    in: header
    name: X-Amz-Algorithm
    required: false
    type: string
  X-Amz-Content-Sha256:
    in: header
    name: X-Amz-Content-Sha256
    required: false
    type: string
  X-Amz-Credential:
    in: header
    name: X-Amz-Credential
    required: false
    type: string
  X-Amz-Date:
    in: header
    name: X-Amz-Date
    required: false
    type: string
  X-Amz-Security-Token:
    in: header
    name: X-Amz-Security-Token
    required: false
    type: string
  X-Amz-Signature:
    in: header
    name: X-Amz-Signature
    required: false
    type: string
  X-Amz-SignedHeaders:
    in: header
    name: X-Amz-SignedHeaders
    required: false
    type: string
paths:
  /v20190125/meshes:
    get:
      description: Returns a list of existing service meshes.
      operationId: ListMeshes
      parameters:
        - description: |-
            The maximum number of results returned by <code>ListMeshes</code> in paginated output.
                     When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code>
                     results in a single page along with a <code>nextToken</code> response element. You can see
                     the remaining results of the initial request by sending another <code>ListMeshes</code>
                     request with the returned <code>nextToken</code> value. This value can be between
                     1 and 100. If you don't use this parameter,
                        <code>ListMeshes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: |-
            <p>The <code>nextToken</code> value returned from a previous paginated
                        <code>ListMeshes</code> request where <code>limit</code> was used and the results
                     exceeded the value of that parameter. Pagination continues from the end of the previous
                     results that returned the <code>nextToken</code> value.</p> 
                     <note>
                        <p>This token should be treated as an opaque identifier that is used only to
                            retrieve the next items in a list and not for other programmatic purposes.</p>
                    </note>
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListMeshesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: |-
        <p>Creates a service mesh. A service mesh is a logical boundary for network traffic between
                 the services that reside within it.</p>
                 <p>After you create your service mesh, you can create virtual services, virtual nodes,
                 virtual routers, and routes to distribute traffic between the applications in your
                 mesh.</p>
      operationId: CreateMesh
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              meshName:
                description: The name to use for the service mesh.
                maxLength: 255
                minLength: 1
                type: string
              spec:
                description: An object representing the specification of a service mesh.
                properties:
                  egressFilter:
                    $ref: '#/definitions/EgressFilter'
                    description: The egress filter rules for the service mesh.
                type: object
              tags:
                description: |-
                  Optional metadata that you can apply to the service mesh to assist with categorization
                           and organization. Each tag consists of a key and an optional value, both of which you
                           define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                              a maximum length of 256 characters.
                items:
                  $ref: '#/definitions/TagRef'
                maxItems: 50
                minItems: 0
                type: array
            required:
              - meshName
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}':
    delete:
      description: |-
        <p>Deletes an existing service mesh.</p>
                 <p>You must delete all resources (virtual services, routes, virtual routers, and virtual
                 nodes) in the service mesh before you can delete the mesh itself.</p>
      operationId: DeleteMesh
      parameters:
        - description: The name of the service mesh to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing service mesh.
      operationId: DescribeMesh
      parameters:
        - description: The name of the service mesh to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: Updates an existing service mesh.
      operationId: UpdateMesh
      parameters:
        - description: The name of the service mesh to update.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a service mesh.
                properties:
                  egressFilter:
                    $ref: '#/definitions/EgressFilter'
                    description: The egress filter rules for the service mesh.
                type: object
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateMeshOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualNodes':
    get:
      description: Returns a list of existing virtual nodes.
      operationId: ListVirtualNodes
      parameters:
        - description: |-
            The maximum number of results returned by <code>ListVirtualNodes</code> in paginated
                     output. When you use this parameter, <code>ListVirtualNodes</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this
                     parameter, <code>ListVirtualNodes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: The name of the service mesh to list virtual nodes in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results
                     exceeded the value of that parameter. Pagination continues from the end of the previous
                     results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualNodesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: |-
        <p>Creates a virtual node within a service mesh.</p>
                 <p>A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS
                 service or a Kubernetes deployment. When you create a virtual node, you can specify the
                 service discovery information for your task group.</p>
                 <p>Any inbound traffic that your virtual node expects should be specified as a
                    <code>listener</code>. Any outbound traffic that your virtual node expects to reach
                 should be specified as a <code>backend</code>.</p>
                 <p>The response metadata for your new virtual node contains the <code>arn</code> that is
                 associated with the virtual node. Set this value (either the full ARN or the truncated
                 resource name: for example, <code>mesh/default/virtualNode/simpleapp</code>) as the
                    <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
                 proxy container in your task definition or pod spec. This is then mapped to the
                    <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                 <note>
                    <p>If you require your Envoy stats or tracing to use a different name, you can override
                    the <code>node.cluster</code> value that is set by
                       <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                       <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                 </note>
      operationId: CreateVirtualNode
      parameters:
        - description: The name of the service mesh to create the virtual node in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual node.
                properties:
                  backends:
                    $ref: '#/definitions/Backends'
                    description: The backends that the virtual node is expected to send outbound traffic to.
                  listeners:
                    $ref: '#/definitions/Listeners'
                    description: |-
                      The listeners that the virtual node is expected to receive inbound traffic from.
                               Currently only one listener is supported per virtual node.
                  logging:
                    $ref: '#/definitions/Logging'
                    description: The inbound and outbound access logging information for the virtual node.
                  serviceDiscovery:
                    $ref: '#/definitions/ServiceDiscovery'
                    description: |-
                      The service discovery information for the virtual node. If your virtual node does not
                               expect ingress traffic, you can omit this parameter.
                type: object
              tags:
                description: |-
                  Optional metadata that you can apply to the virtual node to assist with categorization
                           and organization. Each tag consists of a key and an optional value, both of which you
                           define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                              a maximum length of 256 characters.
                items:
                  $ref: '#/definitions/TagRef'
                maxItems: 50
                minItems: 0
                type: array
              virtualNodeName:
                description: The name to use for the virtual node.
                maxLength: 255
                minLength: 1
                type: string
            required:
              - spec
              - virtualNodeName
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}':
    delete:
      description: |-
        <p>Deletes an existing virtual node.</p>
                 <p>You must delete any virtual services that list a virtual node as a service provider
                 before you can delete the virtual node itself.</p>
      operationId: DeleteVirtualNode
      parameters:
        - description: The name of the service mesh to delete the virtual node in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual node to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualNodeName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing virtual node.
      operationId: DescribeVirtualNode
      parameters:
        - description: The name of the service mesh that the virtual node resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual node to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualNodeName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: Updates an existing virtual node in a specified service mesh.
      operationId: UpdateVirtualNode
      parameters:
        - description: The name of the service mesh that the virtual node resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual node to update.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualNodeName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual node.
                properties:
                  backends:
                    $ref: '#/definitions/Backends'
                    description: The backends that the virtual node is expected to send outbound traffic to.
                  listeners:
                    $ref: '#/definitions/Listeners'
                    description: |-
                      The listeners that the virtual node is expected to receive inbound traffic from.
                               Currently only one listener is supported per virtual node.
                  logging:
                    $ref: '#/definitions/Logging'
                    description: The inbound and outbound access logging information for the virtual node.
                  serviceDiscovery:
                    $ref: '#/definitions/ServiceDiscovery'
                    description: |-
                      The service discovery information for the virtual node. If your virtual node does not
                               expect ingress traffic, you can omit this parameter.
                type: object
            required:
              - spec
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualNodeOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes':
    get:
      description: Returns a list of existing routes in a service mesh.
      operationId: ListRoutes
      parameters:
        - description: |-
            The maximum number of results returned by <code>ListRoutes</code> in paginated output.
                     When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code>
                     results in a single page along with a <code>nextToken</code> response element. You can see
                     the remaining results of the initial request by sending another <code>ListRoutes</code>
                     request with the returned <code>nextToken</code> value. This value can be between
                     1 and 100. If you don't use this parameter,
                        <code>ListRoutes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: The name of the service mesh to list routes in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListRoutes</code> request where <code>limit</code> was used and the results
                     exceeded the value of that parameter. Pagination continues from the end of the previous
                     results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
        - description: The name of the virtual router to list routes in.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRoutesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: |-
        <p>Creates a route that is associated with a virtual router.</p>
                 <p>You can use the <code>prefix</code> parameter in your route specification for path-based
                 routing of requests. For example, if your virtual service name is
                    <code>my-service.local</code> and you want the route to match requests to
                    <code>my-service.local/metrics</code>, your prefix should be
                 <code>/metrics</code>.</p>
                 <p>If your route matches a request, you can distribute traffic to one or more target
                 virtual nodes with relative weighting.</p>
      operationId: CreateRoute
      parameters:
        - description: The name of the service mesh to create the route in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router in which to create the route.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              routeName:
                description: The name to use for the route.
                maxLength: 255
                minLength: 1
                type: string
              spec:
                description: An object representing the specification of a route.
                properties:
                  httpRoute:
                    $ref: '#/definitions/HttpRoute'
                    description: The HTTP routing information for the route.
                  priority:
                    $ref: '#/definitions/RoutePriority'
                    description: 'The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.'
                  tcpRoute:
                    $ref: '#/definitions/TcpRoute'
                    description: The TCP routing information for the route.
                type: object
              tags:
                description: |-
                  Optional metadata that you can apply to the route to assist with categorization and
                           organization. Each tag consists of a key and an optional value, both of which you define.
                           Tag keys can have a maximum character length of 128 characters, and tag values can have
                              a maximum length of 256 characters.
                items:
                  $ref: '#/definitions/TagRef'
                maxItems: 50
                minItems: 0
                type: array
            required:
              - routeName
              - spec
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}':
    delete:
      description: Deletes an existing route.
      operationId: DeleteRoute
      parameters:
        - description: The name of the service mesh to delete the route in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the route to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: routeName
          required: true
          type: string
        - description: The name of the virtual router to delete the route in.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing route.
      operationId: DescribeRoute
      parameters:
        - description: The name of the service mesh that the route resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the route to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: routeName
          required: true
          type: string
        - description: The name of the virtual router that the route is associated with.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: Updates an existing route for a specified service mesh and virtual router.
      operationId: UpdateRoute
      parameters:
        - description: The name of the service mesh that the route resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the route to update.
          in: path
          maxLength: 255
          minLength: 1
          name: routeName
          required: true
          type: string
        - description: The name of the virtual router that the route is associated with.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a route.
                properties:
                  httpRoute:
                    $ref: '#/definitions/HttpRoute'
                    description: The HTTP routing information for the route.
                  priority:
                    $ref: '#/definitions/RoutePriority'
                    description: 'The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.'
                  tcpRoute:
                    $ref: '#/definitions/TcpRoute'
                    description: The TCP routing information for the route.
                type: object
            required:
              - spec
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualRouters':
    get:
      description: Returns a list of existing virtual routers in a service mesh.
      operationId: ListVirtualRouters
      parameters:
        - description: |-
            The maximum number of results returned by <code>ListVirtualRouters</code> in paginated
                     output. When you use this parameter, <code>ListVirtualRouters</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this
                     parameter, <code>ListVirtualRouters</code> returns up to 100 results and
                     a <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: The name of the service mesh to list virtual routers in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualRoutersOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: |-
        <p>Creates a virtual router within a service mesh.</p>
                 <p>Any inbound traffic that your virtual router expects should be specified as a
                    <code>listener</code>. </p>
                 <p>Virtual routers handle traffic for one or more virtual services within your mesh. After
                 you create your virtual router, create and associate routes for your virtual router that
                 direct incoming requests to different virtual nodes.</p>
      operationId: CreateVirtualRouter
      parameters:
        - description: The name of the service mesh to create the virtual router in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual router.
                properties:
                  listeners:
                    $ref: '#/definitions/VirtualRouterListeners'
                    description: |-
                      The listeners that the virtual router is expected to receive inbound traffic from.
                               Currently only one listener is supported per virtual router.
                type: object
              tags:
                description: |-
                  Optional metadata that you can apply to the virtual router to assist with categorization
                           and organization. Each tag consists of a key and an optional value, both of which you
                           define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                              a maximum length of 256 characters.
                items:
                  $ref: '#/definitions/TagRef'
                maxItems: 50
                minItems: 0
                type: array
              virtualRouterName:
                description: The name to use for the virtual router.
                maxLength: 255
                minLength: 1
                type: string
            required:
              - spec
              - virtualRouterName
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}':
    delete:
      description: |-
        <p>Deletes an existing virtual router.</p>
                 <p>You must delete any routes associated with the virtual router before you can delete the
                 router itself.</p>
      operationId: DeleteVirtualRouter
      parameters:
        - description: The name of the service mesh to delete the virtual router in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router to delete.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing virtual router.
      operationId: DescribeVirtualRouter
      parameters:
        - description: The name of the service mesh that the virtual router resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router to describe.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: Updates an existing virtual router in a specified service mesh.
      operationId: UpdateVirtualRouter
      parameters:
        - description: The name of the service mesh that the virtual router resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual router to update.
          in: path
          maxLength: 255
          minLength: 1
          name: virtualRouterName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual router.
                properties:
                  listeners:
                    $ref: '#/definitions/VirtualRouterListeners'
                    description: |-
                      The listeners that the virtual router is expected to receive inbound traffic from.
                               Currently only one listener is supported per virtual router.
                type: object
            required:
              - spec
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualRouterOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualServices':
    get:
      description: Returns a list of existing virtual services in a service mesh.
      operationId: ListVirtualServices
      parameters:
        - description: |-
            The maximum number of results returned by <code>ListVirtualServices</code> in paginated
                     output. When you use this parameter, <code>ListVirtualServices</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this
                     parameter, <code>ListVirtualServices</code> returns up to 100 results and
                     a <code>nextToken</code> value if applicable.
          in: query
          maximum: 100
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: The name of the service mesh to list virtual services in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListVirtualServices</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListVirtualServicesOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: |-
        <p>Creates a virtual service within a service mesh.</p>
                 <p>A virtual service is an abstraction of a real service that is provided by a virtual node
                 directly or indirectly by means of a virtual router. Dependent services call your virtual
                 service by its <code>virtualServiceName</code>, and those requests are routed to the
                 virtual node or virtual router that is specified as the provider for the virtual
                 service.</p>
      operationId: CreateVirtualService
      parameters:
        - description: The name of the service mesh to create the virtual service in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual service.
                properties:
                  provider:
                    $ref: '#/definitions/VirtualServiceProvider'
                    description: |-
                      The App Mesh object that is acting as the provider for a virtual service. You can specify
                               a single virtual node or virtual router.
                type: object
              tags:
                description: |-
                  Optional metadata that you can apply to the virtual service to assist with
                           categorization and organization. Each tag consists of a key and an optional value, both of
                           which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                              a maximum length of 256 characters.
                items:
                  $ref: '#/definitions/TagRef'
                maxItems: 50
                minItems: 0
                type: array
              virtualServiceName:
                description: The name to use for the virtual service.
                type: string
            required:
              - spec
              - virtualServiceName
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}':
    delete:
      description: Deletes an existing virtual service.
      operationId: DeleteVirtualService
      parameters:
        - description: The name of the service mesh to delete the virtual service in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual service to delete.
          in: path
          name: virtualServiceName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    get:
      description: Describes an existing virtual service.
      operationId: DescribeVirtualService
      parameters:
        - description: The name of the service mesh that the virtual service resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual service to describe.
          in: path
          name: virtualServiceName
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: Updates an existing virtual service in a specified service mesh.
      operationId: UpdateVirtualService
      parameters:
        - description: The name of the service mesh that the virtual service resides in.
          in: path
          maxLength: 255
          minLength: 1
          name: meshName
          required: true
          type: string
        - description: The name of the virtual service to update.
          in: path
          name: virtualServiceName
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              clientToken:
                description: |-
                  Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                  request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                type: string
              spec:
                description: An object representing the specification of a virtual service.
                properties:
                  provider:
                    $ref: '#/definitions/VirtualServiceProvider'
                    description: |-
                      The App Mesh object that is acting as the provider for a virtual service. You can specify
                               a single virtual node or virtual router.
                type: object
            required:
              - spec
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateVirtualServiceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
  '/v20190125/tag#resourceArn':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: |-
        Associates the specified tags to a resource with the specified <code>resourceArn</code>.
                 If existing tags on a resource aren't specified in the request parameters, they aren't
                 changed. When a resource is deleted, the tags associated with that resource are also
                 deleted.
      operationId: TagResource
      parameters:
        - description: The Amazon Resource Name (ARN) of the resource to add tags to.
          in: query
          name: resourceArn
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              tags:
                description: |-
                  The tags to add to the resource. A tag is an array of key-value pairs.
                           Tag keys can have a maximum character length of 128 characters, and tag values can have
                              a maximum length of 256 characters.
                items:
                  $ref: '#/definitions/TagRef'
                maxItems: 50
                minItems: 0
                type: array
            required:
              - tags
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '486':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
  '/v20190125/tags#resourceArn':
    get:
      description: List the tags for an App Mesh resource.
      operationId: ListTagsForResource
      parameters:
        - description: |-
            The maximum number of tag results returned by <code>ListTagsForResource</code> in
                     paginated output. When this parameter is used, <code>ListTagsForResource</code> returns
                     only <code>limit</code> results in a single page along with a <code>nextToken</code>
                     response element. You can see the remaining results of the initial request by sending
                     another <code>ListTagsForResource</code> request with the returned <code>nextToken</code>
                     value. This value can be between 1 and 100. If you don't use
                     this parameter, <code>ListTagsForResource</code> returns up to 100
                     results and a <code>nextToken</code> value if applicable.
          in: query
          maximum: 50
          minimum: 1
          name: limit
          required: false
          type: integer
        - description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListTagsForResource</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          in: query
          name: nextToken
          required: false
          type: string
        - description: The Amazon Resource Name (ARN) that identifies the resource to list the tags for.
          in: query
          name: resourceArn
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v20190125/untag#resourceArn':
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: Deletes specified tags from a resource.
      operationId: UntagResource
      parameters:
        - description: The Amazon Resource Name (ARN) of the resource to delete tags from.
          in: query
          name: resourceArn
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              tagKeys:
                description: The keys of the tags to be removed.
                items:
                  $ref: '#/definitions/TagKey'
                maxItems: 50
                minItems: 0
                type: array
            required:
              - tagKeys
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UntagResourceOutput'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
definitions:
  AccessLog:
    description: An object representing the access logging information for a virtual node.
    properties:
      file:
        $ref: '#/definitions/FileAccessLog'
        description: The file object to send virtual node access logs to.
    type: object
  Arn:
    type: string
  AwsCloudMapInstanceAttribute:
    description: An object representing the AWS Cloud Map attribute information for your virtual node.
    properties:
      key:
        $ref: '#/definitions/AwsCloudMapInstanceAttributeKey'
        description: |-
          The name of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service instance
                   that contains the specified key and value is returned.
      value:
        $ref: '#/definitions/AwsCloudMapInstanceAttributeValue'
        description: |-
          The value of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service
                   instance that contains the specified key and value is returned.
    required:
      - key
      - value
    type: object
  AwsCloudMapInstanceAttributeKey:
    maxLength: 255
    minLength: 1
    pattern: '^[a-zA-Z0-9!-~]+$'
    type: string
  AwsCloudMapInstanceAttributeValue:
    maxLength: 1024
    minLength: 1
    pattern: '^([a-zA-Z0-9!-~][ ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$'
    type: string
  AwsCloudMapInstanceAttributes:
    items:
      $ref: '#/definitions/AwsCloudMapInstanceAttribute'
    type: array
  AwsCloudMapName:
    maxLength: 1024
    minLength: 1
    pattern: '((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^.$)'
    type: string
  AwsCloudMapServiceDiscovery:
    description: |-
      An object representing the AWS Cloud Map service discovery information for your virtual
               node.
    properties:
      attributes:
        $ref: '#/definitions/AwsCloudMapInstanceAttributes'
        description: |-
          A string map that contains attributes with values that you can use to filter instances
                   by any custom attribute that you specified when you registered the instance. Only instances
                   that match all of the specified key/value pairs will be returned.
      namespaceName:
        $ref: '#/definitions/AwsCloudMapName'
        description: The name of the AWS Cloud Map namespace to use.
      serviceName:
        $ref: '#/definitions/AwsCloudMapName'
        description: The name of the AWS Cloud Map service to use.
    required:
      - namespaceName
      - serviceName
    type: object
  Backend:
    description: |-
      An object representing the backends that a virtual node is expected to send outbound
               traffic to. 
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceBackend'
        description: 'Specifies a virtual service to use as a backend for a virtual node. '
    type: object
  Backends:
    items:
      $ref: '#/definitions/Backend'
    maxItems: 25
    minItems: 0
    type: array
  BadRequestException: {}
  Boolean:
    type: boolean
  ConflictException: {}
  CreateMeshInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the service mesh.
      spec:
        $ref: '#/definitions/MeshSpec'
        description: The service mesh specification to apply.
      tags:
        $ref: '#/definitions/TagList'
        description: |-
          Optional metadata that you can apply to the service mesh to assist with categorization
                   and organization. Each tag consists of a key and an optional value, both of which you
                   define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                      a maximum length of 256 characters.
    required:
      - meshName
    type: object
  CreateMeshOutput:
    description: ''
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The full description of your service mesh following the create call.
    required:
      - mesh
    type: object
  CreateRouteInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the route.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The route specification to apply.
      tags:
        $ref: '#/definitions/TagList'
        description: |-
          Optional metadata that you can apply to the route to assist with categorization and
                   organization. Each tag consists of a key and an optional value, both of which you define.
                   Tag keys can have a maximum character length of 128 characters, and tag values can have
                      a maximum length of 256 characters.
    required:
      - routeName
      - spec
    type: object
  CreateRouteOutput:
    description: ''
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The full description of your mesh following the create call.
    required:
      - route
    type: object
  CreateVirtualNodeInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The virtual node specification to apply.
      tags:
        $ref: '#/definitions/TagList'
        description: |-
          Optional metadata that you can apply to the virtual node to assist with categorization
                   and organization. Each tag consists of a key and an optional value, both of which you
                   define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                      a maximum length of 256 characters.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the virtual node.
    required:
      - spec
      - virtualNodeName
    type: object
  CreateVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The full description of your virtual node following the create call.
    required:
      - virtualNode
    type: object
  CreateVirtualRouterInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The virtual router specification to apply.
      tags:
        $ref: '#/definitions/TagList'
        description: |-
          Optional metadata that you can apply to the virtual router to assist with categorization
                   and organization. Each tag consists of a key and an optional value, both of which you
                   define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                      a maximum length of 256 characters.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name to use for the virtual router.
    required:
      - spec
      - virtualRouterName
    type: object
  CreateVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The full description of your virtual router following the create call.
    required:
      - virtualRouter
    type: object
  CreateVirtualServiceInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualServiceSpec'
        description: The virtual service specification to apply.
      tags:
        $ref: '#/definitions/TagList'
        description: |-
          Optional metadata that you can apply to the virtual service to assist with
                   categorization and organization. Each tag consists of a key and an optional value, both of
                   which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                      a maximum length of 256 characters.
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name to use for the virtual service.
    required:
      - spec
      - virtualServiceName
    type: object
  CreateVirtualServiceOutput:
    description: ''
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: The full description of your virtual service following the create call.
    required:
      - virtualService
    type: object
  DeleteMeshInput:
    description: ''
    properties: {}
    type: object
  DeleteMeshOutput:
    description: ''
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The service mesh that was deleted.
    required:
      - mesh
    type: object
  DeleteRouteInput:
    description: ''
    properties: {}
    type: object
  DeleteRouteOutput:
    description: ''
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The route that was deleted.
    required:
      - route
    type: object
  DeleteVirtualNodeInput:
    description: ''
    properties: {}
    type: object
  DeleteVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The virtual node that was deleted.
    required:
      - virtualNode
    type: object
  DeleteVirtualRouterInput:
    description: ''
    properties: {}
    type: object
  DeleteVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The virtual router that was deleted.
    required:
      - virtualRouter
    type: object
  DeleteVirtualServiceInput:
    description: ''
    properties: {}
    type: object
  DeleteVirtualServiceOutput:
    description: ''
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: The virtual service that was deleted.
    required:
      - virtualService
    type: object
  DescribeMeshInput:
    description: ''
    properties: {}
    type: object
  DescribeMeshOutput:
    description: ''
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
        description: The full description of your service mesh.
    required:
      - mesh
    type: object
  DescribeRouteInput:
    description: ''
    properties: {}
    type: object
  DescribeRouteOutput:
    description: ''
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: The full description of your route.
    required:
      - route
    type: object
  DescribeVirtualNodeInput:
    description: ''
    properties: {}
    type: object
  DescribeVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: The full description of your virtual node.
    required:
      - virtualNode
    type: object
  DescribeVirtualRouterInput:
    description: ''
    properties: {}
    type: object
  DescribeVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: The full description of your virtual router.
    required:
      - virtualRouter
    type: object
  DescribeVirtualServiceInput:
    description: ''
    properties: {}
    type: object
  DescribeVirtualServiceOutput:
    description: ''
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: The full description of your virtual service.
    required:
      - virtualService
    type: object
  DnsServiceDiscovery:
    description: |-
      An object representing the DNS service discovery information for your virtual
               node.
    properties:
      hostname:
        $ref: '#/definitions/Hostname'
        description: 'Specifies the DNS service discovery hostname for the virtual node. '
    required:
      - hostname
    type: object
  Duration:
    description: An object representing the duration between retry attempts.
    properties:
      unit:
        $ref: '#/definitions/DurationUnit'
        description: The unit of time between retry attempts.
      value:
        $ref: '#/definitions/DurationValue'
        description: The duration of time between retry attempts.
    type: object
  DurationUnit:
    enum:
      - ms
      - s
    type: string
  DurationValue:
    minimum: 0
    type: integer
  EgressFilter:
    description: An object representing the egress filter rules for a service mesh.
    properties:
      type:
        $ref: '#/definitions/EgressFilterType'
        description: |-
          The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows
                   egress only from virtual nodes to other defined resources in the service mesh (and any
                   traffic to <code>*.amazonaws.com</code> for AWS API calls). You can set the egress filter
                   type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the
                   service mesh.
    required:
      - type
    type: object
  EgressFilterType:
    enum:
      - ALLOW_ALL
      - DROP_ALL
    type: string
  FileAccessLog:
    description: An object representing an access log file.
    properties:
      path:
        $ref: '#/definitions/FilePath'
        description: |-
          <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send
                   access logs to standard out and configure your Envoy container to use a log driver, such as
                      <code>awslogs</code>, to export the access logs to a log storage service such as Amazon
                   CloudWatch Logs. You can also specify a path in the Envoy container's file system to write
                   the files to disk.</p>
                   <note>
                      <p>The Envoy process must have write permissions to the path that you specify here.
                      Otherwise, Envoy fails to bootstrap properly.</p>
                   </note>
    required:
      - path
    type: object
  FilePath:
    maxLength: 255
    minLength: 1
    type: string
  ForbiddenException: {}
  HeaderMatch:
    maxLength: 255
    minLength: 1
    type: string
  HeaderMatchMethod:
    description: An object representing the method and value to match the header value sent with a request. Specify one match method.
    properties:
      exact:
        $ref: '#/definitions/HeaderMatch'
        description: The header value sent by the client must match the specified value exactly.
      prefix:
        $ref: '#/definitions/HeaderMatch'
        description: The header value sent by the client must begin with the specified characters.
      range:
        $ref: '#/definitions/MatchRange'
        description: The object that specifies the range of numbers that the header value sent by the client must be included in.
      regex:
        $ref: '#/definitions/HeaderMatch'
        description: The header value sent by the client must include the specified characters.
      suffix:
        $ref: '#/definitions/HeaderMatch'
        description: The header value sent by the client must end with the specified characters.
    type: object
  HeaderName:
    maxLength: 50
    minLength: 1
    type: string
  HealthCheckIntervalMillis:
    maximum: 300000
    minimum: 5000
    type: integer
  HealthCheckPolicy:
    description: An object representing the health check policy for a virtual node's listener.
    properties:
      healthyThreshold:
        $ref: '#/definitions/HealthCheckThreshold'
        description: |-
          The number of consecutive successful health checks that must occur before declaring
                   listener healthy.
      intervalMillis:
        $ref: '#/definitions/HealthCheckIntervalMillis'
        description: The time period in milliseconds between each health check execution.
      path:
        $ref: '#/definitions/String'
        description: |-
          The destination path for the health check request. This is required only if the
                   specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.
      port:
        $ref: '#/definitions/PortNumber'
        description: |-
          The destination port for the health check request. This port must match the port defined
                   in the <a>PortMapping</a> for the listener.
      protocol:
        $ref: '#/definitions/PortProtocol'
        description: The protocol for the health check request.
      timeoutMillis:
        $ref: '#/definitions/HealthCheckTimeoutMillis'
        description: |-
          The amount of time to wait when receiving a response from the health check, in
                   milliseconds.
      unhealthyThreshold:
        $ref: '#/definitions/HealthCheckThreshold'
        description: |-
          The number of consecutive failed health checks that must occur before declaring a
                   virtual node unhealthy. 
    required:
      - healthyThreshold
      - intervalMillis
      - protocol
      - timeoutMillis
      - unhealthyThreshold
    type: object
  HealthCheckThreshold:
    maximum: 10
    minimum: 2
    type: integer
  HealthCheckTimeoutMillis:
    maximum: 60000
    minimum: 2000
    type: integer
  Hostname:
    type: string
  HttpMethod:
    enum:
      - CONNECT
      - DELETE
      - GET
      - HEAD
      - OPTIONS
      - PATCH
      - POST
      - PUT
      - TRACE
    type: string
  HttpRetryPolicy:
    description: An object that represents a retry policy.
    properties:
      httpRetryEvents:
        $ref: '#/definitions/HttpRetryPolicyEvents'
        description: |-
          <p>Specify at least one of the following values.</p>
                   <ul>
                      <li>
                         <p>
                            <b>server-error</b> – HTTP status codes 500, 501,
                         502, 503, 504, 505, 506, 507, 508, 510, and 511</p>
                      </li>
                      <li>
                         <p>
                            <b>gateway-error</b> – HTTP status codes 502,
                         503, and 504</p>
                      </li>
                      <li>
                         <p>
                            <b>client-error</b> – HTTP status code 409</p>
                      </li>
                      <li>
                         <p>
                            <b>stream-error</b> – Retry on refused
                         stream</p>
                      </li>
                   </ul>
      maxRetries:
        $ref: '#/definitions/MaxRetries'
        description: 'The maximum number of retry attempts. If no value is specified, the default is 1.'
      perRetryTimeout:
        $ref: '#/definitions/Duration'
        description: An object that represents the retry duration.
      tcpRetryEvents:
        $ref: '#/definitions/TcpRetryPolicyEvents'
        description: Specify a valid value.
    required:
      - maxRetries
      - perRetryTimeout
    type: object
  HttpRetryPolicyEvent:
    maxLength: 25
    minLength: 1
    type: string
  HttpRetryPolicyEvents:
    items:
      $ref: '#/definitions/HttpRetryPolicyEvent'
    maxItems: 25
    minItems: 1
    type: array
  HttpRoute:
    description: An object representing the HTTP routing specification for a route.
    properties:
      action:
        $ref: '#/definitions/HttpRouteAction'
        description: The action to take if a match is determined.
      match:
        $ref: '#/definitions/HttpRouteMatch'
        description: The criteria for determining an HTTP request match.
      retryPolicy:
        $ref: '#/definitions/HttpRetryPolicy'
        description: An object that represents a retry policy.
    required:
      - action
      - match
    type: object
  HttpRouteAction:
    description: |-
      An object representing the traffic distribution requirements for matched HTTP
               requests.
    properties:
      weightedTargets:
        $ref: '#/definitions/WeightedTargets'
        description: |-
          The targets that traffic is routed to when a request matches the route. You can specify
                   one or more targets and their relative weights to distribute traffic with.
    required:
      - weightedTargets
    type: object
  HttpRouteHeader:
    description: An object representing the HTTP header in the request.
    properties:
      invert:
        $ref: '#/definitions/Boolean'
        description: Specify <code>True</code> to match the opposite of the <code>HeaderMatchMethod</code> method and value. The default value is <code>False</code>.
      match:
        $ref: '#/definitions/HeaderMatchMethod'
        description: The <code>HeaderMatchMethod</code> object.
      name:
        $ref: '#/definitions/HeaderName'
        description: A name for the HTTP header in the client request that will be matched on.
    required:
      - name
    type: object
  HttpRouteHeaders:
    items:
      $ref: '#/definitions/HttpRouteHeader'
    maxItems: 10
    minItems: 1
    type: array
  HttpRouteMatch:
    description: |-
      An object representing the requirements for a route to match HTTP requests for a virtual
               router.
    properties:
      headers:
        $ref: '#/definitions/HttpRouteHeaders'
        description: The client request headers to match on.
      method:
        $ref: '#/definitions/HttpMethod'
        description: The client request header method to match on.
      prefix:
        $ref: '#/definitions/String'
        description: |-
          Specifies the path to match requests with. This parameter must always start with
                      <code>/</code>, which by itself matches all requests to the virtual service name. You
                   can also match for path-based routing of requests. For example, if your virtual service
                   name is <code>my-service.local</code> and you want the route to match requests to
                      <code>my-service.local/metrics</code>, your prefix should be
                   <code>/metrics</code>.
      scheme:
        $ref: '#/definitions/HttpScheme'
        description: The client request header scheme to match on.
    required:
      - prefix
    type: object
  HttpScheme:
    enum:
      - http
      - https
    type: string
  InternalServerErrorException: {}
  LimitExceededException: {}
  ListMeshesInput:
    description: ''
    properties: {}
    type: object
  ListMeshesLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListMeshesOutput:
    description: ''
    properties:
      meshes:
        $ref: '#/definitions/MeshList'
        description: The list of existing service meshes.
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListMeshes</code> request.
                   When the results of a <code>ListMeshes</code> request exceed <code>limit</code>, you can
                   use this value to retrieve the next page of results. This value is <code>null</code> when
                   there are no more results to return.
    required:
      - meshes
    type: object
  ListRoutesInput:
    description: ''
    properties: {}
    type: object
  ListRoutesLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListRoutesOutput:
    description: ''
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListRoutes</code> request.
                   When the results of a <code>ListRoutes</code> request exceed <code>limit</code>, you can
                   use this value to retrieve the next page of results. This value is <code>null</code> when
                   there are no more results to return.
      routes:
        $ref: '#/definitions/RouteList'
        description: The list of existing routes for the specified service mesh and virtual router.
    required:
      - routes
    type: object
  ListTagsForResourceInput:
    description: ''
    properties: {}
    type: object
  ListTagsForResourceOutput:
    description: ''
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListTagsForResource</code>
                   request. When the results of a <code>ListTagsForResource</code> request exceed
                      <code>limit</code>, you can use this value to retrieve the next page of results. This
                   value is <code>null</code> when there are no more results to return.
      tags:
        $ref: '#/definitions/TagList'
        description: The tags for the resource.
    required:
      - tags
    type: object
  ListVirtualNodesInput:
    description: ''
    properties: {}
    type: object
  ListVirtualNodesLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListVirtualNodesOutput:
    description: ''
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>
                   request. When the results of a <code>ListVirtualNodes</code> request exceed
                      <code>limit</code>, you can use this value to retrieve the next page of results. This
                   value is <code>null</code> when there are no more results to return.
      virtualNodes:
        $ref: '#/definitions/VirtualNodeList'
        description: The list of existing virtual nodes for the specified service mesh.
    required:
      - virtualNodes
    type: object
  ListVirtualRoutersInput:
    description: ''
    properties: {}
    type: object
  ListVirtualRoutersLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListVirtualRoutersOutput:
    description: ''
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>
                   request. When the results of a <code>ListVirtualRouters</code> request exceed
                      <code>limit</code>, you can use this value to retrieve the next page of results. This
                   value is <code>null</code> when there are no more results to return.
      virtualRouters:
        $ref: '#/definitions/VirtualRouterList'
        description: The list of existing virtual routers for the specified service mesh.
    required:
      - virtualRouters
    type: object
  ListVirtualServicesInput:
    description: ''
    properties: {}
    type: object
  ListVirtualServicesLimit:
    maximum: 100
    minimum: 1
    type: integer
  ListVirtualServicesOutput:
    description: ''
    properties:
      nextToken:
        $ref: '#/definitions/String'
        description: |-
          The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code>
                   request. When the results of a <code>ListVirtualServices</code> request exceed
                      <code>limit</code>, you can use this value to retrieve the next page of results. This
                   value is <code>null</code> when there are no more results to return.
      virtualServices:
        $ref: '#/definitions/VirtualServiceList'
        description: The list of existing virtual services for the specified service mesh.
    required:
      - virtualServices
    type: object
  Listener:
    description: An object representing a listener for a virtual node.
    properties:
      healthCheck:
        $ref: '#/definitions/HealthCheckPolicy'
        description: The health check information for the listener.
      portMapping:
        $ref: '#/definitions/PortMapping'
        description: The port mapping information for the listener.
    required:
      - portMapping
    type: object
  Listeners:
    items:
      $ref: '#/definitions/Listener'
    maxItems: 1
    minItems: 0
    type: array
  Logging:
    description: An object representing the logging information for a virtual node.
    properties:
      accessLog:
        $ref: '#/definitions/AccessLog'
        description: The access log configuration for a virtual node.
    type: object
  Long:
    type: integer
  MatchRange:
    description: 'The range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.'
    properties:
      end:
        $ref: '#/definitions/Long'
        description: The end of the range.
      start:
        $ref: '#/definitions/Long'
        description: The start of the range.
    required:
      - end
      - start
    type: object
  MaxRetries:
    minimum: 0
    type: integer
  MeshData:
    description: An object representing a service mesh returned by a describe operation.
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the service mesh.
      spec:
        $ref: '#/definitions/MeshSpec'
        description: The associated specification for the service mesh.
      status:
        $ref: '#/definitions/MeshStatus'
        description: The status of the service mesh.
    required:
      - meshName
      - metadata
      - spec
      - status
    type: object
  MeshList:
    items:
      $ref: '#/definitions/MeshRef'
    type: array
  MeshRef:
    description: An object representing a service mesh returned by a list operation.
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) of the service mesh.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh.
    required:
      - arn
      - meshName
    type: object
  MeshSpec:
    description: An object representing the specification of a service mesh.
    properties:
      egressFilter:
        $ref: '#/definitions/EgressFilter'
        description: The egress filter rules for the service mesh.
    type: object
  MeshStatus:
    description: An object representing the status of a service mesh.
    properties:
      status:
        $ref: '#/definitions/MeshStatusCode'
        description: The current mesh status.
    type: object
  MeshStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  NotFoundException: {}
  PercentInt:
    maximum: 100
    minimum: 0
    type: integer
  PortMapping:
    description: An object representing a virtual node or virtual router listener port mapping.
    properties:
      port:
        $ref: '#/definitions/PortNumber'
        description: The port used for the port mapping.
      protocol:
        $ref: '#/definitions/PortProtocol'
        description: The protocol used for the port mapping.
    required:
      - port
      - protocol
    type: object
  PortNumber:
    maximum: 65535
    minimum: 1
    type: integer
  PortProtocol:
    enum:
      - http
      - tcp
    type: string
  ResourceInUseException: {}
  ResourceMetadata:
    description: An object representing metadata for a resource.
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the resource.
      createdAt:
        $ref: '#/definitions/Timestamp'
        description: The Unix epoch timestamp in seconds for when the resource was created.
      lastUpdatedAt:
        $ref: '#/definitions/Timestamp'
        description: The Unix epoch timestamp in seconds for when the resource was last updated.
      uid:
        $ref: '#/definitions/String'
        description: The unique identifier for the resource.
      version:
        $ref: '#/definitions/Long'
        description: |-
          The version of the resource. Resources are created at version 1, and this version is
                   incremented each time that they're updated.
    required:
      - arn
      - createdAt
      - lastUpdatedAt
      - uid
      - version
    type: object
  ResourceName:
    maxLength: 255
    minLength: 1
    type: string
  RouteData:
    description: An object representing a route returned by a describe operation.
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the route resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the route.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the route.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The specifications of the route.
      status:
        $ref: '#/definitions/RouteStatus'
        description: The status of the route.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The virtual router that the route is associated with.
    required:
      - meshName
      - metadata
      - routeName
      - spec
      - status
      - virtualRouterName
    type: object
  RouteList:
    items:
      $ref: '#/definitions/RouteRef'
    type: array
  RoutePriority:
    maximum: 1000
    minimum: 0
    type: integer
  RouteRef:
    description: An object representing a route returned by a list operation.
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the route.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the route resides in.
      routeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the route.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The virtual router that the route is associated with.
    required:
      - arn
      - meshName
      - routeName
      - virtualRouterName
    type: object
  RouteSpec:
    description: An object representing the specification of a route.
    properties:
      httpRoute:
        $ref: '#/definitions/HttpRoute'
        description: The HTTP routing information for the route.
      priority:
        $ref: '#/definitions/RoutePriority'
        description: 'The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.'
      tcpRoute:
        $ref: '#/definitions/TcpRoute'
        description: The TCP routing information for the route.
    type: object
  RouteStatus:
    description: An object representing the current status of a route.
    properties:
      status:
        $ref: '#/definitions/RouteStatusCode'
        description: The current status for the route.
    required:
      - status
    type: object
  RouteStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  ServiceDiscovery:
    description: An object representing the service discovery information for a virtual node.
    properties:
      awsCloudMap:
        $ref: '#/definitions/AwsCloudMapServiceDiscovery'
        description: Specifies any AWS Cloud Map information for the virtual node.
      dns:
        $ref: '#/definitions/DnsServiceDiscovery'
        description: Specifies the DNS information for the virtual node.
    type: object
  ServiceName:
    type: string
  ServiceUnavailableException: {}
  String:
    type: string
  TagKey:
    maxLength: 128
    minLength: 1
    type: string
  TagKeyList:
    items:
      $ref: '#/definitions/TagKey'
    maxItems: 50
    minItems: 0
    type: array
  TagList:
    items:
      $ref: '#/definitions/TagRef'
    maxItems: 50
    minItems: 0
    type: array
  TagRef:
    description: |-
      Optional metadata that you apply to a resource to assist with categorization and
               organization. Each tag consists of a key and an optional value, both of which you define.
               Tag keys can have a maximum character length of 128 characters, and tag values can have
                  a maximum length of 256 characters.
    properties:
      key:
        $ref: '#/definitions/TagKey'
        description: |-
          One part of a key-value pair that make up a tag. A <code>key</code> is a general label
                   that acts like a category for more specific tag values.
      value:
        $ref: '#/definitions/TagValue'
        description: |-
          The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a
                   descriptor within a tag category (key).
    required:
      - key
    type: object
  TagResourceInput:
    description: ''
    properties:
      tags:
        $ref: '#/definitions/TagList'
        description: |-
          The tags to add to the resource. A tag is an array of key-value pairs.
                   Tag keys can have a maximum character length of 128 characters, and tag values can have
                      a maximum length of 256 characters.
    required:
      - tags
    type: object
  TagResourceOutput:
    description: ''
    properties: {}
    type: object
  TagValue:
    maxLength: 256
    minLength: 0
    type: string
  TagsLimit:
    maximum: 50
    minimum: 1
    type: integer
  TcpRetryPolicyEvent:
    enum:
      - connection-error
    type: string
  TcpRetryPolicyEvents:
    items:
      $ref: '#/definitions/TcpRetryPolicyEvent'
    maxItems: 1
    minItems: 1
    type: array
  TcpRoute:
    description: An object representing the TCP routing specification for a route.
    properties:
      action:
        $ref: '#/definitions/TcpRouteAction'
        description: The action to take if a match is determined.
    required:
      - action
    type: object
  TcpRouteAction:
    description: |-
      An object representing the traffic distribution requirements for matched TCP
               requests.
    properties:
      weightedTargets:
        $ref: '#/definitions/WeightedTargets'
        description: |-
          The targets that traffic is routed to when a request matches the route. You can specify
                   one or more targets and their relative weights to distribute traffic with.
    required:
      - weightedTargets
    type: object
  Timestamp:
    format: date-time
    type: string
  TooManyRequestsException: {}
  TooManyTagsException: {}
  UntagResourceInput:
    description: ''
    properties:
      tagKeys:
        $ref: '#/definitions/TagKeyList'
        description: The keys of the tags to be removed.
    required:
      - tagKeys
    type: object
  UntagResourceOutput:
    description: ''
    properties: {}
    type: object
  UpdateMeshInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/MeshSpec'
        description: The service mesh specification to apply.
    type: object
  UpdateMeshOutput:
    description: ''
    properties:
      mesh:
        $ref: '#/definitions/MeshData'
    required:
      - mesh
    type: object
  UpdateRouteInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/RouteSpec'
        description: The new route specification to apply. This overwrites the existing data.
    required:
      - spec
    type: object
  UpdateRouteOutput:
    description: ''
    properties:
      route:
        $ref: '#/definitions/RouteData'
        description: A full description of the route that was updated.
    required:
      - route
    type: object
  UpdateVirtualNodeInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The new virtual node specification to apply. This overwrites the existing data.
    required:
      - spec
    type: object
  UpdateVirtualNodeOutput:
    description: ''
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeData'
        description: A full description of the virtual node that was updated.
    required:
      - virtualNode
    type: object
  UpdateVirtualRouterInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The new virtual router specification to apply. This overwrites the existing data.
    required:
      - spec
    type: object
  UpdateVirtualRouterOutput:
    description: ''
    properties:
      virtualRouter:
        $ref: '#/definitions/VirtualRouterData'
        description: A full description of the virtual router that was updated.
    required:
      - virtualRouter
    type: object
  UpdateVirtualServiceInput:
    description: ''
    properties:
      clientToken:
        $ref: '#/definitions/String'
        description: |-
          Unique, case-sensitive identifier that you provide to ensure the idempotency of the
          request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
      spec:
        $ref: '#/definitions/VirtualServiceSpec'
        description: |-
          The new virtual service specification to apply. This overwrites the existing
                   data.
    required:
      - spec
    type: object
  UpdateVirtualServiceOutput:
    description: ''
    properties:
      virtualService:
        $ref: '#/definitions/VirtualServiceData'
        description: A full description of the virtual service that was updated.
    required:
      - virtualService
    type: object
  VirtualNodeData:
    description: An object representing a virtual node returned by a describe operation.
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual node resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the virtual node.
      spec:
        $ref: '#/definitions/VirtualNodeSpec'
        description: The specifications of the virtual node.
      status:
        $ref: '#/definitions/VirtualNodeStatus'
        description: The current status for the virtual node.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node.
    required:
      - meshName
      - metadata
      - spec
      - status
      - virtualNodeName
    type: object
  VirtualNodeList:
    items:
      $ref: '#/definitions/VirtualNodeRef'
    type: array
  VirtualNodeRef:
    description: An object representing a virtual node returned by a list operation.
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual node.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual node resides in.
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node.
    required:
      - arn
      - meshName
      - virtualNodeName
    type: object
  VirtualNodeServiceProvider:
    description: An object representing a virtual node service provider.
    properties:
      virtualNodeName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual node that is acting as a service provider.
    required:
      - virtualNodeName
    type: object
  VirtualNodeSpec:
    description: An object representing the specification of a virtual node.
    properties:
      backends:
        $ref: '#/definitions/Backends'
        description: The backends that the virtual node is expected to send outbound traffic to.
      listeners:
        $ref: '#/definitions/Listeners'
        description: |-
          The listeners that the virtual node is expected to receive inbound traffic from.
                   Currently only one listener is supported per virtual node.
      logging:
        $ref: '#/definitions/Logging'
        description: The inbound and outbound access logging information for the virtual node.
      serviceDiscovery:
        $ref: '#/definitions/ServiceDiscovery'
        description: |-
          The service discovery information for the virtual node. If your virtual node does not
                   expect ingress traffic, you can omit this parameter.
    type: object
  VirtualNodeStatus:
    description: An object representing the current status of the virtual node.
    properties:
      status:
        $ref: '#/definitions/VirtualNodeStatusCode'
        description: The current status of the virtual node.
    required:
      - status
    type: object
  VirtualNodeStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  VirtualRouterData:
    description: An object representing a virtual router returned by a describe operation.
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual router resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The associated metadata for the virtual router.
      spec:
        $ref: '#/definitions/VirtualRouterSpec'
        description: The specifications of the virtual router.
      status:
        $ref: '#/definitions/VirtualRouterStatus'
        description: The current status of the virtual router.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router.
    required:
      - meshName
      - metadata
      - spec
      - status
      - virtualRouterName
    type: object
  VirtualRouterList:
    items:
      $ref: '#/definitions/VirtualRouterRef'
    type: array
  VirtualRouterListener:
    description: An object representing a virtual router listener.
    properties:
      portMapping:
        $ref: '#/definitions/PortMapping'
    required:
      - portMapping
    type: object
  VirtualRouterListeners:
    items:
      $ref: '#/definitions/VirtualRouterListener'
    maxItems: 1
    minItems: 1
    type: array
  VirtualRouterRef:
    description: An object representing a virtual router returned by a list operation.
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual router.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual router resides in.
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router.
    required:
      - arn
      - meshName
      - virtualRouterName
    type: object
  VirtualRouterServiceProvider:
    description: An object representing a virtual node service provider.
    properties:
      virtualRouterName:
        $ref: '#/definitions/ResourceName'
        description: The name of the virtual router that is acting as a service provider.
    required:
      - virtualRouterName
    type: object
  VirtualRouterSpec:
    description: An object representing the specification of a virtual router.
    properties:
      listeners:
        $ref: '#/definitions/VirtualRouterListeners'
        description: |-
          The listeners that the virtual router is expected to receive inbound traffic from.
                   Currently only one listener is supported per virtual router.
    type: object
  VirtualRouterStatus:
    description: 'An object representing the status of a virtual router. '
    properties:
      status:
        $ref: '#/definitions/VirtualRouterStatusCode'
        description: The current status of the virtual router.
    required:
      - status
    type: object
  VirtualRouterStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  VirtualServiceBackend:
    description: An object representing a virtual service backend for a virtual node.
    properties:
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name of the virtual service that is acting as a virtual node backend.
    required:
      - virtualServiceName
    type: object
  VirtualServiceData:
    description: An object representing a virtual service returned by a describe operation.
    properties:
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual service resides in.
      metadata:
        $ref: '#/definitions/ResourceMetadata'
      spec:
        $ref: '#/definitions/VirtualServiceSpec'
        description: The specifications of the virtual service.
      status:
        $ref: '#/definitions/VirtualServiceStatus'
        description: The current status of the virtual service.
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name of the virtual service.
    required:
      - meshName
      - metadata
      - spec
      - status
      - virtualServiceName
    type: object
  VirtualServiceList:
    items:
      $ref: '#/definitions/VirtualServiceRef'
    type: array
  VirtualServiceProvider:
    description: An object representing the provider for a virtual service.
    properties:
      virtualNode:
        $ref: '#/definitions/VirtualNodeServiceProvider'
        description: The virtual node associated with a virtual service.
      virtualRouter:
        $ref: '#/definitions/VirtualRouterServiceProvider'
        description: The virtual router associated with a virtual service.
    type: object
  VirtualServiceRef:
    description: An object representing a virtual service returned by a list operation.
    properties:
      arn:
        $ref: '#/definitions/Arn'
        description: The full Amazon Resource Name (ARN) for the virtual service.
      meshName:
        $ref: '#/definitions/ResourceName'
        description: The name of the service mesh that the virtual service resides in.
      virtualServiceName:
        $ref: '#/definitions/ServiceName'
        description: The name of the virtual service.
    required:
      - arn
      - meshName
      - virtualServiceName
    type: object
  VirtualServiceSpec:
    description: An object representing the specification of a virtual service.
    properties:
      provider:
        $ref: '#/definitions/VirtualServiceProvider'
        description: |-
          The App Mesh object that is acting as the provider for a virtual service. You can specify
                   a single virtual node or virtual router.
    type: object
  VirtualServiceStatus:
    description: An object representing the status of a virtual service.
    properties:
      status:
        $ref: '#/definitions/VirtualServiceStatusCode'
        description: The current status of the virtual service.
    required:
      - status
    type: object
  VirtualServiceStatusCode:
    enum:
      - ACTIVE
      - DELETED
      - INACTIVE
    type: string
  WeightedTarget:
    description: |-
      An object representing a target and its relative weight. Traffic is distributed across
               targets according to their relative weight. For example, a weighted target with a relative
               weight of 50 receives five times as much traffic as one with a relative weight of
               10.
    properties:
      virtualNode:
        $ref: '#/definitions/ResourceName'
        description: The virtual node to associate with the weighted target.
      weight:
        $ref: '#/definitions/PercentInt'
        description: The relative weight of the weighted target.
    required:
      - virtualNode
      - weight
    type: object
  WeightedTargets:
    items:
      $ref: '#/definitions/WeightedTarget'
    maxItems: 10
    minItems: 1
    type: array
x-servers:
  - description: The AWS App Mesh multi-region endpoint
    url: 'http://appmesh.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The AWS App Mesh multi-region endpoint
    url: 'https://appmesh.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
    url: 'http://appmesh.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
  - description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
    url: 'https://appmesh.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
