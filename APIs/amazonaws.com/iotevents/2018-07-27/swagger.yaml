swagger: '2.0'
schemes:
  - https
  - http
host: iotevents.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  description: 'AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. AWS IoT Events API commands enable you to create, read, update and delete inputs and detector models, and to list their versions.'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  title: AWS IoT Events
  version: '2018-07-27'
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-logo:
    backgroundColor: '#FFFFFF'
    url: 'https://twitter.com/awscloud/profile_image?size=original'
  x-origin:
    - contentType: application/json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotevents-2018-07-27.normal.json'
      x-apisguru-direct: true
  x-preferred: true
  x-providerName: amazonaws.com
  x-release: v4
  x-serviceName: iotevents
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/iotevents/'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  hmac:
    description: Amazon Signature authorization v4
    in: header
    name: Authorization
    type: apiKey
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
parameters:
  X-Amz-Algorithm:
    in: header
    name: X-Amz-Algorithm
    required: false
    type: string
  X-Amz-Content-Sha256:
    in: header
    name: X-Amz-Content-Sha256
    required: false
    type: string
  X-Amz-Credential:
    in: header
    name: X-Amz-Credential
    required: false
    type: string
  X-Amz-Date:
    in: header
    name: X-Amz-Date
    required: false
    type: string
  X-Amz-Security-Token:
    in: header
    name: X-Amz-Security-Token
    required: false
    type: string
  X-Amz-Signature:
    in: header
    name: X-Amz-Signature
    required: false
    type: string
  X-Amz-SignedHeaders:
    in: header
    name: X-Amz-SignedHeaders
    required: false
    type: string
paths:
  /detector-models:
    get:
      description: Lists the detector models you have created. Only the metadata associated with each detector model is returned.
      operationId: ListDetectorModels
      parameters:
        - description: The token for the next set of results.
          in: query
          name: nextToken
          required: false
          type: string
        - description: The maximum number of results to return at one time.
          in: query
          maximum: 250
          minimum: 1
          name: maxResults
          required: false
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListDetectorModelsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates a detector model.
      operationId: CreateDetectorModel
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              detectorModelDefinition:
                description: Information that defines how a detector operates.
                properties:
                  initialStateName:
                    $ref: '#/definitions/StateName'
                    description: The state that is entered at the creation of each detector (instance).
                  states:
                    $ref: '#/definitions/States'
                    description: Information about the states of the detector.
                type: object
              detectorModelDescription:
                description: A brief description of the detector model.
                maxLength: 128
                type: string
              detectorModelName:
                description: The name of the detector model.
                maxLength: 128
                minLength: 1
                pattern: '^[a-zA-Z0-9_-]+$'
                type: string
              key:
                description: The input attribute key used to identify a device or system in order to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression to specify the attribute-value pair in the message payload of each input that is used to identify the device associated with the input.
                maxLength: 128
                minLength: 1
                pattern: '^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w- ]+`)|([\w\-]+)))*$'
                type: string
              roleArn:
                description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
                maxLength: 2048
                minLength: 1
                type: string
              tags:
                description: Metadata that can be used to manage the detector model.
                items:
                  $ref: '#/definitions/Tag'
                type: array
            required:
              - detectorModelName
              - detectorModelDefinition
              - roleArn
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '482':
          description: ResourceAlreadyExistsException
          schema:
            $ref: '#/definitions/ResourceAlreadyExistsException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '485':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
  '/detector-models/{detectorModelName}':
    delete:
      description: Deletes a detector model. Any active instances of the detector model are also deleted.
      operationId: DeleteDetectorModel
      parameters:
        - description: The name of the detector model to be deleted.
          in: path
          maxLength: 128
          minLength: 1
          name: detectorModelName
          pattern: '^[a-zA-Z0-9_-]+$'
          required: true
          type: string
      responses:
        '204':
          description: Success
          schema:
            $ref: '#/definitions/DeleteDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    get:
      description: 'Describes a detector model. If the <code>"version"</code> parameter is not specified, information about the latest version is returned.'
      operationId: DescribeDetectorModel
      parameters:
        - description: The name of the detector model.
          in: path
          maxLength: 128
          minLength: 1
          name: detectorModelName
          pattern: '^[a-zA-Z0-9_-]+$'
          required: true
          type: string
        - description: The version of the detector model.
          in: query
          maxLength: 128
          minLength: 1
          name: version
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Updates a detector model. Detectors (instances) spawned by the previous version are deleted and then re-created as new inputs arrive.
      operationId: UpdateDetectorModel
      parameters:
        - description: The name of the detector model that is updated.
          in: path
          maxLength: 128
          minLength: 1
          name: detectorModelName
          pattern: '^[a-zA-Z0-9_-]+$'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              detectorModelDefinition:
                description: Information that defines how a detector operates.
                properties:
                  initialStateName:
                    $ref: '#/definitions/StateName'
                    description: The state that is entered at the creation of each detector (instance).
                  states:
                    $ref: '#/definitions/States'
                    description: Information about the states of the detector.
                type: object
              detectorModelDescription:
                description: A brief description of the detector model.
                maxLength: 128
                type: string
              roleArn:
                description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
                maxLength: 2048
                minLength: 1
                type: string
            required:
              - detectorModelDefinition
              - roleArn
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
  '/detector-models/{detectorModelName}/versions':
    get:
      description: Lists all the versions of a detector model. Only the metadata associated with each detector model version is returned.
      operationId: ListDetectorModelVersions
      parameters:
        - description: The name of the detector model whose versions are returned.
          in: path
          maxLength: 128
          minLength: 1
          name: detectorModelName
          pattern: '^[a-zA-Z0-9_-]+$'
          required: true
          type: string
        - description: The token for the next set of results.
          in: query
          name: nextToken
          required: false
          type: string
        - description: The maximum number of results to return at one time.
          in: query
          maximum: 250
          minimum: 1
          name: maxResults
          required: false
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListDetectorModelVersionsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /inputs:
    get:
      description: Lists the inputs you have created.
      operationId: ListInputs
      parameters:
        - description: The token for the next set of results.
          in: query
          name: nextToken
          required: false
          type: string
        - description: The maximum number of results to return at one time.
          in: query
          maximum: 250
          minimum: 1
          name: maxResults
          required: false
          type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListInputsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Creates an input.
      operationId: CreateInput
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              inputDefinition:
                description: The definition of the input.
                properties:
                  attributes:
                    $ref: '#/definitions/Attributes'
                    description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>"condition"</code> expressions used by detectors that monitor this input. '
                type: object
              inputDescription:
                description: A brief description of the input.
                maxLength: 128
                type: string
              inputName:
                description: The name you want to give to the input.
                maxLength: 128
                minLength: 1
                pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
                type: string
              tags:
                description: Metadata that can be used to manage the input.
                items:
                  $ref: '#/definitions/Tag'
                type: array
            required:
              - inputName
              - inputDefinition
            type: object
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '484':
          description: ResourceAlreadyExistsException
          schema:
            $ref: '#/definitions/ResourceAlreadyExistsException'
  '/inputs/{inputName}':
    delete:
      description: Deletes an input.
      operationId: DeleteInput
      parameters:
        - description: The name of the input to delete.
          in: path
          maxLength: 128
          minLength: 1
          name: inputName
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
    get:
      description: Describes an input.
      operationId: DescribeInput
      parameters:
        - description: The name of the input.
          in: path
          maxLength: 128
          minLength: 1
          name: inputName
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: Updates an input.
      operationId: UpdateInput
      parameters:
        - description: The name of the input you want to update.
          in: path
          maxLength: 128
          minLength: 1
          name: inputName
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              inputDefinition:
                description: The definition of the input.
                properties:
                  attributes:
                    $ref: '#/definitions/Attributes'
                    description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>"condition"</code> expressions used by detectors that monitor this input. '
                type: object
              inputDescription:
                description: A brief description of the input.
                maxLength: 128
                type: string
            required:
              - inputDefinition
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
  /logging:
    get:
      description: Retrieves the current settings of the AWS IoT Events logging options.
      operationId: DescribeLoggingOptions
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeLoggingOptionsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: UnsupportedOperationException
          schema:
            $ref: '#/definitions/UnsupportedOperationException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      description: '<p>Sets or updates the AWS IoT Events logging options.</p> <p>If you update the value of any <code>"loggingOptions"</code> field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the <code>"roleArn"</code> field (for example, to correct an invalid policy) it takes up to five minutes for that change to take effect.</p>'
      operationId: PutLoggingOptions
      parameters:
        - in: body
          name: body
          required: true
          schema:
            properties:
              loggingOptions:
                description: The values of the AWS IoT Events logging options.
                properties:
                  detectorDebugOptions:
                    $ref: '#/definitions/DetectorDebugOptions'
                    description: Information that identifies those detector models and their detectors (instances) for which the logging level is given.
                  enabled:
                    $ref: '#/definitions/LoggingEnabled'
                    description: 'If TRUE, logging is enabled for AWS IoT Events.'
                  level:
                    $ref: '#/definitions/LoggingLevel'
                    description: The logging level.
                  roleArn:
                    $ref: '#/definitions/AmazonResourceName'
                    description: The ARN of the role that grants permission to AWS IoT Events to perform logging.
                type: object
            required:
              - loggingOptions
            type: object
      responses:
        '200':
          description: Success
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '484':
          description: UnsupportedOperationException
          schema:
            $ref: '#/definitions/UnsupportedOperationException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
  '/tags#resourceArn':
    get:
      description: Lists the tags (metadata) you have assigned to the resource.
      operationId: ListTagsForResource
      parameters:
        - description: The ARN of the resource.
          in: query
          maxLength: 2048
          minLength: 1
          name: resourceArn
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      description: Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.
      operationId: TagResource
      parameters:
        - description: The ARN of the resource.
          in: query
          maxLength: 2048
          minLength: 1
          name: resourceArn
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            properties:
              tags:
                description: The new or modified tags for the resource.
                items:
                  $ref: '#/definitions/Tag'
                type: array
            required:
              - tags
            type: object
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
  '/tags#resourceArn&tagKeys':
    delete:
      description: Removes the given tags (metadata) from the resource.
      operationId: UntagResource
      parameters:
        - description: The ARN of the resource.
          in: query
          maxLength: 2048
          minLength: 1
          name: resourceArn
          required: true
          type: string
        - description: A list of the keys of the tags to be removed from the resource.
          in: query
          items:
            type: string
          name: tagKeys
          required: true
          type: array
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UntagResourceResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  Action:
    description: An action to be performed when the <code>"condition"</code> is TRUE.
    properties:
      clearTimer:
        $ref: '#/definitions/ClearTimerAction'
        description: Information needed to clear the timer.
      firehose:
        $ref: '#/definitions/FirehoseAction'
        description: Sends information about the detector model instance and the event which triggered the action to a Kinesis Data Firehose stream.
      iotEvents:
        $ref: '#/definitions/IotEventsAction'
        description: 'Sends an IoT Events input, passing in information about the detector model instance and the event which triggered the action.'
      iotTopicPublish:
        $ref: '#/definitions/IotTopicPublishAction'
        description: Publishes an MQTT message with the given topic to the AWS IoT message broker.
      lambda:
        $ref: '#/definitions/LambdaAction'
        description: 'Calls a Lambda function, passing in information about the detector model instance and the event which triggered the action.'
      resetTimer:
        $ref: '#/definitions/ResetTimerAction'
        description: Information needed to reset the timer.
      setTimer:
        $ref: '#/definitions/SetTimerAction'
        description: Information needed to set the timer.
      setVariable:
        $ref: '#/definitions/SetVariableAction'
        description: Sets a variable to a specified value.
      sns:
        $ref: '#/definitions/SNSTopicPublishAction'
        description: Sends an Amazon SNS message.
      sqs:
        $ref: '#/definitions/SqsAction'
        description: Sends information about the detector model instance and the event which triggered the action to an AWS SQS queue.
    type: object
  Actions:
    items:
      $ref: '#/definitions/Action'
    type: array
  AmazonResourceName:
    maxLength: 2048
    minLength: 1
    type: string
  Attribute:
    description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>condition</code> expressions used by detectors. '
    properties:
      jsonPath:
        $ref: '#/definitions/AttributeJsonPath'
        description: '<p>An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to the AWS IoT Events system (<code>BatchPutMessage</code>). Each such message contains a JSON payload, and the attribute (and its paired value) specified here are available for use in the <code>"condition"</code> expressions used by detectors. </p> <p>Syntax: <code>&lt;field-name&gt;.&lt;field-name&gt;...</code> </p>'
    required:
      - jsonPath
    type: object
  AttributeJsonPath:
    maxLength: 128
    minLength: 1
    pattern: '^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w- ]+`)|([\w\-]+)))*$'
    type: string
  Attributes:
    items:
      $ref: '#/definitions/Attribute'
    maxItems: 200
    minItems: 1
    type: array
  ClearTimerAction:
    description: Information needed to clear the timer.
    properties:
      timerName:
        $ref: '#/definitions/TimerName'
        description: The name of the timer to clear.
    required:
      - timerName
    type: object
  Condition:
    maxLength: 512
    type: string
  CreateDetectorModelRequest:
    properties:
      detectorModelDefinition:
        $ref: '#/definitions/DetectorModelDefinition'
        description: Information that defines how the detectors operate.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      key:
        $ref: '#/definitions/AttributeJsonPath'
        description: The input attribute key used to identify a device or system in order to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression to specify the attribute-value pair in the message payload of each input that is used to identify the device associated with the input.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
      tags:
        $ref: '#/definitions/Tags'
        description: Metadata that can be used to manage the detector model.
    required:
      - detectorModelName
      - detectorModelDefinition
      - roleArn
    type: object
  CreateDetectorModelResponse:
    properties:
      detectorModelConfiguration:
        $ref: '#/definitions/DetectorModelConfiguration'
        description: Information about how the detector model is configured.
    type: object
  CreateInputRequest:
    properties:
      inputDefinition:
        $ref: '#/definitions/InputDefinition'
        description: The definition of the input.
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
      inputName:
        $ref: '#/definitions/InputName'
        description: The name you want to give to the input.
      tags:
        $ref: '#/definitions/Tags'
        description: Metadata that can be used to manage the input.
    required:
      - inputName
      - inputDefinition
    type: object
  CreateInputResponse:
    properties:
      inputConfiguration:
        $ref: '#/definitions/InputConfiguration'
        description: Information about the configuration of the input.
    type: object
  DeleteDetectorModelRequest:
    properties: {}
    type: object
  DeleteDetectorModelResponse:
    properties: {}
    type: object
  DeleteInputRequest:
    properties: {}
    type: object
  DeleteInputResponse:
    properties: {}
    type: object
  DeliveryStreamName:
    type: string
  DescribeDetectorModelRequest:
    properties: {}
    type: object
  DescribeDetectorModelResponse:
    properties:
      detectorModel:
        $ref: '#/definitions/DetectorModel'
        description: Information about the detector model.
    type: object
  DescribeInputRequest:
    properties: {}
    type: object
  DescribeInputResponse:
    properties:
      input:
        $ref: '#/definitions/Input'
        description: Information about the input.
    type: object
  DescribeLoggingOptionsRequest:
    properties: {}
    type: object
  DescribeLoggingOptionsResponse:
    properties:
      loggingOptions:
        $ref: '#/definitions/LoggingOptions'
        description: The current settings of the AWS IoT Events logging options.
    type: object
  DetectorDebugOption:
    description: The detector model and the specific detectors (instances) for which the logging level is given.
    properties:
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      keyValue:
        $ref: '#/definitions/KeyValue'
        description: The value of the input attribute key used to create the detector (the instance of the detector model).
    required:
      - detectorModelName
    type: object
  DetectorDebugOptions:
    items:
      $ref: '#/definitions/DetectorDebugOption'
    minItems: 1
    type: array
  DetectorModel:
    description: Information about the detector model.
    properties:
      detectorModelConfiguration:
        $ref: '#/definitions/DetectorModelConfiguration'
        description: Information about how the detector is configured.
      detectorModelDefinition:
        $ref: '#/definitions/DetectorModelDefinition'
        description: Information that defines how a detector operates.
    type: object
  DetectorModelArn:
    type: string
  DetectorModelConfiguration:
    description: Information about how the detector model is configured.
    properties:
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model was created.
      detectorModelArn:
        $ref: '#/definitions/DetectorModelArn'
        description: The ARN of the detector model.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      detectorModelVersion:
        $ref: '#/definitions/DetectorModelVersion'
        description: The version of the detector model.
      key:
        $ref: '#/definitions/AttributeJsonPath'
        description: The input attribute key used to identify a device or system in order to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression to specify the attribute-value pair in the message payload of each input that is used to identify the device associated with the input.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model was last updated.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
      status:
        $ref: '#/definitions/DetectorModelVersionStatus'
        description: The status of the detector model.
    type: object
  DetectorModelDefinition:
    description: Information that defines how a detector operates.
    properties:
      initialStateName:
        $ref: '#/definitions/StateName'
        description: The state that is entered at the creation of each detector (instance).
      states:
        $ref: '#/definitions/States'
        description: Information about the states of the detector.
    required:
      - states
      - initialStateName
    type: object
  DetectorModelDescription:
    maxLength: 128
    type: string
  DetectorModelName:
    maxLength: 128
    minLength: 1
    pattern: '^[a-zA-Z0-9_-]+$'
    type: string
  DetectorModelSummaries:
    items:
      $ref: '#/definitions/DetectorModelSummary'
    type: array
  DetectorModelSummary:
    description: Information about the detector model.
    properties:
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model was created.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
    type: object
  DetectorModelVersion:
    maxLength: 128
    minLength: 1
    type: string
  DetectorModelVersionStatus:
    enum:
      - ACTIVE
      - ACTIVATING
      - INACTIVE
      - DEPRECATED
      - DRAFT
      - PAUSED
      - FAILED
    type: string
  DetectorModelVersionSummaries:
    items:
      $ref: '#/definitions/DetectorModelVersionSummary'
    type: array
  DetectorModelVersionSummary:
    description: Information about the detector model version.
    properties:
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model version was created.
      detectorModelArn:
        $ref: '#/definitions/DetectorModelArn'
        description: The ARN of the detector model version.
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      detectorModelVersion:
        $ref: '#/definitions/DetectorModelVersion'
        description: The ID of the detector model version.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The last time the detector model version was updated.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants the detector model permission to perform its tasks.
      status:
        $ref: '#/definitions/DetectorModelVersionStatus'
        description: The status of the detector model version.
    type: object
  Event:
    description: Specifies the <code>"actions"</code> to be performed when the <code>"condition"</code> evaluates to TRUE.
    properties:
      actions:
        $ref: '#/definitions/Actions'
        description: The actions to be performed.
      condition:
        $ref: '#/definitions/Condition'
        description: '[Optional] The Boolean expression that when TRUE causes the <code>"actions"</code> to be performed. If not present, the actions are performed (=TRUE); if the expression result is not a Boolean value, the actions are NOT performed (=FALSE).'
      eventName:
        $ref: '#/definitions/EventName'
        description: The name of the event.
    required:
      - eventName
    type: object
  EventName:
    maxLength: 128
    type: string
  Events:
    items:
      $ref: '#/definitions/Event'
    type: array
  FirehoseAction:
    description: Sends information about the detector model instance and the event which triggered the action to a Kinesis Data Firehose stream.
    properties:
      deliveryStreamName:
        $ref: '#/definitions/DeliveryStreamName'
        description: The name of the Kinesis Data Firehose stream where the data is written.
      separator:
        $ref: '#/definitions/FirehoseSeparator'
        description: 'A character separator that is used to separate records written to the Kinesis Data Firehose stream. Valid values are: ''\n'' (newline), ''\t'' (tab), ''\r\n'' (Windows newline), '','' (comma).'
    required:
      - deliveryStreamName
    type: object
  FirehoseSeparator:
    pattern: '([\n\t])|(\r\n)|(,)'
    type: string
  Input:
    description: Information about the input.
    properties:
      inputConfiguration:
        $ref: '#/definitions/InputConfiguration'
        description: Information about the configuration of an input.
      inputDefinition:
        $ref: '#/definitions/InputDefinition'
        description: The definition of the input.
    type: object
  InputArn:
    type: string
  InputConfiguration:
    description: Information about the configuration of an input.
    properties:
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the input was created.
      inputArn:
        $ref: '#/definitions/InputArn'
        description: The ARN of the input.
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
      inputName:
        $ref: '#/definitions/InputName'
        description: The name of the input.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The last time the input was updated.
      status:
        $ref: '#/definitions/InputStatus'
        description: The status of the input.
    required:
      - inputName
      - inputArn
      - creationTime
      - lastUpdateTime
      - status
    type: object
  InputDefinition:
    description: The definition of the input.
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
        description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>"condition"</code> expressions used by detectors that monitor this input. '
    required:
      - attributes
    type: object
  InputDescription:
    maxLength: 128
    type: string
  InputName:
    maxLength: 128
    minLength: 1
    pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    type: string
  InputStatus:
    enum:
      - CREATING
      - UPDATING
      - ACTIVE
      - DELETING
    type: string
  InputSummaries:
    items:
      $ref: '#/definitions/InputSummary'
    type: array
  InputSummary:
    description: Information about the input.
    properties:
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the input was created.
      inputArn:
        $ref: '#/definitions/InputArn'
        description: The ARN of the input.
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
      inputName:
        $ref: '#/definitions/InputName'
        description: The name of the input.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The last time the input was updated.
      status:
        $ref: '#/definitions/InputStatus'
        description: The status of the input.
    type: object
  InternalFailureException: {}
  InvalidRequestException: {}
  IotEventsAction:
    description: 'Sends an IoT Events input, passing in information about the detector model instance and the event which triggered the action.'
    properties:
      inputName:
        $ref: '#/definitions/InputName'
        description: The name of the AWS IoT Events input where the data is sent.
    required:
      - inputName
    type: object
  IotTopicPublishAction:
    description: Information required to publish the MQTT message via the AWS IoT message broker.
    properties:
      mqttTopic:
        $ref: '#/definitions/MQTTTopic'
        description: The MQTT topic of the message.
    required:
      - mqttTopic
    type: object
  KeyValue:
    maxLength: 128
    minLength: 1
    pattern: '^[a-zA-Z0-9\-_:]+$'
    type: string
  LambdaAction:
    description: 'Calls a Lambda function, passing in information about the detector model instance and the event which triggered the action.'
    properties:
      functionArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the Lambda function which is executed.
    required:
      - functionArn
    type: object
  LimitExceededException: {}
  ListDetectorModelVersionsRequest:
    properties: {}
    type: object
  ListDetectorModelVersionsResponse:
    properties:
      detectorModelVersionSummaries:
        $ref: '#/definitions/DetectorModelVersionSummaries'
        description: Summary information about the detector model versions.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'A token to retrieve the next set of results, or <code>null</code> if there are no additional results.'
    type: object
  ListDetectorModelsRequest:
    properties: {}
    type: object
  ListDetectorModelsResponse:
    properties:
      detectorModelSummaries:
        $ref: '#/definitions/DetectorModelSummaries'
        description: Summary information about the detector models.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'A token to retrieve the next set of results, or <code>null</code> if there are no additional results.'
    type: object
  ListInputsRequest:
    properties: {}
    type: object
  ListInputsResponse:
    properties:
      inputSummaries:
        $ref: '#/definitions/InputSummaries'
        description: Summary information about the inputs.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'A token to retrieve the next set of results, or <code>null</code> if there are no additional results.'
    type: object
  ListTagsForResourceRequest:
    properties: {}
    type: object
  ListTagsForResourceResponse:
    properties:
      tags:
        $ref: '#/definitions/Tags'
        description: The list of tags assigned to the resource.
    type: object
  LoggingEnabled:
    type: boolean
  LoggingLevel:
    enum:
      - ERROR
      - INFO
      - DEBUG
    type: string
  LoggingOptions:
    description: The values of the AWS IoT Events logging options.
    properties:
      detectorDebugOptions:
        $ref: '#/definitions/DetectorDebugOptions'
        description: Information that identifies those detector models and their detectors (instances) for which the logging level is given.
      enabled:
        $ref: '#/definitions/LoggingEnabled'
        description: 'If TRUE, logging is enabled for AWS IoT Events.'
      level:
        $ref: '#/definitions/LoggingLevel'
        description: The logging level.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform logging.
    required:
      - roleArn
      - level
      - enabled
    type: object
  MQTTTopic:
    maxLength: 128
    minLength: 1
    type: string
  MaxResults:
    maximum: 250
    minimum: 1
    type: integer
  NextToken:
    type: string
  OnEnterLifecycle:
    description: 'When entering this state, perform these <code>actions</code> if the <code>condition</code> is TRUE.'
    properties:
      events:
        $ref: '#/definitions/Events'
        description: Specifies the actions that are performed when the state is entered and the <code>"condition"</code> is TRUE.
    type: object
  OnExitLifecycle:
    description: 'When exiting this state, perform these <code>"actions"</code> if the specified <code>"condition"</code> is TRUE.'
    properties:
      events:
        $ref: '#/definitions/Events'
        description: Specifies the <code>"actions"</code> that are performed when the state is exited and the <code>"condition"</code> is TRUE.
    type: object
  OnInputLifecycle:
    description: Specifies the actions performed when the <code>"condition"</code> evaluates to TRUE.
    properties:
      events:
        $ref: '#/definitions/Events'
        description: Specifies the actions performed when the <code>"condition"</code> evaluates to TRUE.
      transitionEvents:
        $ref: '#/definitions/TransitionEvents'
        description: 'Specifies the actions performed, and the next state entered, when a <code>"condition"</code> evaluates to TRUE.'
    type: object
  PutLoggingOptionsRequest:
    properties:
      loggingOptions:
        $ref: '#/definitions/LoggingOptions'
        description: The new values of the AWS IoT Events logging options.
    required:
      - loggingOptions
    type: object
  QueueUrl:
    type: string
  ResetTimerAction:
    description: Information needed to reset the timer.
    properties:
      timerName:
        $ref: '#/definitions/TimerName'
        description: The name of the timer to reset.
    required:
      - timerName
    type: object
  ResourceAlreadyExistsException: {}
  ResourceInUseException: {}
  ResourceNotFoundException: {}
  SNSTopicPublishAction:
    description: Information required to publish the Amazon SNS message.
    properties:
      targetArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the Amazon SNS target where the message is sent.
    required:
      - targetArn
    type: object
  Seconds:
    type: integer
  ServiceUnavailableException: {}
  SetTimerAction:
    description: Information needed to set the timer.
    properties:
      seconds:
        $ref: '#/definitions/Seconds'
        description: The number of seconds until the timer expires. The minimum value is 60 seconds to ensure accuracy.
      timerName:
        $ref: '#/definitions/TimerName'
        description: The name of the timer.
    required:
      - timerName
      - seconds
    type: object
  SetVariableAction:
    description: Information about the variable and its new value.
    properties:
      value:
        $ref: '#/definitions/VariableValue'
        description: The new value of the variable.
      variableName:
        $ref: '#/definitions/VariableName'
        description: The name of the variable.
    required:
      - variableName
      - value
    type: object
  SqsAction:
    description: Sends information about the detector model instance and the event which triggered the action to an AWS SQS queue.
    properties:
      queueUrl:
        $ref: '#/definitions/QueueUrl'
        description: The URL of the SQS queue where the data is written.
      useBase64:
        $ref: '#/definitions/UseBase64'
        description: 'Set this to TRUE if you want the data to be Base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.'
    required:
      - queueUrl
    type: object
  State:
    description: Information that defines a state of a detector.
    properties:
      onEnter:
        $ref: '#/definitions/OnEnterLifecycle'
        description: 'When entering this state, perform these <code>"actions"</code> if the <code>"condition"</code> is TRUE.'
      onExit:
        $ref: '#/definitions/OnExitLifecycle'
        description: 'When exiting this state, perform these <code>"actions"</code> if the specified <code>"condition"</code> is TRUE.'
      onInput:
        $ref: '#/definitions/OnInputLifecycle'
        description: 'When an input is received and the <code>"condition"</code> is TRUE, perform the specified <code>"actions"</code>.'
      stateName:
        $ref: '#/definitions/StateName'
        description: The name of the state.
    required:
      - stateName
    type: object
  StateName:
    maxLength: 128
    minLength: 1
    type: string
  States:
    items:
      $ref: '#/definitions/State'
    minItems: 1
    type: array
  Tag:
    description: Metadata that can be used to manage the resource.
    properties:
      key:
        $ref: '#/definitions/TagKey'
        description: The tag's key.
      value:
        $ref: '#/definitions/TagValue'
        description: The tag's value.
    required:
      - key
      - value
    type: object
  TagKey:
    maxLength: 128
    minLength: 1
    type: string
  TagKeys:
    items:
      $ref: '#/definitions/TagKey'
    type: array
  TagResourceRequest:
    properties:
      tags:
        $ref: '#/definitions/Tags'
        description: The new or modified tags for the resource.
    required:
      - tags
    type: object
  TagResourceResponse:
    properties: {}
    type: object
  TagValue:
    maxLength: 256
    minLength: 0
    type: string
  Tags:
    items:
      $ref: '#/definitions/Tag'
    type: array
  ThrottlingException: {}
  TimerName:
    maxLength: 128
    minLength: 1
    type: string
  Timestamp:
    format: date-time
    type: string
  TransitionEvent:
    description: Specifies the actions performed and the next state entered when a <code>"condition"</code> evaluates to TRUE.
    properties:
      actions:
        $ref: '#/definitions/Actions'
        description: The actions to be performed.
      condition:
        $ref: '#/definitions/Condition'
        description: '[Required] A Boolean expression that when TRUE causes the actions to be performed and the <code>"nextState"</code> to be entered.'
      eventName:
        $ref: '#/definitions/EventName'
        description: The name of the transition event.
      nextState:
        $ref: '#/definitions/StateName'
        description: The next state to enter.
    required:
      - eventName
      - condition
      - nextState
    type: object
  TransitionEvents:
    items:
      $ref: '#/definitions/TransitionEvent'
    type: array
  UnsupportedOperationException: {}
  UntagResourceRequest:
    properties: {}
    type: object
  UntagResourceResponse:
    properties: {}
    type: object
  UpdateDetectorModelRequest:
    properties:
      detectorModelDefinition:
        $ref: '#/definitions/DetectorModelDefinition'
        description: Information that defines how a detector operates.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
    required:
      - detectorModelDefinition
      - roleArn
    type: object
  UpdateDetectorModelResponse:
    properties:
      detectorModelConfiguration:
        $ref: '#/definitions/DetectorModelConfiguration'
        description: Information about how the detector model is configured.
    type: object
  UpdateInputRequest:
    properties:
      inputDefinition:
        $ref: '#/definitions/InputDefinition'
        description: The definition of the input.
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
    required:
      - inputDefinition
    type: object
  UpdateInputResponse:
    properties:
      inputConfiguration:
        $ref: '#/definitions/InputConfiguration'
        description: Information about the configuration of the input.
    type: object
  UseBase64:
    type: boolean
  VariableName:
    maxLength: 128
    minLength: 1
    pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    type: string
  VariableValue:
    maxLength: 1024
    minLength: 1
    type: string
x-servers:
  - description: The AWS IoT Events multi-region endpoint
    url: 'http://iotevents.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The AWS IoT Events multi-region endpoint
    url: 'https://iotevents.{region}.amazonaws.com'
    variables:
      region:
        default: us-east-1
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
  - description: The AWS IoT Events endpoint for China (Beijing) and China (Ningxia)
    url: 'http://iotevents.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
  - description: The AWS IoT Events endpoint for China (Beijing) and China (Ningxia)
    url: 'https://iotevents.{region}.amazonaws.com.cn'
    variables:
      region:
        default: cn-north-1
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
